// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.COEConfigurationService;
using CambridgeSoft.COE.Framework.NUnitTests.Helpers;
using System.Xml;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula Unit Tests
    ///</summary>
    [TestFixture]
    public class SelectClauseFormulaTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[TestFixtureSetUp]
        //public static void MyClassInitialize()
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[TestFixtureTearDown]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[SetUp]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TearDown]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetDependantString (DBMSType)
        ///</summary>
       // [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [Test]
        [Ignore("run after implement GetChemEngineSchema")]
        public void GetDependantStringSelectClauseFormulaTest()
        {
            string chemistryEngineSchema = ConfigurationUtilities.GetChemEngineSchema("MAIN.SAMPLE");

            SelectClauseFormula target = new SelectClauseFormula();
            Field dataField = new Field(20, "base64_cdx", System.Data.DbType.Binary);

            ((Table)dataField.Table).TableName = "inv_compounds";

            target.DataField = dataField;
            target.CartridgeSchema = chemistryEngineSchema;
            target.Sortable = true;

            DBMSType dataBaseType = DBMSType.ORACLE;

            string expected = chemistryEngineSchema + ".ConvertCDX.CDXToFormula(inv_compounds.\"base64_cdx\", 'SORTABLE=YES')";
            string actual = target.Execute(dataBaseType, new List<Value>());

            Assert.AreNotEqual(expected, actual, "SelectItems.SelectClauseFormula.GetDependantString did not return the expected value.");
        }

        [Test]
        public void CreateInstanceTest()
        {
            XmlNode resultNode = null;
            XmlDocument doc = new XmlDocument();
            string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(SearchHelper._COEExportToExcel);
            doc.Load(pathToXmls + @"\ResultsCriteria.xml");
            DataView theDataView = GetDataView();
            XmlNodeList personNodes = doc.GetElementsByTagName("Formula");
            foreach (XmlNode item in personNodes)
            {
                resultNode = item;
                break;
            }
            if (resultNode != null && theDataView != null)
            {
                SelectClauseFormula theClause = new SelectClauseFormula();
                theClause.CreateInstance(resultNode, theDataView);
                Assert.AreEqual(theClause.Alias, "Formula", "SelectClauseFormula.CreateInstance did not return expected result");
                Assert.AreEqual(theClause.HTMLFormatted, false, "SelectClauseFormula.CreateInstance did not return expected result");
                Assert.AreEqual(theClause.Sortable, false, "SelectClauseFormula.CreateInstance did not return expected result");
                Assert.AreEqual(theClause.Name, "Formula", "SelectClauseFormula.CreateInstance did not return expected result");
              
            }

        }

        private DataView GetDataView()
        {
            try
            {
                XmlDocument doc = new XmlDocument();
                string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(SearchHelper._COEExportToExcel);
                doc.Load(pathToXmls + @"\DataView.xml");
                DataView dataView = new DataView();
                dataView.LoadFromXML(doc);
                return dataView;
            }
            catch (Exception)
            {
                throw;
            }

        }

    }


}
