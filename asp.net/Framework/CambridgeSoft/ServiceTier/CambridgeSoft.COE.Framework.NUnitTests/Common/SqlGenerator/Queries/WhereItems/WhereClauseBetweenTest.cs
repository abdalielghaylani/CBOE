// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using System.Data;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween Unit Tests
    ///</summary>
    [TestFixture]
    public class WhereClauseBetweenTest {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext {
            get {
                return testContextInstance;
            }
            set {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[TestFixtureSetUp]
        //public static void MyClassInitialize()
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[TestFixtureTearDown]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[SetUp]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TearDown]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetDependantString (DBMSType :ORACLE, ref List&lt;Value&gt;)
        ///</summary>
       // [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [Test]
        public void GetDependantStringORACLETest()
        {
            WhereClauseBetween target = new WhereClauseBetween();

            DBMSType dataBaseType = DBMSType.ORACLE;

            /* Date range */
            target.DataField.FieldType = DbType.Date;
            target.Values = new Value[2];
            target.Values[0] = new Value("02/12/1981 02:21:54", DbType.String);
            target.Values[1] = new Value("03/12/1981 02:21:54", DbType.String);

            List<Value> queryValues = new List<Value>(0);
            List<Value> queryValues_expected = new List<Value>(0);
            queryValues_expected.Add(new Value("02/12/1981 02:21:54", DbType.String));
            queryValues_expected.Add(new Value("03/12/1981 02:21:54", DbType.String));

            string expected = "\"\" BETWEEN TO_DATE(:0,'yyyy/MM/dd hh24:mi:ss') AND TO_DATE(:1,'yyyy/MM/dd hh24:mi:ss')";
            string actual = target.Execute(dataBaseType, queryValues);

            Assert.IsTrue(CompareElements(queryValues_expected, queryValues), "The actual and expected Parameters are different");
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBet" +
                    "ween.GetDependantString did not return the expected value.");

            /* Integer range */
            target.DataField.FieldType = DbType.Int32;
            target.Values = new Value[2];
            target.Values[0] = new Value("2", DbType.Int32);
            target.Values[1] = new Value("81", DbType.Int32);

            queryValues = new List<Value>(0);
            
            queryValues_expected = new List<Value>(0);
            queryValues_expected.Add(new Value("2", DbType.Int32));
            queryValues_expected.Add(new Value("81", DbType.Int32));

            expected = "\"\" BETWEEN :0 AND :1";
            actual = target.Execute(dataBaseType, queryValues);

            Assert.IsTrue(CompareElements(queryValues_expected, queryValues), "queryValues_GetDependantString_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBet" +
                    "ween.GetDependantString did not return the expected value.");

            /* Double range */
            target.DataField.FieldType = DbType.Decimal;
            target.Values = new Value[2];
            target.Values[0] = new Value("2,5", DbType.Decimal);
            target.Values[1] = new Value("81,191", DbType.Decimal);

            queryValues = new List<Value>(0);

            queryValues_expected = new List<Value>(0);
            queryValues_expected.Add(new Value("2,5", DbType.Decimal));
            queryValues_expected.Add(new Value("81,191", DbType.Decimal));

            expected = "\"\" BETWEEN :0 AND :1";
            actual = target.Execute(dataBaseType, queryValues);

            Assert.IsTrue(CompareElements(queryValues_expected, queryValues), "queryValues_GetDependantString_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBet" +
                    "ween.GetDependantString did not return the expected value.");
        }


        /// <summary>
        ///A test for GetDependantString (DBMSType :SQLSERVER, ref List&lt;Value&gt;)
        ///</summary>
       // [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [Test]
        public void GetDependantStringSQLSERVERTest()
        {
            WhereClauseBetween target = new WhereClauseBetween();

            DBMSType dataBaseType = DBMSType.SQLSERVER;

            /* Date range */
            target.DataField.FieldType = DbType.Date;
            target.Values = new Value[2];
            target.Values[0] = new Value("02/12/1981 02:21:54", DbType.String);
            target.Values[1] = new Value("03/12/1981 02:21:54", DbType.String);

            List<Value> queryValues = new List<Value>(0);
            List<Value> queryValues_expected = new List<Value>(0);
            queryValues_expected.Add(new Value("02/12/1981 02:21:54", DbType.String));
            queryValues_expected.Add(new Value("03/12/1981 02:21:54", DbType.String));

            //string expected = "\"\" BETWEEN TO_DATE(:0,'yyyy/MM/dd hh24:mi:ss') AND TO_DATE(:1,'yyyy/MM/dd hh24:mi:ss')";
            //"" BETWEEN CONVERT(DATETIME,True0,101) AND CONVERT(DATETIME,True1,101)
            string expected = "\"\" BETWEEN CONVERT(DATETIME,True0,101) AND CONVERT(DATETIME,True1,101)";
            string actual = target.Execute(dataBaseType, queryValues);

            Assert.IsTrue(CompareElements(queryValues_expected, queryValues), "The actual and expected Parameters are different");
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBet" +
                    "ween.GetDependantString did not return the expected value.");

            /* Integer range */
            target.DataField.FieldType = DbType.Int32;
            target.Values = new Value[2];
            target.Values[0] = new Value("2", DbType.Int32);
            target.Values[1] = new Value("81", DbType.Int32);

            queryValues = new List<Value>(0);

            queryValues_expected = new List<Value>(0);
            queryValues_expected.Add(new Value("2", DbType.Int32));
            queryValues_expected.Add(new Value("81", DbType.Int32));

            expected = "\"\" BETWEEN True0 AND True1";
            actual = target.Execute(dataBaseType, queryValues);

            Assert.IsTrue(CompareElements(queryValues_expected, queryValues), "queryValues_GetDependantString_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBet" +
                    "ween.GetDependantString did not return the expected value.");

            /* Double range */
            target.DataField.FieldType = DbType.Decimal;
            target.Values = new Value[2];
            target.Values[0] = new Value("2,5", DbType.Decimal);
            target.Values[1] = new Value("81,191", DbType.Decimal);

            queryValues = new List<Value>(0);

            queryValues_expected = new List<Value>(0);
            queryValues_expected.Add(new Value("2,5", DbType.Decimal));
            queryValues_expected.Add(new Value("81,191", DbType.Decimal));

            expected = "\"\" BETWEEN True0 AND True1";
            actual = target.Execute(dataBaseType, queryValues);

            Assert.IsTrue(CompareElements(queryValues_expected, queryValues), "queryValues_GetDependantString_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBet" +
                    "ween.GetDependantString did not return the expected value.");
        }


        private bool CompareElements(List<Value> values_expected, List<Value> values) {
            if(values_expected.Count != values.Count)
                return false;
            for(int i = 0; i < values.Count; i++) {

                if(values_expected[i] != values[i])
                    return false;
            }
            return true;
        }
    }
}
