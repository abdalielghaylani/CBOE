// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.Services.Configuration;
using CambridgeSoft.COE.Framework.COEConfigurationService;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula Unit Tests
    ///</summary>
    [TestFixture]
    public class WhereClauseFormulaTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[TestFixtureSetUp]
        //public static void MyClassInitialize()
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[TestFixtureTearDown]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[SetUp]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TearDown]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetDependantString (DBMSType, ref List&lt;Value&gt;)
        ///</summary>
       // [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [Test]
        [Ignore("run after implement GetChemEngineSchema")]
        public void GetDependantStringTest()
        {
            try
            {
                WhereClauseFormula target = new WhereClauseFormula();

                target.DataField.FieldId = 20;
                target.DataField.FieldName = "Base64_cdx";
                target.DataField.FieldType = System.Data.DbType.Binary;

                target.Val.Val = "c1ccccc1";

                DatabaseData databaseDataConfigData = ConfigurationUtilities.GetDatabaseData("MAIN.SAMPLE");
                string chemistryEngineSchema = ConfigurationUtilities.GetChemEngineSchema(databaseDataConfigData);

                target.CartridgeSchema = chemistryEngineSchema;

                DBMSType databaseType = DBMSType.ORACLE;

                System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values = new List<Value>();
                System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values_expected = new List<Value>();
                //values_expected.Add(new Value("Base64_cdx", System.Data.DbType.String));
                values_expected.Add(new Value("c1ccccc1", System.Data.DbType.String));
                values_expected.Add(new Value("FULL=NO", System.Data.DbType.String));

                string expected = chemistryEngineSchema + ".FormulaContains(\"Base64_cdx\", :0, :1)=1";
                string actual = target.Execute(databaseType, values);

                Assert.IsTrue(CompareElements(values_expected, values), "values_expected was not set correctly. Or Values wasn't filled as supposed");
                Assert.AreEqual(expected, actual, "WhereClauseFormula.GetDependantString did not return the expected value.");
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }


        [Test]
       // [ExpectedException(typeof(Exception))]
        [Ignore("run after implement GetChemEngineSchema")]
        public void GetDependantStringSQLSERVERTest()
        {
            WhereClauseFormula target = new WhereClauseFormula();
            target.DataField.FieldId = 20;
            target.DataField.FieldName = "Base64_cdx";
            target.DataField.FieldType = System.Data.DbType.Binary;
            target.Val.Val = "c1ccccc1";
            DatabaseData databaseDataConfigData = ConfigurationUtilities.GetDatabaseData("MAIN.SAMPLE");
            string chemistryEngineSchema = ConfigurationUtilities.GetChemEngineSchema(databaseDataConfigData);
            target.CartridgeSchema = chemistryEngineSchema;
            DBMSType databaseType = DBMSType.SQLSERVER;
            System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values = new List<Value>();
            System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values_expected = new List<Value>();
            values_expected.Add(new Value("c1ccccc1", System.Data.DbType.String));
            values_expected.Add(new Value("FULL=NO", System.Data.DbType.String));
            string expected = chemistryEngineSchema + ".FormulaContains(\"Base64_cdx\", :0, :1)=1";
            string actual = target.Execute(databaseType, values);

        }

        private bool CompareElements(List<Value> values_expected, List<Value> values)
        {
            if (values_expected.Count != values.Count)
                return false;
            for (int i = 0; i < values.Count; i++)
            {

                if (values_expected[i] != values[i])
                    return false;
            }
            return true;
        }

    }


}
