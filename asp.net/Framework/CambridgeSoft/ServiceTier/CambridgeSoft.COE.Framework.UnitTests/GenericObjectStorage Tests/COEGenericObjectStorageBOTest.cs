// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Xml;
using CambridgeSoft.COE.Framework.COEGenericObjectStorageService;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.COESecurityService;
using CambridgeSoft.COE.Framework.UnitTests.Helpers;
using System.Configuration;

namespace CambridgeSoft.COE.Framework.COEGenericObjectStorageService.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO and is intended
    ///to contain all CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO Unit Tests
    ///</summary>
    [TestClass()]
    public class COEGenericObjectStorageBOTest
    {
        #region Variables
        private string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(@"\TestXML");
        private string databaseName = "SAMPLE";
        private string USERNAME = ConfigurationManager.AppSettings["LogonUserName"];
        private string PASSWORD = ConfigurationManager.AppSettings["LogonPassword"];
        private DALFactory _dalFactory = new DALFactory();
        private TestContext testContextInstance;
        static List<int> newIds = new List<int>();
        #endregion

        #region Properties
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #endregion

        #region Test Methods
        [TestInitialize()]
        public void MyTestInitialize()
        {
            COEPrincipal.Logout();
            System.Security.Principal.IPrincipal user = Csla.ApplicationContext.User;
            bool result = COEPrincipal.Login(USERNAME, PASSWORD);

        }

        [TestCleanup()]
        public void TestCleanup()
        {
            foreach (int id in newIds)
            {
                COEGenericObjectStorageBO.Delete(id);
            }
        }

        /// <summary>
        ///A test for New ()
        ///</summary>
        [TestMethod()]
        public void StoreGenericObjectTest()
        {
            int id = 0;
            try
            {
                //this should create a new object
                COEGenericObjectStorageBO genericStorageObject = StoreGenericObject(id);
                id = genericStorageObject.ID;
                newIds.Add(id);
            }
            catch (Exception) { }

            Assert.IsTrue(id > 0, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                    "eBO.New did not return the expected value.");
        }


        /// <summary>
        ///A test for Get ()
        ///</summary>
        [TestMethod()]
        public void GetGenericObjectTest()
        {
            ////First make sure their is an object to get
            COEGenericObjectStorageBO genericStorageObject = StoreGenericObject(-1);
            int id = genericStorageObject.ID;
            newIds.Add(id);
            //nullify
            genericStorageObject = null;
            string myGenericObject = string.Empty;
            try
            {
                //this should create a new object
                COEGenericObjectStorageBO genericStorageObjectGet = COEGenericObjectStorageBO.Get(id);
                //chek that the generic object has something in it.
                myGenericObject = genericStorageObjectGet.COEGenericObject;

            }
            catch (Exception) { }

            Assert.IsTrue(myGenericObject.Length > 0, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                    "eBO.New did not return the expected value.");
        }

        /// <summary>
        /// A test for Delete function inside COEGenericObjectStorageBO.
        /// </summary>
        [TestMethod()]
        public void StoreAndDeleteGenericObjectWithAGivenID()
        {
            int id = 80001;
            COEGenericObjectStorageBO objBO = StoreGenericObject(id);
            Assert.AreEqual(id, objBO.ID, "The object didn't use the given ID, but an autogenerated");
            objBO = COEGenericObjectStorageBO.Get(id);
            Assert.AreEqual(id, objBO.ID, "The object didn't use the given ID, but an autogenerated");

            COEGenericObjectStorageBO.Delete(id);
            objBO = null;
            //following line will throw exception if object deleted properly
            try
            {
                objBO = COEGenericObjectStorageBO.Get(id);
                Assert.Fail("Deletion not Confirmed");
            }
            catch
            {
                Assert.IsTrue(objBO == null, "Deletion not Confirmed");

            }


        }


        /// <summary>
        ///A test for Get ()
        ///</summary>
        [TestMethod()]
        public void GetGenericObjectWithAccessPrivsTest()
        {

            ////First make sure their is an object to get
            COEGenericObjectStorageBO genericObjectBO = StoreObjectWithAP();
            int id = genericObjectBO.ID;
            newIds.Add(id);
            //nullify
            genericObjectBO = null;
            COEGenericObjectStorageBO myGetObject = COEGenericObjectStorageBO.Get(id, true);

            Assert.IsTrue(myGetObject.COEAccessRights != null, "COEGenericObjectStorageBO.Get with access rights failed.");
        }

        /// <summary>
        ///A test for Get ()
        ///</summary>
        [TestMethod()]
        public void UpdateGenericObjectWithAccessPrivsTest()
        {
            COEGenericObjectStorageBO genericObjectBO = GetObjectWithAPs();
            newIds.Add(genericObjectBO.ID);
            int usersCount = -1;
            int usersCount2 = -1;
            try
            {
                usersCount = genericObjectBO.COEAccessRights.Users.Count;
                //get some users and roles
                List<string> myAppList = new List<string>();
                myAppList.Add("REGISTRATION");
                COEUserReadOnlyBOList userList = COEUserReadOnlyBOList.GetListByApplication(myAppList);
                //build the accessrights object
                genericObjectBO.COEAccessRights.Users = userList;
                genericObjectBO = genericObjectBO.Save();
                usersCount2 = genericObjectBO.COEAccessRights.Users.Count;
            }
            catch (Exception) { }
            Assert.IsFalse(usersCount == usersCount2, "UpdateGenericObjectWithAccessPrivsTest failed.");
        }
        #endregion

        #region Private Methods
        private COEGenericObjectStorageBO StoreGenericObject(int id)
        {
            //this should create a new object
            COEGenericObjectStorageBO genericStorageObject = COEGenericObjectStorageBO.New(databaseName);
            genericStorageObject.Name = "temp" + GenerateRandomNumber();
            genericStorageObject.Description = "temp";
            genericStorageObject.IsPublic = true;
            genericStorageObject.FormGroup = 1;
            genericStorageObject.DatabaseName = databaseName;
            //this really should come from the logged in user..
            genericStorageObject.UserName = USERNAME;
            genericStorageObject.ID = id;
            genericStorageObject.COEGenericObject = "just some text";
            //this is where it get's 
            genericStorageObject = genericStorageObject.Save();

            return genericStorageObject;

        }

        public string GetFormXMLStringForStoring()
        {
            //this is not implemented yet, so we will use an alternate route
            XmlDocument doc = new XmlDocument();
            doc.Load(pathToXmls + "\\COEFormForTests.xml");
            return doc.OuterXml;
        }

        private COEGenericObjectStorageBO StoreObjectWithAP()
        {
            //this should create a new object
            COEGenericObjectStorageBO genericObject = COEGenericObjectStorageBO.New(databaseName);
            genericObject.Name = "temp" + GenerateRandomNumber();
            genericObject.Description = "temp";
            genericObject.DatabaseName = databaseName;
            //this really should come from the logged in user..
            genericObject.UserName = USERNAME;
            genericObject.COEGenericObject = GetFormXMLStringForStoring();
            //set ispublic to false since we are applying access rights
            genericObject.IsPublic = false;
            //get some users and roles
            COEUserReadOnlyBOList userList = COEUserReadOnlyBOList.GetList();
            COERoleReadOnlyBOList rolesList = COERoleReadOnlyBOList.GetList();
            //build the accessrights object
            genericObject.COEAccessRights = new COEAccessRightsBO(userList, rolesList);

            //this is where it get's persisted
            genericObject = genericObject.Save();
            return genericObject;

        }

        private COEGenericObjectStorageBO GetObjectWithAPs()
        {
            ////First make sure their is an object to get
            COEGenericObjectStorageBO genericObject = StoreObjectWithAP();
            int id = genericObject.ID;
            //nullify
            genericObject = null;
            COEGenericObjectStorageBO myGetObject = COEGenericObjectStorageBO.Get(id, true);

            return myGetObject;
        }

        private string GenerateRandomNumber()
        {
            string miliseconds = DateTime.Now.Millisecond.ToString();
            int length = miliseconds.Length;
            while (length < 3)
            {
                miliseconds = miliseconds.Insert(0, "0");
                length++;
            }
            return miliseconds.Substring(length - 3, 3);
        }
        #endregion
    }
}
