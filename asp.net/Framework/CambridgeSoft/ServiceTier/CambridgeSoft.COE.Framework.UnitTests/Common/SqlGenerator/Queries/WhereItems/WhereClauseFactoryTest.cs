// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using System.Xml;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries;
using System.Data;
using CambridgeSoft.COE.Framework.UnitTests.Helpers;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFactory and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFactory Unit Tests
    ///</summary>
    [TestClass()]
    public class WhereClauseFactoryTest
    {
        private TestContext testContextInstance;
        MetaData.DataView dataView = null;
        int fieldId = 0;
        string body = string.Empty;
        // private string path = Utilities.GetProjectBasePath("CambridgeSoft.COE.Framework.UnitTests");
        private string path = SearchHelper.GetExecutingTestResultsBasePath(string.Empty);
        XmlDocument doc = null;
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        [TestInitialize()]
        public void MyTestInitialize()
        {
            try
            {
                LoadDataViewFromXml();
                doc = new XmlDocument();
            }
            catch
            {
                throw;
            }
        }
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ParseTextCriteriaOperation (Field, XmlNode, SearchCriteria.Positions, bool)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void ParseTextCriteriaOperationTest()
        {
            Field field = new Field("lalala", DbType.String);

            XmlDocument textCriteria = new XmlDocument();
            textCriteria.LoadXml(@"<textCriteria operator=""EQUAL"" hillFormula=""NO"" trim=""NONE"">283</textCriteria>");
            XmlNode operationNode = textCriteria.FirstChild;

            SearchCriteria.Positions trimPosition = SearchCriteria.Positions.Left; // TODO: Initialize to an appropriate value

            bool caseSensitive = false; // TODO: Initialize to an appropriate value

            WhereClauseItem expected = null;
            WhereClauseItem actual;

            try
            {

                actual = CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactoryAccessor.ParseTextCriteriaOperation(field, operationNode, false, trimPosition, caseSensitive);
                Assert.AreNotEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFac" +
                        "tory.ParseTextCriteriaOperation did not return the expected value.");
            }
            catch (Exception e)
            {

                string expectedException = "TextCriteria - Attribute Unimplemented: hillFormula";
                string actualException = e.InnerException.Message;
                Assert.AreEqual(expectedException, actualException, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFac" +
                        "tory.ParseTextCriteriaOperation did not return the expected value.");
            }
        }

        private void AreEqual(List<Value> values_expected, List<Value> values)
        {
            if (values_expected.Count != values.Count)
                Assert.Fail("Expected and actual parameters count differ");

            for (int i = 0; i < values.Count; i++)
            {

                if (values_expected[i] != values[i])
                    Assert.Fail(string.Format("Actual and expected parameters are different: {0} - {1}", values[i].ToString(), values_expected[i].ToString()));
            }
        }

        #region Textcriteria

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria ,operator :NOTEQUAL
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaNOTEQUALTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"NOTEQUAL\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseNotEqual, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :STARTSWITH
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriastartswithTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"STARTSWITH\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseStartsWith, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :endwith
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaEndwithTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"ENDWITH\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseEndsWith, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :notcontains
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseNotContainsTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"NOTCONTAINS\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseNotContains, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :contains
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseContainsTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"CONTAINS\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseContains, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :notlike
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseNotLikeTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"NOTLIKE\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseNotLike, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :like
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseLikeTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"LIKE\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseLike, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :In
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseInTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"IN\" caseSensitive=\"NO\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseIn, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :equal
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseEqualTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"EQUAL\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseEqual, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :gt
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseGtTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"GT\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseGreaterThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        // <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :gte    
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseGteTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"GTE\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseGreaterThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        // <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :lt    
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseLtTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"LT\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseLessThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }


        // <summary>
        /// Unit Test for CreateWhereClauseItem : For Textcriteria,operator :lte    
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_TextcriteriaWhereClauseLteTest()
        {
            try
            {
                body = " <searchCriteriaItem id=\"3\" hint=\"\" aggregateFunctionName=\"\" > <textCriteria trim=\"BOTH\" operator=\"LTE\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >     lalalala lala l aaa     </textCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("textCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseLessThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region Datecriteria

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Datecriteria,operator :lte   
        /// </summary>

        [TestMethod]
        public void CreateWhereClauseItem_DatecriteriaWhereClauseLteTest()
        {
            try
            {
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\DataView Tests\COEDataViewTestXML\DataviewExport.xml");
                body = "<searchCriteriaItem id=\"1\" fieldid=\"105\" modifier=\"\" tableid=\"1\"><dateCriteria  trim=\"BOTH\" operator=\"LTE\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >01/01/2006</dateCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("dateCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseLessThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Datecriteria,operator :lt   
        /// </summary>

        [TestMethod]
        public void CreateWhereClauseItem_DatecriteriaWhereClauseLtTest()
        {
            try
            {
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\DataView Tests\COEDataViewTestXML\DataviewExport.xml");
                body = "<searchCriteriaItem id=\"1\" fieldid=\"105\" modifier=\"\" tableid=\"1\"><dateCriteria  trim=\"BOTH\" operator=\"LT\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >01/01/2006</dateCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("dateCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseLessThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Datecriteria,operator :gt   
        /// </summary>

        [TestMethod]
        public void CreateWhereClauseItem_DatecriteriaWhereClausegtTest()
        {
            try
            {
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\DataView Tests\COEDataViewTestXML\DataviewExport.xml");
                body = "<searchCriteriaItem id=\"1\" fieldid=\"105\" modifier=\"\" tableid=\"1\"><dateCriteria  trim=\"BOTH\" operator=\"GT\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >01/01/2006</dateCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("dateCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseGreaterThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Datecriteria,operator :gte   
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_DatecriteriaWhereClausegteTest()
        {
            try
            {
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\DataView Tests\COEDataViewTestXML\DataviewExport.xml");
                body = "<searchCriteriaItem id=\"1\" fieldid=\"105\" modifier=\"\" tableid=\"1\"><dateCriteria  trim=\"BOTH\" operator=\"GTE\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >01/01/2006</dateCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("dateCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseGreaterThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }




        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Datecriteria,operator :In   
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_DatecriteriaWhereClauseInTest()
        {
            try
            {
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\DataView Tests\COEDataViewTestXML\DataviewExport.xml");
                body = "<searchCriteriaItem id=\"1\" fieldid=\"105\" modifier=\"\" tableid=\"1\"><dateCriteria  trim=\"BOTH\" operator=\"IN\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >01/01/2006</dateCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("dateCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseIn, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }




        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For Datecriteria,operator :equal   
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_DatecriteriaWhereClauseEqualTest()
        {
            try
            {
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\DataView Tests\COEDataViewTestXML\DataviewExport.xml");
                body = "<searchCriteriaItem id=\"1\" fieldid=\"105\" modifier=\"\" tableid=\"1\"><dateCriteria  trim=\"BOTH\" operator=\"EQUAL\" caseSensitive=\"YES\" aggregateFunctionName=\"\" >01/01/2006</dateCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("dateCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseBetween, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region NumericalCriteria

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For NumericalCriteria,operator :Lte
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_NumericalcriteriaWhereClauseLteTest()
        {
            try
            {

                body = " <searchCriteriaItem id=\"1\" fieldid=\"106\" tableid=\"104\" modifier=\"\"  searchLookupByID=\"1\" hint=\"\" aggregateFunctionName=\"\"> <numericalCriteria  caseSensitive=\"YES\" negate=\"NO\" operator=\"LTE\" trim=\"NONE\">1,2,22,21,27</numericalCriteria> </searchCriteriaItem>  ";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("numericalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseLessThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For NumericalCriteria,operator :lt
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_NumericalcriteriaWhereClauseLtTest()
        {
            try
            {

                body = " <searchCriteriaItem id=\"1\" fieldid=\"106\" tableid=\"104\" modifier=\"\"  searchLookupByID=\"1\" hint=\"\" aggregateFunctionName=\"\"> <numericalCriteria  caseSensitive=\"YES\" negate=\"NO\" operator=\"LT\" trim=\"NONE\">1,2,22,21,27</numericalCriteria> </searchCriteriaItem>  ";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("numericalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseLessThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For NumericalCriteria,operator :gte
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_NumericalcriteriaWhereClauseGteTest()
        {
            try
            {

                body = " <searchCriteriaItem id=\"1\" fieldid=\"106\" tableid=\"104\" modifier=\"\"  searchLookupByID=\"1\" hint=\"\" aggregateFunctionName=\"\"> <numericalCriteria  caseSensitive=\"YES\" negate=\"NO\" operator=\"GTE\" trim=\"NONE\">1,2,22,21,27</numericalCriteria> </searchCriteriaItem>  ";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("numericalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseGreaterThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For NumericalCriteria,operator :gt
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_NumericalcriteriaWhereClauseGtTest()
        {
            try
            {

                body = " <searchCriteriaItem id=\"1\" fieldid=\"106\" tableid=\"104\" modifier=\"\"  searchLookupByID=\"1\" hint=\"\" aggregateFunctionName=\"\"> <numericalCriteria  caseSensitive=\"YES\" negate=\"NO\" operator=\"GT\" trim=\"NONE\">1,2,22,21,27</numericalCriteria> </searchCriteriaItem>  ";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("numericalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseGreaterThan, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For NumericalCriteria,operator :equal
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_NumericalcriteriaWhereClauseEqualTest()
        {
            try
            {

                body = " <searchCriteriaItem id=\"1\" fieldid=\"106\" tableid=\"104\" modifier=\"\"  searchLookupByID=\"1\" hint=\"\" aggregateFunctionName=\"\"> <numericalCriteria  caseSensitive=\"YES\" negate=\"NO\" operator=\"EQUAL\" trim=\"NONE\">1,2,22,21,27</numericalCriteria> </searchCriteriaItem>  ";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("numericalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseEqual, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For NumericalCriteria,operator :in
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_NumericalcriteriaWhereClauseInTest()
        {
            try
            {

                body = " <searchCriteriaItem id=\"1\" fieldid=\"106\" tableid=\"104\" modifier=\"\"  searchLookupByID=\"1\" hint=\"\" aggregateFunctionName=\"\"> <numericalCriteria  caseSensitive=\"YES\" negate=\"NO\" operator=\"IN\" trim=\"NONE\">1,2,22,21,27</numericalCriteria> </searchCriteriaItem>  ";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("numericalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseIn, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For NumericalCriteria,operator :notequal
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_NumericalcriteriaWhereClauseNotequalTest()
        {
            try
            {

                body = " <searchCriteriaItem id=\"1\" fieldid=\"106\" tableid=\"104\" modifier=\"\"  searchLookupByID=\"1\" hint=\"\" aggregateFunctionName=\"\"> <numericalCriteria  caseSensitive=\"YES\" negate=\"NO\" operator=\"NOTEQUAL\" trim=\"NONE\">1,2,22,21,27</numericalCriteria> </searchCriteriaItem>  ";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("numericalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseNotEqual, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Unit Test for CreateWhereClauseItem : For NumericalCriteria,operator :Like
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_NumericalcriteriaWhereClauseLikeTest()
        {
            try
            {

                body = " <searchCriteriaItem id=\"1\" fieldid=\"106\" tableid=\"104\" modifier=\"\"  searchLookupByID=\"1\" hint=\"\" aggregateFunctionName=\"\"> <numericalCriteria  caseSensitive=\"YES\" negate=\"NO\" operator=\"LIKE\" trim=\"NONE\">1,2,22,21,27</numericalCriteria> </searchCriteriaItem>  ";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("numericalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseLike, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region verbatimCriteria
        /// <summary>
        /// Unit Test For verbatimCriteria
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_verbatimCriteriaWhereClauseTest()
        {
            try
            {

                body = "<searchCriteriaItem fieldid=\"0\" id=\"-1\" tableid=\"0\" searchLookupByID=\"true\" aggregateFunctionName=\"\"><verbatimCriteria negate=\"NO\"><verbatim>ROWNUM &lt;= ?</verbatim> <parameter>15000</parameter> <Value>ROWNUM &amp;lt;= ?</Value></verbatimCriteria> </searchCriteriaItem>";
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("verbatimCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseVerbatim, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region structureCriteria
        [TestMethod]
        public void CreateWhereClauseItem_structureCriteriaWhereClauseTest()
        {
            try
            {

                MetaData.DataView theDataView = GetDataView(@"\DataView Tests\COEDataViewTestXML\COTESTDataview.xml");
                body = "<searchCriteriaItem id=\"7\" fieldid=\"205\" modifier=\"\"  tableid=\"203\"><structureCriteria>	<CSCartridgeStructureCriteria absolutehitsrel=\"\" " +
                   " relativeTetStereo=\"NO\" tetrahedralStereo=\"YES\" 	simThreshold=\"100\" reactionCenter=\"YES\" fullSearch=\"\" tautometer =\"\"" +
                   " fullWordSearch=\"NO\" tautomer=\"NO\" 	fragmentsoverlap=\"\" permitExtraneousFragmentsIfRXN=\"\" permitExtraneousFragments=\"\" ignoreImplicitHydrogens=\"\"" +
                   " doublebondstereo=\"\" hitAnyChargeHetero=\"YES\" identity=\"NO\" highlight=\"\" " +
                   " hitAnyChargeCarbon=\"YES\" 	similar=\"NO\"  format=\"BASE64CDX\">VmpDRDAxMDAEAwIBAAAAA….QAAAAAAAAAAAA=</CSCartridgeStructureCriteria></structureCriteria>	</searchCriteriaItem> ";
                fieldId = 205;
                doc.LoadXml(body);
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("structureCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseStructure, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");


            }
            catch
            {
                throw;
            }
        }
        #endregion


        #region MolweightCriteria
        /// <summary>
        /// Unit Test  :CreateWhereClauseItem :molweightcriteria
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_MolweightCriteriaWhereClauseTest()
        {
            try
            {
                body = "<searchCriteriaItem id=\"2\" fieldid=\"205\" tableid=\"203\"><molweightcriteria><CSCartridgeMolWeightCriteria min=\"1.0\" max=\"200.0\"/></molweightcriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                fieldId = 205;
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\DataView Tests\COEDataViewTestXML\COTESTDataview.xml");
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("molweightcriteria")[0]);
                Assert.IsTrue(actual is WhereClauseMolWeight, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");


            }
            catch
            {

                throw;
            }
        }
        #endregion

        #region formulaCriteria
        /// <summary>
        /// Unit Test  :CreateWhereClauseItem :molweightcriteria
        /// </summary>
        [TestMethod]
        public void CreateWhereClauseItem_FormulaCriteriaWhereClauseTest()
        {
            try
            {
                body = "<searchCriteriaItem id=\"1\" fieldid=\"1430\" modifier=\"\"  tableid=\"1429\">  <formulaCriteria><CSCartridgeFormulaCriteria Full=\"YES\">C1CCCCC1</CSCartridgeFormulaCriteria></formulaCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                fieldId = 1430;
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\Search Tests\DataViews\5003.xml");
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("formulaCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseFormula, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");


            }
            catch
            {

                throw;
            }
        }
        #endregion

        #region HitlistCriteria
        [TestMethod]
        public void CreateWhereClauseItem_HitLisrCriteriaWhereClauseTest()
        {
            try
            {
                body = "<searchCriteriaItem id=\"1\" fieldid=\"987\" modifier=\"\" tableid=\"985\"><hitlistCriteria sourceFieldId=\"1436\" hitlistType=\"TEMP\">6</hitlistCriteria> </searchCriteriaItem>";
                doc.LoadXml(body);
                fieldId = 987;
                MetaData.DataView theDataView = new MetaData.DataView();
                theDataView = GetDataView(@"\Search Tests\COESearchByHitlistTests XML\TargetDV.xml");
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(theDataView, fieldId, doc.GetElementsByTagName("hitlistCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseHitlist, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {

                throw;
            }
        }



        #endregion

        #region FullTextCriteria
        [TestMethod]
        public void CreateWhereClauseItem_FullTextCriteriaWhereClauseTest()
        {
            try
            {
                body = "<searchCriteriaItem id=\"2\" fieldid=\"107\" modifier=\"\" tableid=\"104\"><FullTextCriteria></FullTextCriteria></searchCriteriaItem>";
                doc.LoadXml(body);
                fieldId = 107;
                WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("FullTextCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseFullText, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {

                throw;
            }
        }
        #endregion

        #region CustomCriteria
        [TestMethod]
        public void CreateWhereClauseItem_CustomCriteriaWhereClauseTest()
        {
            try
            {

                //body = "<searchCriteriaItem id=\"1\" fieldid=\"107\" tableid =\"104\" modifier=\"\"><customCriteria Value=\"\"><customMolWeight><implementation>CsCartridge</implementation><cartridgeSchema>CSCartridge</cartridgeSchema> </customMolWeight></customCriteria></searchCriteriaItem>";
                //doc.LoadXml(body);
                //fieldId = 107;
                //WhereClauseItem actual = WhereClauseFactory.CreateWhereClauseItem(dataView, fieldId, doc.GetElementsByTagName("customCriteria")[0]);
                //Assert.IsTrue(actual is WhereClauseFullText, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {

                throw;
            }
        }
        #endregion

        [TestMethod]
        public void CreateWhereClause_LogicalCriteriaItemTest()
        {
            try
            {

                body = "<logicalCriteria operator=\"Or\" xmlns=\"\"> <searchCriteriaItem id=\"4\" fieldid=\"107\" modifier=\"\" tableid=\"104\" xmlns=\"COE.SearchCriteria\"> " +
       " <textCriteria trim=\"BOTH\" operator=\"like\">benzene </textCriteria> </searchCriteriaItem> <searchCriteriaItem id=\"4\" fieldid=\"107\" modifier=\"\" tableid=\"104\" xmlns=\"COE.SearchCriteria\">" +
       " <textCriteria trim=\"BOTH\" operator=\"like\"> chloro</textCriteria></searchCriteriaItem></logicalCriteria>";
                doc.LoadXml(body);
                fieldId = 107;
                WhereClauseBase actual = WhereClauseFactory.CreateWhereClause(dataView, doc.GetElementsByTagName("logicalCriteria")[0]);
                Assert.IsTrue(actual is WhereClauseBase, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        [TestMethod]
        public void CreateWhereClause_SearchcriteriaitemItemTest()
        {
            try
            {

                body = "<logicalCriteria operator=\"Or\" xmlns=\"\"> <searchCriteriaItem id=\"4\" fieldid=\"107\" modifier=\"\" tableid=\"104\" xmlns=\"COE.SearchCriteria\"> " +
       " <textCriteria trim=\"BOTH\" operator=\"like\">benzene </textCriteria> </searchCriteriaItem> <searchCriteriaItem id=\"4\" fieldid=\"107\" modifier=\"\" tableid=\"104\" xmlns=\"COE.SearchCriteria\">" +
       " <textCriteria trim=\"BOTH\" operator=\"like\"> chloro</textCriteria></searchCriteriaItem></logicalCriteria>";
                doc.LoadXml(body);
                fieldId = 107;
                WhereClauseBase actual = WhereClauseFactory.CreateWhereClause(dataView, doc.GetElementsByTagName("searchCriteriaItem")[0]);
                Assert.IsTrue(actual is WhereClauseBase, "WhereClauseFactory.CreateWhereClauseItem does not return the expected value.");
            }
            catch
            {
                throw;
            }
        }

        private COEDataView GetDataView()
        {
            try
            {
                COEDataView theCOEDataView = SearchHelper.BuildCOEDataViewFromXML(SearchHelper._COEExportToExcel + @"\DataView.xml");
                return theCOEDataView;

            }
            catch (Exception)
            {
                throw;
            }

        }

        private void LoadDataViewFromXml()
        {
            try
            {
                dataView = new MetaData.DataView();
                COEDataView theDataView = GetDataView();
                if (theDataView != null)
                {
                    dataView.LoadFromXML(theDataView.ToString());
                    fieldId = theDataView.Tables[0].Fields[0].Id;
                }

            }
            catch
            {
                throw;
            }
        }

        private MetaData.DataView GetDataView(string FilePath)
        {
            MetaData.DataView thedataview = null;
            try
            {
                thedataview = new MetaData.DataView();
                string filpath = SearchHelper.GetExecutingTestResultsBasePath(FilePath);
                XmlDocument doc = new XmlDocument();
                doc.Load(SearchHelper.GetExecutingTestResultsBasePath(FilePath));
                COEDataView coeDataView = new COEDataView();
                coeDataView.GetFromXML(doc);
                thedataview.LoadFromXML(coeDataView.ToString());
                return thedataview;
            }
            catch
            {
                throw;
            }
        }




    }

}
