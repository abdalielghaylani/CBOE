// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.COESearchService;
using CambridgeSoft.COE.Framework.Common;
using System.Data;
using System.Xml;
using System.IO;
using System.Data.Common;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems;
using Oracle.DataAccess.Client;
using System.Configuration;
using CambridgeSoft.COE.Framework.COESecurityService;
using System.Reflection;

namespace CambridgeSoft.COE.Framework.Services.Search.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Services.Search.SearchManager and is intended
    ///to contain all CambridgeSoft.COE.Framework.Services.Search.SearchManager Unit Tests
    ///</summary>
    [TestClass()]
    public class SearchManagerTestBU
    {
        private COESearch target;
        private TestContext testContextInstance;
        private COEDataView dataView;
        private string pathToXmls = Utilities.GetProjectBasePath("CambridgeSoft.COE.Framework.UnitTests");
        int hitlistId = -1;

        DALFactory factory;
        CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL;
        private string databaseName = "CHEMINVDB2";


        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test

        [TestInitialize()]
        public void MyTestInitialize()
        {
            /* Initializing manager with Factory */
            target = new COESearch();
            string userName = ConfigurationManager.AppSettings.Get("LogonUserName");
            string password = ConfigurationManager.AppSettings.Get("LogonPassword");
            ;

            if(!COEPrincipal.Login(userName, password))
                Assert.Fail(MethodBase.GetCurrentMethod().Name + " - Invalid username/password");
            /*BLLFactory bllFactory = new BLLFactory();
            bllFactory.GetBLL<SearchManager>(ref target, securityInfo, appName, "Search");*/

            XmlDocument doc = new XmlDocument();
            doc.Load(pathToXmls + "\\DataView1.xml");
            dataView = new COEDataView(doc);

            factory = new DALFactory();
            //searchDAL = new SearchDAL();

            factory.GetDAL<CambridgeSoft.COE.Framework.COESearchService.DAL>(ref searchDAL, "COESearch", databaseName, false);
            //searchDAL.GetConfigData("COESearch");
        }
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        /// <summary>
        ///A test for DoSearch (SecurityInfo, string, SearchCriteria, ResultsCriteria, PagingInfo)
        ///</summary>
        [TestMethod()]
        public void DoSearchTest()
        {
            /*
             * GetHitList Query:
             * SELECT 153, INV_COMPOUNDS.COMPOUND_ID
             * FROM CHEMINVDB2.INV_COMPOUNDS
             * WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > :0)
             * 
             * GetHitList Values:
             * Value = 20
             * 
             * GetData Query:
             * SELECT INV_COMPOUNDS.BASE64_CDX FROM CHEMINVDB2.INV_COMPOUNDS, CHEMINVDB2.CSDOHITLIST
             * WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID AND
             * (CHEMINVDB2.CSDOHITLIST.HitListID = :0)
             * 
             * GetData Values:
             * Value0 = 153
            */

            SearchCriteria searchCriteria = new SearchCriteria();
            SearchCriteria.SearchCriteriaItem item = new SearchCriteria.SearchCriteriaItem();
            item.FieldId = 19;
            item.ID = 3;
            item.TableId = 3;
            SearchCriteria.TextCriteria text = new SearchCriteria.TextCriteria();
            text.Operator = SearchCriteria.COEOperators.GT;
            text.InnerText = "20";
            item.Criterium = text;
            searchCriteria.Items.Add(item);

            ResultsCriteria resultsCriteria = new ResultsCriteria();
            resultsCriteria.XmlNS = "COE.ResultsCriteria";
            ResultsCriteria.ResultsCriteriaTable tbl = new ResultsCriteria.ResultsCriteriaTable();
            tbl.Id = 3;
            ResultsCriteria.Field fld = new ResultsCriteria.Field();
            fld.Id = 20;
            tbl.Criterias.Add(fld);
            resultsCriteria.Add(tbl);

            PagingInfo pagingInfo = new PagingInfo();
            SearchResponse actual = target.DoSearch(searchCriteria, resultsCriteria, pagingInfo, dataView);

            int expectedCount = this.ExecuteScalar("SELECT Count(*) FROM CHEMINVDB2.INV_COMPOUNDS WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > '20') and rownum <= 1");

            Assert.AreEqual(actual.PagingInfo.RecordCount, actual.ResultsDataSet.Tables[0].Rows.Count, "Search.SearchManager.DoSearch did not return the expected value.");
            Assert.AreEqual(expectedCount, actual.ResultsDataSet.Tables[0].Rows.Count, "Search.SearchManager.DoSearch did not return the expected value.");
        }

        ///// <summary>
        /////A test for DoSearchXML (SecurityInfo, string, SearchCriteria, ResultsCriteria, PagingInfo)
        /////</summary>
        //[TestMethod()]
        //public void DoSearchXMLTest() {
        //    /*
        //     * GetHitList Query:
        //     * SELECT 154, INV_COMPOUNDS.COMPOUND_ID 
        //     * FROM CHEMINVDB2.INV_COMPOUNDS 
        //     * WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > :0)
        //     *              
        //     * GetHitList Values:
        //     * Value0 = 20
        //     * 
        //     * GetData Query:
        //     * SELECT INV_COMPOUNDS.BASE64_CDX 
        //     * FROM CHEMINVDB2.INV_COMPOUNDS, CHEMINVDB2.CSDOHITLIST 
        //     * WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID 
        //     * AND (CHEMINVDB2.CSDOHITLIST.HitListID = :0)
        //     * 
        //     * GetData Values:
        //     * Value0 = 154
        //     */
        //    try {
        //        SearchCriteria searchCriteria = new SearchCriteria();
        //        SearchCriteria.SearchCriteriaItem item = new SearchCriteria.SearchCriteriaItem();
        //        item.FieldId = 19;
        //        item.ID = 3;
        //        item.TableId = 3;
        //        SearchCriteria.TextCriteria text = new SearchCriteria.TextCriteria();
        //        text.Operator = SearchCriteria.COEOperators.GT;
        //        text.InnerText = "20";
        //        item.Criterium = text;
        //        searchCriteria.Items.Add(item);

        //        ResultsCriteria resultsCriteria = new ResultsCriteria();
        //        resultsCriteria.XmlNS = "COE.ResultsCriteria";
        //        ResultsCriteria.ResultsCriteriaTable tbl = new ResultsCriteria.ResultsCriteriaTable();
        //        tbl.Id = 3;
        //        ResultsCriteria.Field fld = new ResultsCriteria.Field();
        //        fld.Id = 20;
        //        tbl.Criterias.Add(fld);
        //        resultsCriteria.Add(tbl);

        //        PagingInfo pagingInfo = new PagingInfo();
        //        XmlDocument actual = target.DoSearchXml(appName, searchCriteria, resultsCriteria, pagingInfo, dataView);

        //        //DeSerialize Original DataView.XML
        //        System.Xml.Serialization.XmlSerializer dataViewSerializer = new System.Xml.Serialization.XmlSerializer(typeof(SearchResponse));
        //        string xmlText = actual.DocumentElement.OuterXml;
        //        StringReader inputStream = new StringReader(xmlText);
        //        SearchResponse searchResponse = (SearchResponse) dataViewSerializer.Deserialize(inputStream);
        //        inputStream.Close();

        //        int expectedCount = this.ExecuteScalar("SELECT Count(*) FROM CHEMINVDB2.INV_COMPOUNDS WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > '20') and rownum <=1");

        //        Assert.AreEqual(searchResponse.PagingInfo.RecordCount, searchResponse.ResultsDataSet.Tables[0].Rows.Count, "Search.SearchManager.DoSearch did not return the expected value.");
        //        Assert.AreEqual(expectedCount, searchResponse.ResultsDataSet.Tables[0].Rows.Count, "Search.SearchManager.DoSearch did not return the expected value.");
        //    } catch(Exception exception) {
        //        Assert.Fail(exception.Message);
        //    }
        //}

        /// <summary>
        ///A test for DoSearch (SecurityInfo, string, SearchCriteria, ResultsCriteria, PagingInfo)
        ///</summary>
        [TestMethod()]
        public void MultitableDoSearchTest()
        {
            /*
             * GetHitList Query:
             * SELECT 153, INV_COMPOUNDS.COMPOUND_ID
             * FROM CHEMINVDB2.INV_COMPOUNDS
             * WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > :0)
             * 
             * GetHitList Values:
             * Value = 20
             * 
             * GetData Query:
             * SELECT INV_COMPOUNDS.BASE64_CDX FROM CHEMINVDB2.INV_COMPOUNDS, CHEMINVDB2.CSDOHITLIST
             * WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID AND
             * (CHEMINVDB2.CSDOHITLIST.HitListID = :0)
             * 
             * GetData Values:
             * Value0 = 153
            */

            try
            {
                XmlDocument searchCriteriaXml = new XmlDocument();
                searchCriteriaXml.Load(pathToXmls + @"\MultipleTablesTest XML\SearchCriteria.xml");

                XmlDocument resultsCriteriaXml = new XmlDocument();
                resultsCriteriaXml.Load(pathToXmls + @"\MultipleTablesTest XML\ResultCriteria.xml");

                SearchCriteria searchCriteria = new SearchCriteria(searchCriteriaXml);
                ResultsCriteria resultsCriteria = new ResultsCriteria(resultsCriteriaXml);
                PagingInfo pagingInfo = new PagingInfo();
                pagingInfo.Start = 0;
                pagingInfo.RecordCount = 300000;
                SearchResponse actual = target.DoSearch(searchCriteria, resultsCriteria, pagingInfo, dataView);

                int query1Count = this.ExecuteScalar(@"SELECT COUNT(*) 
																		FROM CHEMINVDB2.INV_COMPOUNDS,
																				(SELECT CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID as ID
																					FROM CHEMINVDB2.INV_COMPOUNDS, 
																					CHEMINVDB2.INV_CONTAINERS c 
																					WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = c.COMPOUND_ID_FK 
																						AND (c.QTY_INITIAL = 50)) HL
																		WHERE HL.ID = INV_COMPOUNDS.COMPOUND_ID");

                int query2Count = this.ExecuteScalar(@"SELECT COUNT(*) FROM CHEMINVDB2.INV_CONTAINERS C, CHEMINVDB2.INV_COMPOUNDS,
																			(SELECT CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID as ID
																				FROM CHEMINVDB2.INV_COMPOUNDS, 
																						CHEMINVDB2.INV_CONTAINERS c 
																				WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = c.COMPOUND_ID_FK 
																						AND (c.QTY_INITIAL = 50))HL
																			WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = C.COMPOUND_ID_FK AND 
																			HL.ID = INV_COMPOUNDS.COMPOUND_ID");

                Assert.AreEqual(query1Count, actual.PagingInfo.RecordCount, "Search.SearchManager.DoSearch did not return the expected PagingInfo.RecordCount: Expected " + query1Count + query2Count + " - Real " + actual.PagingInfo.RecordCount);
                Assert.AreEqual(actual.ResultsDataSet.Tables[0].Rows.Count, query1Count, "Search.SearchManager.DoSearch did not return the expected value in Tables[0].");
                Assert.AreEqual(actual.ResultsDataSet.Tables[1].Rows.Count, query2Count, "Search.SearchManager.DoSearch did not return the expected value in Tables[1].");
                Assert.AreEqual(actual.ResultsDataSet.Tables[0].Rows.Count, actual.PagingInfo.RecordCount, "Search.SearchManager.DoSearch did not return the expected value in Tables[0].");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for GetHitList (SecurityInfo, string, SearchCriteria)
        ///</summary>
        [TestMethod()]
        public void GetHitListTest()
        {
            /*
             * Query:
             * SELECT 155, INV_COMPOUNDS.COMPOUND_ID 
             * FROM CHEMINVDB2.INV_COMPOUNDS 
             * WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > :0)
             * 
             * Values:
             * Value0 = 20
             */
            try
            {
                SearchCriteria searchCriteria = new SearchCriteria();
                SearchCriteria.SearchCriteriaItem item = new SearchCriteria.SearchCriteriaItem();
                item.FieldId = 19;
                item.ID = 3;
                item.TableId = 3;
                SearchCriteria.TextCriteria text = new SearchCriteria.TextCriteria();
                text.Operator = SearchCriteria.COEOperators.GT;
                text.InnerText = "20";
                item.Criterium = text;
                searchCriteria.Items.Add(item);

                HitListInfo actual;
                dataView.Database = "CHEMINVDB2";
                actual = target.GetHitList(searchCriteria, dataView);
                hitlistId = actual.HitListID;

                int expectedCount = this.ExecuteScalar("SELECT Count(*) FROM CHEMINVDB2.INV_COMPOUNDS WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > '20')");
                Assert.AreEqual(expectedCount, actual.RecordCount, "Search.SearchManager.GetHitList did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for GetHitList (SecurityInfo, string, SearchCriteria)
        ///</summary>
        [TestMethod()]
        public void GetHitListWhereClauseInTest()
        {
            /*
             * Query:
             * SELECT 155, INV_COMPOUNDS.COMPOUND_ID 
             * FROM CHEMINVDB2.INV_COMPOUNDS 
             * WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > :0)
             * 
             * Values:
             * Value0 = 20
             */
            try
            {
                SearchCriteria searchCriteria = new SearchCriteria();
                SearchCriteria.SearchCriteriaItem item = new SearchCriteria.SearchCriteriaItem();
                item.FieldId = 19;
                item.ID = 3;
                item.TableId = 3;
                SearchCriteria.TextCriteria text = new SearchCriteria.TextCriteria();
                text.Operator = SearchCriteria.COEOperators.GT;
                text.InnerText = "20";
                item.Criterium = text;
                searchCriteria.Items.Add(item);

                HitListInfo actual;
                dataView.Database = "CHEMINVDB2";
                actual = target.GetHitList(searchCriteria, dataView);
                hitlistId = actual.HitListID;

                int expectedCount = this.ExecuteScalar("SELECT Count(*) FROM CHEMINVDB2.INV_COMPOUNDS WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > '20')");
                Assert.AreEqual(expectedCount, actual.RecordCount, "Search.SearchManager.GetHitList did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for GetData (SecurityInfo, string, ResultsCriteria, ref PagingInfo)
        ///</summary>
        [TestMethod()]
        public void GetDataTest()
        {
            /*
             * Query:
             * SELECT INV_COMPOUNDS.BASE64_CDX 
             * FROM CHEMINVDB2.INV_COMPOUNDS, CHEMINVDB2.CSDOHITLIST 
             * WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID 
             * AND (CHEMINVDB2.CSDOHITLIST.HitListID = :0)
             * 
             * Values
             * Value0 = 88
             */
            try
            {

                ResultsCriteria resultsCriteria = new ResultsCriteria();
                resultsCriteria.XmlNS = "COE.ResultsCriteria";
                ResultsCriteria.ResultsCriteriaTable parentTable = new ResultsCriteria.ResultsCriteriaTable();
                parentTable.Id = 3;
                ResultsCriteria.Field parentTableField = new ResultsCriteria.Field();
                parentTableField.Id = 20;
                parentTable.Criterias.Add(parentTableField);
                resultsCriteria.Add(parentTable);

                ResultsCriteria.ResultsCriteriaTable childTable = new ResultsCriteria.ResultsCriteriaTable();
                childTable.Id = 1;
                ResultsCriteria.Field childTableField = new ResultsCriteria.Field();
                childTableField.Id = 2;
                childTable.Criterias.Add(childTableField);
                resultsCriteria.Add(childTable);

                ResultsCriteria.ResultsCriteriaTable childTable2 = new ResultsCriteria.ResultsCriteriaTable();
                childTable2.Id = 7;
                ResultsCriteria.Field childTableField2 = new ResultsCriteria.Field();
                childTableField2.Id = 45;
                childTable2.Criterias.Add(childTableField2);
                resultsCriteria.Add(childTable2);

                /*ResultsCriteria.ResultsCriteriaTable childTable3 = new ResultsCriteria.ResultsCriteriaTable();
                childTable3.Id = 0;
                ResultsCriteria.Literal childTableField3 = new ResultsCriteria.Literal();
                childTableField3.LiteralValue = "lalala";
                childTable3.Criterias.Add(childTableField3);
                ResultsCriteria.Field childTableField4 = new ResultsCriteria.Field();
                childTableField4.Id = 1;
                childTable3.Criterias.Add(childTableField4);
                ResultsCriteria.Field childTableField5 = new ResultsCriteria.Field();
                childTableField5.Id = 20;
                childTable3.Criterias.Add(childTableField5);
                resultsCriteria.Add(childTable3);
                */

                PagingInfo pagingInfo = new PagingInfo();
                pagingInfo.Start = 0;
                pagingInfo.RecordCount = 30000;

                if(hitlistId == -1)
                    this.GetHitListTest();
                dataView.Database = "CHEMINVDB2";
                pagingInfo.HitListID = hitlistId;
                DataSet actual = target.GetData(resultsCriteria, pagingInfo, dataView);

                int Query1Count = this.ExecuteScalar("SELECT Count(*) FROM CHEMINVDB2.INV_COMPOUNDS WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > '20')");
                int Query2Count = this.ExecuteScalar(
                    "SELECT COUNT(*) FROM CHEMINVDB2.INV_CONTAINERS, CHEMINVDB2.INV_COMPOUNDS WHERE CHEMINVDB2.INV_CONTAINERS.COMPOUND_ID_FK = CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID(+) AND COMPOUND_ID IN (select compound_id from cheminvdb2.inv_compounds where (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > '20'))");


                int Query3Count = this.ExecuteScalar(
                        @"SELECT COUNT(*)
						FROM CHEMINVDB2.INV_SYNONYMS,
								CHEMINVDB2.INV_COMPOUNDS
						WHERE CHEMINVDB2.INV_SYNONYMS.COMPOUND_ID_FK = CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID(+)
								AND COMPOUND_ID IN 
								(SELECT COMPOUND_ID 
								FROM CHEMINVDB2.INV_COMPOUNDS 
								WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > '20'))");

                Assert.AreEqual(actual.Tables[0].Rows.Count, Query1Count, "pagingInfo_GetData_expected was not set correctly.");
                Assert.AreEqual(actual.Tables[1].Rows.Count, Query2Count, "pagingInfo_GetData_expected was not set correctly.");
                Assert.AreEqual(actual.Tables[2].Rows.Count, Query3Count, "pagingInfo_GetData_expected was not set correctly.");
                Assert.AreEqual(Query1Count, pagingInfo.RecordCount, "Search.SearchManager.GetData did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for FormulaCommand (SecurityInfo, string, SearchCriteria)
        ///</summary>
        [TestMethod()]
        public void FormulaCommandGetHitListTest()
        {
            /*
             * Query:
             * SELECT 156, INV_COMPOUNDS.COMPOUND_ID 
             * FROM CHEMINVDB2.INV_COMPOUNDS 
             * WHERE CSCARTRIDGE.FormulaContains(CHEMINVDB2.INV_COMPOUNDS.BASE64_CDX, :0, :1)=1 
             * 
             * Values:
             * Value0 = C5-10Br2-4, 
             * Value1 = FULL=NO
             */

            try
            {
                SearchCriteria searchCriteria = new SearchCriteria();
                SearchCriteria.SearchCriteriaItem item = new SearchCriteria.SearchCriteriaItem();
                item.FieldId = 20;
                item.ID = 1;
                item.TableId = 3;
                item.Criterium = new SearchCriteria.CSFormulaCriteria()
                {
                    Formula="C5-10Br2-4"
                };
                searchCriteria.Items.Add(item);

                System.Diagnostics.Debug.WriteLine(item.Criterium.GenerateXmlSnippet());

                HitListInfo actual;
                dataView.Database = "CHEMINVDB2";
                actual = target.GetHitList(searchCriteria, dataView);

                //int expectedCount = this.ExecuteScalar("SELECT COUNT(*) FROM CHEMINVDB2.INV_COMPOUNDS WHERE CSCARTRIDGE.FormulaContains(CHEMINVDB2.INV_COMPOUNDS.BASE64_CDX, 'C5-10Br2-4', 'FULL=NO')=1");
                int expectedCount = 1;

                Assert.AreEqual(expectedCount, actual.RecordCount, "Search.SearchManager.GetHitList did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for MolWeightCommand (SecurityInfo, string, SearchCriteria)
        ///</summary>
        [TestMethod()]
        public void MolWeightCommandGetHitListTest()
        {
            /*
             * Query:
             * SELECT 157, INV_COMPOUNDS.COMPOUND_ID 
             * FROM CHEMINVDB2.INV_COMPOUNDS 
             * WHERE CSCARTRIDGE.MolWeightContains(CHEMINVDB2.INV_COMPOUNDS.BASE64_CDX, :0, :1, :2)=1 
             * 
             * Values:
             * Value0 = 0, 
             * Value1 = 100, 
             * Value2 = 
             */

            try
            {
                SearchCriteria searchCriteria = new SearchCriteria();
                SearchCriteria.SearchCriteriaItem item = new SearchCriteria.SearchCriteriaItem();
                item.FieldId = 20;
                item.ID = 1;
                item.TableId = 3;

                SearchCriteria.CSMolWeightCriteria molWeightCriteria = new SearchCriteria.CSMolWeightCriteria();
                item.Criterium = molWeightCriteria;

                molWeightCriteria.Min = 0;
                molWeightCriteria.Max = 100;
                molWeightCriteria.Implementation = "CSCartridge";

                searchCriteria.Items.Add(item);

                System.Diagnostics.Debug.WriteLine(item.Criterium.GenerateXmlSnippet());

                HitListInfo actual;
                actual = target.GetHitList(searchCriteria, dataView);

                int expectedCount = this.ExecuteScalar("SELECT COUNT(*) FROM CHEMINVDB2.INV_COMPOUNDS WHERE CSCARTRIDGE.MolWeightContains(CHEMINVDB2.INV_COMPOUNDS.BASE64_CDX, '0', '100', '')=1 ");

                Assert.AreEqual(expectedCount, actual.RecordCount, "Search.SearchManager.GetHitList did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for StructureCommand (SecurityInfo, string, SearchCriteria)
        ///</summary>
        [TestMethod()]
        public void StructureCommandGetHitListTest()
        {
            /*
             * Query:
             * SELECT 158, INV_COMPOUNDS.COMPOUND_ID FROM CHEMINVDB2.INV_COMPOUNDS 
             * WHERE CSCARTRIDGE.MoleculeContains(CHEMINVDB2.INV_COMPOUNDS.BASE64_CDX, :0, :1, :2)=1 
             * 
             * Values:
             * Value0 = SELECT query FROM CSCartridge.TempQueries WHERE (Id = 1), 
             * Value1 =  
             * Value2 = absoluteHitsRel=NO, 
             *          relativeTetStereo=NO, 
             *          tetrahedralStereo=Any, 
             *          simThreshold=100, 
             *          reactionCenter=YES, 
             *          full=NO, 
             *          fragmentsOverlap=NO, 
             *          permitExtraneousFragmentsIfRXN=NO, 
             *          permitExtraneousFragments=NO, 
             *          doubleBondStereo=NO, 
             *          hitAnyChargeHetero=YES, 
             *          identity=NO, 
             *          hitAnyChargeCarbon=YES, 
             *          similar=NO)
             */

            try
            {
                SearchCriteria searchCriteria = new SearchCriteria();
                SearchCriteria.SearchCriteriaItem item = new SearchCriteria.SearchCriteriaItem();
                item.FieldId = 20;
                item.ID = 1;
                item.TableId = 3;
                SearchCriteria.StructureCriteria structureCriteria = new SearchCriteria.StructureCriteria();
                structureCriteria.Implementation = "CSCartridge";
                structureCriteria.CartridgeSchema = "CSCartridge";
                structureCriteria.Structure = @"VmpDRDAxMDAEAwIBAAAAAAAAAAAAAAAAAAAAAAMAOQAAAENEWCBkcml2ZXIgMS42
IFtmb3IgQ2hlbURyYXcgNitdIC8gSmFuIDEyIDE5OjAxOjUyIDIwMDIEAhAA//87
AAAAPACWTY8A6wOrAAEJCAAAAAAAAAAAAAIJCAAAAMsAAADnAAUIBAAAAB4AAAMy
AAgA////////AAAAAAAA//8AAAAAAAAAAP///////wAAAAD//wAAAAD///////8A
AP//AYACAAAABAIQAP//OwAAADwAlk2PAOsDqwADgAMAAAAEgAQAAAAAAggAQpdz
AKpscwA5BAMAAAAwAAAEgAUAAAAAAggA0FZoAL21VwA5BAMAAAAxAAAEgAYAAAAA
AggA0FZoANAhjwA5BAMAAAAyAAAEgAcAAAAAAggAVbZXAFWBfgA5BAMAAAAzAAAE
gAgAAAAAAggAl02PAFWBfgACBAIABwA5BAMAAAA0BoAJAAAAAAcZAAIAAAADAGAA
yAADAAIABQAgAMgAAwBOSDIAAAAABIAKAAAAAAIIAISsfgAAADwAOQQDAAAANQAA
BIALAAAAAAIIAISsfgDsA6sAAgQCAAgAOQQDAAAANgaADAAAAAAHDgABAAAAAwBg
AMgAAwBPSAAAAAAEgA0AAAAAAggAAAA8ANBWaAACBAIACAA5BAMAAAA3BoAOAAAA
AAcOAAEAAAADAGAAyAADAE9IAAAAAAWADwAAAAQGBAAEAAAABQYEAAUAAAAAAAWA
EAAAAAQGBAAEAAAABQYEAAYAAAAAAAWAEQAAAAQGBAAEAAAABQYEAAcAAAAAAAWA
EgAAAAQGBAAEAAAABQYEAAgAAAAAAAWAEwAAAAQGBAAFAAAABQYEAAoAAAAAAAWA
FAAAAAQGBAAGAAAABQYEAAsAAAAAAAWAFQAAAAQGBAAHAAAABQYEAA0AAAAAAAAA
AAAAAA==";

                item.Criterium = structureCriteria;
                searchCriteria.Items.Add(item);

                System.Diagnostics.Debug.WriteLine(item.Criterium.GenerateXmlSnippet());

                HitListInfo actual = target.GetHitList(searchCriteria, dataView);


                searchDAL.DALManager.BeginTransaction();

                this.ExecuteNonQuery(@"INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, QUERY) VALUES (1, 'VmpDRDAxMDAEAwIBAAAAAAAAAAAAAAAAAAAAAAMAOQAAAENEWCBkcml2ZXIgMS42
IFtmb3IgQ2hlbURyYXcgNitdIC8gSmFuIDEyIDE5OjAxOjUyIDIwMDIEAhAA//87
AAAAPACWTY8A6wOrAAEJCAAAAAAAAAAAAAIJCAAAAMsAAADnAAUIBAAAAB4AAAMy
AAgA////////AAAAAAAA//8AAAAAAAAAAP///////wAAAAD//wAAAAD///////8A
AP//AYACAAAABAIQAP//OwAAADwAlk2PAOsDqwADgAMAAAAEgAQAAAAAAggAQpdz
AKpscwA5BAMAAAAwAAAEgAUAAAAAAggA0FZoAL21VwA5BAMAAAAxAAAEgAYAAAAA
AggA0FZoANAhjwA5BAMAAAAyAAAEgAcAAAAAAggAVbZXAFWBfgA5BAMAAAAzAAAE
gAgAAAAAAggAl02PAFWBfgACBAIABwA5BAMAAAA0BoAJAAAAAAcZAAIAAAADAGAA
yAADAAIABQAgAMgAAwBOSDIAAAAABIAKAAAAAAIIAISsfgAAADwAOQQDAAAANQAA
BIALAAAAAAIIAISsfgDsA6sAAgQCAAgAOQQDAAAANgaADAAAAAAHDgABAAAAAwBg
AMgAAwBPSAAAAAAEgA0AAAAAAggAAAA8ANBWaAACBAIACAA5BAMAAAA3BoAOAAAA
AAcOAAEAAAADAGAAyAADAE9IAAAAAAWADwAAAAQGBAAEAAAABQYEAAUAAAAAAAWA
EAAAAAQGBAAEAAAABQYEAAYAAAAAAAWAEQAAAAQGBAAEAAAABQYEAAcAAAAAAAWA
EgAAAAQGBAAEAAAABQYEAAgAAAAAAAWAEwAAAAQGBAAFAAAABQYEAAoAAAAAAAWA
FAAAAAQGBAAGAAAABQYEAAsAAAAAAAWAFQAAAAQGBAAHAAAABQYEAA0AAAAAAAAA
AAAAAA==')");
                int expectedCount = this.ExecuteScalar("SELECT COUNT(*) " +
                                                                        "FROM CHEMINVDB2.INV_COMPOUNDS " +
                                                                        "WHERE CSCARTRIDGE.MoleculeContains(" +
                                                                            "CHEMINVDB2.INV_COMPOUNDS.BASE64_CDX, " +
                                                                            "'SELECT query FROM CSCartridge.TempQueries WHERE (Id = 1)', " +
                                                                            "'', " +
                                                                            "'absoluteHitsRel=NO, relativeTetStereo=NO, tetrahedralStereo=Any, simThreshold=100, reactionCenter=YES, full=NO, fragmentsOverlap=NO, permitExtraneousFragmentsIfRXN=NO, permitExtraneousFragments=NO, doubleBondStereo=NO, hitAnyChargeHetero=YES, identity=NO, hitAnyChargeCarbon=YES, similar=NO')=1");
                searchDAL.DALManager.CommitTransaction();

                Assert.AreEqual(expectedCount, actual.RecordCount, "Search.SearchManager.GetHitList did not return the expected value.");
            }
            catch(Oracle.DataAccess.Client.OracleException oe)
            {
                Assert.Fail(oe.Message);
                searchDAL.DALManager.RollbackTransaction();
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        /// Another test for DoSearch (SecurityInfo, string, SearchCriteria, ResultsCriteria, PagingInfo)
        /// </summary>
        [TestMethod()]
        public void DoSearchWithPagingTest()
        {
            /*
             * GetHitList Query:
             * SELECT 153, INV_COMPOUNDS.COMPOUND_ID
             * FROM CHEMINVDB2.INV_COMPOUNDS
             * WHERE (CHEMINVDB2.INV_COMPOUNDS.SUBSTANCE_NAME > :0)
             * 
             * GetHitList Values:
             * Value = 20
             * 
             * GetData Query:
             * SELECT INV_COMPOUNDS.BASE64_CDX FROM CHEMINVDB2.INV_COMPOUNDS, CHEMINVDB2.CSDOHITLIST
             * WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID AND
             * (CHEMINVDB2.CSDOHITLIST.HitListID = :0)
             * 
             * GetData Values:
             * Value0 = 153
            */

            SearchCriteria searchCriteria = new SearchCriteria();
            SearchCriteria.SearchCriteriaItem item = new SearchCriteria.SearchCriteriaItem();
            item.FieldId = 19;
            item.ID = 3;
            item.TableId = 3;
            SearchCriteria.TextCriteria text = new SearchCriteria.TextCriteria();
            text.Operator = SearchCriteria.COEOperators.GT;
            text.InnerText = "20";
            item.Criterium = text;
            searchCriteria.Items.Add(item);

            ResultsCriteria resultsCriteria = new ResultsCriteria();
            resultsCriteria.XmlNS = "COE.ResultsCriteria";
            ResultsCriteria.ResultsCriteriaTable tbl = new ResultsCriteria.ResultsCriteriaTable();
            tbl.Id = 3;
            ResultsCriteria.Field fld = new ResultsCriteria.Field();
            fld.Id = 20;
            tbl.Criterias.Add(fld);
            resultsCriteria.Add(tbl);

            ResultsCriteria.ResultsCriteriaTable childTable = new ResultsCriteria.ResultsCriteriaTable();
            childTable.Id = 1;
            ResultsCriteria.Field childTableField = new ResultsCriteria.Field();
            childTableField.Id = 1;
            childTable.Criterias.Add(childTableField);
            resultsCriteria.Add(childTable);

            PagingInfo pagingInfo = new PagingInfo();
            pagingInfo.Start = 20;
            pagingInfo.End = 50;
            SearchResponse actual = target.DoSearch(searchCriteria, resultsCriteria, pagingInfo, dataView);

            int parentTableCount = this.ExecuteScalar(
                                        @"SELECT Count(*) 
											FROM ((SELECT CHEMINVDB2.INV_COMPOUNDS.BASE64_CDX, rownum AS sortOrder 
														FROM CHEMINVDB2.INV_COMPOUNDS, 
																CHEMINVDB2.CSDOHITLIST 
														WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID 
																	AND (CHEMINVDB2.CSDOHITLIST.HitListID = " + pagingInfo.HitListID +
                                                                @") AND rownum <= " + (pagingInfo.End - 1) +
                                                        @"ORDER BY sortOrder) q0) 
											WHERE (sortOrder >= " + pagingInfo.Start + ") ORDER BY sortOrder");
            /*
            int childTableCount = this.ExecuteScalar(@"(SELECT COUNT(*) 
                                             FROM (CHEMINVDB2.INV_CONTAINERS c), 
                                                     CHEMINVDB2.INV_COMPOUNDS, 
                                                  (SELECT * 
                                                   FROM ((SELECT CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID AS ID, rownum AS SortOrder 
                                                          FROM CHEMINVDB2.INV_COMPOUNDS, 
                                                                    CHEMINVDB2.CSDOHITLIST 
                                                          WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID 
                                                                AND (CHEMINVDB2.CSDOHITLIST.HitListID = " + pagingInfo.HitListID + @") 
                                                                AND rownum <= " + (pagingInfo.End - 1) + 
                                                          @"ORDER BY SortOrder) q1239746627) 
                                                    WHERE (SortOrder >= " + pagingInfo.Start + @") 
                                                    ORDER BY SortOrder) HITLISTQUERY 
                                            WHERE c.COMPOUND_ID_FK(+) = CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID 
                                                        AND CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = HITLISTQUERY.ID)");
            */
            Assert.AreEqual(parentTableCount, actual.PagingInfo.RecordCount, "Search.SearchManager.DoSearch did not return the expected value.");
            Assert.AreEqual(parentTableCount, actual.ResultsDataSet.Tables[0].Rows.Count, "Search.SearchManager.DoSearch did not return the expected value.");
            //Assert.AreEqual(childTableCount, actual.ResultsDataSet.Tables[1].Rows.Count, "Search.SearchManager.DoSearch did not return the expected value.");

            pagingInfo = new PagingInfo();
            pagingInfo.Start = 800;
            pagingInfo.RecordCount = 20;
            pagingInfo.End = pagingInfo.Start + pagingInfo.RecordCount;

            actual = target.DoSearch(searchCriteria, resultsCriteria, pagingInfo, dataView);

            parentTableCount = this.ExecuteScalar(
                                       @"SELECT Count(*) 
											FROM ((SELECT CHEMINVDB2.INV_COMPOUNDS.BASE64_CDX, rownum AS sortOrder 
														FROM CHEMINVDB2.INV_COMPOUNDS, 
																CHEMINVDB2.CSDOHITLIST 
														WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID 
																	AND (CHEMINVDB2.CSDOHITLIST.HitListID = " + pagingInfo.HitListID +
                                                               @") AND rownum <= " + (pagingInfo.End - 1) +
                                                       @"ORDER BY sortOrder) q0) 
											WHERE (sortOrder >= " + pagingInfo.Start + ") ORDER BY sortOrder");
            /*
            childTableCount = this.ExecuteScalar(@"(SELECT COUNT(*) 
                                             FROM (CHEMINVDB2.INV_CONTAINERS c), 
                                                     CHEMINVDB2.INV_COMPOUNDS, 
                                                  (SELECT * 
                                                   FROM ((SELECT CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID AS ID, rownum AS SortOrder 
                                                          FROM CHEMINVDB2.INV_COMPOUNDS, 
                                                                    CHEMINVDB2.CSDOHITLIST 
                                                          WHERE CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = CHEMINVDB2.CSDOHITLIST.ID 
                                                                AND (CHEMINVDB2.CSDOHITLIST.HitListID = " + pagingInfo.HitListID + @") 
                                                                AND rownum <= " + (pagingInfo.End - 1) +
                                                          @"ORDER BY SortOrder) q1239746627) 
                                                    WHERE (SortOrder >= " + pagingInfo.Start + @") 
                                                    ORDER BY SortOrder) HITLISTQUERY 
                                            WHERE c.COMPOUND_ID_FK(+) = CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID 
                                                        AND CHEMINVDB2.INV_COMPOUNDS.COMPOUND_ID = HITLISTQUERY.ID)");
            */
            Assert.AreEqual(parentTableCount, actual.PagingInfo.RecordCount, "Search.SearchManager.DoSearch did not return the expected value.");
            Assert.AreEqual(parentTableCount, actual.ResultsDataSet.Tables[0].Rows.Count, "Search.SearchManager.DoSearch did not return the expected value.");
            //Assert.AreEqual(childTableCount, actual.ResultsDataSet.Tables[1].Rows.Count, "Search.SearchManager.DoSearch did not return the expected value.");
        }

        private int ExecuteNonQuery(string commandString)
        {
            DbCommand command = searchDAL.DALManager.Database.GetSqlStringCommand(commandString);
            return searchDAL.DALManager.ExecuteNonQuery(command);
        }
        private int ExecuteScalar(string commandString)
        {
            DbCommand command = searchDAL.DALManager.Database.GetSqlStringCommand(commandString);
            return int.Parse(searchDAL.DALManager.ExecuteScalar(command).ToString());
        }
    }
}
