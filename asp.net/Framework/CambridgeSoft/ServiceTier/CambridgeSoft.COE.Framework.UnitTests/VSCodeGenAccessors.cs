//// ------------------------------------------------------------------------------
////<autogenerated>
////        This code was generated by Microsoft Visual Studio Team System 2005.
////
////        Changes to this file may cause incorrect behavior and will be lost if
////        the code is regenerated.
////</autogenerated>
////------------------------------------------------------------------------------
//using Microsoft.VisualStudio.TestTools.UnitTesting;

//namespace CambridgeSoft.COE.Core.Services.UnitTests
//{
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class BaseAccessor {
    
//    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
//    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
//        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
//    }
    
//    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
//            this(null, type) {
//    }
    
//    internal virtual object Target {
//        get {
//            return m_privateObject.Target;
//        }
//    }
    
//    public override string ToString() {
//        return this.Target.ToString();
//    }
    
//    public override bool Equals(object obj) {
//        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
//            obj = ((BaseAccessor)(obj)).Target;
//        }
//        return this.Target.Equals(obj);
//    }
    
//    public override int GetHashCode() {
//        return this.Target.GetHashCode();
//    }
//}


////[System.Diagnostics.DebuggerStepThrough()]
////[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
////internal class CambridgeSoft_COE_Framework_Services_HitList_HitListManagerAccessor : BaseAccessor {
    
////    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Services.HitList.HitListManager));
    
////    internal CambridgeSoft_COE_Framework_Services_HitList_HitListManagerAccessor(global::CambridgeSoft.COE.Framework.Services.HitList.HitListManager target) : 
////            base(target, m_privateType) {
////    }
    
////    internal global::CambridgeSoft.COE.Framework.Services.HitList.HitListDAL hitListDAL {
////        get {
////            global::CambridgeSoft.COE.Framework.Services.HitList.HitListDAL ret = ((global::CambridgeSoft.COE.Framework.Services.HitList.HitListDAL)(m_privateObject.GetField("hitListDAL")));
////            return ret;
////        }
////        set {
////            m_privateObject.SetField("hitListDAL", value);
////        }
////    }
    
//    //internal global::CambridgeSoft.COE.Framework.Common.DALFactory dalFactory {
//    //    get {
//    //        global::CambridgeSoft.COE.Framework.Common.DALFactory ret = ((global::CambridgeSoft.COE.Framework.Common.DALFactory)(m_privateObject.GetField("dalFactory")));
//    //        return ret;
//    //    }
//    //    set {
//    //        m_privateObject.SetField("dalFactory", value);
//    //    }
//    //}
    
//    //internal int GetNewTempHitList(global::CambridgeSoft.COE.Framework.Common.SecurityInfo securityInfo, string appName, global::CambridgeSoft.COE.Framework.TempHitListCreateRequestInfo tempHitListCreateRequestInfo) {
//    //    object[] args = new object[] {
//    //            securityInfo,
//    //            appName,
//    //            tempHitListCreateRequestInfo};
//    //    int ret = ((int)(m_privateObject.Invoke("GetNewTempHitList", new System.Type[] {
//    //                typeof(global::CambridgeSoft.COE.Framework.Common.SecurityInfo),
//    //                typeof(string),
//    //                typeof(global::CambridgeSoft.COE.Framework.TempHitListCreateRequestInfo)}, args)));
//    //    return ret;
//    //}
    
//    //internal void LoadDAL() {
//    //    object[] args = new object[0];
//    //    m_privateObject.Invoke("LoadDAL", new System.Type[0], args);
//    //}
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructureAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStr" +
//            "ucture");
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructureAccessor(object target) : 
//            base(target, m_privateType) {
//    }
    
//    internal bool AbsoluteHitsRel {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("AbsoluteHitsRel")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("AbsoluteHitsRel", value);
//        }
//    }
    
//    internal bool RelativeTetStereo {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("RelativeTetStereo")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("RelativeTetStereo", value);
//        }
//    }
    
//    internal global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor TetrahedralStereo {
//        get {
//            object _ret_val = m_privateObject.GetProperty("TetrahedralStereo");
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor _ret = null;
//            if ((_ret_val != null)) {
//                _ret = new global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor(_ret_val);
//            }
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor ret = _ret;
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("TetrahedralStereo", value);
//        }
//    }
    
//    internal int SimThreshold {
//        get {
//            int ret = ((int)(m_privateObject.GetProperty("SimThreshold")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("SimThreshold", value);
//        }
//    }
    
//    internal bool FeactionCenter {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("FeactionCenter")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("FeactionCenter", value);
//        }
//    }
    
//    internal bool FullSearch {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("FullSearch")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("FullSearch", value);
//        }
//    }
    
//    internal bool Tautometer {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("Tautometer")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("Tautometer", value);
//        }
//    }
    
//    internal bool FragmentsOverlap {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("FragmentsOverlap")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("FragmentsOverlap", value);
//        }
//    }
    
//    internal bool PermitExtraneousFragmentsIfRXN {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("PermitExtraneousFragmentsIfRXN")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("PermitExtraneousFragmentsIfRXN", value);
//        }
//    }
    
//    internal bool PermitExtraneousFragments {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("PermitExtraneousFragments")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("PermitExtraneousFragments", value);
//        }
//    }
    
//    internal bool DoubleBondStereo {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("DoubleBondStereo")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("DoubleBondStereo", value);
//        }
//    }
    
//    internal bool HitAnyChrgeHetero {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("HitAnyChrgeHetero")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("HitAnyChrgeHetero", value);
//        }
//    }
    
//    internal bool Identity {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("Identity")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("Identity", value);
//        }
//    }
    
//    internal bool HitAnyChargeCarbon {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("HitAnyChargeCarbon")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("HitAnyChargeCarbon", value);
//        }
//    }
    
//    internal bool Similar {
//        get {
//            bool ret = ((bool)(m_privateObject.GetProperty("Similar")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("Similar", value);
//        }
//    }
    
//    internal string Format {
//        get {
//            string ret = ((string)(m_privateObject.GetProperty("Format")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("Format", value);
//        }
//    }
    
//    internal bool absoluteHitsRel {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("absoluteHitsRel")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("absoluteHitsRel", value);
//        }
//    }
    
//    internal bool relativeTetStereo {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("relativeTetStereo")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("relativeTetStereo", value);
//        }
//    }
    
//    internal global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor tetrahedralStereo {
//        get {
//            object _ret_val = m_privateObject.GetField("tetrahedralStereo");
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor _ret = null;
//            if ((_ret_val != null)) {
//                _ret = new global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor(_ret_val);
//            }
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor ret = _ret;
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("tetrahedralStereo", value);
//        }
//    }
    
//    internal int simThreshold {
//        get {
//            int ret = ((int)(m_privateObject.GetField("simThreshold")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("simThreshold", value);
//        }
//    }
    
//    internal bool reactionCenter {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("reactionCenter")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("reactionCenter", value);
//        }
//    }
    
//    internal bool fullSearch {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("fullSearch")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("fullSearch", value);
//        }
//    }
    
//    internal bool tautometer {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("tautometer")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("tautometer", value);
//        }
//    }
    
//    internal bool fragmentsOverlap {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("fragmentsOverlap")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("fragmentsOverlap", value);
//        }
//    }
    
//    internal bool permitExtraneousFragmentsIfRXN {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("permitExtraneousFragmentsIfRXN")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("permitExtraneousFragmentsIfRXN", value);
//        }
//    }
    
//    internal bool permitExtraneousFragments {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("permitExtraneousFragments")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("permitExtraneousFragments", value);
//        }
//    }
    
//    internal bool doubleBondStereo {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("doubleBondStereo")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("doubleBondStereo", value);
//        }
//    }
    
//    internal bool hitAnyChrgeHetero {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("hitAnyChrgeHetero")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("hitAnyChrgeHetero", value);
//        }
//    }
    
//    internal bool identity {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("identity")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("identity", value);
//        }
//    }
    
//    internal bool hitAnyChargeCarbon {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("hitAnyChargeCarbon")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("hitAnyChargeCarbon", value);
//        }
//    }
    
//    internal bool similar {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("similar")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("similar", value);
//        }
//    }
    
//    internal string format {
//        get {
//            string ret = ((string)(m_privateObject.GetField("format")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("format", value);
//        }
//    }

//    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure CreatePrivate() {
//        object[] args = new object[0];
//        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStr" +
//                "ucture", new System.Type[0], args);
//        return ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure)(priv_obj.Target));
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                databaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
    
//    internal string BuildOptions() {
//        object[] args = new object[0];
//        string ret = ((string)(m_privateObject.Invoke("BuildOptions", new System.Type[0], args)));
//        return ret;
//    }
    
//    internal string GetStringFromBool(bool value) {
//        object[] args = new object[] {
//                value};
//        string ret = ((string)(m_privateObject.Invoke("GetStringFromBool", new System.Type[] {
//                    typeof(bool)}, args)));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStr" +
//            "ucture+TetrahedralStereoMatching");
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor(object target) : 
//            base(target, m_privateType) {
//    }
    
//    internal static global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor Yes {
//        get {
//            object _ret_val = m_privateType.GetStaticField("Yes");
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor _ret = null;
//            if ((_ret_val != null)) {
//                _ret = new global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor(_ret_val);
//            }
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor ret = _ret;
//            return ret;
//        }
//    }
    
//    internal static global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor No {
//        get {
//            object _ret_val = m_privateType.GetStaticField("No");
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor _ret = null;
//            if ((_ret_val != null)) {
//                _ret = new global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor(_ret_val);
//            }
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor ret = _ret;
//            return ret;
//        }
//    }
    
//    internal static global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor Same {
//        get {
//            object _ret_val = m_privateType.GetStaticField("Same");
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor _ret = null;
//            if ((_ret_val != null)) {
//                _ret = new global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor(_ret_val);
//            }
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor ret = _ret;
//            return ret;
//        }
//    }
    
//    internal static global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor Either {
//        get {
//            object _ret_val = m_privateType.GetStaticField("Either");
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor _ret = null;
//            if ((_ret_val != null)) {
//                _ret = new global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor(_ret_val);
//            }
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor ret = _ret;
//            return ret;
//        }
//    }
    
//    internal static global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor Any {
//        get {
//            object _ret_val = m_privateType.GetStaticField("Any");
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor _ret = null;
//            if ((_ret_val != null)) {
//                _ret = new global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor(_ret_val);
//            }
//            global::CambridgeSoft.COE.Core.Services.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructure_TetrahedralStereoMatchingAccessor ret = _ret;
//            return ret;
//        }
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseMolWeightAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMol" +
//            "Weight");
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseMolWeightAccessor(object target) : 
//            base(target, m_privateType) {
//    }
    
//    internal double MinMass {
//        get {
//            double ret = ((double)(m_privateObject.GetProperty("MinMass")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("MinMass", value);
//        }
//    }
    
//    internal double MaxMass {
//        get {
//            double ret = ((double)(m_privateObject.GetProperty("MaxMass")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetProperty("MaxMass", value);
//        }
//    }
    
//    internal double minMass {
//        get {
//            double ret = ((double)(m_privateObject.GetField("minMass")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("minMass", value);
//        }
//    }
    
//    internal double maxMass {
//        get {
//            double ret = ((double)(m_privateObject.GetField("maxMass")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("maxMass", value);
//        }
//    }
    
//    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight CreatePrivate() {
//        object[] args = new object[0];
//        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMol" +
//                "Weight", new System.Type[0], args);
//        return ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight)(priv_obj.Target));
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                databaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFormulaAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFormulaAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula target) : 
//            base(target, m_privateType) {
//    }
    
//    internal bool fullWordSearch {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("fullWordSearch")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("fullWordSearch", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                databaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseEqualAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseEqualAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual target) : 
//            base(target, m_privateType) {
//    }
    
//    internal bool caseSensitive {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("caseSensitive")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("caseSensitive", value);
//        }
//    }

//    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("trimPosition", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                dataBaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
    
//    internal void TrimValues() {
//        object[] args = new object[0];
//        m_privateObject.Invoke("TrimValues", new System.Type[0], args);
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseGreaterThanAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseGreaterThanAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan target) : 
//            base(target, m_privateType) {
//    }
    
//    internal bool greaterEqual {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("greaterEqual")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("greaterEqual", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                dataBaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseInAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseInAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn target) : 
//            base(target, m_privateType) {
//    }
    
//    internal static string functionString {
//        get {
//            string ret = ((string)(m_privateType.GetStaticField("functionString")));
//            return ret;
//        }
//        set {
//            m_privateType.SetStaticField("functionString", value);
//        }
//    }
    
//    internal static string TXT_VALUE {
//        get {
//            string ret = ((string)(m_privateType.GetStaticField("TXT_VALUE")));
//            return ret;
//        }
//        set {
//            m_privateType.SetStaticField("TXT_VALUE", value);
//        }
//    }
    
//    internal static string INT_VALUE {
//        get {
//            string ret = ((string)(m_privateType.GetStaticField("INT_VALUE")));
//            return ret;
//        }
//        set {
//            m_privateType.SetStaticField("INT_VALUE", value);
//        }
//    }
    
//    internal static string NUM_VALUE {
//        get {
//            string ret = ((string)(m_privateType.GetStaticField("NUM_VALUE")));
//            return ret;
//        }
//        set {
//            m_privateType.SetStaticField("NUM_VALUE", value);
//        }
//    }
    
//    internal int cardinality {
//        get {
//            int ret = ((int)(m_privateObject.GetField("cardinality")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("cardinality", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> queryValues) {
//        object[] args = new object[] {
//                dataBaseType,
//                queryValues};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        queryValues = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
    
//    internal int calculateCardinality(int count) {
//        object[] args = new object[] {
//                count};
//        int ret = ((int)(m_privateObject.Invoke("calculateCardinality", new System.Type[] {
//                    typeof(int)}, args)));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseNotEqualAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseNotEqualAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual target) : 
//            base(target, m_privateType) {
//    }
    
//    internal bool caseSensitive {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("caseSensitive")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("caseSensitive", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                dataBaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLessThanAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLessThanAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan target) : 
//            base(target, m_privateType) {
//    }
    
//    internal bool lessEqual {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("lessEqual")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("lessEqual", value);
//        }
//    }

//    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("trimPosition", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                dataBaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
    
//    internal void TrimValues() {
//        object[] args = new object[0];
//        m_privateObject.Invoke("TrimValues", new System.Type[0], args);
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike target) : 
//            base(target, m_privateType) {
//    }

//    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions wildCardPosition {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("wildCardPosition")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("wildCardPosition", value);
//        }
//    }
    
//    internal bool caseSensitive {
//        get {
//            bool ret = ((bool)(m_privateObject.GetField("caseSensitive")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("caseSensitive", value);
//        }
//    }
    
//    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("trimPosition", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                dataBaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
    
//    internal void TrimValues() {
//        object[] args = new object[0];
//        m_privateObject.Invoke("TrimValues", new System.Type[0], args);
//    }
    
//    internal void SetWildCardPositionsFromValue() {
//        object[] args = new object[0];
//        m_privateObject.Invoke("SetWildCardSearchCriteria.PositionsFromValue", new System.Type[0], args);
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseVerbatimAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseVerbatimAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim target) : 
//            base(target, m_privateType) {
//    }
    
//    internal string verbatim {
//        get {
//            string ret = ((string)(m_privateObject.GetField("verbatim")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("verbatim", value);
//        }
//    }
    
//    internal string parameterHolderCharacter {
//        get {
//            string ret = ((string)(m_privateObject.GetField("parameterHolderCharacter")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("parameterHolderCharacter", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
//        object[] args = new object[] {
//                databaseType,
//                values};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
//                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
//        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
//        return ret;
//    }
    
//    internal int replaceNextParamterHolder(ref string verbatim, int currentPosition, int nextParam, global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType) {
//        object[] args = new object[] {
//                verbatim,
//                currentPosition,
//                nextParam,
//                databaseType};
//        int ret = ((int)(m_privateObject.Invoke("replaceNextParamterHolder", new System.Type[] {
//                    typeof(string).MakeByRefType(),
//                    typeof(int),
//                    typeof(int),
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
//        verbatim = ((string)(args[0]));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseCaseAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseCaseAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase target) : 
//            base(target, m_privateType) {
//    }
    
//    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem clause {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)(m_privateObject.GetField("clause")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("clause", value);
//        }
//    }
    
//    internal global::System.Data.SqlDbType inputType {
//        get {
//            global::System.Data.SqlDbType ret = ((global::System.Data.SqlDbType)(m_privateObject.GetField("inputType")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("inputType", value);
//        }
//    }
    
//    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem defaultItem {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)(m_privateObject.GetField("defaultItem")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("defaultItem", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
//        object[] args = new object[] {
//                dataBaseType};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseFormulaAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseFormulaAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula target) : 
//            base(target, m_privateType) {
//    }
    
//    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field dataField {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)(m_privateObject.GetField("dataField")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("dataField", value);
//        }
//    }
    
//    internal string cartridgeSchema {
//        get {
//            string ret = ((string)(m_privateObject.GetField("cartridgeSchema")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("cartridgeSchema", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
//        object[] args = new object[] {
//                dataBaseType};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseMolWeightAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseM" +
//            "olWeight");
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseMolWeightAccessor(object target) : 
//            base(target, m_privateType) {
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
//        object[] args = new object[] {
//                dataBaseType};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
//        return ret;
//    }
    
//    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem CreateInstance(global::System.Xml.XmlNode resultsXmlNode, global::CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup dvnLookup) {
//        object[] args = new object[] {
//                resultsXmlNode,
//                dvnLookup};
//        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)(m_privateObject.Invoke("CreateInstance", new System.Type[] {
//                    typeof(global::System.Xml.XmlNode),
//                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)}, args)));
//        return ret;
//    }
    
//    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem CreatePrivate() {
//        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseM" +
//                "olWeight", new object[0]);
//        return ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)(priv_obj.Target));
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseConcatenationAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseConcatenationAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation target) : 
//            base(target, m_privateType) {
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
//        object[] args = new object[] {
//                dataBaseType};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseAvgAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseAvgAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg target) : 
//            base(target, m_privateType) {
//    }
    
//    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field fieldName {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)(m_privateObject.GetField("fieldName")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("fieldName", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
//        object[] args = new object[] {
//                dataBaseType};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
//        return ret;
//    }
//}
//[System.Diagnostics.DebuggerStepThrough()]
//[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
//internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseMaxAccessor : BaseAccessor {
    
//    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax));
    
//    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseMaxAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax target) : 
//            base(target, m_privateType) {
//    }
    
//    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field fieldName {
//        get {
//            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)(m_privateObject.GetField("fieldName")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("fieldName", value);
//        }
//    }
    
//    internal int fieldId {
//        get {
//            int ret = ((int)(m_privateObject.GetField("fieldId")));
//            return ret;
//        }
//        set {
//            m_privateObject.SetField("fieldId", value);
//        }
//    }
    
//    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
//        object[] args = new object[] {
//                dataBaseType};
//        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
//                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
//        return ret;
//    }
//}

namespace CambridgeSoft.COE.Framework.UnitTests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COEFormService_DALAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COEFormService.DAL");
    
    internal CambridgeSoft_COE_Framework_COEFormService_DALAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string _coeFormTableName {
        get {
            string ret = ((string)(m_privateObject.GetField("_coeFormTableName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_coeFormTableName", value);
        }
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.DALBase CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COEFormService.DAL", new System.Type[0], args);
        return ((global::CambridgeSoft.COE.Framework.Common.DALBase)(priv_obj.Target));
    }
    
    internal void SetServiceSpecificVariables() {
        object[] args = new object[0];
        m_privateObject.Invoke("SetServiceSpecificVariables", new System.Type[0], args);
    }
    
    internal void CreateCOEFormTable() {
        object[] args = new object[0];
        m_privateObject.Invoke("CreateCOEFormTable", new System.Type[0], args);
    }
    
    internal int GetNewID() {
        object[] args = new object[0];
        int ret = ((int)(m_privateObject.Invoke("GetNewID", new System.Type[0], args)));
        return ret;
    }
    
    internal int Insert(string name, string description, string isPublic, string userId, string formgroup, string serializedCOEForm) {
        object[] args = new object[] {
                name,
                description,
                isPublic,
                userId,
                formgroup,
                serializedCOEForm};
        int ret = ((int)(m_privateObject.Invoke("Insert", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal void Delete(int id) {
        object[] args = new object[] {
                id};
        m_privateObject.Invoke("Delete", new System.Type[] {
                    typeof(int)}, args);
    }
    
    internal void DeleteAll() {
        object[] args = new object[0];
        m_privateObject.Invoke("DeleteAll", new System.Type[0], args);
    }
    
    internal void DeleteUserDataView(string userName) {
        object[] args = new object[] {
                userName};
        m_privateObject.Invoke("DeleteUserDataView", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal global::Csla.Data.SafeDataReader GetUserDataViews(string userName) {
        object[] args = new object[] {
                userName};
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetUserDataViews", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetAll(bool isPublic) {
        object[] args = new object[] {
                isPublic};
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetAll", new System.Type[] {
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetAll() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetAll", new System.Type[0], args)));
        return ret;
    }
    
    internal void Update(int id, string serializedCOEForm, string name, string description, string isPublic) {
        object[] args = new object[] {
                id,
                serializedCOEForm,
                name,
                description,
                isPublic};
        m_privateObject.Invoke("Update", new System.Type[] {
                    typeof(int),
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(string)}, args);
    }
    
    internal global::Csla.Data.SafeDataReader Get(int id) {
        object[] args = new object[] {
                id};
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("Get", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_DataReaderAdapterAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.COESearchService.DataReaderAdapter));
    
    internal CambridgeSoft_COE_Framework_COESearchService_DataReaderAdapterAccessor(global::CambridgeSoft.COE.Framework.COESearchService.DataReaderAdapter target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(global::System.Data.DataRow dataRow, global::System.Data.IDbCommand command, global::System.Data.StatementType statementType, global::System.Data.Common.DataTableMapping tableMapping) {
        object[] args = new object[] {
                dataRow,
                command,
                statementType,
                tableMapping};
        global::System.Data.Common.RowUpdatedEventArgs ret = ((global::System.Data.Common.RowUpdatedEventArgs)(m_privateObject.Invoke("CreateRowUpdatedEvent", new System.Type[] {
                    typeof(global::System.Data.DataRow),
                    typeof(global::System.Data.IDbCommand),
                    typeof(global::System.Data.StatementType),
                    typeof(global::System.Data.Common.DataTableMapping)}, args)));
        return ret;
    }
    
    internal global::System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(global::System.Data.DataRow dataRow, global::System.Data.IDbCommand command, global::System.Data.StatementType statementType, global::System.Data.Common.DataTableMapping tableMapping) {
        object[] args = new object[] {
                dataRow,
                command,
                statementType,
                tableMapping};
        global::System.Data.Common.RowUpdatingEventArgs ret = ((global::System.Data.Common.RowUpdatingEventArgs)(m_privateObject.Invoke("CreateRowUpdatingEvent", new System.Type[] {
                    typeof(global::System.Data.DataRow),
                    typeof(global::System.Data.IDbCommand),
                    typeof(global::System.Data.StatementType),
                    typeof(global::System.Data.Common.DataTableMapping)}, args)));
        return ret;
    }
    
    internal void OnRowUpdated(global::System.Data.Common.RowUpdatedEventArgs value) {
        object[] args = new object[] {
                value};
        m_privateObject.Invoke("OnRowUpdated", new System.Type[] {
                    typeof(global::System.Data.Common.RowUpdatedEventArgs)}, args);
    }
    
    internal void OnRowUpdating(global::System.Data.Common.RowUpdatingEventArgs value) {
        object[] args = new object[] {
                value};
        m_privateObject.Invoke("OnRowUpdating", new System.Type[] {
                    typeof(global::System.Data.Common.RowUpdatingEventArgs)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_COESearch_DoSearchCommandAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.COESearch+DoSearchCommand");
    
    internal CambridgeSoft_COE_Framework_COESearchService_COESearch_DoSearchCommandAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.COESearchService.SearchManager _searchManager {
        get {
            global::CambridgeSoft.COE.Framework.COESearchService.SearchManager ret = ((global::CambridgeSoft.COE.Framework.COESearchService.SearchManager)(m_privateObject.GetField("_searchManager")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchManager", value);
        }
    }
    
    internal string _appName {
        get {
            string ret = ((string)(m_privateObject.GetField("_appName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_appName", value);
        }
    }
    
    internal string _serviceName {
        get {
            string ret = ((string)(m_privateObject.GetField("_serviceName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_serviceName", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria _searchCriteria {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria)(m_privateObject.GetField("_searchCriteria")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchCriteria", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.ResultsCriteria _resultsCriteria {
        get {
            global::CambridgeSoft.COE.Framework.Common.ResultsCriteria ret = ((global::CambridgeSoft.COE.Framework.Common.ResultsCriteria)(m_privateObject.GetField("_resultsCriteria")));
            return ret;
        }
        set {
            m_privateObject.SetField("_resultsCriteria", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SecurityInfo _securityInfo {
        get {
            global::CambridgeSoft.COE.Framework.Common.SecurityInfo ret = ((global::CambridgeSoft.COE.Framework.Common.SecurityInfo)(m_privateObject.GetField("_securityInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("_securityInfo", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.PagingInfo _pagingInfo {
        get {
            global::CambridgeSoft.COE.Framework.Common.PagingInfo ret = ((global::CambridgeSoft.COE.Framework.Common.PagingInfo)(m_privateObject.GetField("_pagingInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("_pagingInfo", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.COEDataView _dataView {
        get {
            global::CambridgeSoft.COE.Framework.Common.COEDataView ret = ((global::CambridgeSoft.COE.Framework.Common.COEDataView)(m_privateObject.GetField("_dataView")));
            return ret;
        }
        set {
            m_privateObject.SetField("_dataView", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchResponse _searchResponse {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchResponse ret = ((global::CambridgeSoft.COE.Framework.Common.SearchResponse)(m_privateObject.GetField("_searchResponse")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchResponse", value);
        }
    }
    
    internal bool _searchResults {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_searchResults")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchResults", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchResponse SearchResponse {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchResponse ret = ((global::CambridgeSoft.COE.Framework.Common.SearchResponse)(m_privateObject.GetProperty("SearchResponse")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("SearchResponse", value);
        }
    }
    
    internal static global::Csla.CommandBase CreatePrivate(string appName, global::CambridgeSoft.COE.Framework.Common.SearchCriteria searchCriteria, global::CambridgeSoft.COE.Framework.Common.ResultsCriteria resultsCriteria, global::CambridgeSoft.COE.Framework.Common.PagingInfo pagingInfo, global::CambridgeSoft.COE.Framework.Common.COEDataView dataView) {
        object[] args = new object[] {
                appName,
                searchCriteria,
                resultsCriteria,
                pagingInfo,
                dataView};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.COESearch+DoSearchCommand", new System.Type[] {
                    typeof(string),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria),
                    typeof(global::CambridgeSoft.COE.Framework.Common.ResultsCriteria),
                    typeof(global::CambridgeSoft.COE.Framework.Common.PagingInfo),
                    typeof(global::CambridgeSoft.COE.Framework.Common.COEDataView)}, args);
        return ((global::Csla.CommandBase)(priv_obj.Target));
    }
    
    internal void DataPortal_Execute() {
        object[] args = new object[0];
        m_privateObject.Invoke("DataPortal_Execute", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_COESearch_GetDataCommandAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.COESearch+GetDataCommand");
    
    internal CambridgeSoft_COE_Framework_COESearchService_COESearch_GetDataCommandAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.COESearchService.SearchManager _searchManager {
        get {
            global::CambridgeSoft.COE.Framework.COESearchService.SearchManager ret = ((global::CambridgeSoft.COE.Framework.COESearchService.SearchManager)(m_privateObject.GetField("_searchManager")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchManager", value);
        }
    }
    
    internal string _appName {
        get {
            string ret = ((string)(m_privateObject.GetField("_appName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_appName", value);
        }
    }
    
    internal string _serviceName {
        get {
            string ret = ((string)(m_privateObject.GetField("_serviceName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_serviceName", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.ResultsCriteria _resultsCriteria {
        get {
            global::CambridgeSoft.COE.Framework.Common.ResultsCriteria ret = ((global::CambridgeSoft.COE.Framework.Common.ResultsCriteria)(m_privateObject.GetField("_resultsCriteria")));
            return ret;
        }
        set {
            m_privateObject.SetField("_resultsCriteria", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SecurityInfo _securityInfo {
        get {
            global::CambridgeSoft.COE.Framework.Common.SecurityInfo ret = ((global::CambridgeSoft.COE.Framework.Common.SecurityInfo)(m_privateObject.GetField("_securityInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("_securityInfo", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.PagingInfo _pagingInfo {
        get {
            global::CambridgeSoft.COE.Framework.Common.PagingInfo ret = ((global::CambridgeSoft.COE.Framework.Common.PagingInfo)(m_privateObject.GetField("_pagingInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("_pagingInfo", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.COEDataView _dataView {
        get {
            global::CambridgeSoft.COE.Framework.Common.COEDataView ret = ((global::CambridgeSoft.COE.Framework.Common.COEDataView)(m_privateObject.GetField("_dataView")));
            return ret;
        }
        set {
            m_privateObject.SetField("_dataView", value);
        }
    }
    
    internal global::System.Data.DataSet _resultsDataSet {
        get {
            global::System.Data.DataSet ret = ((global::System.Data.DataSet)(m_privateObject.GetField("_resultsDataSet")));
            return ret;
        }
        set {
            m_privateObject.SetField("_resultsDataSet", value);
        }
    }
    
    internal bool _searchResults {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_searchResults")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchResults", value);
        }
    }
    
    internal global::System.Data.DataSet ResultsDataSet {
        get {
            global::System.Data.DataSet ret = ((global::System.Data.DataSet)(m_privateObject.GetProperty("ResultsDataSet")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("ResultsDataSet", value);
        }
    }
    
    internal static global::Csla.CommandBase CreatePrivate(string appName, global::CambridgeSoft.COE.Framework.Common.ResultsCriteria resultsCriteria, global::CambridgeSoft.COE.Framework.Common.PagingInfo pagingInfo, global::CambridgeSoft.COE.Framework.Common.COEDataView dataView) {
        object[] args = new object[] {
                appName,
                resultsCriteria,
                pagingInfo,
                dataView};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.COESearch+GetDataCommand", new System.Type[] {
                    typeof(string),
                    typeof(global::CambridgeSoft.COE.Framework.Common.ResultsCriteria),
                    typeof(global::CambridgeSoft.COE.Framework.Common.PagingInfo),
                    typeof(global::CambridgeSoft.COE.Framework.Common.COEDataView)}, args);
        return ((global::Csla.CommandBase)(priv_obj.Target));
    }
    
    internal void DataPortal_Execute() {
        object[] args = new object[0];
        m_privateObject.Invoke("DataPortal_Execute", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_COESearch_GetHitListCommandAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.COESearch+GetHitListCommand");
    
    internal CambridgeSoft_COE_Framework_COESearchService_COESearch_GetHitListCommandAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.COESearchService.SearchManager _searchManager {
        get {
            global::CambridgeSoft.COE.Framework.COESearchService.SearchManager ret = ((global::CambridgeSoft.COE.Framework.COESearchService.SearchManager)(m_privateObject.GetField("_searchManager")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchManager", value);
        }
    }
    
    internal string _appName {
        get {
            string ret = ((string)(m_privateObject.GetField("_appName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_appName", value);
        }
    }
    
    internal string _serviceName {
        get {
            string ret = ((string)(m_privateObject.GetField("_serviceName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_serviceName", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria _searchCriteria {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria)(m_privateObject.GetField("_searchCriteria")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchCriteria", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.ResultsCriteria _resultsCriteria {
        get {
            global::CambridgeSoft.COE.Framework.Common.ResultsCriteria ret = ((global::CambridgeSoft.COE.Framework.Common.ResultsCriteria)(m_privateObject.GetField("_resultsCriteria")));
            return ret;
        }
        set {
            m_privateObject.SetField("_resultsCriteria", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SecurityInfo _securityInfo {
        get {
            global::CambridgeSoft.COE.Framework.Common.SecurityInfo ret = ((global::CambridgeSoft.COE.Framework.Common.SecurityInfo)(m_privateObject.GetField("_securityInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("_securityInfo", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.PagingInfo _pagingInfo {
        get {
            global::CambridgeSoft.COE.Framework.Common.PagingInfo ret = ((global::CambridgeSoft.COE.Framework.Common.PagingInfo)(m_privateObject.GetField("_pagingInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("_pagingInfo", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.COEDataView _dataView {
        get {
            global::CambridgeSoft.COE.Framework.Common.COEDataView ret = ((global::CambridgeSoft.COE.Framework.Common.COEDataView)(m_privateObject.GetField("_dataView")));
            return ret;
        }
        set {
            m_privateObject.SetField("_dataView", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.HitListInfo _hitListInfo {
        get {
            global::CambridgeSoft.COE.Framework.Common.HitListInfo ret = ((global::CambridgeSoft.COE.Framework.Common.HitListInfo)(m_privateObject.GetField("_hitListInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("_hitListInfo", value);
        }
    }
    
    internal bool _searchResults {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_searchResults")));
            return ret;
        }
        set {
            m_privateObject.SetField("_searchResults", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.HitListInfo HitListInfo {
        get {
            global::CambridgeSoft.COE.Framework.Common.HitListInfo ret = ((global::CambridgeSoft.COE.Framework.Common.HitListInfo)(m_privateObject.GetProperty("HitListInfo")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("HitListInfo", value);
        }
    }
    
    internal static global::Csla.CommandBase CreatePrivate(string appName, global::CambridgeSoft.COE.Framework.Common.SearchCriteria searchCriteria, global::CambridgeSoft.COE.Framework.Common.COEDataView dataView) {
        object[] args = new object[] {
                appName,
                searchCriteria,
                dataView};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.COESearch+GetHitListCommand", new System.Type[] {
                    typeof(string),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria),
                    typeof(global::CambridgeSoft.COE.Framework.Common.COEDataView)}, args);
        return ((global::Csla.CommandBase)(priv_obj.Target));
    }
    
    internal void DataPortal_Execute() {
        object[] args = new object[0];
        m_privateObject.Invoke("DataPortal_Execute", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_KeepAliveHolderAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder));
    
    internal CambridgeSoft_COE_Framework_COESearchService_KeepAliveHolderAccessor(global::CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder target) : 
            base(target, m_privateType) {
    }
    
    internal global::Oracle.DataAccess.Client.OracleConnection connection {
        get {
            global::Oracle.DataAccess.Client.OracleConnection ret = ((global::Oracle.DataAccess.Client.OracleConnection)(m_privateObject.GetField("connection")));
            return ret;
        }
        set {
            m_privateObject.SetField("connection", value);
        }
    }
    
    internal global::Oracle.DataAccess.Types.OracleRefCursor refCursor {
        get {
            global::Oracle.DataAccess.Types.OracleRefCursor ret = ((global::Oracle.DataAccess.Types.OracleRefCursor)(m_privateObject.GetField("refCursor")));
            return ret;
        }
        set {
            m_privateObject.SetField("refCursor", value);
        }
    }
    
    internal string key {
        get {
            string ret = ((string)(m_privateObject.GetField("key")));
            return ret;
        }
        set {
            m_privateObject.SetField("key", value);
        }
    }
    
    internal global::System.Timers.Timer timer {
        get {
            global::System.Timers.Timer ret = ((global::System.Timers.Timer)(m_privateObject.GetField("timer")));
            return ret;
        }
        set {
            m_privateObject.SetField("timer", value);
        }
    }
    
    internal bool dispose {
        get {
            bool ret = ((bool)(m_privateObject.GetField("dispose")));
            return ret;
        }
        set {
            m_privateObject.SetField("dispose", value);
        }
    }
    
    internal long lastRecord {
        get {
            long ret = ((long)(m_privateObject.GetField("lastRecord")));
            return ret;
        }
        set {
            m_privateObject.SetField("lastRecord", value);
        }
    }
    
    internal bool timerPolicy {
        get {
            bool ret = ((bool)(m_privateObject.GetField("timerPolicy")));
            return ret;
        }
        set {
            m_privateObject.SetField("timerPolicy", value);
        }
    }
    
    internal void timer_Elapsed(object sender, global::System.Timers.ElapsedEventArgs e) {
        object[] args = new object[] {
                sender,
                e};
        m_privateObject.Invoke("timer_Elapsed", new System.Type[] {
                    typeof(object),
                    typeof(global::System.Timers.ElapsedEventArgs)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_Processors_SearchProcessorAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.SearchProcessor");
    
    internal CambridgeSoft_COE_Framework_COESearchService_Processors_SearchProcessorAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.COESearchService.ChemImplementations chemImpl {
        get {
            global::CambridgeSoft.COE.Framework.COESearchService.ChemImplementations ret = ((global::CambridgeSoft.COE.Framework.COESearchService.ChemImplementations)(m_privateObject.GetField("chemImpl")));
            return ret;
        }
        set {
            m_privateObject.SetField("chemImpl", value);
        }
    }
    
    internal void PreProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PreProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem Process() {
        object[] args = new object[0];
        global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.Invoke("Process", new System.Type[0], args)));
        return ret;
    }
    
    internal void PostProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PostProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
    
    internal static object CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.SearchProcessor", new object[0]);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_Processors_FormulaProcessorAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor");
    
    internal CambridgeSoft_COE_Framework_COESearchService_Processors_FormulaProcessorAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.Xml.XmlNode xmlNode {
        get {
            global::System.Xml.XmlNode ret = ((global::System.Xml.XmlNode)(m_privateObject.GetField("xmlNode")));
            return ret;
        }
        set {
            m_privateObject.SetField("xmlNode", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem item {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.GetField("item")));
            return ret;
        }
        set {
            m_privateObject.SetField("item", value);
        }
    }
    
    internal static object CreatePrivate(global::System.Xml.XmlNode xmlNode) {
        object[] args = new object[] {
                xmlNode};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor", new System.Type[] {
                    typeof(global::System.Xml.XmlNode)}, args);
        return priv_obj.Target;
    }
    
    internal static object CreatePrivate(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem item) {
        object[] args = new object[] {
                item};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)}, args);
        return priv_obj.Target;
    }
    
    internal void PreProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PreProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem Process() {
        object[] args = new object[0];
        global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.Invoke("Process", new System.Type[0], args)));
        return ret;
    }
    
    internal void PostProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PostProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_Processors_GenericProcessorAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor");
    
    internal CambridgeSoft_COE_Framework_COESearchService_Processors_GenericProcessorAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.Xml.XmlNode xmlNode {
        get {
            global::System.Xml.XmlNode ret = ((global::System.Xml.XmlNode)(m_privateObject.GetField("xmlNode")));
            return ret;
        }
        set {
            m_privateObject.SetField("xmlNode", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem item {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.GetField("item")));
            return ret;
        }
        set {
            m_privateObject.SetField("item", value);
        }
    }
    
    internal static object CreatePrivate(global::System.Xml.XmlNode xmlNode) {
        object[] args = new object[] {
                xmlNode};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor", new System.Type[] {
                    typeof(global::System.Xml.XmlNode)}, args);
        return priv_obj.Target;
    }
    
    internal static object CreatePrivate(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem item) {
        object[] args = new object[] {
                item};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)}, args);
        return priv_obj.Target;
    }
    
    internal void PreProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PreProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem Process() {
        object[] args = new object[0];
        global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.Invoke("Process", new System.Type[0], args)));
        return ret;
    }
    
    internal void PostProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PostProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_Processors_MolWeightProcessorAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor");
    
    internal CambridgeSoft_COE_Framework_COESearchService_Processors_MolWeightProcessorAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.Xml.XmlNode xmlNode {
        get {
            global::System.Xml.XmlNode ret = ((global::System.Xml.XmlNode)(m_privateObject.GetField("xmlNode")));
            return ret;
        }
        set {
            m_privateObject.SetField("xmlNode", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem item {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.GetField("item")));
            return ret;
        }
        set {
            m_privateObject.SetField("item", value);
        }
    }
    
    internal static object CreatePrivate(global::System.Xml.XmlNode xmlNode) {
        object[] args = new object[] {
                xmlNode};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor", new System.Type[] {
                    typeof(global::System.Xml.XmlNode)}, args);
        return priv_obj.Target;
    }
    
    internal static object CreatePrivate(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem item) {
        object[] args = new object[] {
                item};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)}, args);
        return priv_obj.Target;
    }
    
    internal void PreProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PreProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem Process() {
        object[] args = new object[0];
        global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.Invoke("Process", new System.Type[0], args)));
        return ret;
    }
    
    internal void PostProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PostProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESearchService_Processors_StructureProcessorAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor");
    
    internal CambridgeSoft_COE_Framework_COESearchService_Processors_StructureProcessorAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.Xml.XmlNode xmlNode {
        get {
            global::System.Xml.XmlNode ret = ((global::System.Xml.XmlNode)(m_privateObject.GetField("xmlNode")));
            return ret;
        }
        set {
            m_privateObject.SetField("xmlNode", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem item {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.GetField("item")));
            return ret;
        }
        set {
            m_privateObject.SetField("item", value);
        }
    }
    
    internal int primaryKey {
        get {
            int ret = ((int)(m_privateObject.GetField("primaryKey")));
            return ret;
        }
        set {
            m_privateObject.SetField("primaryKey", value);
        }
    }
    
    internal string tempTableName {
        get {
            string ret = ((string)(m_privateObject.GetField("tempTableName")));
            return ret;
        }
        set {
            m_privateObject.SetField("tempTableName", value);
        }
    }
    
    internal string TempTableName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("TempTableName")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("TempTableName", value);
        }
    }
    
    internal static object CreatePrivate(global::System.Xml.XmlNode xmlNode) {
        object[] args = new object[] {
                xmlNode};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor", new System.Type[] {
                    typeof(global::System.Xml.XmlNode)}, args);
        return priv_obj.Target;
    }
    
    internal static object CreatePrivate(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem item) {
        object[] args = new object[] {
                item};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)}, args);
        return priv_obj.Target;
    }
    
    internal void PreProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PreProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem Process() {
        object[] args = new object[0];
        global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)(m_privateObject.Invoke("Process", new System.Type[0], args)));
        return ret;
    }
    
    internal void PostProcess(global::CambridgeSoft.COE.Framework.COESearchService.DAL searchDAL) {
        object[] args = new object[] {
                searchDAL};
        m_privateObject.Invoke("PostProcess", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.COESearchService.DAL)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseAvgAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseAvgAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field dataField {
        get {
            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)(m_privateObject.GetField("dataField")));
            return ret;
        }
        set {
            m_privateObject.SetField("dataField", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseCaseAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseCaseAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem clause {
        get {
            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)(m_privateObject.GetField("clause")));
            return ret;
        }
        set {
            m_privateObject.SetField("clause", value);
        }
    }
    
    internal global::System.Data.DbType inputType {
        get {
            global::System.Data.DbType ret = ((global::System.Data.DbType)(m_privateObject.GetField("inputType")));
            return ret;
        }
        set {
            m_privateObject.SetField("inputType", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem defaultItem {
        get {
            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)(m_privateObject.GetField("defaultItem")));
            return ret;
        }
        set {
            m_privateObject.SetField("defaultItem", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseConcatenationAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseConcatenationAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation target) : 
            base(target, m_privateType) {
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseFormulaAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseFormulaAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field dataField {
        get {
            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)(m_privateObject.GetField("dataField")));
            return ret;
        }
        set {
            m_privateObject.SetField("dataField", value);
        }
    }
    
    internal string cartridgeSchema {
        get {
            string ret = ((string)(m_privateObject.GetField("cartridgeSchema")));
            return ret;
        }
        set {
            m_privateObject.SetField("cartridgeSchema", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseMaxAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseMaxAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field fieldName {
        get {
            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)(m_privateObject.GetField("fieldName")));
            return ret;
        }
        set {
            m_privateObject.SetField("fieldName", value);
        }
    }
    
    internal int fieldId {
        get {
            int ret = ((int)(m_privateObject.GetField("fieldId")));
            return ret;
        }
        set {
            m_privateObject.SetField("fieldId", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseMolWeightAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_SelectItems_SelectClauseMolWeightAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field dataField {
        get {
            global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)(m_privateObject.GetField("dataField")));
            return ret;
        }
        set {
            m_privateObject.SetField("dataField", value);
        }
    }
    
    internal string cartridgeSchema {
        get {
            string ret = ((string)(m_privateObject.GetField("cartridgeSchema")));
            return ret;
        }
        set {
            m_privateObject.SetField("cartridgeSchema", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFormulaAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFormulaAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula target) : 
            base(target, m_privateType) {
    }
    
    internal bool fullWordSearch {
        get {
            bool ret = ((bool)(m_privateObject.GetField("fullWordSearch")));
            return ret;
        }
        set {
            m_privateObject.SetField("fullWordSearch", value);
        }
    }
    
    internal string cartridgeSchema {
        get {
            string ret = ((string)(m_privateObject.GetField("cartridgeSchema")));
            return ret;
        }
        set {
            m_privateObject.SetField("cartridgeSchema", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                databaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseGreaterThanAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseGreaterThanAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan target) : 
            base(target, m_privateType) {
    }
    
    internal bool greaterEqual {
        get {
            bool ret = ((bool)(m_privateObject.GetField("greaterEqual")));
            return ret;
        }
        set {
            m_privateObject.SetField("greaterEqual", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
            return ret;
        }
        set {
            m_privateObject.SetField("trimPosition", value);
        }
    }
    
    internal bool normalizeChemicalName {
        get {
            bool ret = ((bool)(m_privateObject.GetField("normalizeChemicalName")));
            return ret;
        }
        set {
            m_privateObject.SetField("normalizeChemicalName", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                dataBaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
    
    internal string GetStartingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetStartingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetEndingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetEndingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseInAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseInAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
            return ret;
        }
        set {
            m_privateObject.SetField("trimPosition", value);
        }
    }
    
    internal bool normalizeChemicalName {
        get {
            bool ret = ((bool)(m_privateObject.GetField("normalizeChemicalName")));
            return ret;
        }
        set {
            m_privateObject.SetField("normalizeChemicalName", value);
        }
    }
    
    internal static string functionString {
        get {
            string ret = ((string)(m_privateType.GetStaticField("functionString")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("functionString", value);
        }
    }
    
    internal static string TXT_VALUE {
        get {
            string ret = ((string)(m_privateType.GetStaticField("TXT_VALUE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("TXT_VALUE", value);
        }
    }
    
    internal static string INT_VALUE {
        get {
            string ret = ((string)(m_privateType.GetStaticField("INT_VALUE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("INT_VALUE", value);
        }
    }
    
    internal static string NUM_VALUE {
        get {
            string ret = ((string)(m_privateType.GetStaticField("NUM_VALUE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NUM_VALUE", value);
        }
    }
    
    internal int cardinality {
        get {
            int ret = ((int)(m_privateObject.GetField("cardinality")));
            return ret;
        }
        set {
            m_privateObject.SetField("cardinality", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> queryValues) {
        object[] args = new object[] {
                dataBaseType,
                queryValues};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        queryValues = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
    
    internal int CalculateCardinality(int count) {
        object[] args = new object[] {
                count};
        int ret = ((int)(m_privateObject.Invoke("CalculateCardinality", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLessThanAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLessThanAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan target) : 
            base(target, m_privateType) {
    }
    
    internal bool lessEqual {
        get {
            bool ret = ((bool)(m_privateObject.GetField("lessEqual")));
            return ret;
        }
        set {
            m_privateObject.SetField("lessEqual", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
            return ret;
        }
        set {
            m_privateObject.SetField("trimPosition", value);
        }
    }
    
    internal bool normalizeChemicalName {
        get {
            bool ret = ((bool)(m_privateObject.GetField("normalizeChemicalName")));
            return ret;
        }
        set {
            m_privateObject.SetField("normalizeChemicalName", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                dataBaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
    
    internal string GetStartingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetStartingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetEndingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetEndingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseNotEqualAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseNotEqualAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual target) : 
            base(target, m_privateType) {
    }
    
    internal bool caseSensitive {
        get {
            bool ret = ((bool)(m_privateObject.GetField("caseSensitive")));
            return ret;
        }
        set {
            m_privateObject.SetField("caseSensitive", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
            return ret;
        }
        set {
            m_privateObject.SetField("trimPosition", value);
        }
    }
    
    internal bool normalizeChemicalName {
        get {
            bool ret = ((bool)(m_privateObject.GetField("normalizeChemicalName")));
            return ret;
        }
        set {
            m_privateObject.SetField("normalizeChemicalName", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                dataBaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
    
    internal string getStartingCaseStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("getStartingCaseStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string getEndingCaseStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("getEndingCaseStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string getStartingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("getStartingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string getEndingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("getEndingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseMolWeightAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseMolWeightAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight target) : 
            base(target, m_privateType) {
    }
    
    internal string cartridgeSchema {
        get {
            string ret = ((string)(m_privateObject.GetField("cartridgeSchema")));
            return ret;
        }
        set {
            m_privateObject.SetField("cartridgeSchema", value);
        }
    }
    
    internal double minMass {
        get {
            double ret = ((double)(m_privateObject.GetField("minMass")));
            return ret;
        }
        set {
            m_privateObject.SetField("minMass", value);
        }
    }
    
    internal double maxMass {
        get {
            double ret = ((double)(m_privateObject.GetField("maxMass")));
            return ret;
        }
        set {
            m_privateObject.SetField("maxMass", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                databaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructureAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseStructureAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure target) : 
            base(target, m_privateType) {
    }
    
    internal string cartridgeSchema {
        get {
            string ret = ((string)(m_privateObject.GetField("cartridgeSchema")));
            return ret;
        }
        set {
            m_privateObject.SetField("cartridgeSchema", value);
        }
    }
    
    internal bool absoluteHitsRel {
        get {
            bool ret = ((bool)(m_privateObject.GetField("absoluteHitsRel")));
            return ret;
        }
        set {
            m_privateObject.SetField("absoluteHitsRel", value);
        }
    }
    
    internal bool relativeTetStereo {
        get {
            bool ret = ((bool)(m_privateObject.GetField("relativeTetStereo")));
            return ret;
        }
        set {
            m_privateObject.SetField("relativeTetStereo", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching tetrahedralStereo {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching)(m_privateObject.GetField("tetrahedralStereo")));
            return ret;
        }
        set {
            m_privateObject.SetField("tetrahedralStereo", value);
        }
    }
    
    internal int simThreshold {
        get {
            int ret = ((int)(m_privateObject.GetField("simThreshold")));
            return ret;
        }
        set {
            m_privateObject.SetField("simThreshold", value);
        }
    }
    
    internal bool reactionCenter {
        get {
            bool ret = ((bool)(m_privateObject.GetField("reactionCenter")));
            return ret;
        }
        set {
            m_privateObject.SetField("reactionCenter", value);
        }
    }
    
    internal bool fullSearch {
        get {
            bool ret = ((bool)(m_privateObject.GetField("fullSearch")));
            return ret;
        }
        set {
            m_privateObject.SetField("fullSearch", value);
        }
    }
    
    internal bool tautometer {
        get {
            bool ret = ((bool)(m_privateObject.GetField("tautometer")));
            return ret;
        }
        set {
            m_privateObject.SetField("tautometer", value);
        }
    }
    
    internal bool fragmentsOverlap {
        get {
            bool ret = ((bool)(m_privateObject.GetField("fragmentsOverlap")));
            return ret;
        }
        set {
            m_privateObject.SetField("fragmentsOverlap", value);
        }
    }
    
    internal bool permitExtraneousFragmentsIfRXN {
        get {
            bool ret = ((bool)(m_privateObject.GetField("permitExtraneousFragmentsIfRXN")));
            return ret;
        }
        set {
            m_privateObject.SetField("permitExtraneousFragmentsIfRXN", value);
        }
    }
    
    internal bool permitExtraneousFragments {
        get {
            bool ret = ((bool)(m_privateObject.GetField("permitExtraneousFragments")));
            return ret;
        }
        set {
            m_privateObject.SetField("permitExtraneousFragments", value);
        }
    }
    
    internal bool doubleBondStereo {
        get {
            bool ret = ((bool)(m_privateObject.GetField("doubleBondStereo")));
            return ret;
        }
        set {
            m_privateObject.SetField("doubleBondStereo", value);
        }
    }
    
    internal bool hitAnyChargeHetero {
        get {
            bool ret = ((bool)(m_privateObject.GetField("hitAnyChargeHetero")));
            return ret;
        }
        set {
            m_privateObject.SetField("hitAnyChargeHetero", value);
        }
    }
    
    internal bool identity {
        get {
            bool ret = ((bool)(m_privateObject.GetField("identity")));
            return ret;
        }
        set {
            m_privateObject.SetField("identity", value);
        }
    }
    
    internal bool hitAnyChargeCarbon {
        get {
            bool ret = ((bool)(m_privateObject.GetField("hitAnyChargeCarbon")));
            return ret;
        }
        set {
            m_privateObject.SetField("hitAnyChargeCarbon", value);
        }
    }
    
    internal bool similar {
        get {
            bool ret = ((bool)(m_privateObject.GetField("similar")));
            return ret;
        }
        set {
            m_privateObject.SetField("similar", value);
        }
    }
    
    internal string format {
        get {
            string ret = ((string)(m_privateObject.GetField("format")));
            return ret;
        }
        set {
            m_privateObject.SetField("format", value);
        }
    }
    
    internal string query8000 {
        get {
            string ret = ((string)(m_privateObject.GetField("query8000")));
            return ret;
        }
        set {
            m_privateObject.SetField("query8000", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                databaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
    
    internal string BuildOptions() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("BuildOptions", new System.Type[0], args)));
        return ret;
    }
    
    internal string GetStringFromBool(bool value) {
        object[] args = new object[] {
                value};
        string ret = ((string)(m_privateObject.Invoke("GetStringFromBool", new System.Type[] {
                    typeof(bool)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Utils_SqlInjectionAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.SqlInjection");
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Utils_SqlInjectionAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static bool FindSqlInjection(string sqlCode) {
        object[] args = new object[] {
                sqlCode};
        bool ret = ((bool)(m_privateType.InvokeStatic("FindSqlInjection", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static object CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.SqlInjection", new object[0]);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseVerbatimAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseVerbatimAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim target) : 
            base(target, m_privateType) {
    }
    
    internal string verbatim {
        get {
            string ret = ((string)(m_privateObject.GetField("verbatim")));
            return ret;
        }
        set {
            m_privateObject.SetField("verbatim", value);
        }
    }
    
    internal string parameterHolderCharacter {
        get {
            string ret = ((string)(m_privateObject.GetField("parameterHolderCharacter")));
            return ret;
        }
        set {
            m_privateObject.SetField("parameterHolderCharacter", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                databaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
    
    internal int ReplaceNextParameterHolder(ref string verbatim, int currentPosition, int nextParam, global::CambridgeSoft.COE.Framework.Common.DBMSType databaseType) {
        object[] args = new object[] {
                verbatim,
                currentPosition,
                nextParam,
                databaseType};
        int ret = ((int)(m_privateObject.Invoke("ReplaceNextParameterHolder", new System.Type[] {
                    typeof(string).MakeByRefType(),
                    typeof(int),
                    typeof(int),
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        verbatim = ((string)(args[0]));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseBetweenAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseBetweenAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
            return ret;
        }
        set {
            m_privateObject.SetField("trimPosition", value);
        }
    }
    
    internal static string functionString {
        get {
            string ret = ((string)(m_privateType.GetStaticField("functionString")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("functionString", value);
        }
    }
    
    internal static string TXT_VALUE {
        get {
            string ret = ((string)(m_privateType.GetStaticField("TXT_VALUE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("TXT_VALUE", value);
        }
    }
    
    internal static string INT_VALUE {
        get {
            string ret = ((string)(m_privateType.GetStaticField("INT_VALUE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("INT_VALUE", value);
        }
    }
    
    internal static string NUM_VALUE {
        get {
            string ret = ((string)(m_privateType.GetStaticField("NUM_VALUE")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("NUM_VALUE", value);
        }
    }
    
    internal int cardinality {
        get {
            int ret = ((int)(m_privateObject.GetField("cardinality")));
            return ret;
        }
        set {
            m_privateObject.SetField("cardinality", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> queryValues) {
        object[] args = new object[] {
                dataBaseType,
                queryValues};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        queryValues = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Framework", "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFac" +
            "tory+WhereClauseTypes");
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor TextCriteria {
        get {
            object _ret_val = m_privateType.GetStaticField("TextCriteria");
            global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor(_ret_val);
            }
            global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor DateCriteria {
        get {
            object _ret_val = m_privateType.GetStaticField("DateCriteria");
            global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor(_ret_val);
            }
            global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor NumericalCriteria {
        get {
            object _ret_val = m_privateType.GetStaticField("NumericalCriteria");
            global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor(_ret_val);
            }
            global::CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactory_WhereClauseTypesAccessor ret = _ret;
            return ret;
        }
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLogicalAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLogical));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLogicalAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLogical target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.COELogicalOperators logicalOperator {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.COELogicalOperators ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.COELogicalOperators)(m_privateObject.GetField("logicalOperator")));
            return ret;
        }
        set {
            m_privateObject.SetField("logicalOperator", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> queryValues) {
        object[] args = new object[] {
                dataBaseType,
                queryValues};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        queryValues = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseEqualAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseEqualAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual target) : 
            base(target, m_privateType) {
    }
    
    internal bool caseSensitive {
        get {
            bool ret = ((bool)(m_privateObject.GetField("caseSensitive")));
            return ret;
        }
        set {
            m_privateObject.SetField("caseSensitive", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
            return ret;
        }
        set {
            m_privateObject.SetField("trimPosition", value);
        }
    }
    
    internal bool normalizeChemicalName {
        get {
            bool ret = ((bool)(m_privateObject.GetField("normalizeChemicalName")));
            return ret;
        }
        set {
            m_privateObject.SetField("normalizeChemicalName", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, ref System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                dataBaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>).MakeByRefType()}, args)));
        values = ((System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)(args[1]));
        return ret;
    }
    
    internal string GetStartingCaseStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetStartingCaseStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetEndingCaseStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetEndingCaseStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetStartingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetStartingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetEndingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetEndingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactoryAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFactory));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseFactoryAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFactory target) : 
            base(target, m_privateType) {
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem ParseTextCriteriaOperation(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field field, global::System.Xml.XmlNode operationNode, bool negate, global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition, bool caseSensitive) {
        object[] args = new object[] {
                field,
                operationNode,
                negate,
                trimPosition,
                caseSensitive};
        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem)(m_privateType.InvokeStatic("ParseTextCriteriaOperation", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field),
                    typeof(global::System.Xml.XmlNode),
                    typeof(bool),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem ParseDateCriteriaOperation(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field field, global::System.Xml.XmlNode operationNode, bool negate, global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition, bool caseSensitive) {
        object[] args = new object[] {
                field,
                operationNode,
                negate,
                trimPosition,
                caseSensitive};
        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem)(m_privateType.InvokeStatic("ParseDateCriteriaOperation", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field),
                    typeof(global::System.Xml.XmlNode),
                    typeof(bool),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem ParseNumericalCriteriaOperation(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field field, global::System.Xml.XmlNode operationNode, bool negate, global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition, bool caseSensitive) {
        object[] args = new object[] {
                field,
                operationNode,
                negate,
                trimPosition,
                caseSensitive};
        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem)(m_privateType.InvokeStatic("ParseNumericalCriteriaOperation", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field),
                    typeof(global::System.Xml.XmlNode),
                    typeof(bool),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim ParseVerbatimCriteriaOperation(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field field, global::System.Xml.XmlNode operationNode, bool negate, global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition, bool caseSensitive) {
        object[] args = new object[] {
                field,
                operationNode,
                negate,
                trimPosition,
                caseSensitive};
        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim)(m_privateType.InvokeStatic("ParseVerbatimCriteriaOperation", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field),
                    typeof(global::System.Xml.XmlNode),
                    typeof(bool),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure ParseStructureCriteriaOperation(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field field, global::System.Xml.XmlNode operationNode, bool negate, global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition, bool caseSensitive) {
        object[] args = new object[] {
                field,
                operationNode,
                negate,
                trimPosition,
                caseSensitive};
        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure)(m_privateType.InvokeStatic("ParseStructureCriteriaOperation", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field),
                    typeof(global::System.Xml.XmlNode),
                    typeof(bool),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight ParseMolWeightCriteriaOperation(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field field, global::System.Xml.XmlNode operationNode, bool negate, global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition, bool caseSensitive) {
        object[] args = new object[] {
                field,
                operationNode,
                negate,
                trimPosition,
                caseSensitive};
        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight)(m_privateType.InvokeStatic("ParseMolWeightCriteriaOperation", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field),
                    typeof(global::System.Xml.XmlNode),
                    typeof(bool),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula ParseFormulaCriteriaOperation(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field field, global::System.Xml.XmlNode operationNode, bool negate, global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition, bool caseSensitive) {
        object[] args = new object[] {
                field,
                operationNode,
                negate,
                trimPosition,
                caseSensitive};
        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula)(m_privateType.InvokeStatic("ParseFormulaCriteriaOperation", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field),
                    typeof(global::System.Xml.XmlNode),
                    typeof(bool),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem ParseCustomCriteriaOperation(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field field, global::System.Xml.XmlNode operationNode, bool negate, global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition, bool caseSensitive) {
        object[] args = new object[] {
                field,
                operationNode,
                negate,
                trimPosition,
                caseSensitive};
        global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem ret = ((global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem)(m_privateType.InvokeStatic("ParseCustomCriteriaOperation", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Field),
                    typeof(global::System.Xml.XmlNode),
                    typeof(bool),
                    typeof(global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal static bool GetBoolFromString(string value) {
        object[] args = new object[] {
                value};
        bool ret = ((bool)(m_privateType.InvokeStatic("GetBoolFromString", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike));
    
    internal CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor(global::CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions wildCardPosition {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("wildCardPosition")));
            return ret;
        }
        set {
            m_privateObject.SetField("wildCardPosition", value);
        }
    }
    
    internal bool caseSensitive {
        get {
            bool ret = ((bool)(m_privateObject.GetField("caseSensitive")));
            return ret;
        }
        set {
            m_privateObject.SetField("caseSensitive", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions trimPosition {
        get {
            global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.GetField("trimPosition")));
            return ret;
        }
        set {
            m_privateObject.SetField("trimPosition", value);
        }
    }
    
    internal bool fullWordSearch {
        get {
            bool ret = ((bool)(m_privateObject.GetField("fullWordSearch")));
            return ret;
        }
        set {
            m_privateObject.SetField("fullWordSearch", value);
        }
    }
    
    internal bool normalizeChemicalName {
        get {
            bool ret = ((bool)(m_privateObject.GetField("normalizeChemicalName")));
            return ret;
        }
        set {
            m_privateObject.SetField("normalizeChemicalName", value);
        }
    }
    
    internal string GetDependantString(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType, System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values) {
        object[] args = new object[] {
                dataBaseType,
                values};
        string ret = ((string)(m_privateObject.Invoke("GetDependantString", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType),
                    typeof(System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value>)}, args)));
        return ret;
    }
    
    internal string GetEscapeStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetEscapeStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetLeftOperator(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetLeftOperator", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetStartingCaseStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetStartingCaseStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetEndingCaseStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetEndingCaseStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetStartingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetStartingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal string GetEndingTrimStatement(global::CambridgeSoft.COE.Framework.Common.DBMSType dataBaseType) {
        object[] args = new object[] {
                dataBaseType};
        string ret = ((string)(m_privateObject.Invoke("GetEndingTrimStatement", new System.Type[] {
                    typeof(global::CambridgeSoft.COE.Framework.Common.DBMSType)}, args)));
        return ret;
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions GetWildCardPositionsFromValue(string value) {
        object[] args = new object[] {
                value};
        global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions ret = ((global::CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)(m_privateObject.Invoke("GetWildCardPositionsFromValue", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string GetWildCardLessString(string value) {
        object[] args = new object[] {
                value};
        string ret = ((string)(m_privateObject.Invoke("GetWildCardLessString", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string GetWildCardDependantString(string value) {
        object[] args = new object[] {
                value};
        string ret = ((string)(m_privateObject.Invoke("GetWildCardDependantString", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string GetMultiWildCardDependantString(string value) {
        object[] args = new object[] {
                value};
        string ret = ((string)(m_privateObject.Invoke("GetMultiWildCardDependantString", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string GetSingleWildCardDependantString(string value) {
        object[] args = new object[] {
                value};
        string ret = ((string)(m_privateObject.Invoke("GetSingleWildCardDependantString", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Framework_COESecurityService_COEPrincipalAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal));
    
    internal CambridgeSoft_COE_Framework_COESecurityService_COEPrincipalAccessor(global::CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal target) : 
            base(target, m_privateType) {
    }
    
    internal static global::CambridgeSoft.COE.Framework.COELoggingService.COELog _coeLog {
        get {
            global::CambridgeSoft.COE.Framework.COELoggingService.COELog ret = ((global::CambridgeSoft.COE.Framework.COELoggingService.COELog)(m_privateType.GetStaticField("_coeLog")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_coeLog", value);
        }
    }
    
    internal static global::CambridgeSoft.COE.Framework.COESecurityService.COEIdentity identity {
        get {
            global::CambridgeSoft.COE.Framework.COESecurityService.COEIdentity ret = ((global::CambridgeSoft.COE.Framework.COESecurityService.COEIdentity)(m_privateType.GetStaticField("identity")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("identity", value);
        }
    }
    
    internal static global::CambridgeSoft.COE.Framework.COESecurityService.COEConnection _coeConnection {
        get {
            global::CambridgeSoft.COE.Framework.COESecurityService.COEConnection ret = ((global::CambridgeSoft.COE.Framework.COESecurityService.COEConnection)(m_privateType.GetStaticField("_coeConnection")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_coeConnection", value);
        }
    }
    
    internal static global::CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal CreatePrivate(global::System.Security.Principal.IIdentity identity) {
        object[] args = new object[] {
                identity};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal), new System.Type[] {
                    typeof(global::System.Security.Principal.IIdentity)}, args);
        return ((global::CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal)(priv_obj.Target));
    }
    
    internal static global::CambridgeSoft.COE.Framework.COESecurityService.COEConnection CheckCompatibility() {
        object[] args = new object[0];
        global::CambridgeSoft.COE.Framework.COESecurityService.COEConnection ret = ((global::CambridgeSoft.COE.Framework.COESecurityService.COEConnection)(m_privateType.InvokeStatic("CheckCompatibility", new System.Type[0], args)));
        return ret;
    }
}
}
