--Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved
prompt 
prompt Starting "Create_ChemReg_ora.sql"...
prompt 


--#########################################################
--CREATE TABLES
--######################################################### 

CREATE TABLE  STRUCTURES (
	CPD_INTERNAL_ID NUMBER(8,0) not null,
	BASE64_CDX CLOB null,	
	MOL_ID NUMBER(8,0) null,
	LOAD_ID VARCHAR2(50) null,
	DATETIME_STAMP VARCHAR2(30) null,
	StructureFormat VARCHAR2(150), --Version 11
	Structure CLOB, --Version 11
	constraint PK_CPD_INTERNAL_ID2 
		primary key (CPD_INTERNAL_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
	LOB (BASE64_CDX) STORE AS(
		DISABLE STORAGE IN ROW NOCACHE PCTVERSION 10
		TABLESPACE &&lobsTableSpaceName
		STORAGE (INITIAL &&lobB64cdx NEXT &&lobB64cdx)
	)		
;


CREATE TABLE  SEQUENCE (
	SEQUENCE_ID NUMBER(8,0) not null,
	PREFIX VARCHAR2(150) not null,
	NEXT_IN_SEQUENCE     NUMBER(8,0) null,
	ACTIVE NCHAR(1) NULL, 
        BATCHDELIMETER       VARCHAR2(1 BYTE)          DEFAULT NULL,
        PREFIX_DELIMITER    VARCHAR2(1 BYTE)          DEFAULT NULL,
        REGNUMBER_LENGTH  NUMBER(3)                 DEFAULT 6,
        DUP_CHECK_LOCAL     NUMBER(1)                 DEFAULT 0,
	SUFFIX              VARCHAR2(150),
	SUFFIXDELIMITER     VARCHAR2(1),
	SALTSUFFIXTYPE       VARCHAR2(30),  --Version 11.0.1
	OBJECTTYPE          VARCHAR2(20) NULL,
	EXAMPLE             VARCHAR2(50) NULL,
	SITEID NUMBER(8),
	TYPE NCHAR(1),
	constraint PK_SEQUENCE_ID 
		primary key (SEQUENCE_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;



CREATE TABLE  REG_NUMBERS (
	REG_ID NUMBER(8,0) not null,
	MOL_ID NUMBER(8,0) null,
	REGISTRY_DATE Date null,
	CPD_INTERNAL_ID NUMBER(8,0) null,
	REG_NUMBER VARCHAR2(50) null,
	SEQUENCE_NUMBER NUMBER(8,0) null,
	SEQUENCE_INTERNAL_ID NUMBER(8,0) null,
	LAST_BATCH_NUMBER NUMBER(8,0) null, 
	REGISTRAR_PERSON_ID NUMBER(8,0) null, 
	LOAD_ID VARCHAR2(50) null,
	DATETIME_STAMP VARCHAR2(30) null, 
	constraint PK_REG_ID 
		primary key (REG_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;



CREATE TABLE  PROJECTS (
	PROJECT_INTERNAL_ID NUMBER(8,0) not null,
	PROJECT_NAME VARCHAR2(250) not null,
	ACTIVE NCHAR(1) NULL, 
	DESCRIPTION VARCHAR2(500),
	TYPE NCHAR(1), --Version 11.0.1 'C'= Compound,'B'= Batch
	constraint PK_PROJECT_INTERNAL_ID 
		primary key (PROJECT_INTERNAL_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;


CREATE TABLE  NOTEBOOKS (
	NOTEBOOK_NUMBER NUMBER(8,0) not null,
	NOTEBOOK_NAME VARCHAR2(500) not null,
	LOCATION VARCHAR2(250) null,
	MICROFICHE VARCHAR2(250) null,
	USER_CODE NUMBER(8,0) null,
	ACTIVE NCHAR(1) NULL,  
	DESCRIPTION VARCHAR2(200), --Version 11
	constraint PK_NOTEBOOK_NUMBER 
		primary key (NOTEBOOK_NUMBER) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;


CREATE TABLE  MIXTURES (
	MIX_INTERNAL_ID NUMBER(8,0) not null,
	MIX_ID VARCHAR2(50) null,
	LOAD_ID VARCHAR2(50) null,
	DATETIME_STAMP VARCHAR2(30) null, 
	REGID NUMBER(8), --Version 11
	NAME VARCHAR2(150), --Version 11
	CREATED DATE, --Version 11
	MODIFIED DATE, --Version 11
	PERSONCREATED NUMBER(8), --Version 11
	STRUCTUREAGGREGATION CLOB, --Version 11
	APPROVED VARCHAR2(10) DEFAULT 'NotSet', --Version 11.0.1
	constraint PK_MIX_INTERNAL_ID 
		primary key (MIX_INTERNAL_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;


CREATE TABLE DUPLICATES
(
  ID  NUMBER(8),
  RegNumber VARCHAR2(50),
  RegNumberDuplicated VARCHAR2(50),
  PersonID NUMBER(8), 
  Created DATE,
  CONSTRAINT DUPLICATES_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);



CREATE TABLE  COMPOUND_MOLECULE (
	CPD_DATABASE_COUNTER NUMBER(8,0) null,
	StructureID NUMBER(8,0), --Version 11
	REGID NUMBER(8,0), --Version 11
	FORMULAWEIGHT NUMBER, --Version 11
	MOLECULARFORMULA VARCHAR2(200), --Version 11
	DATECREATED DATE, --Version 11
        LAST_MOD_DATE DATE null,
	PersonCreated NUMBER(8), --Version 11
	PersonRegistered NUMBER(8), --Version 11 
	Tag VARCHAR2(50), --Version 11 
        NORMALIZEDSTRUCTURE       CLOB, --Version 11.0.1
        USENORMALIZATION          NCHAR(1), --Version 11.0.1
	constraint PK_CPD_DATABASE_COUNTER 
		primary key (CPD_DATABASE_COUNTER) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

CREATE TABLE  BATCHES (
	BATCH_INTERNAL_ID NUMBER(8,0) null,
	BATCH_NUMBER NUMBER(5,0) null,
	REG_INTERNAL_ID NUMBER(8,0) null,
	FULLREGNUMBER VARCHAR2(50) null,   --version 11.0.1
	STATUS_ID NUMBER(8,0) null,
	ENTRY_PERSON_ID NUMBER(8,0) null,
	BATCH_REG_PERSON_ID NUMBER(8,0) null,
	LAST_MOD_DATE DATE null,
        TEMP_ID number(8),
	TEMPBATCHID NUMBER(8),
	DATECREATED DATE,
	constraint PK_BATCHES 
		primary key (BATCH_INTERNAL_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;



CREATE TABLE  ALT_IDS (
	ID              NUMBER(8,0) not null,
	REG_INTERNAL_ID NUMBER(8,0) null,
	IDENTIFIER      VARCHAR2(2000) null,
	IDENTIFIER_TYPE NUMBER(8,0) null, 
	LOAD_ID         VARCHAR2(50) null,
	DATETIME_STAMP  VARCHAR2(30) null, 
	ORDERINDEX      NUMBER(8,0), --Version 11.0.1
	constraint PK_CONSTR_ALT_IDS 
		primary key (ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;


CREATE TABLE  FRAGMENTS (
	FRAGMENT_ID NUMBER(8,0) not null,
	BASE64_CDX CLOB null,	
        STRUCTUREFORMAT VARCHAR2(150),
	DATETIME_STAMP VARCHAR2(30) null,
	CODE VARCHAR2(10),
	DESCRIPTION VARCHAR2(250),
	FRAGMENTTYPEID NUMBER(8,0),
	MOLWEIGHT NUMBER,
	FORMULA VARCHAR2(200),
	CREATED DATE,
	MODIFIED DATE,
	constraint PK_FRAGMENT_ID 
		primary key (FRAGMENT_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
	LOB (BASE64_CDX) STORE AS(
		DISABLE STORAGE IN ROW NOCACHE PCTVERSION 10
		TABLESPACE &&lobsTableSpaceName
		STORAGE (INITIAL &&lobB64cdx NEXT &&lobB64cdx)
	)		
;


CREATE TABLE PEOPLE_PROJECT (
	PERSON_ID NUMBER(8,0), 
	PROJECT_ID NUMBER (8,0))
; 

CREATE TABLE PREFIX_USER (
	PERSON_ID NUMBER(8,0),
	SEQUENCE_ID NUMBER(8,0))
;

--Version 11

CREATE TABLE FRAGMENTTYPE(
	ID          NUMBER(8,0) ,
	DESCRIPTION VARCHAR2(255), 
	CONSTRAINT PK_FRAGMENTTYPE
		PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName)
;

CREATE TABLE BATCH_PROJECT 
(
	ID         NUMBER(8,0),
	BATCHID    NUMBER(8,0),
	PROJECTID  NUMBER(8,0),
	ORDERINDEX NUMBER(8,0),  --Version 11.0.1
	CONSTRAINT BATCH_PROJECT_PK 
		PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName)
;

CREATE TABLE MIXTURE_COMPONENT 
(
	ID         NUMBER(8,0),
	MIXTRUREID NUMBER(8,0),
	COMPOUNDID NUMBER(8,0),
	CONSTRAINT MIXTURE_COMPONENT_PK 
		PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE COMPOUND_FRAGMENT 
(
	ID          NUMBER(8,0),
	COMPOUNDID  NUMBER(8,0), 
	FRAGMENTID  NUMBER(8,0),
	EQUIVALENTS NUMBER,
	CONSTRAINT COMPOUND_FRAGMENT_PK 
		PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE BATCHCOMPONENT 
(
	ID                 NUMBER(8,0), 
	BATCHID            NUMBER(8,0), 
	MIXTURECOMPONENTID NUMBER(8,0),
	ORDERINDEX         NUMBER(8,0),  
	CONSTRAINT BATCHCOMPONENT_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE COEOBJECTTYPE
(
	ID          NUMBER(4) NOT NULL,
	NAME        VARCHAR(255),
	DESCRIPTION VARCHAR(255),
	CONSTRAINT PK_COEOBJECTTYPE 
		PRIMARY KEY(ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE COEOBJECTCONFIG 
(
	ID           NUMBER(4) NOT NULL,
	OBJECTTYPEID NUMBER(10),  
	XML          CLOB ,
	CONSTRAINT PK_COEOBJECTCONFIG 
		PRIMARY KEY(ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE TEMPORARY_BATCH 
(
	TEMPBATCHID               NUMBER(8),
	BATCHNUMBER               NUMBER(5),
	PROJECTXML                CLOB,
        IDENTIFIERXML             CLOB,
	DATELASTMODIFIED          DATE,
	DATECREATED               DATE,
	PERSONCREATED             NUMBER(8),
	STATUSID                  NUMBER(8),
        StructureAggregation      CLOB,
	SequenceID 	          NUMBER(8,0), --Version 11.0.1
	ProjectXMLBatch           CLOB,        --Version 11.0.1
	IdentifierXMLBatch        CLOB,        --Version 11.0.1
	CONSTRAINT PK_TEMPBATCHID
		PRIMARY KEY (TEMPBATCHID) USING INDEX TABLESPACE &&indexTableSpaceName
);


CREATE TABLE TEMPORARY_COMPOUND
(
  TEMPCOMPOUNDID            NUMBER(8) NOT NULL,
  TEMPBATCHID               NUMBER(8),
  FORMULAWEIGHT             NUMBER,
  MOLECULARFORMULA          VARCHAR2(200 BYTE),
  PERSONCREATED             NUMBER(8),
  DATELASTMODIFIED          DATE,
  DATECREATED               DATE,
  PROJECTXML                CLOB,
  BASE64_CDX                CLOB,
  FRAGMENTXML               CLOB,
  BATCHCOMPFRAGMENTXML	    CLOB,
  IDENTIFIERXML             CLOB,
  TAG		            VARCHAR2(50),
  STRUCTUREID               NUMBER(8),
  REGID                     NUMBER(8),
  NORMALIZEDSTRUCTURE       CLOB,
  USENORMALIZATION          NCHAR(1),  
  SequenceID 	            NUMBER(8,0), --Version 11.0.1
  CONSTRAINT PK_TEMPCOMPOUNDID PRIMARY KEY (TEMPCOMPOUNDID) USING INDEX TABLESPACE &&indexTableSpaceName	
); 

CREATE TABLE PICKLISTDOMAIN
(
  ID                        NUMBER(8,0),
  DESCRIPTION               VARCHAR2(255) CONSTRAINT UK_PICKLISTDOMAIN_DESCRIPTION UNIQUE,
  Ext_Table		    VARCHAR2(100)	NULL, --Version 11.0.1
  Ext_ID_Col		    VARCHAR2(30)	NULL, --Version 11.0.1
  Ext_Display_Col	    VARCHAR2(30)	NULL, --Version 11.0.1
  Ext_SQL_Filter	    VARCHAR2(2000)	NULL, --Version 11.0.1	
  CONSTRAINT PK_PICKLISTDOMAIN PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);


CREATE TABLE PICKLIST
(
  ID               NUMBER(8,0) ,
  PICKLISTDOMAINID NUMBER(8,0),
  PICKLISTVALUE    VARCHAR2(1000),
  CONSTRAINT PK_PICKLIST PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE BATCHCOMPONENTFRAGMENT
(
  ID                 NUMBER(8,0) ,
  BATCHCOMPONENTID   NUMBER(8,0),
  COMPOUNDFRAGMENTID NUMBER(8,0), 
  EQUIVALENT         NUMBER,
  ORDERINDEX         NUMBER(8,0), --Version 11.0.1
  CONSTRAINT BATCHCOMPONENTFRAGMENT_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

cREATE TABLE REG_NUMBERS_PROJECT
(
  ID         NUMBER(8,0) ,
  REGID      NUMBER(8,0),
  PROJECTID  NUMBER(8,0),
  ORDERINDEX NUMBER(8,0), --Version 11.0.1
  CONSTRAINT REG_NUMBERS_PROJECT_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);


--Version 11.0.1

CREATE TABLE BATCH_IDENTIFIER 
(
	ID           NUMBER(8,0),
	TYPE         NUMBER(8,0), 
	BATCHID      NUMBER(8,0),
	VALUE        VARCHAR2(2000 Byte),
	ORDERINDEX   NUMBER(8,0),
	CONSTRAINT BATCH_IDENTIFIER_PK 
		PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

--BULKREGISTRATION LOG

CREATE TABLE LOG_BULKREGISTRATION_ID
(
  LOG_ID            INTEGER,
  DUPLICATE_ACTION  VARCHAR2(20 BYTE)           NOT NULL,
  DESCRIPTION       VARCHAR2(250 BYTE),
  USER_ID           VARCHAR2(30 BYTE),
  DATETIME_STAMP    DATE,
  CONSTRAINT LOG_BULKREGISTRATION_ID_PK PRIMARY KEY (LOG_ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE LOG_BULKREGISTRATION
(
  ID               INTEGER,
  LOG_ID           INTEGER,
  TEMP_ID          INTEGER,
  ACTION           VARCHAR2(1 BYTE),
  REG_NUMBER       VARCHAR2(10 BYTE),
  BATCH_NUMBER     NUMBER,
  COMMENTS         VARCHAR2(500 BYTE),
  CONSTRAINT LOG_BULKREGISTRATION_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
  -- Commented out as DataLoader provides no TEMP_ID.
  -- CONSTRAINT LOG_BULKREGISTRATION_PK PRIMARY KEY (LOG_ID, TEMP_ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

--########################
--SEQUENCES
--########################

CREATE SEQUENCE SEQ_COMPOUND_MOLECULE INCREMENT BY 1 START WITH 1;  

CREATE SEQUENCE SEQ_PROJECTS INCREMENT BY 1 START WITH 1;  

CREATE SEQUENCE SEQ_ALT_IDS INCREMENT BY 1 START WITH 1;  

CREATE SEQUENCE SEQ_SEQUENCE INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SEQ_BATCHES INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SEQ_NOTEBOOKS INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SEQ_REG_NUMBERS INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SEQ_FRAGMENT_ID INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE MOLID_SEQ INCREMENT By 1 START With 1;

--Version 11

CREATE SEQUENCE SEQ_MIXTURE INCREMENT By 1 START With 1;

CREATE SEQUENCE SEQ_BATCH_PROJECT INCREMENT By 1 START With 1;

CREATE SEQUENCE SEQ_MIXTURE_COMPONENT INCREMENT By 1 START With 1;

CREATE SEQUENCE SEQ_COMPOUND_FRAGMENT INCREMENT By 1 START With 1;

CREATE SEQUENCE SEQ_BATCHCOMPONENT INCREMENT By 1 START With 1;

CREATE SEQUENCE SEQ_TEMPORARY_BATCH INCREMENT By 1 START With 1;

CREATE SEQUENCE SEQ_TEMPORARY_COMPOUND INCREMENT By 1 START With 1;

CREATE SEQUENCE SEQ_BATCHCOMPONENTFRAGMENT INCREMENT By 1 START With 1;

CREATE SEQUENCE SEQ_REG_NUMBERS_PROJECT INCREMENT By 1 START With 1;
  
CREATE SEQUENCE SEQ_DUPLICATES INCREMENT By 1 START With 1;

--Version 11.0.1

CREATE SEQUENCE SEQ_FRAGMENTTYPE INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SEQ_HISTORY INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SEQ_BATCH_IDENTIFIER INCREMENT BY 1 START WITH 1;

--BULKREGISTRATION LOG

CREATE SEQUENCE SEQ_LOG_BULKREGISTRATION_ID INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SEQ_LOG_BULKREGISTRATION INCREMENT BY 1 START WITH 1;


--########################
--TRIGGERS
--########################


CREATE OR REPLACE TRIGGER TRG_PROJECTS
BEFORE INSERT  ON PROJECTS
FOR EACH ROW
BEGIN
    SELECT SEQ_PROJECTS.NEXTVAL INTO :NEW.PROJECT_INTERNAL_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_ALT_IDS
BEFORE INSERT ON ALT_IDS FOR EACH ROW
BEGIN
SELECT SEQ_ALT_IDS.NEXTVAL INTO :NEW.ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_SEQUENCE
BEFORE INSERT ON SEQUENCE
FOR EACH ROW
BEGIN
SELECT SEQ_SEQUENCE.NEXTVAL INTO :NEW.SEQUENCE_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_NOTEBOOKS
BEFORE INSERT ON NOTEBOOKS
FOR EACH ROW
BEGIN
SELECT SEQ_NOTEBOOKS.NEXTVAL INTO :NEW.NOTEBOOK_NUMBER FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_MOL_ID
BEFORE INSERT ON STRUCTURES
FOR EACH ROW
BEGIN
SELECT MOLID_SEQ.NEXTVAL INTO :NEW.MOL_ID  FROM DUAL;
END;
/


--Version 11


CREATE OR REPLACE TRIGGER TRG_BATCH_PROJECT
BEFORE INSERT
ON BATCH_PROJECT 
FOR EACH ROW
BEGIN
 SELECT SEQ_BATCH_PROJECT.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
  
CREATE OR REPLACE TRIGGER TRG_BATCHCOMPONENTFRAGMENT 
BEFORE INSERT
ON BATCHCOMPONENTFRAGMENT  
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
 SELECT SEQ_BATCHCOMPONENTFRAGMENT .NEXTVAL INTO :NEW.ID FROM DUAL;
END TRG_BATCHCOMPONENTFRAGMENT ;
/

CREATE OR REPLACE TRIGGER TRG_REG_NUMBERS_PROJECT
BEFORE INSERT
ON  REG_NUMBERS_PROJECT 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
 SELECT SEQ_REG_NUMBERS_PROJECT.NEXTVAL INTO :NEW.ID FROM DUAL;
END TRG_REG_NUMBERS_PROJECT;
/

CREATE OR REPLACE TRIGGER TRG_DUPLICATES
BEFORE INSERT
ON  DUPLICATES
FOR EACH ROW
BEGIN
 SELECT SEQ_DUPLICATES.NEXTVAL INTO :NEW.ID FROM DUAL;
END TRG_DUPLICATES;
/


--Version 11.0.1

--BULKREGISTRATION LOG

CREATE OR REPLACE TRIGGER TRG_LOG_BULKREGISTRATION_ID
BEFORE INSERT ON LOG_BULKREGISTRATION_ID
FOR EACH ROW
BEGIN
 SELECT SEQ_LOG_BULKREGISTRATION_ID.NEXTVAL INTO :NEW.LOG_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_LOG_BULKREGISTRATION
BEFORE INSERT ON LOG_BULKREGISTRATION
FOR EACH ROW
BEGIN
 SELECT SEQ_LOG_BULKREGISTRATION.NEXTVAL INTO :NEW.ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_BATCH_IDENTIFIER
BEFORE INSERT ON BATCH_IDENTIFIER FOR EACH ROW
BEGIN
  SELECT SEQ_BATCH_IDENTIFIER.NEXTVAL INTO :NEW.ID  FROM DUAL;
END;
/

--#########################################################
--INDEXES
--#########################################################

create index INDEX_STRUCTURES_MOLID on STRUCTURES(MOL_ID ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_SEQ_PREFIX on SEQUENCE (PREFIX ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_REGNUM_CPD_INT_ID on REG_NUMBERS (CPD_INTERNAL_ID ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_REGNUM_LAST_BATCH_NUM on REG_NUMBERS (LAST_BATCH_NUMBER ASC)  TABLESPACE &&indexTableSpaceName;

create index BATCHES_REGID on BATCHES(REG_INTERNAL_ID ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_REGNUM_MOL_ID on REG_NUMBERS (MOL_ID ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_NOTEBOOKS_USER_CODE on NOTEBOOKS (USER_CODE ASC)  TABLESPACE &&indexTableSpaceName;

--create index INDEX_CMPDMOL_MOL_ID on COMPOUND_MOLECULE (MOL_ID ASC)  TABLESPACE &&indexTableSpaceName;

--create index INDEX_CMPDMOL_SEQ_INT on COMPOUND_MOLECULE (SEQUENCE_INTERNAL_ID ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_BAT_BATCH_NUMBER on BATCHES (BATCH_NUMBER ASC)  TABLESPACE &&indexTableSpaceName;

--create index INDEX_BAT_MOL_ID on BATCHES (MOL_ID ASC)  TABLESPACE &&indexTableSpaceName;

--create index INDEDX_BAT_SALT_CODE  on BATCHES (SALT_INTERNAL_ID ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_ALT_IDENTIFIER on ALT_IDS (IDENTIFIER ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_ALT_IDENTIFIER_TYPE on ALT_IDS (IDENTIFIER_TYPE ASC)  TABLESPACE &&indexTableSpaceName;

create index INDEX_ALT_REG_ID on ALT_IDS (REG_INTERNAL_ID ASC)  TABLESPACE &&indexTableSpaceName;

--version 11

CREATE INDEX INDEX_CMPDMOL_REGID         ON COMPOUND_MOLECULE (REGID ASC)   TABLESPACE &&indexTableSpaceName;

CREATE INDEX INDEX_TEMP_COMP_TEMPBATCHID ON TEMPORARY_COMPOUND(TEMPBATCHID) TABLESPACE &&indexTableSpaceName;

CREATE INDEX DuplicatesRegNumber_IX      ON DUPLICATES (RegNumber) TABLESPACE &&indexTableSpaceName LOGGING NOPARALLEL;

CREATE INDEX DuplicatesRegNumberDupl_IX  ON DUPLICATES (RegNumberDuplicated) TABLESPACE &&indexTableSpaceName LOGGING NOPARALLEL;

--version 11.0.1

CREATE INDEX RegNumberproject_OrderIndex_IX ON REG_NUMBERS_PROJECT(Orderindex ASC) TABLESPACE &&indexTableSpaceName;

CREATE INDEX ALT_IDS_OrderIndex_IX ON ALT_IDS(Orderindex ASC) TABLESPACE &&indexTableSpaceName;

CREATE INDEX BatchComponent_OrderIndex_IX ON BATCHCOMPONENT(Orderindex ASC) TABLESPACE &&indexTableSpaceName;

CREATE INDEX BatchCompFrag_OrderIndex_IX ON BATCHCOMPONENTFRAGMENT(Orderindex ASC) TABLESPACE &&indexTableSpaceName;

CREATE INDEX Batch_Project_OrderIndex_IX ON BATCH_PROJECT(Orderindex ASC) TABLESPACE &&indexTableSpaceName;

CREATE INDEX TemporaryBatchSequenceIDx_IX ON TEMPORARY_BATCH(sequenceID ASC) TABLESPACE &&indexTableSpaceName;

CREATE INDEX TemporaryCompoundSequenceID_IX ON TEMPORARY_COMPOUND(sequenceID ASC) TABLESPACE &&indexTableSpaceName;

CREATE INDEX Batch_Identifier_OrderIndex_IX ON BATCH_IDENTIFIER(Orderindex ASC) TABLESPACE &&indexTableSpaceName;

--#########################################################
--CONSTRAINTS
--#########################################################


ALTER TABLE REG_NUMBERS ADD CONSTRAINT COMPOUND_MOLECULEREG_NUMBE foreign key (CPD_INTERNAL_ID) references COMPOUND_MOLECULE (CPD_DATABASE_COUNTER); 

--ALTER TABLE COMPOUND_MOLECULE ADD CONSTRAINT SEQUENCECOMPOUND_MOLECULE foreign key (SEQUENCE_INTERNAL_ID) references SEQUENCE (SEQUENCE_ID); 

--ALTER TABLE BATCHES ADD CONSTRAINT NOTEBOOKSBATCHES foreign key (NOTEBOOK_INTERNAL_ID) references NOTEBOOKS (NOTEBOOK_NUMBER); 

ALTER TABLE BATCHES ADD CONSTRAINT REG_NUMBERSBATCHES foreign key (REG_INTERNAL_ID) references REG_NUMBERS (REG_ID); 

ALTER TABLE ALT_IDS ADD CONSTRAINT REG_NUMBERSALT_IDS foreign key (REG_INTERNAL_ID) references REG_NUMBERS (REG_ID); 

--Version 11

ALTER TABLE FRAGMENTS ADD CONSTRAINT FRAGMENTTYPE_FRAGMENTS FOREIGN KEY(FragmentTypeID) 
REFERENCES FRAGMENTTYPE(ID);

ALTER TABLE MIXTURES ADD CONSTRAINT MIXTURES_REG_NUMBERS FOREIGN KEY(REGID) 
REFERENCES REG_NUMBERS (REG_ID);

ALTER TABLE MIXTURES ADD CONSTRAINT AK_MIX_REGID UNIQUE (REGID) USING INDEX TABLESPACE T_REGDB_INDEX;

ALTER TABLE BATCH_PROJECT ADD CONSTRAINT BATCH_PROJECT_BATCHES FOREIGN KEY(BATCHID) 
REFERENCES BATCHES (BATCH_INTERNAL_ID);

ALTER TABLE BATCH_PROJECT ADD CONSTRAINT BATCH_PROJECT_PROJECTS FOREIGN KEY(PROJECTID) 
REFERENCES PROJECTS (PROJECT_INTERNAL_ID);

ALTER TABLE MIXTURE_COMPONENT ADD CONSTRAINT MIXTURE_COMPONENT_MIXTURE  FOREIGN KEY (MIXTRUREID) 
REFERENCES MIXTURES (MIX_INTERNAL_ID);

ALTER TABLE MIXTURE_COMPONENT ADD CONSTRAINT MIXTURE_COMPONENT_COMPOUND FOREIGN KEY (COMPOUNDID) 
REFERENCES COMPOUND_MOLECULE(CPD_DATABASE_COUNTER);

ALTER TABLE COMPOUND_FRAGMENT ADD CONSTRAINT COMPOUND_FRAGMENT_FRAGMENTS  FOREIGN KEY (FRAGMENTID) 
REFERENCES FRAGMENTS (FRAGMENT_ID);

ALTER TABLE COMPOUND_FRAGMENT ADD CONSTRAINT COMPOUND_FRAGMENT_COMP_MOL FOREIGN KEY (COMPOUNDID) 
REFERENCES COMPOUND_MOLECULE(CPD_DATABASE_COUNTER);

ALTER TABLE COMPOUND_MOLECULE ADD CONSTRAINT COMPOUND_MOLECULE_STRUCTURES FOREIGN KEY(STRUCTUREID ) 
REFERENCES STRUCTURES(CPD_INTERNAL_ID);

ALTER TABLE BATCHCOMPONENT ADD CONSTRAINT BATCHCOMPONENT_BATCH  FOREIGN KEY (BATCHID) 
REFERENCES BATCHES (BATCH_INTERNAL_ID);

ALTER TABLE BATCHCOMPONENT ADD CONSTRAINT BATCHCOMPONENT_MIX_COMP FOREIGN KEY (MIXTURECOMPONENTID) 
REFERENCES MIXTURE_COMPONENT (ID);

ALTER TABLE COEOBJECTCONFIG ADD CONSTRAINT FK_COEOBJECTCONFIG_TYPE FOREIGN KEY (OBJECTTYPEID) 
REFERENCES COEOBJECTTYPE (ID);

ALTER TABLE TEMPORARY_COMPOUND ADD CONSTRAINT TEMP_COMP_TEMPORARY_BATCH FOREIGN KEY (TEMPBATCHID) 
REFERENCES TEMPORARY_BATCH (TEMPBATCHID); 

ALTER TABLE TEMPORARY_COMPOUND ADD CONSTRAINT TEMP_COMP_REG_NUMBERS FOREIGN KEY (REGID) 
REFERENCES REG_NUMBERS (REG_ID); 

ALTER TABLE PICKLIST ADD CONSTRAINT PICKLIST_PICKLISTDOMAIN  FOREIGN KEY (PICKLISTDOMAINID) 
REFERENCES PICKLISTDOMAIN (ID);

ALTER TABLE BATCHCOMPONENTFRAGMENT ADD CONSTRAINT BATCHCOMPFRAGMENT_BATCOM FOREIGN KEY (BATCHCOMPONENTID) 
REFERENCES BATCHCOMPONENT(ID);

ALTER TABLE BATCHCOMPONENTFRAGMENT ADD CONSTRAINT BATCHCOMPFRAGMENT_COMFRA FOREIGN KEY (COMPOUNDFRAGMENTID) 
REFERENCES COMPOUND_FRAGMENT(ID);

ALTER TABLE REG_NUMBERS_PROJECT ADD CONSTRAINT REGNUMPROJ_REGNUMBERS_FK  FOREIGN KEY (REGID) 
REFERENCES REG_NUMBERS (REG_ID);

ALTER TABLE REG_NUMBERS_PROJECT ADD CONSTRAINT REGNUMPROJ_PROJECTS FOREIGN KEY (PROJECTID) 
REFERENCES PROJECTS (PROJECT_INTERNAL_ID);

--Version 11.0.1

--BULKREGISTRATION LOG

ALTER TABLE LOG_BULKREGISTRATION ADD CONSTRAINT LOG_BULKREGISTRATION_R01 FOREIGN KEY (LOG_ID) 
REFERENCES LOG_BULKREGISTRATION_ID (LOG_ID);

--ALTER TABLE LOG_BULKREGISTRATION ADD CONSTRAINT LOG_BULKREGISTRATION_R02 FOREIGN KEY (REG_INTERNAL_ID) 
--REFERENCES REG_NUMBERS (REG_ID);

ALTER TABLE TEMPORARY_BATCH ADD CONSTRAINT SequenceTemporary_Batch FOREIGN KEY (SequenceID) 
REFERENCES SEQUENCE (Sequence_ID); 

ALTER TABLE TEMPORARY_COMPOUND ADD CONSTRAINT SequenceTemporary_Comopund FOREIGN KEY (SequenceID) 
REFERENCES SEQUENCE (Sequence_ID);

ALTER TABLE BATCH_IDENTIFIER ADD CONSTRAINT BATCH_IDENTIFIER_BATCHES_FK foreign key (BATCHID) 
REFERENCES BATCHES (BATCH_INTERNAL_ID); 

--#########################################################
--OLD TABLES, NOT USED YET
--#########################################################+


-- BATCH_PROJ_UTILIZATIONS

CREATE TABLE  BATCH_PROJ_UTILIZATIONS(
	BATCH_PROJ_UTIL_ID NUMBER(8,0) not null,
	UTILIZATION_ID NUMBER(8,0) null,
	BATCH_PROJECT_ID NUMBER(8,0) null,
	UTILIZATION_BOOLEAN NUMBER(1,0) null, 
	constraint PK_BATCH_PROJ_UTIL_ID 
		primary key (BATCH_PROJ_UTIL_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;


CREATE SEQUENCE SEQ_BATCH_PROJ_UTIL INCREMENT BY 1 START WITH 1; 

create or replace trigger TRG_BATCH_PROJ_UTILIZATIONS
BEFORE INSERT ON BATCH_PROJ_UTILIZATIONS
FOR EACH ROW
BEGIN
     SELECT SEQ_BATCH_PROJ_UTIL.NEXTVAL INTO :NEW.BATCH_PROJ_UTIL_ID FROM DUAL;
END;
/



-- CMPD_MOL_UTILIZATIONS

CREATE TABLE  CMPD_MOL_UTILIZATIONS (
	CMPD_MOL_UTIL_ID NUMBER(8,0) not null,
	CPD_INTERNAL_ID NUMBER(8,0) null,
	UTILIZATION_ID NUMBER(8,0) null,
	LOAD_ID VARCHAR2(50) null,
	UTILIZATION_BOOLEAN NUMBER(1,0) null, 
	constraint PK_CMPD_MOL_UTIL_ID 
		primary key (CMPD_MOL_UTIL_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

CREATE SEQUENCE SEQ_CMPD_MOL_UTIL INCREMENT BY 1 START WITH 1;  

create or replace trigger TRG_CMPD_MOL_UTILIZATIONS 
BEFORE INSERT ON CMPD_MOL_UTILIZATIONS 
FOR EACH ROW
BEGIN
     SELECT SEQ_CMPD_MOL_UTIL.NEXTVAL INTO :NEW.CMPD_MOL_UTIL_ID FROM DUAL;
END;
/

-- GLOBALS 
DECLARE
	n NUMBER;
	PROCEDURE writeGlobalValue(pID in varchar2, pValue in varchar2) IS
		BEGIN
			execute immediate 'INSERT INTO GLOBALS (ID, VALUE) VALUES ('''||pID||''','''||pValue||''')';
		EXCEPTION
  			when DUP_VAL_ON_INDEX then
      			execute immediate 'UPDATE GLOBALS SET value = '''||pValue||''' WHERE ID = '''||pID||'''';
 		END writeGlobalValue;
BEGIN
	select count(*) into n from user_tables where table_name = 'GLOBALS';
	if n = 0 then
		execute immediate '
			CREATE TABLE GLOBALS (
				ID VARCHAR2(250) not null,
				VALUE  VARCHAR2(250) null,
				constraint PK_GLOBALS_ID primary key (ID)
			)';
		execute immediate 'GRANT select on  GLOBALS to PUBLIC';
	end if;

 	writeGlobalValue('VERSION_SCHEMA','&&schemaVersion');
 	writeGlobalValue('VERSION_APP','&&appVersion');
END;
/


--IDENTIFIERS 

CREATE TABLE  IDENTIFIERS (
	ID NUMBER(8,0) not null,
	IDENTIFIER_TYPE NUMBER(8,0) null,
	IDENTIFIER_DESCRIPTOR VARCHAR2(500) null, 
	Type NCHAR(1), --Version 11.0.1 'C'= Compound,'B'= Batch
	Active NCHAR(1) NULL, --Version 11
	Name VARCHAR2(200), --Version11
	constraint PK_IDENTIFIER_ID 
		primary key (ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

create index INDEX_IDENT_IDENT_DESC on IDENTIFIERS (
	IDENTIFIER_DESCRIPTOR ASC)  TABLESPACE &&indexTableSpaceName;


CREATE SEQUENCE SEQ_IDENTIFIERS INCREMENT BY 1 START WITH 1;

create or replace trigger TRG_IDENTIFIERS
BEFORE INSERT ON IDENTIFIERS FOR EACH ROW
BEGIN
 SELECT SEQ_IDENTIFIERS.NEXTVAL INTO :NEW.ID  FROM DUAL;
END;
/

CREATE TABLE  REG_APPROVED (
	REG_INTERNAL_ID NUMBER(8,0) not null,
	BATCH_INTERNAL_ID NUMBER(8,0) null,
	APPROVED NUMBER(1,0) not null,
	DATETIME_STAMP VARCHAR2(30) null
	)
;

create index INDEX_REG_APP_REG_INT_ID on REG_APPROVED (
	REG_INTERNAL_ID ASC)  TABLESPACE &&indexTableSpaceName;

CREATE TABLE  REG_QUALITY_CHECKED (
	REG_INTERNAL_ID NUMBER(8,0) null,
	BATCH_INTERNAL_ID NUMBER(8,0) null,
	QUALITY_CHECKED NUMBER(1,0) not null,
	DATETIME_STAMP VARCHAR2(30) null
	)
; 

CREATE TABLE  UTILIZATIONS(
	UTILIZATION_ID NUMBER(8,0) not null,
	UTILIZATION_TEXT VARCHAR2(250) NOT null, 
	constraint PK_UTILIZATION_ID2 
		primary key (UTILIZATION_ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

CREATE SEQUENCE SEQ_UTILIZATIONS INCREMENT BY 1 START WITH 1;  

create or replace trigger TRG_UTILIZATIONS
BEFORE INSERT ON UTILIZATIONS
FOR EACH ROW
BEGIN
     SELECT SEQ_UTILIZATIONS.NEXTVAL INTO :NEW.UTILIZATION_ID FROM DUAL;
END;
/

ALTER TABLE IDENTIFIERS ADD CONSTRAINT UK_IDENTIFIERS_IDENTIFIER_TYPE UNIQUE (IDENTIFIER_TYPE);

ALTER TABLE ALT_IDS ADD CONSTRAINT FK_ALT_IDS_IDENTIFIERS FOREIGN KEY (IDENTIFIER_TYPE) REFERENCES IDENTIFIERS (IDENTIFIER_TYPE);

ALTER TABLE BATCH_IDENTIFIER ADD CONSTRAINT BATCH_IDENTIFIER_IDENTIFIER_FK FOREIGN KEY (TYPE) REFERENCES IDENTIFIERS (IDENTIFIER_TYPE); 


CREATE TABLE  HISTORY (
	ID NUMBER(8,0) not null,
	NAME VARCHAR2(100) null, 
	DESCRIPTION VARCHAR2(500), 
	DATECREATED DATE,
	constraint PK_HISTORY_ID 
		primary key (ID) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

INSERT INTO HISTORY (ID, NAME, DESCRIPTION, DATECREATED) VALUES (1,'RegDB schema creation - 11.0.1', 'Creation of RegDB schema',CURRENT_DATE);

--#########################################################
--CREATE VIEW FOR BIOASSAY
--#########################################################

create materialized view vw_reg_batches
	storage (initial 1k next 100k pctincrease 0)
	pctfree 0
	pctused 99
	nologging
	tablespace &&tableSpaceName.
	build immediate
	refresh complete
	with primary key
	start with trunc(sysdate) + 23.2/24
	next trunc(sysdate) + 1 + 23.2/24
as
 SELECT
	reg_numbers.reg_id,
	reg_numbers.mol_id,
	reg_numbers.registry_date,
	reg_numbers.cpd_internal_id,
	reg_numbers.reg_number,
	reg_numbers.sequence_number,
	reg_numbers.sequence_internal_id,
	reg_numbers.last_batch_number,
	reg_numbers.registrar_person_id,
	reg_numbers.load_id,
	reg_numbers.datetime_stamp,
	batches.batch_internal_id,
	batches.batch_number,
	batches.FullRegNumber FULL_REG_NUMBER
FROM
  reg_Numbers,
  batches
WHERE
  reg_numbers.reg_id = batches.reg_internal_id;


CREATE INDEX "INDEX_VW_REGDB_BATCHES"
    ON "VW_REG_BATCHES"  ("FULL_REG_NUMBER")
    TABLESPACE "&&indexTableSpaceName";

CREATE INDEX "INDEX_BATCH_INTERNAL_ID"
    ON "VW_REG_BATCHES"  ("BATCH_INTERNAL_ID")
    TABLESPACE "&&indexTableSpaceName";

--#########################################################
--CREATE VIEWS
--#########################################################

--Version 11

CREATE OR REPLACE NOFORCE VIEW VW_Sequence
	(SequenceID,RegNumberLength, Prefix, PrefixDelimiter,Suffix,SuffixDelimiter,SaltSuffixType,BatchDelimiter,NextInSequence,Example,ACTIVE,TYPE,SITEID) AS 
	SELECT SEQUENCE_ID,REGNUMBER_LENGTH,PREFIX,PREFIX_DELIMITER,SUFFIX,SUFFIXDELIMITER,SALTSUFFIXTYPE,BATCHDELIMETER,NEXT_IN_SEQUENCE,EXAMPLE,ACTIVE,TYPE,SITEID FROM SEQUENCE;
 
CREATE OR REPLACE NOFORCE VIEW VW_Project 
	(ProjectID,Name,Active,Description, Type) AS 
	SELECT PROJECT_INTERNAL_ID,PROJECT_NAME,ACTIVE,DESCRIPTION,TYPE FROM PROJECTS;

CREATE OR REPLACE NOFORCE VIEW VW_Structure 
	(StructureID,StructureFormat,Structure) AS 
	SELECT CPD_INTERNAL_ID,StructureFormat,BASE64_CDX FROM STRUCTURES;

CREATE OR REPLACE NOFORCE VIEW VW_FragmentType 
	(ID,Description) AS 
	SELECT ID,Description FROM FragmentType;

CREATE OR REPLACE NOFORCE VIEW VW_Fragment 
        (FragmentID,Code,Description,FragmentTypeID,MolWeight,Formula,Created,Modified,Structure,StructureFormat) AS
        SELECT FRAGMENT_ID,CODE,DESCRIPTION,FRAGMENTTYPEID,MOLWEIGHT,FORMULA,CREATED,MODIFIED,BASE64_CDX,STRUCTUREFORMAT FROM FRAGMENTS;

CREATE OR REPLACE NOFORCE VIEW VW_Mixture 
	(MixtureID,RegID,Name,Created,Modified,PERSONCREATED,StructureAggregation,Approved  ) AS 
	SELECT MIX_INTERNAL_ID,REGID,NAME,CREATED,MODIFIED,PERSONCREATED,STRUCTUREAGGREGATION,APPROVED FROM MIXTURES;

CREATE OR REPLACE NOFORCE VIEW VW_Notebook 
	(NoteBookID,Name,Description,Active) AS 
	SELECT NOTEBOOK_NUMBER,NOTEBOOK_NAME,DESCRIPTION,ACTIVE FROM NOTEBOOKS;

CREATE OR REPLACE NOFORCE VIEW VW_Batch_Project 
	(ID,BatchID,ProjectID,OrderIndex) AS 
	SELECT ID,BATCHID,PROJECTID,ORDERINDEX FROM BATCH_PROJECT;

CREATE OR REPLACE NOFORCE VIEW VW_Mixture_Component 
	(MixtureComponentID,MixtureID,CompoundID) AS 
	SELECT ID,MIXTRUREID,COMPOUNDID FROM MIXTURE_COMPONENT;

CREATE OR REPLACE NOFORCE VIEW VW_Compound_Fragment 
	(ID,CompoundID,FragmentID,Equivalents) AS
	SELECT ID,COMPOUNDID,FRAGMENTID,EQUIVALENTS FROM COMPOUND_FRAGMENT;
  
CREATE OR REPLACE NOFORCE VIEW VW_RegistryNumber 
	(RegID,SequenceID,SequenceNumber,RegNumber,PersonRegistered,DateCreated) AS 
	SELECT REG_ID,SEQUENCE_INTERNAL_ID,SEQUENCE_NUMBER,REG_NUMBER,REGISTRAR_PERSON_ID,REGISTRY_DATE FROM REG_NUMBERS;

CREATE OR REPLACE NOFORCE VIEW VW_Compound_Identifier 
	(ID,Type,RegID,Value,OrderIndex) AS 
	SELECT ID,IDENTIFIER_TYPE,REG_INTERNAL_ID,IDENTIFIER,ORDERINDEX FROM ALT_IDS;
    
CREATE OR REPLACE NOFORCE VIEW VW_IdentifierType 
	(ID,Name,Description,Type,Active) AS 
	SELECT IDENTIFIER_TYPE,NAME,IDENTIFIER_DESCRIPTOR,TYPE,ACTIVE FROM IDENTIFIERS;

CREATE OR REPLACE NOFORCE VIEW VW_BatchComponent 
	(ID,BatchID,MixtureComponentID,OrderIndex) AS
	SELECT ID,BATCHID,MIXTURECOMPONENTID,ORDERINDEX FROM BATCHCOMPONENT;

CREATE OR REPLACE NOFORCE VIEW VW_PickListDomain
	(ID,Description, Ext_Table, Ext_ID_Col, Ext_Display_Col, Ext_SQL_Filter ) AS 
	SELECT ID,Description, Ext_Table, Ext_ID_Col, Ext_Display_Col, Ext_SQL_Filter FROM PickListDomain;

CREATE OR REPLACE NOFORCE VIEW VW_PickList 
	(ID,PickListDomain,PickListValue) AS 
	SELECT ID,PickListDomainId,PickListValue FROM PickList;

CREATE OR REPLACE NOFORCE VIEW VW_BatchComponentFragment 
	(ID,BatchComponentID,CompoundFragmentID,Equivalent,OrderIndex) AS 
	SELECT ID,BATCHCOMPONENTID,COMPOUNDFRAGMENTID,EQUIVALENT,ORDERINDEX  FROM BATCHCOMPONENTFRAGMENT;

CREATE OR REPLACE NOFORCE VIEW VW_PeopleProject 
	(PersonID,ProjectID) AS 
	SELECT PERSON_ID,PROJECT_ID FROM PEOPLE_PROJECT;

CREATE OR REPLACE NOFORCE VIEW VW_RegistryNumber_Project 
	(ID,RegID,ProjectID,OrderIndex) AS 
	SELECT ID,REGID,PROJECTID,ORDERINDEX FROM REG_NUMBERS_PROJECT;

CREATE OR REPLACE NOFORCE VIEW VW_Duplicates
	(ID,RegNumber,RegNumberDuplicated,PersonID,Created) AS 
	SELECT ID,REGNUMBER,REGNUMBERDUPLICATED,PERSONID,CREATED FROM DUPLICATES;

CREATE OR REPLACE NOFORCE VIEW VW_Compound 	(CompoundID,StructureID,RegID,FormulaWeight,MolecularFormula,PersonCreated,PersonRegistered,DateCreated,DateLastModified,Tag,NormalizedStructure,UseNormalization) AS 
	SELECT CPD_DATABASE_COUNTER,STRUCTUREID,RegID,FORMULAWEIGHT,MOLECULARFORMULA ,PersonCreated,PersonRegistered,DATECREATED,LAST_MOD_DATE,Tag,NORMALIZEDSTRUCTURE,USENORMALIZATION FROM COMPOUND_MOLECULE;

CREATE OR REPLACE NOFORCE VIEW VW_Batch 
	(BatchID,BatchNumber,RegID,FullRegNumber,DATECREATED,DateLastModified,PERSONCREATED,PersonRegistered,StatusID,TempBatchID) AS 
	SELECT BATCH_INTERNAL_ID,BATCH_NUMBER,REG_INTERNAL_ID,FullRegNumber,DATECREATED,LAST_MOD_DATE,ENTRY_PERSON_ID,BATCH_REG_PERSON_ID,STATUS_ID,TempBatchID FROM BATCHES;


CREATE OR REPLACE NOFORCE VIEW VW_TemporaryCompound    
	(TempCompoundID, TempBatchID, formulaWeight, MolecularFormula, PersonCreated, DateLastModified, DateCreated, SequenceID, ProjectXML, Base64_CDX, StructureID, FragmentXML, BatchCompFragmentXML, IdentifierXML, RegID, NormalizedStructure, UseNormalization, Tag) AS
	SELECT TempCompoundID, TempBatchID, FormulaWeight, MolecularFormula, PersonCreated, DateLastModified, DateCreated, SequenceID, ProjectXML, Base64_CDX, StructureID, FragmentXML, BatchCompFragmentXML, IdentifierXML, RegID, NORMALIZEDSTRUCTURE, USENORMALIZATION, Tag FROM TEMPORARY_COMPOUND;

CREATE OR REPLACE NOFORCE VIEW VW_TemporaryBatch 
	(TempBatchID, BatchNumber, SequenceID, ProjectXML, IdentifierXML, DateLastModified, DateCreated, PersonCreated, StatusID, CompoundCount, StructureAggregation,ProjectXMLBatch, IdentifierXMLBatch) AS 
	SELECT TempBatchID,BatchNumber, SequenceID, ProjectXML, IdentifierXML, DateLastModified, DateCreated, PersonCreated, StatusID, (SELECT Count(1) FROM VW_TemporaryCompound WHERE TempBatchID=TB.TempBatchID), StructureAggregation,ProjectXMLBatch, IdentifierXMLBatch FROM TEMPORARY_BATCH TB;

--Version 11.0.1

-- Remove when the search service supports grandchild tables. Used in Perm Search form.
CREATE OR REPLACE VIEW VW_COMPOUND_STRUCTURE 
	(COMPOUNDID, STRUCTURE, REG_NUMBER) AS
	SELECT C.COMPOUNDID, S.STRUCTURE, R.REGNUMBER FROM VW_COMPOUND C
        	INNER JOIN VW_STRUCTURE S ON C.STRUCTUREID = S.STRUCTUREID
	        INNER JOIN VW_REGISTRYNUMBER R ON C.REGID = R.REGID;

CREATE OR REPLACE VIEW VW_MIXTURE_STRUCTURE AS
	SELECT M.MIXTUREID, MC.MIXTURECOMPONENTID, C.*, S.STRUCTURE, R.REGNUMBER, CR.REGNUMBER as COMPONENTID
        FROM   VW_MIXTURE M, VW_MIXTURE_COMPONENT MC, VW_COMPOUND C, VW_STRUCTURE S, VW_REGISTRYNUMBER R, VW_REGISTRYNUMBER CR
        WHERE  M.MIXTUREID = MC.MIXTUREID AND MC.COMPOUNDID = C.COMPOUNDID AND C.STRUCTUREID = S.STRUCTUREID AND M.REGID = R.REGID AND
	       C.REGID = CR.REGID
        ORDER BY R.REGNUMBER;

CREATE OR REPLACE VIEW VW_MIXTURE_BATCHCOMPONENT AS 
    SELECT MC.MIXTUREID, BC.ID, BC.BATCHID, BC.MIXTURECOMPONENTID, BC.ORDERINDEX 
    FROM VW_MIXTURE_COMPONENT MC, VW_BATCHCOMPONENT BC WHERE MC.MIXTURECOMPONENTID = BC.MIXTURECOMPONENTID;

CREATE OR REPLACE VIEW VW_MIXTURE_BATCH AS 
    SELECT M.MIXTUREID, R.REGNUMBER, B.BATCHID, B.BATCHNUMBER, B.REGID, B.DATECREATED, B.DATELASTMODIFIED, B.PERSONCREATED, B.PERSONREGISTERED, B.TEMPBATCHID 
        FROM REGDB.VW_MIXTURE M, REGDB.VW_REGISTRYNUMBER R, REGDB.VW_BATCH B
        WHERE M.REGID = R.REGID AND R.REGID = B.REGID;

CREATE OR REPLACE VIEW VW_MIXTURE_REGNUMBER AS
    SELECT  M.*, R.RegNumber, R.SequenceNumber 
    FROM VW_Mixture M, VW_RegistryNumber R WHERE  M.RegID =R.RegID; 

CREATE OR REPLACE NOFORCE VIEW VW_BatchIdentifier 
	(ID,TYPE,BatchID,Value,OrderIndex) AS 
	SELECT ID,TYPE,BATCHID,VALUE,ORDERINDEX FROM BATCH_IDENTIFIER;

--BULKREGISTRATION LOG

CREATE OR REPLACE FORCE VIEW VW_Log_BulkRegistration_id 
	(Log_ID,Duplicate_Action,Description,User_ID,Datetime_Stamp) AS
	SELECT LOG_ID, DUPLICATE_ACTION, DESCRIPTION, USER_ID, DATETIME_STAMP FROM Log_BulkRegistration_ID;

CREATE OR REPLACE FORCE VIEW VW_Log_BulkRegistration 
	(Id, Log_ID, temp_id, Action, reg_number, batch_number, comments) AS
	SELECT Id, Log_ID, Temp_ID, ACTION, Reg_Number, Batch_Number, Comments FROM Log_BulkRegistration;


-- Unit view so it can be overwritten by Inventory or other apps as needed
CREATE OR REPLACE FORCE VIEW VW_Unit AS
SELECT L.ID, PICKLISTVALUE AS UNIT
FROM PICKLIST L , PICKLISTDOMAIN D
WHERE D.ID = L.PICKLISTDOMAINID
AND D.DESCRIPTION = 'Units';

--#########################################################
--Creating chemical structure indexes
--#########################################################

prompt Creating chemical structure indexes...

DECLARE
	PROCEDURE createCartridgeIndex(iName IN varchar2, tName IN varchar2, fName IN varchar2) IS
			n NUMBER;
		BEGIN
			select count(*) into n from user_indexes where Upper(index_name) = iName AND Upper(table_owner)= '&&schemaName';
			if n = 1 then
				execute immediate 'DROP INDEX '||iName||' force';
			end if;
			execute immediate 'CREATE INDEX '||iName|| ' ON ' || tName || '('||fName||')
								indexType is cscartridge.moleculeindextype
								PARAMETERS(''TABLESPACE=&&cscartTableSpaceName,FULLEXACT=INDEX'')';
		END createCartridgeIndex;
BEGIN
	createCartridgeIndex('MX', 'STRUCTURES', 'BASE64_CDX');
	createCartridgeIndex('MX2', 'TEMPORARY_COMPOUND', 'BASE64_CDX');
	createCartridgeIndex('MX3', 'MIXTURES', 'STRUCTUREAGGREGATION');
END;
/

--#########################################################
--CREATE LOG CONTEXT
--#########################################################

CREATE TABLE Log(ID NUMBER(8),LogDate DATE DEFAULT SYSDATE, LogUser VARCHAR(30) DEFAULT USER, PC VARCHAR(30) DEFAULT USERENV('TERMINAL'),LogProcedure CLOB,LogComment CLOB);

ALTER TABLE Log ADD CONSTRAINT LogPK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName;
 
CREATE SEQUENCE LogSeq
  START WITH 1
  INCREMENT BY 1
  MINVALUE 1
  CACHE 2
  NOCYCLE 
  NOORDER;

CREATE OR REPLACE TRIGGER LogTrg
  BEFORE INSERT ON Log
  FOR EACH ROW
BEGIN
  SELECT LogSeq.NEXTVAL INTO :NEW.ID  FROM DUAL;
END;
/



--#########################################################
--CUSTOMIZATIONS
--#########################################################


--#########################################################
--CREATE PACKAGES
--#########################################################

@sql\CREATE_Packages.sql

