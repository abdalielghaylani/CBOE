<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="Data Loader|Functions" MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="Default.xml" MadCap:SearchType="Stem">
    <!-- saved from url=(0014)about:internet -->
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Boolean Functions</title>
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/help_ie.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <div class="navigation">
            <table style="WIDTH: 100%;" width="100%">
                <tr valign="bottom">
                    <td width="95%" align="left" valign="bottom" style="font-family: Arial;font-size: 12pt;"><em style="font-style: italic;"></em>DataLoader</td>
                </tr>
                <tr align="left" valign="top">
                    <td style="font-family: Arial;font-size: 12pt;font-weight: bold;">
                        <hr width="100%" size="0" align="center" />Administrator<strong>'s Guide</strong></td>
                </tr>
            </table>
        </div>
        <h1>Boolean Functions</h1>
        <p>The Boolean functions return only Boolean
value: True or False. These functions are applicable
only if the output field is of Boolean
type. Depending on the function you select,
you would need to select one or more input
fields to be supplied to the selected function.
Use the Fields button on the Calculation dialog
box to select the input fields after you have
selected a function.</p>
        <p>The Boolean functions supported by Data
Loader are:
</p>
        <ul style="list-style-type: square;">
            <li value="1">Boolean.Equals(Boolean): Matches two
input fields of Boolean type and returns
True if both are equal. Else, returns False.
</li>
            <li value="2">Char.Equals(Char): Matches two input
fields of Char type and returns True if both
are equal. Else, returns False.
</li>
            <li value="3">DateTime.Equals(DateTime): Matches two
input fields of DateTime type and returns
True if both are equal. Else, returns False.
</li>
            <li value="4">DateTime.IsDaylightSavingTime():
Returns True if the input field selected is a
daylight saving time. Else, returns False.
</li>
            <li value="5">Decimal.Equals(Decimal): Matches two
input fields of Decimal type and returns
True if both are equal. Else, returns False.
</li>
            <li value="6">Equals(DateTime,DateTime): Returns True
if the input fields of DateTime type supplied
to this function are equal. Else, returns
False.
</li>
            <li value="7">Equals(String,String): Returns True if the
input fields of String type supplied to this
function are equal. Else, returns False.
</li>
            <li value="8">Iif(Boolean,Boolean,Boolean): Evaluates
the first Boolean expression; if result is
True, the function returns the second Boolean
parameter else it returns the third Boolean
parameter.
</li>
            <li value="9">Interger.Equals(Integer): Returns True if
the input fields of Integer type supplied to
this function are equal. Else, returns False.
</li>
            <li value="10">IsControl(Char): Returns True if the input
field of Char type supplied to this function
is a control character. Else, returns False.
</li>
        </ul>
        <p><i><b>NOTE:</b> A ‘control character’ is a character
which does not have a direct visual appearance,
but rather causes some other display
action to occur, such as a transition to a new
line. Examples are tab, carriage return, and
line feed.
</i>
        </p>
        <ul style="list-style-type: square;">
            <li value="1">IsControl(String, Integer): Returns True if
the character at the position specified by the
Integer field, in the String type input field is
a control character. Else, returns False.
</li>
            <li value="2">IsDigit(Char): Returns True if the input
field of Char type supplied to this function
is a digit. Else, returns False.
</li>
            <li value="3">IsDigit(String,Integer): Returns True if the
character at the position specified by the
Integer field, in the String type input field is
a digit. Else, returns False.
</li>
            <li value="4">IsHighSurrogate(Char): Returns True if the
input field of Char type supplied to this
function is a high surrogate. Else, returns
False.
</li>
        </ul>
        <p><i><b>NOTE:</b> Surrogate pairs are character representations
that represent a single character
consisting of a sequence of two Unicode values.
In a coded pair, the first value is a high surrogate
and the second is a low surrogate. A high
surrogate is a character in the range U+D800
through U+DBFF. A low surrogate is a character
in the range U+DC00 through U+DFFF.
Surrogate pairs extend the character set
beyond the Unicode character.</i>
        </p>
        <ul style="list-style-type: square;">
            <li value="1">IsHighSurrogate(String,Integer): Returns
True if the character at the position specified
by the Integer field, in the String type
input field is a high surrogate. Else, returns
False.
</li>
            <li value="2">IsInfinity(Decimal): Returns True if the
input field of Decimal type is an infinity
value; else, returns False. An infinity value
can be the result of arithmetic overflow,
division by zero, or other exceptional operations.
</li>
            <li value="3">IsLeapYear(Integer): Returns True if the
input field of Integer type is a leap year.
Else, returns False.
</li>
            <li value="4">IsLetter(Char): Returns True if the input
field of Char type is categorized as a Unicode
letter. Else, returns False.
</li>
            <li value="5">IsLetter(String,Integer): Returns True if the
character at the position specified by the
Integer field, in the String type input field is
categorized as a Unicode letter. Else,
returns False.
</li>
            <li value="6">IsLetterOrDigit(Char): Returns True if the
input field of Char type is categorized as a
Unicode letter or digit. Else, returns False.
</li>
            <li value="7">IsLetterOrDigit(String,Integer): Returns
True if the character at the position specified
by the Integer field, in the String type
input field is categorized as a Unicode letter
or digit. Else, returns False.
</li>
            <li value="8">IsLower(Char): Returns True if the input
field of Char type is in lower case. Else,
returns False.
</li>
            <li value="9">IsLower(String,Integer): Returns True if the
character at the position specified by the
Integer field, in the String type input field is
in lower case. Else, returns False.
</li>
            <li value="10">IsLowSurrogate(Char): Returns True if the
input field of Char type supplied to this
function is a low surrogate. Else, returns
False.
</li>
            <li value="11">IsLowSurrogate(String,Integer): Returns
True if the character at the position specified
by the Integer field, in the String type
input field is a low surrogate. Else, returns
False.
</li>
            <li value="12">IsNaN(Decimal): Returns True if the input
field of Decimal type supplied to this function
is not a number. Else, returns False.
</li>
            <li value="13">IsNegativeInfinity(Decimal): Returns True
if the input field of Decimal type supplied
to this function is a negative infinity. Else,
returns False.
</li>
            <li value="14">IsNull(Boolean): Returns True if the input
field of Boolean type supplied to this function
is a null reference. Else, returns False.
</li>
            <li value="15">IsNull(Char): Returns True if the input field
of Char type supplied to this function is a
null reference. Else, returns False.
</li>
            <li value="16">IsNull(DateTime): Returns True if the input
field of DateTime type supplied to this
function is a null reference. Else, returns
False.
</li>
            <li value="17">IsNull(Decimal): Returns True if the input
field of Decimal type supplied to this function
is a null reference. Else, returns False.
</li>
            <li value="18">IsNull(Integer): Returns True if the input
field of Integer type supplied to this function
is a null reference. Else, returns False.
</li>
            <li value="19">IsNull(String): Returns True if the input
field of String type supplied to this function
is a null reference. Else, returns False.
</li>
            <li value="20">IsNullOrEmpty(String): Returns True if the
input field of String type supplied to this
function is a null reference or an empty
string. Else, returns False.</li>
            <li value="21">IsNumber(Char): Returns True if the input
field of Char type supplied to this function
is a number. Else, returns False.</li>
            <li value="22">IsNumber(String,Integer): Returns True if
the character at the position specified by the
Integer field, in the String type input field is
a number. Else, returns False.
</li>
            <li value="23">IsPositiveInfinity(Decimal): Returns True if
the input field of Decimal type supplied to
this function is a positive infinity. Else,
returns False.
</li>
            <li value="24">IsPunctuation(Char): Returns True if the
input field of Char type supplied to this
function is a punctuation mark, such as
comma or semi colon. Else, returns False.
</li>
            <li value="25">IsSeparator(Char): Returns True if the input
field of Char type supplied to this function
is a separator. Else, returns False.
</li>
            <li value="26">IsSurrogate(Char): Returns True if the input
field of Char type supplied to this function
is a surrogate. Else, returns False.
</li>
            <li value="27">IsSurrogate(String,Integer): Returns True if
the character at the position specified by the
Integer field, in the String type input field is
a surrogate. Else, returns False.
</li>
            <li value="28">IsSurrogatePair(Char,Char): Returns True if
the input fields of Char type supplied to this
function are parts of a surrogate pair. Else,
returns False.
</li>
            <li value="29">IsSurrogatePair(String,Integer): Returns
True if two adjacent Char objects at the
position specified by the Integer field, in
the String type input field form a surrogate
pair. Else, returns False.
</li>
            <li value="30">IsSymbol(Char): Returns True if the input
field of Char type supplied to this function
is a symbol. Else, returns False.
</li>
            <li value="31">IsSymbol(String,Integer): Returns True if
the character at the position specified by the
Integer field, in the String type input field is
a symbol. Else, returns False.
</li>
            <li value="32">IsUpper(Char): Returns True if the input
field of Char type supplied to this function
is an uppercase alphabet. Else, returns
False.
</li>
            <li value="33">IsUpper(String,Integer): Returns True if the
character at the position specified by the
Integer field, in the String type input field is
an uppercase alphabet. Else, returns False.
</li>
            <li value="34">IsWhiteSpace(Char): Returns True if the
input field of Char type supplied to this
function is a blank space. Else, returns
False.
</li>
            <li value="35">IsWhiteSpace(String,Integer): Returns True
if the character at the position specified by
the Integer field, in the String type input
field is a blank space. Else, returns False.
</li>
            <li value="36">op_Equality(DateTime,DateTime): Returns
True if the input fields of DateTime type
supplied to this function are equal. Else,
returns False.
</li>
            <li value="37">op_Equality(String,String): Returns True if
the input fields of String type supplied to
this function are equal. Else, returns False.
</li>
            <li value="38">op_GreaterThan(DateTime,DateTime):
Returns True if the first input field of Date-
Time type supplied to this function is
greater than the second input field. Else,
returns False.
</li>
            <li value="39">op_GreaterThanOrEqual(DateTime,Date-
Time): Returns True if the first input field
of DateTime type supplied to this function
is greater than or equal to the second input
field. Else, returns False
</li>
            <li value="40">op_Inequality(DateTime,DateTime):
Returns True if the input fields of DateTime
type supplied to this function are not equal.
Else, returns False.</li>
            <li value="41">op_Inequality(String,String): Returns True
if the input fields of String type supplied to
this function are not equal. Else, returns
False.
</li>
            <li value="42">op_LessThan(DateTime,DateTime):
Returns True if the first input field of Date-
Time type supplied to this function is lesser
than the second input field. Else, returns
False
</li>
            <li value="43">op_LessThanOrEqual(DateTime,Date-
Time): Returns True if the first input field
of DateTime type supplied to this function
is lesser than or equal to the second input
field. Else, returns False.</li>
            <li value="44">Parse(String): Returns the Boolean equivalent
of the specified string representation of
a logical value.
</li>
            <li value="45">String.Contains(String): Returns True if the
first input field of String type occurs within
the second String type field. Else, returns
False.
</li>
            <li value="46">String.EndsWith(String): Returns True if
the end of the first input field of String type
matches the second String type field. Else,
returns False.
</li>
            <li value="47">String.Equals(String): Returns True if the
first input field of String type is equal to the
second String type field. Else, returns False.
</li>
            <li value="48">String.IsNormalized(): Returns True if the
input field of String type supplied to this
function is in Normalization Form C
(NFC). Else, returns False.
</li>
        </ul>
        <p><i><b>NOTE:</b> The Unicode standard defines a process
called normalization. In this process, a
function returns one binary representation
when any of the equivalent binary representations
of a character is supplied to the function.
Normalization can be performed with several
algorithms called normalization forms, that
obey different rules. The .NET Framework currently
supports normalization forms C, D, KC,
and KD. Normalization forms C (NFC) is one
of these normalization forms.</i>
        </p>
        <ul style="list-style-type: square;">
            <li value="1">String.StartsWith(String): Returns True if
the beginning of the first input field of
String type matches the second String type
field. Else, returns False.
</li>
            <li value="2">ToBoolean(Boolean): Returns the Boolean
equivalent of a Boolean type input field.
There is no actual conversion in this case.
</li>
            <li value="3">ToBoolean(Char): Returns the Boolean
equivalent of a Char type input field.</li>
            <li value="4"> ToBoolean(DateTime): Returns the Boolean
equivalent of a DateTime type input
field.
</li>
            <li value="5">ToBoolean(Decimal): Returns the Boolean
equivalent of a Decimal type input field.
</li>
            <li value="6">ToBoolean(Integer): Returns the Boolean
equivalent of an Integer type input field.
</li>
            <li value="7">ToBoolean(String): Returns the Boolean
equivalent of a String type input field.</li>
        </ul>
        <p><b style="text-decoration: underline;">Related Topics</b>
            <br /><a href="Functions.htm">Functions</a>
        </p>
        <hr style="font-family: Arial;font-size: 10pt;" />
        <p style="text-align: right;"><b><span style="color: #646464;">PerkinElmer Inc.</span> | <span style="color: #0055a6;">For the Better</span></b>
            <br /><span style="color: #00a1de;font-weight: bold;"><span style="font-size: 9pt;">HUMAN HEALTH </span></span><b>| </b><span style="color: #6cb442;font-weight: bold;"><span style="font-size: 9pt;">ENVIRONMENTAL HEALTH</span></span>
            <br />940 Winter Street | Waltham, MA 02451<br /><a href="http://www.perkinelmer.com/informatics/support/" target="_blank">www.perkinelmer.com/informatics/support</a></p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>