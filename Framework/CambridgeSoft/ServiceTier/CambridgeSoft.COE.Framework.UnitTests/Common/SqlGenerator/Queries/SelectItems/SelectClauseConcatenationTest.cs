// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.COEConfigurationService;
using System.Xml;
using CambridgeSoft.COE.Framework.UnitTests.Helpers;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData;


namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation Unit Tests
    ///</summary>
    [TestClass()]
    public class SelectClauseConcatenationTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetDependantString (DBMSType : ORACLE)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetDependantStringSelectClauseConcatenationORACLETest()
        {
            string chemistryEngineSchema = ConfigurationUtilities.GetChemEngineSchema("SAMPLE");
            try
            {
                SelectClauseConcatenation target = new SelectClauseConcatenation();
                SelectClauseFormula selectClauseFormula = new SelectClauseFormula();
                selectClauseFormula.DataField = new Field("BASE64_CDX", System.Data.DbType.String);
                selectClauseFormula.CartridgeSchema = chemistryEngineSchema;

                SelectClauseLiteral selectClauseLiteral = new SelectClauseLiteral();
                selectClauseLiteral.Literal = "' - '";

                SelectClauseMolWeight selectClauseMolWeight = new SelectClauseMolWeight();
                selectClauseMolWeight.DataField = new Field("BASE64_CDX", System.Data.DbType.String);
                selectClauseMolWeight.CartridgeSchema = selectClauseFormula.CartridgeSchema;

                target.Clauses.Add(selectClauseFormula);
                target.Clauses.Add(selectClauseLiteral);
                target.Clauses.Add(selectClauseMolWeight);

                string expected = "(" + chemistryEngineSchema + ".Formula(\"BASE64_CDX\", '') || ' - ' || " + chemistryEngineSchema + ".MolWeight(\"BASE64_CDX\"))";
                string actual = target.Execute(DBMSType.ORACLE, new List<Value>());

                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseC" +
                        "oncatenation.GetDependantString did not return the expected value.");
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }



        /// <summary>
        ///A test for GetDependantString (DBMSType : SQLSERVER)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        [ExpectedException(typeof(Exception))]
        public void GetDependantStringSelectClauseConcatenationSQLSERVERTest()
        {
            string chemistryEngineSchema = ConfigurationUtilities.GetChemEngineSchema("SAMPLE");
            SelectClauseConcatenation target = new SelectClauseConcatenation();
            SelectClauseFormula selectClauseFormula = new SelectClauseFormula();
            selectClauseFormula.DataField = new Field("BASE64_CDX", System.Data.DbType.String);
            selectClauseFormula.CartridgeSchema = chemistryEngineSchema;

            SelectClauseLiteral selectClauseLiteral = new SelectClauseLiteral();
            selectClauseLiteral.Literal = "' - '";

            SelectClauseMolWeight selectClauseMolWeight = new SelectClauseMolWeight();
            selectClauseMolWeight.DataField = new Field("BASE64_CDX", System.Data.DbType.String);
            selectClauseMolWeight.CartridgeSchema = selectClauseFormula.CartridgeSchema;

            target.Clauses.Add(selectClauseFormula);
            target.Clauses.Add(selectClauseLiteral);
            target.Clauses.Add(selectClauseMolWeight);

            string expected = "(" + chemistryEngineSchema + ".ConvertCDX.CDXToFormula(\"BASE64_CDX\", 'SORTABLE=NO,HTML=NO') + ' - ' + " + chemistryEngineSchema + ".ConvertCDX.CDXToMolWeight(\"BASE64_CDX\"))";
            string actual = target.Execute(DBMSType.SQLSERVER, new List<Value>());
         

        }

        /// <summary>
        /// Unit Test for CreateInstance
        /// </summary>
        [TestMethod]
        public void CreateInstanceTest()
        {
            XmlNode resultNode = null;
            XmlDocument doc = new XmlDocument();
            string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(SearchHelper._LookupSearchTestpathToXml);
            doc.Load(pathToXmls + @"\ResultsCriteria.xml");
            DataView theDataView = GetDataView();
            XmlNodeList personNodes = doc.GetElementsByTagName("table");
            foreach (XmlNode item in personNodes)
            {
                resultNode = item;
                break;
            }
            if (resultNode != null && theDataView != null)
            {
                SelectClauseConcatenation theSelectClauseConcatenation = new SelectClauseConcatenation();
                SelectClauseItem theSelectClauseItem = theSelectClauseConcatenation.CreateInstance(resultNode, theDataView);
                Assert.IsNotNull(theSelectClauseItem, "SelectClauseAvg.CreateInstance did not return the expected value.");

            }

        }

        private ResultsCriteria GetResultsCriteria(string filename)
        {
            XmlDocument doc = new XmlDocument();
            string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(SearchHelper._LookupSearchTestpathToXml);
            doc.Load(pathToXmls + filename);
            ResultsCriteria rc = new ResultsCriteria(doc);
            return rc;
        }


        private DataView GetDataView()
        {
            try
            {
                XmlDocument doc = new XmlDocument();
                string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(SearchHelper._LookupSearchTestpathToXml);
                doc.Load(pathToXmls + @"\DataView.xml");
                DataView dataView = new DataView();
                dataView.LoadFromXML(doc);
                return dataView;
            }
            catch (Exception)
            {
                throw;
            }

        }

    }


}
