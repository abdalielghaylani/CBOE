// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using CambridgeSoft.COE.Framework.Common;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests {
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim Unit Tests
    ///</summary>
    [TestClass()]
    public class WhereClauseVerbatimTest {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext {
            get {
                return testContextInstance;
            }
            set {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetDependantString (DBMSType, ref List&lt;Value&gt;)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetDependantStringWhereClauseVerbatimTest() {
            WhereClauseVerbatim target = new WhereClauseVerbatim();
            target.Verbatim = "mytable.myfield = ? and mytable.myotherfield = ?";
            target.Parameters = new List<Value>();
            target.Parameters.Add(new Value("12", System.Data.DbType.Int32));
            target.Parameters.Add(new Value("lelele", System.Data.DbType.String));

            List<Value> values = new List<Value>();
            List<Value> values_expected = new List<Value>();
            values_expected.Add(new Value("12", System.Data.DbType.Int32));
            values_expected.Add(new Value("lelele", System.Data.DbType.String));

            string expected = "mytable.myfield = :0 and mytable.myotherfield = :1";
            string actual = string.Empty;

            actual = target.Execute(DBMSType.ORACLE, values);

            Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVer" +
                    "batim.GetDependantString did not return the expected value.");
        }
        private bool CompareElements(List<Value> values_expected, List<Value> values) {
            if(values_expected.Count != values.Count)
                return false;
            for(int i = 0; i < values.Count; i++) {

                if(values_expected[i] != values[i])
                    return false;
            }
            return true;
        }

        /// <summary>
        ///A test for GetDependantString (DBMSType, ref List&lt;Value&gt;)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetDependantStringWhereClauseVerbatim2Test() {
            WhereClauseVerbatim target = new WhereClauseVerbatim();

            target.Verbatim = "1 = 1));\nINSERT INTO LALALA (LELELE) VALUES ('LILILI');\nCOMMIT;\n--";
            DBMSType databaseType = DBMSType.ORACLE;

            System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values = new List<Value>();
            System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.SqlGenerator.Value> values_expected = new List<Value>();

            string expected = null;
            try {
                string actual = target.Execute(databaseType, values);

                Assert.AreEqual(values_expected, values, "values_GetDependantString_expected was not set correctly.");
                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVer" +
                        "batim.GetDependantString did not return the expected value.");

            } catch(Exception e) {
                string expectedException = "VerbatimCriteria - Attempt SQL Injection: 1 = 1));\nINSERT INTO LALALA (LELELE) VALUES ('LILILI');\nCOMMIT;\n--";
                string actualException = e.Message;
                Assert.AreEqual(expectedException, actualException, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVer" +
                        "batim.GetDependantString did not return the expected value.");
            }            
        }
    }
}
