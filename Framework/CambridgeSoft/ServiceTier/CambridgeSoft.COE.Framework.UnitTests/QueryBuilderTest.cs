// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using System.Xml;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils;
using System.Data;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems;

namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
	/// <summary>
	///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder and is intended
	///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder Unit Tests
	///</summary>
	[TestClass()]
	public class QueryBuilderTest
	{

        private string path = Utilities.GetProjectBasePath("CambridgeSoft.COE.Framework.UnitTests");
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext {
			get {
				return testContextInstance;
			}
			set {
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for GetQueryString (DBMSType)
		///</summary>
		[TestMethod()]
		public void GetQueryStringTest() {
			try {
				XmlDocument resultCriteriaXMLDocument = new XmlDocument();
				resultCriteriaXMLDocument.Load(path + "\\ResultCriteria.xml");
				XmlDocument searchCriteriaXMLDocument = new XmlDocument();
				searchCriteriaXMLDocument.Load(path + "\\SearchCriteria.xml");
				XmlDocument dataViewXMLDocument = new XmlDocument();
				dataViewXMLDocument.Load(path + "\\DataView.xml");

				QueryBuilder target = new QueryBuilder(dataViewXMLDocument, searchCriteriaXMLDocument, resultCriteriaXMLDocument);

                string[] expected = new string[1] { "(SELECT *, CHEMINVDB2.INV_COMPOUNDS.\"BASE64_CDX\" AS \"Twentieth\" FROM CHEMINVDB2.INV_COMPOUNDS, CHEMINVDB2.INV_CONTAINERS \"c\", CHEMINVDB2.CSDOHITLIST \"h\" WHERE CHEMINVDB2.INV_COMPOUNDS.\"COMPOUND_ID\" = \"c\".\"COMPOUND_ID_FK\" AND \"c\".\"CONTAINER_ID\"(+) = \"h\".\"ID\" AND (\"c\".\"QTY_INITIAL\" = :0) AND (TRIM(\"c\".\"BARCODE\") <> :1) AND (LTRIM(\"c\".\"BARCODE\") > :2) AND (RTRIM(\"c\".\"BARCODE\") < :3) AND (\"c\".\"LOCATION_ID_FK\" BETWEEN :4 AND :5) AND (TRIM(\"c\".\"BARCODE\") = :6) AND \"h\".\"HITLISTID\" IN(SELECT /*+ cardinality(t 10)*/ * FROM TABLE(CAST(COEDB.COEDBLibrary.ClobToTable(:7) as COEDB.MYTABLETYPE)) t WHERE ROWNUM >= 0))" };
				string[] actual = target.GetQueryString(DBMSType.ORACLE);

				CollectionAssert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.GetQueryString did n" +
						"ot return the expected value.");
				//Assert.Inconclusive("Verify the correctness of this test method.");
			} catch(Exception exception) {
				Assert.Fail(exception.Message);
				//System.Diagnostics.Debug.WriteLine("QueryBuilderTest EXCEPTION - " + exception.Message);
			}
		}

        /// <summary>
        ///A test for GetQueryString (DBMSType)
        ///</summary>
        [TestMethod()]
        public void VisiblePropertyManualQueryTest()
        {
            try
            {
                Query query = new Query();

                Table mainTable = new Table("mainTable");
                query.SetMainTable(mainTable);

                SelectClauseField visibleSelectClause = new SelectClauseField();
                visibleSelectClause.DataField = new Field(1, "visibleField", DbType.String);
                visibleSelectClause.DataField.Table = mainTable;
                visibleSelectClause.Alias = "visibleMan";

                SelectClauseField invisibleSelectClause = new SelectClauseField();
                invisibleSelectClause.DataField = new Field(2, "invisibleField", DbType.String);
                invisibleSelectClause.DataField.Table = mainTable;
                invisibleSelectClause.Alias = "invisibleMan";
                invisibleSelectClause.Visible = false;

                query.AddSelectItem(visibleSelectClause);
                query.AddSelectItem(invisibleSelectClause);

                /*OrderByClauseItem orderByInvisible = new OrderByClauseItem(invisibleSelectClause);
                orderByInvisible.Direction = ResultsCriteria.SortDirection.ASC;
                orderByInvisible.OrderByID = 1;

                query.AddOrderByItem(orderByInvisible);
                */

                string expected = "(select mainTable.\"visibleField\" as \"visibleMan\" from mainTable)";
                string actual = query.ToString();


                Assert.AreEqual(expected.ToLower(), actual.ToLower());
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        [TestMethod()]
        public void TrimValueTest()
        {
            try {
                string leftTrimmedRealValue = NormalizationUtils.TrimValue("0", DbType.Decimal, SearchCriteria.Positions.Left);
                Assert.AreEqual(leftTrimmedRealValue, "0", "Normalization Utils.TrimValue failed on left trim real value '0'");

                string rightTrimmedRealValue = NormalizationUtils.TrimValue("0000123.00000", DbType.Decimal, SearchCriteria.Positions.Right);
                Assert.AreEqual(rightTrimmedRealValue, "0000123.0", "Normalization Utils.TrimValue failed on right trim real value");

                string nullTrimmedRealValue = NormalizationUtils.TrimValue("", DbType.Decimal, SearchCriteria.Positions.Right);
                Assert.AreEqual(nullTrimmedRealValue, "", "Normalization Utils.TrimValue failed on right trim real value");

                string noneTrimmedRealValue = NormalizationUtils.TrimValue("00123.32100", DbType.Decimal, SearchCriteria.Positions.None);
                Assert.AreEqual(noneTrimmedRealValue, "00123.32100", "Normalization Utils.TrimValue failed on no trim real value");

                string TrimmedIntegerValue = NormalizationUtils.TrimValue("0000123000", DbType.Int32, SearchCriteria.Positions.Both);
                Assert.AreEqual(TrimmedIntegerValue, "123000", "Normalization Utils.TrimValue failed on full trim integer value");

                string leftTrimmedIntegerValue = NormalizationUtils.TrimValue("0000123000", DbType.Int32, SearchCriteria.Positions.Left);
                Assert.AreEqual(leftTrimmedIntegerValue, "123000", "Normalization Utils.TrimValue failed on left trim integer value");

                string rightTrimmedIntegerValue = NormalizationUtils.TrimValue("0000123000", DbType.Int32, SearchCriteria.Positions.Right);
                Assert.AreEqual(rightTrimmedIntegerValue, "0000123000", "Normalization Utils.TrimValue failed on right trim integer value");

                string nullTrimmedIntegerValue = NormalizationUtils.TrimValue("0", DbType.Int32, SearchCriteria.Positions.Right);
                Assert.AreEqual(nullTrimmedIntegerValue, "0", "Normalization Utils.TrimValue failed on right trim integer value");

                string TrimmedTextValue = NormalizationUtils.TrimValue("   0000.0000   ", DbType.String, SearchCriteria.Positions.Both);
                Assert.AreEqual(TrimmedTextValue, "0000.0000", "Normalization Utils.TrimValue failed on full trim text value");
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }
		/// <summary>
		///A test for BuildQuery (DBMSType)
		///</summary>
		[TestMethod()]
		public void BuildQueryTest() {
			try {
				path = path + @"\QueryBuilderTest XML\";

				XmlDocument resultCriteriaXMLDocument = new XmlDocument();
				resultCriteriaXMLDocument.Load(path + "ResultCriteria.xml");
				XmlDocument searchCriteriaXMLDocument = new XmlDocument();
				searchCriteriaXMLDocument.Load(path + "SearchCriteria.xml");
				XmlDocument dataViewXMLDocument = new XmlDocument();
				dataViewXMLDocument.Load(path + "DataView.xml");

				QueryBuilder target = new QueryBuilder(dataViewXMLDocument, searchCriteriaXMLDocument, resultCriteriaXMLDocument);

				Query[] resultingQueries = target.BuildQuery(DBMSType.ORACLE);

                string expectedSQL = "(SELECT *, CHEMINVDB2.INV_COMPOUNDS.\"BASE64_CDX\" AS \"fieldName\" FROM CHEMINVDB2.INV_COMPOUNDS, CHEMINVDB2.INV_CONTAINERS \"c\", CHEMINVDB2.CSDOHITLIST \"h\" WHERE CHEMINVDB2.INV_COMPOUNDS.\"COMPOUND_ID\" = \"c\".\"COMPOUND_ID_FK\" AND \"c\".\"CONTAINER_ID\"(+) = \"h\".\"ID\" AND (\"c\".\"QTY_INITIAL\" = :0) AND (TRIM(\"c\".\"BARCODE\") <> :1) AND (LTRIM(\"c\".\"BARCODE\") > :2) AND (RTRIM(\"c\".\"BARCODE\") < :3) AND (\"c\".\"LOCATION_ID_FK\" BETWEEN :4 AND :5) AND (TRIM(\"c\".\"BARCODE\") = :6) AND \"h\".\"HITLISTID\" IN(SELECT /*+ cardinality(t 10)*/ * FROM TABLE(CAST(COEDB.COEDBLibrary.ClobToTable(:7) as COEDB.MYTABLETYPE)) t WHERE ROWNUM >= 0))";
				string actualSQL = resultingQueries[0].ToString().Trim();

				List<Value> expectedParameters = new List<Value>();
				expectedParameters.Add(new Value("123000", DbType.Int32));
				expectedParameters.Add(new Value("lalalala lala l aaa", DbType.String));
				expectedParameters.Add(new Value("lalalala lala l aaa     ", DbType.String));
				expectedParameters.Add(new Value("     lalalala lala l aaa", DbType.String));
				expectedParameters.Add(new Value("123.3205", DbType.Decimal));
				expectedParameters.Add(new Value("123.3215", DbType.Decimal));
				expectedParameters.Add(new Value("123.321", DbType.String));

				//El parámetro de IN siempre es TEXT
				expectedParameters.Add(new Value("3432450, 3432440", DbType.String));

				List<Value> actualParameters = resultingQueries[0].ParamValues;

				foreach(Value currentParameter in actualParameters) {
					System.Diagnostics.Debug.WriteLine(currentParameter.Val + " " + currentParameter.Type);
				}
				Assert.AreEqual(expectedSQL, actualSQL, "CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.BuildQuery did not r" +
						"eturn the expected value.");
				//Assert.IsTrue(CompareElements(expectedParameters, actualParameters), "The actual and expected Parameters are different");
                AreEqual(expectedParameters, actualParameters);
			} catch(Exception exception) {
				Assert.Fail(exception.Message);
			}
		}

		private bool CompareElements(List<Value> values_expected, List<Value> values) {
			if(values_expected.Count != values.Count)
				return false;
			for(int i = 0; i < values.Count; i++) {

				if(values_expected[i] != values[i])
					return false;
			}
			return true;
		}

        private void AreEqual(List<Value> values_expected, List<Value> values)
        {
            if (values_expected.Count != values.Count)
                Assert.Fail("Expected and actual parameters count differ");

            for (int i = 0; i < values.Count; i++)
            {

                if (values_expected[i] != values[i])
                    Assert.Fail(string.Format("Actual and expected parameters are different: {0} - {1}", values[i].ToString(), values_expected[i].ToString()));
            }
        }
	}
}
