// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems;
using System.Xml;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
	/// <summary>
	///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query and is intended
	///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query Unit Tests
	///</summary>
	[TestFixture]
	public class QueryTest
	{
		private TestContext testContextInstance;
		private string projectBasePath;

		XmlDocument dataViewDocument;
		XmlDocument searchCriteriaDocument;
		XmlDocument resultCriteriaDocument;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext {
			get {
				return testContextInstance;
			}
			set {
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[TestFixtureSetUp]
		//public static void MyClassInitialize()
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[TestFixtureTearDown]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		[SetUp]
		public void MyTestInitialize()
		{
            projectBasePath = AppDomain.CurrentDomain.BaseDirectory.Substring(0, AppDomain.CurrentDomain.BaseDirectory.IndexOf("CambridgeSoft.COE.Framework.NUnitTests")) + "/CambridgeSoft.COE.Framework.NUnitTests";

			dataViewDocument = new XmlDocument();
			dataViewDocument.Load(projectBasePath + @"\OrderByTest XML\DataView.xml");

			searchCriteriaDocument = new XmlDocument();
			searchCriteriaDocument.Load(projectBasePath + @"\OrderByTest XML\SearchCriteria.xml");

			resultCriteriaDocument = new XmlDocument();
			resultCriteriaDocument.Load(projectBasePath + @"\OrderByTest XML\ResultCriteria.xml");

			ResultsCriteria resultCriteria = new ResultsCriteria(resultCriteriaDocument);
		}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TearDown]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for ToString ()
		///</summary>
		[Test]
		public void OrderByTest() {
			try {
				Query target = new Query();
				Table mainTable = new Table(3, "INV_COMPOUNDS", "C", "CHEMINVDB2");
				target.SetMainTable(mainTable);

				SelectClauseLiteral literal = new SelectClauseLiteral();
				literal.Literal = "*";
				target.AddSelectItem(literal);

				SelectClauseField compoundIdField = new SelectClauseField();
                Field dataField = new Field("COMPOUND_ID", System.Data.DbType.Int32);
                dataField.FieldId = 18;
                dataField.Table = mainTable;
                compoundIdField.DataField = dataField;
				//compoundIdField.Alias = "Id";

				OrderByClauseItem orderbyField = new OrderByClauseItem(compoundIdField);
				target.AddOrderByItem(orderbyField);

				SelectClauseField substanceNameField = new SelectClauseField();
                dataField = new Field("SUBSTANCE_NAME", System.Data.DbType.String);
                dataField.FieldId = 19;
                dataField.Table = mainTable;
				substanceNameField.DataField = dataField;
				//field.Alias = "";

				OrderByClauseItem orderbyFieldAgain = new OrderByClauseItem(substanceNameField);

				target.AddOrderByItem(orderbyFieldAgain);

				/*orderbyField = new OrderByClauseField("SUBSTANCE_NAME", System.Data.DbType.String);
				orderbyField.DataField.Table = mainTable;
				target.AddOrderByItem(orderbyField);
				 * */

				
				string expected = "(SELECT * FROM CHEMINVDB2.INV_COMPOUNDS \"C\" ORDER BY \"C\".\"COMPOUND_ID\" ASC, \"C\".\"SUBSTANCE_NAME\" ASC)";
				string actual = target.ToString();

				Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.ToString did not re" +
						"turn the expected value.");


				QueryBuilder builder = new QueryBuilder(dataViewDocument, searchCriteriaDocument, resultCriteriaDocument);
				
				builder.BuildQuery(DBMSType.ORACLE);

                expected = "(SELECT *, \"INV_COMPOUNDS\".\"COMPOUND_ID\" AS \"eighteenth\", \"INV_COMPOUNDS\".\"SUBSTANCE_NAME\" AS \"nineteenth\", \"INV_COMPOUNDS\".\"BASE64_CDX\" AS \"BASE64_CDX\" FROM CHEMINVDB2.INV_COMPOUNDS \"INV_COMPOUNDS\" ORDER BY \"INV_COMPOUNDS\".\"SUBSTANCE_NAME\" DESC, \"INV_COMPOUNDS\".\"COMPOUND_ID\" ASC, \"INV_COMPOUNDS\".\"BASE64_CDX\" DESC)";
				actual = builder.BuildQuery(DBMSType.ORACLE)[0].ToString();
				Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.ToString did not re" +
						"turn the expected value.");

			} catch(Exception exception) {
				Assert.Fail(exception.Message);
			}
		}
	}
}
