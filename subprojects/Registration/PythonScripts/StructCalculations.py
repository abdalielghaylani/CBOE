from os import *
from os.path import *
import sys
from ChemScript18 import *
from time import *
import logging

# This scripts expects that two local variables are setup externally
# cdx ==> Contains a base64cdx string
# scriptsPath ==> Contains the path to the child script location
scriptsPath = 'C:\Program Files (x86)\PerkinElmer\ChemOfficeEnterprise\Registration\PythonScripts\\'
logString = ''
workingMol = ''
HBondAcceptorValue = ''

#cdx = 'VmpDRDAxMDAEAwIBAAAAAAAAAAAAAACAAAAAAAMAEQAAAENoZW1EcmF3IDExLjAu\r\nMggAEwAAAFVudGl0bGVkIERvY3VtZW50BAIQAO4OSwDshBgAzROqADMznQABCQgA\r\nAAAAAAAAAAACCQgAAADhAACABgENCAEAAQgHAQABOgQBAAE7BAEAAEUEAQABPAQB\r\nAAAMBgEAAQ8GAQABDQYBAABCBAEAAEMEAQAARAQBAAAKCAgAAwBgAMgAAwALCAgA\r\nBAAAAPAAAwAJCAQAM7MCAAgIBAAAAAIABwgEAAAAAQAGCAQAAAAEAAUIBAAAAB4A\r\nBAgCAHgAAwgEAAAAeAAjCAEABQwIAQAAAggQAAAAJAAAACQAAAAkAAAAJAAAAzIA\r\nCAD///////8AAAAAAAD//wAAAAD/////AAAAAP//AAAAAP////8AAAAA/////wAA\r\n//8AASQAAAACAAMA5AQFAEFyaWFsBADkBA8AVGltZXMgTmV3IFJvbWFuAYAbAAAA\r\nBAIQAAAAAAAAAAAAAADQAgAAHAIWCAQAAAAkABgIBAAAACQAGQgAABAIAgABAA8I\r\nAgABAAKAGQAAAAQCEADuDksA7IQYAM0TqgAzM50AA4AFAAAABAIQAO4OSwDshBgA\r\nzROqABN7TQAEgAIAAAAAAggAAIB8AOwEGQAKAAIAAQABAwQAAwAAADcEAQABAAAE\r\ngAQAAAAAAggAAICaAOwEGQAKAAIAAwABAwQAAwAAADcEAQABAAAEgAYAAAAAAggA\r\nAICpAAAAMwAKAAIABQABAwQAAwAAADcEAQABAAAEgAgAAAAAAggAAICaABP7TAAK\r\nAAIABwABAwQAAwAAADcEAQABAAAEgAoAAAAAAggAAIB8ABP7TAAKAAIACQABAwQA\r\nAwAAADcEAQABAAAEgAwAAAAAAggAAIBtAAAAMwAKAAIACwABAwQAAwAAAAAABIAU\r\nAAAAAAIIAACATwAAADMACgACABMAAQMEAAMAAAACBAIABwArBAIAAgA3BAEAAQaA\r\nAAAAAAACCABmZlMAAGgvAAQCEADuDksAAGgvAJmZVQAA+EEAAQMEAAMAAAAjCAEA\r\nAAIHAgAAAAUHAQABAAcPAAEAAAADAGAAyAADAE5IMgAAAAAFgA4AAAAKAAIADQAB\r\nAwQAAwAAAAQGBAACAAAABQYEAAQAAAAABgIAAgADBgIAAQALBhAAEwAAAAAAAAAA\r\nAAAADwAAAAAABYAPAAAACgACAA4AAQMEAAMAAAAEBgQABAAAAAUGBAAGAAAACgYB\r\nAAEAAAWAEAAAAAoAAgAPAAEDBAADAAAABAYEAAYAAAAFBgQACAAAAAAGAgACAAMG\r\nAgABAAsGEAAPAAAAAAAAAAAAAAARAAAAAAAFgBEAAAAKAAIAEAABAwQAAwAAAAQG\r\nBAAIAAAABQYEAAoAAAAKBgEAAQAABYASAAAACgACABEAAQMEAAMAAAAEBgQACgAA\r\nAAUGBAAMAAAAAAYCAAIAAwYCAAEACwYQABEAAAAAAAAAFQAAABMAAAAAAAWAEwAA\r\nAAoAAgASAAEDBAADAAAABAYEAAwAAAAFBgQAAgAAAAoGAQABAAAFgBUAAAAKAAIA\r\nFAABAwQAAwAAAAQGBAAMAAAABQYEABQAAAAKBgEAAQAAAAADgBgAAAAEAhAAZkZn\r\nAABAiQAzU3MAMzOdAASAFwAAAAACCACZmWwAAJCNAAoAAgAWAAEDBAADAAAAAgQC\r\nABEAKwQCAAEANwQBAAEGgBYAAAAAAggAAEBxAABAiQAEAhAAZkZnAABAiQAzU3MA\r\nMzOdAAoAAgAVAAEDBAADAAAAIwgBAAAGBwIAAQACBwIAAQAFBwEAAQAHDwABAAAA\r\nBAAAAPAAAwBIQ2wAAAAAAAAAAAAAAAAAAA=='
LOG_FILENAME = scriptsPath + '\log.txt'
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)s %(message)s',
    filename=LOG_FILENAME,
    filemode='w'
)

try:
    # Setup inputs expected by child scripts
    InputChemistry = cdx #'VmpDRDAxMDAEAwIBAAAAAAAAAAAAAACAAAAAAAMAEQAAAENoZW1EcmF3IDExLjAu\r\nMggAEwAAAFVudGl0bGVkIERvY3VtZW50BAIQAO4OSwDshBgAzROqADMznQABCQgA\r\nAAAAAAAAAAACCQgAAADhAACABgENCAEAAQgHAQABOgQBAAE7BAEAAEUEAQABPAQB\r\nAAAMBgEAAQ8GAQABDQYBAABCBAEAAEMEAQAARAQBAAAKCAgAAwBgAMgAAwALCAgA\r\nBAAAAPAAAwAJCAQAM7MCAAgIBAAAAAIABwgEAAAAAQAGCAQAAAAEAAUIBAAAAB4A\r\nBAgCAHgAAwgEAAAAeAAjCAEABQwIAQAAAggQAAAAJAAAACQAAAAkAAAAJAAAAzIA\r\nCAD///////8AAAAAAAD//wAAAAD/////AAAAAP//AAAAAP////8AAAAA/////wAA\r\n//8AASQAAAACAAMA5AQFAEFyaWFsBADkBA8AVGltZXMgTmV3IFJvbWFuAYAbAAAA\r\nBAIQAAAAAAAAAAAAAADQAgAAHAIWCAQAAAAkABgIBAAAACQAGQgAABAIAgABAA8I\r\nAgABAAKAGQAAAAQCEADuDksA7IQYAM0TqgAzM50AA4AFAAAABAIQAO4OSwDshBgA\r\nzROqABN7TQAEgAIAAAAAAggAAIB8AOwEGQAKAAIAAQABAwQAAwAAADcEAQABAAAE\r\ngAQAAAAAAggAAICaAOwEGQAKAAIAAwABAwQAAwAAADcEAQABAAAEgAYAAAAAAggA\r\nAICpAAAAMwAKAAIABQABAwQAAwAAADcEAQABAAAEgAgAAAAAAggAAICaABP7TAAK\r\nAAIABwABAwQAAwAAADcEAQABAAAEgAoAAAAAAggAAIB8ABP7TAAKAAIACQABAwQA\r\nAwAAADcEAQABAAAEgAwAAAAAAggAAIBtAAAAMwAKAAIACwABAwQAAwAAAAAABIAU\r\nAAAAAAIIAACATwAAADMACgACABMAAQMEAAMAAAACBAIABwArBAIAAgA3BAEAAQaA\r\nAAAAAAACCABmZlMAAGgvAAQCEADuDksAAGgvAJmZVQAA+EEAAQMEAAMAAAAjCAEA\r\nAAIHAgAAAAUHAQABAAcPAAEAAAADAGAAyAADAE5IMgAAAAAFgA4AAAAKAAIADQAB\r\nAwQAAwAAAAQGBAACAAAABQYEAAQAAAAABgIAAgADBgIAAQALBhAAEwAAAAAAAAAA\r\nAAAADwAAAAAABYAPAAAACgACAA4AAQMEAAMAAAAEBgQABAAAAAUGBAAGAAAACgYB\r\nAAEAAAWAEAAAAAoAAgAPAAEDBAADAAAABAYEAAYAAAAFBgQACAAAAAAGAgACAAMG\r\nAgABAAsGEAAPAAAAAAAAAAAAAAARAAAAAAAFgBEAAAAKAAIAEAABAwQAAwAAAAQG\r\nBAAIAAAABQYEAAoAAAAKBgEAAQAABYASAAAACgACABEAAQMEAAMAAAAEBgQACgAA\r\nAAUGBAAMAAAAAAYCAAIAAwYCAAEACwYQABEAAAAAAAAAFQAAABMAAAAAAAWAEwAA\r\nAAoAAgASAAEDBAADAAAABAYEAAwAAAAFBgQAAgAAAAoGAQABAAAFgBUAAAAKAAIA\r\nFAABAwQAAwAAAAQGBAAMAAAABQYEABQAAAAKBgEAAQAAAAADgBgAAAAEAhAAZkZn\r\nAABAiQAzU3MAMzOdAASAFwAAAAACCACZmWwAAJCNAAoAAgAWAAEDBAADAAAAAgQC\r\nABEAKwQCAAEANwQBAAEGgBYAAAAAAggAAEBxAABAiQAEAhAAZkZnAABAiQAzU3MA\r\nMzOdAAoAAgAVAAEDBAADAAAAIwgBAAAGBwIAAQACBwIAAQAFBwEAAQAHDwABAAAA\r\nBAAAAPAAAwBIQ2wAAAAAAAAAAAAAAAAAAA=='
    mydict = {'InputChemistry':InputChemistry,'status_string':logString,'scriptsPath':scriptsPath}

    # Transform script
    #execfile(scriptsPath + '\TransformScript.py', mydict)    
    # mydict['status_string'] = ''

    # Clean script
    execfile(scriptsPath + '\CleanScript.py', mydict)
    mydict['status_string'] = ''
    
    #Get a list of all the bonds.  It has an alias call "bonds".
    
    m = StructureData.LoadData(InputChemistry)
    
    #tPSA
    top = m.Topology()
    TPSA = top.PolarSurfaceArea()
    print 'tPSA ' + str(TPSA)

    #Pka
    ROTATABLE_BONDS = top.NumOfRotatableBonds()  
    print 'RotatableBonds ' + str(ROTATABLE_BONDS)
    
    #LogP
    LOGP_TEO = StructureData.PartitionCoefficient(m)
    #print 'LogP ' + str(LOG_P)
    #IUPAC Name
    IUPAC = m.ChemicalName()  
    print 'IUPAC ' + str(IUPAC)
    #HBonds    
    HBOND_ACPTR = 0
    for b in m.HydrogenAcceptors():
         HBOND_ACPTR = HBOND_ACPTR + 1
    print 'HBondAcceptors ' + str(HBOND_ACPTR)
    HB_DONORS = 0
    for b in m.HydrogenDonors():
         HB_DONORS = HB_DONORS + 1
    print 'HBondDonors ' + str(HB_DONORS)
    count = 0
    for b in m.GetBonds():
        count = count + 1
    print 'bonds ' + str(count)
    #Rings
    RINGS = 0
    ri =  RingInfo(m)
    for b in ri.BasicRings():
        RINGS = RINGS + 1
    for b in ri.AromaticRings():
        RINGS = RINGS + 1
    for b in ri.BridgedRings():
        RINGS = RINGS + 1
    for b in ri.ExtendedRings():
        RINGS = RINGS + 1
    for b in ri.ExtendedRings():
        RINGS = RINGS + 1    
    print 'rings  ' + str(RINGS)
    
except:
    # print "Unexpected error:", sys.exc_info()[0]
    logging.exception('Unexpected error! ')
    logString = sys.exc_info()[1]
finally:
    print(logString)