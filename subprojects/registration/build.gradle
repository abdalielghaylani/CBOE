buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
    baseName = 'registration'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'pkiinformatics'
task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        exec {
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                commandLine 'cmd', '/c', 'scripts\\remove-docker.cmd'
            } else {
                commandLine './scripts/remove-docker.sh'
            }
        }
        copy {
            from jar
            into stageDir
        }
    }
    doLast {
        exec {
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                commandLine 'cmd', '/c', 'scripts\\setup-docker.cmd'
            } else {
                commandLine './scripts/setup-docker.sh'
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile project(':registration.client')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.data:spring-data-rest-hal-browser')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    //compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile('org.springframework.boot:spring-boot-starter-jersey')
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

task copyClient(type: Copy) {
    from ('../registration.client/dist') {
        include '**/*.*'
    }
    includeEmptyDirs = false
    into "$buildDir/resources/main/static"
}

processResources {
    dependsOn copyClient
}

task stage(dependsOn: [':registration.client:build', 'jar', 'bootRepackage'])