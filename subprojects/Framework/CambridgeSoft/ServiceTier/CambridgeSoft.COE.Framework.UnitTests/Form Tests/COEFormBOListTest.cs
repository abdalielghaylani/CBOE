// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.COEFormService;
using System.Xml;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.COESecurityService;
using CambridgeSoft.COE.Framework.Common.Messaging;
using CambridgeSoft.COE.Framework.UnitTests.Helpers;
using System.Configuration;

namespace CambridgeSoft.COE.Framework.COEFormService.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.COEFormService.COEFormBOList and is intended
    ///to contain all CambridgeSoft.COE.Framework.COEFormService.COEFormBOList Unit Tests
    ///</summary>
    [TestClass()]
    public class COEFormBOListTest
    {
        #region Variables
        private string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(@"\TestXML");
        private string databaseName = "SAMPLE";
        private string USERNAME = ConfigurationManager.AppSettings["LogonUserName"];
        private string PASSWORD = ConfigurationManager.AppSettings["LogonPassword"];
        List<int> newIds = null;

        private TestContext testContextInstance;
        #endregion

        #region Properties
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #endregion

        #region Additional test attributes

        [TestInitialize()]
        public void MyTestInitialize()
        {
            System.Security.Principal.IPrincipal user = Csla.ApplicationContext.User;
            bool result = COEPrincipal.Login(USERNAME, PASSWORD);
            newIds = new List<int>();
        }

        [TestCleanup()]
        public void MyTestCleanup()
        {
            foreach (int id in newIds)
                COEFormBO.Delete(id);
            COEPrincipal.Logout();
        }
        #endregion

        #region Test Methods
        /// <summary>
        ///A test for GetCOEFormBOList (string)
        ///</summary>
        [TestMethod()]
        public void GetCOEFormBOList()
        {
            COEFormBOList Notexpected = null;
            COEFormBOList actual;

            actual = CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOList();

            Assert.IsTrue(Notexpected != actual, "CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOList did not" +
                    " return the expected value.");
            Console.WriteLine("Number of forms in GetCOEFormBOList: " + actual.Count);
        }

        /// <summary>
        ///A test for GetCOEFormBOList (string)
        ///</summary>
        [TestMethod()]
        public void GetCOEFormBOList_ByFOrmTypeIDTest()
        {
            COEFormBOList Notexpected = null;
            COEFormBOList actual;

            actual = CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOList(USERNAME, databaseName, string.Empty, 1, true);

            Assert.IsTrue(Notexpected != actual, "CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOList did not" +
                    " return the expected value.");
            Console.WriteLine("Number of forms in GetCOEFormBOList: " + actual.Count);
        }

        /// <summary>
        ///A test for GetCOEFormBOList (string)
        ///</summary>
        [TestMethod()]
        public void GetCOEFormBOList_ByFOrmTypeTest()
        {
            COEFormBOList Notexpected = null;
            COEFormBOList actual;

            actual = CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOList(USERNAME, databaseName, string.Empty, "application", true);

            Assert.IsTrue(Notexpected != actual, "CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOList did not" +
                    " return the expected value.");
            Console.WriteLine("Number of forms in GetCOEFormBOList: " + actual.Count);
        }

        /// <summary>
        ///A test for GetCOEFormBOList (string)
        ///</summary>
        [TestMethod()]
        public void NewList_Test()
        {
            COEFormBOList Notexpected = null;
            COEFormBOList actual;

            actual = CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.NewList(databaseName);

            Assert.IsTrue(Notexpected != actual, "CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOList did not" +
                    " return the expected value.");
            Console.WriteLine("Number of forms in GetCOEFormBOList: " + actual.Count);
        }

        [TestMethod()]
        public void GetCOEFormBOListbyAllDatabases()
        {
            COEFormBOList actual;

            actual = CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOListbyAllDatabases();

            Assert.IsNotNull(actual, "CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOListbyAllDatabases did not" +
                    " return the expected value.");
            Console.WriteLine("Number of forms in GetCOEFormBOListbyAllDatabases: " + actual.Count);
        }

        [TestMethod()]
        public void GetCOEFormBOListbyUser_COEDB()
        {
            string userName = "COEDB";
            COEFormBOList actual;

            actual = CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOListbyUser(userName);

            Assert.IsNotNull(actual, "CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOListbyUser did not" +
                    " return the expected value.");
            Console.WriteLine("Number of forms in GetCOEFormBOListbyUser_COEDB: " + actual.Count);
        }

        [TestMethod()]
        public void GetCOEFormBOListbyDatabase_REGDB()
        {
            string databaseName = "REGDB";
            COEFormBOList actual;

            actual = CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOListbyDatabase(databaseName);

            Assert.IsNotNull(actual, "CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.GetCOEFormBOListbyDatabase did not" +
                    " return the expected value.");
            Console.WriteLine("Number of forms in GetCOEFormBOListbyDatabase_REGDB: " + actual.Count);
        }

        /// <summary>
        ///A test for NewList ()
        ///</summary>
        [TestMethod()]
        public void NewListTest()
        {
            try
            {
                //this should create a new object
                FormObject(USERNAME, true);
                FormObject(USERNAME, false);
                FormObject(USERNAME, true);
                FormObject(USERNAME, false);
                FormObject(USERNAME, true);
                FormObject(USERNAME, false);
                FormObject(USERNAME, true);
                FormObject(USERNAME, false);
            }
            catch (Exception) { }
            Assert.IsTrue(1 == 1, "CambridgeSoft.COE.Framework.COEFormService.COEFormBO" +
                    ".New did not return the expected value.");
        }

        #endregion

        #region Private Methods
        private void FormObject(string userName, bool isPublic)
        {
            //this should create a new object
            COEFormBO formObject = COEFormBO.New(databaseName);
            formObject.Name = "temp";
            formObject.Description = "temp";
            formObject.FormGroupId = 1;
            formObject.IsPublic = isPublic;
            //this really should come from the logged in user..
            formObject.UserName = userName;
            formObject.COEFormGroup = FormGroup.GetFormGroup(GetFormXMLStringForStoring());
            //this is where it get's persisted
            formObject = formObject.Save();
            newIds.Add(formObject.ID);
        }

        private string GetFormXMLStringForStoring()
        {
            //this is not implemented yet, so we will use an alternate route
            XmlDocument doc = new XmlDocument();
            doc.Load(pathToXmls + "\\COEFormForTests.xml");
            return doc.InnerXml;//That must be InnerXML instead of String.
        }
        #endregion
    }
}
