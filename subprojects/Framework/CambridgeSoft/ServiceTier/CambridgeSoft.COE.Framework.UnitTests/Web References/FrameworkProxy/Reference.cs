//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.261.
// 
#pragma warning disable 1591

namespace CambridgeSoft.COE.Framework.UnitTests.FrameworkProxy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="COEFrameworkServicesSoap", Namespace="CambridgeSoft.COE.Framework.Web")]
    public partial class COEFrameworkServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private COECredentials cOECredentialsValueField;
        
        private System.Threading.SendOrPostCallback DoSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoGlobalSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilteredDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GlobalSearchGetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSearchSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIdsSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataPageSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDataViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataViewStrOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDataViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDataViewStrOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishTableToDataviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataViewDataListByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataViewDataListByDatabaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataViewListforAllDatabasesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public COEFrameworkServices() {
            this.Url = global::CambridgeSoft.COE.Framework.UnitTests.Properties.Settings.Default.CambridgeSoft_COE_Framework_UnitTests_FrameworkProxy_COEFrameworkServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public COECredentials COECredentialsValue {
            get {
                return this.cOECredentialsValueField;
            }
            set {
                this.cOECredentialsValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DoSearchCompletedEventHandler DoSearchCompleted;
        
        /// <remarks/>
        public event DoGlobalSearchCompletedEventHandler DoGlobalSearchCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event GetFilteredDataCompletedEventHandler GetFilteredDataCompleted;
        
        /// <remarks/>
        public event GlobalSearchGetDataCompletedEventHandler GlobalSearchGetDataCompleted;
        
        /// <remarks/>
        public event DoSearchSimpleCompletedEventHandler DoSearchSimpleCompleted;
        
        /// <remarks/>
        public event GetIdsSimpleCompletedEventHandler GetIdsSimpleCompleted;
        
        /// <remarks/>
        public event GetDataPageSimpleCompletedEventHandler GetDataPageSimpleCompleted;
        
        /// <remarks/>
        public event ExportDataCompletedEventHandler ExportDataCompleted;
        
        /// <remarks/>
        public event GetDataViewCompletedEventHandler GetDataViewCompleted;
        
        /// <remarks/>
        public event DeleteDataViewCompletedEventHandler DeleteDataViewCompleted;
        
        /// <remarks/>
        public event UpdateDataViewCompletedEventHandler UpdateDataViewCompleted;
        
        /// <remarks/>
        public event UpdateDataViewStrCompletedEventHandler UpdateDataViewStrCompleted;
        
        /// <remarks/>
        public event InsertDataViewCompletedEventHandler InsertDataViewCompleted;
        
        /// <remarks/>
        public event InsertDataViewStrCompletedEventHandler InsertDataViewStrCompleted;
        
        /// <remarks/>
        public event PublishTableToDataviewCompletedEventHandler PublishTableToDataviewCompleted;
        
        /// <remarks/>
        public event GetDataViewDataListByUserCompletedEventHandler GetDataViewDataListByUserCompleted;
        
        /// <remarks/>
        public event GetDataViewDataListByDatabaseCompletedEventHandler GetDataViewDataListByDatabaseCompleted;
        
        /// <remarks/>
        public event GetDataViewListforAllDatabasesCompletedEventHandler GetDataViewListforAllDatabasesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/DoSearch", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoSearch(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString) {
            object[] results = this.Invoke("DoSearch", new object[] {
                        searchCriteriaString,
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoSearchAsync(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString) {
            this.DoSearchAsync(searchCriteriaString, resultsCriteriaString, pagingInfoString, dataViewString, null);
        }
        
        /// <remarks/>
        public void DoSearchAsync(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString, object userState) {
            if ((this.DoSearchOperationCompleted == null)) {
                this.DoSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSearchOperationCompleted);
            }
            this.InvokeAsync("DoSearch", new object[] {
                        searchCriteriaString,
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString}, this.DoSearchOperationCompleted, userState);
        }
        
        private void OnDoSearchOperationCompleted(object arg) {
            if ((this.DoSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSearchCompleted(this, new DoSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/DoGlobalSearch", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoGlobalSearch(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString) {
            object[] results = this.Invoke("DoGlobalSearch", new object[] {
                        searchCriteriaString,
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoGlobalSearchAsync(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString) {
            this.DoGlobalSearchAsync(searchCriteriaString, resultsCriteriaString, pagingInfoString, dataViewString, null);
        }
        
        /// <remarks/>
        public void DoGlobalSearchAsync(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString, object userState) {
            if ((this.DoGlobalSearchOperationCompleted == null)) {
                this.DoGlobalSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoGlobalSearchOperationCompleted);
            }
            this.InvokeAsync("DoGlobalSearch", new object[] {
                        searchCriteriaString,
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString}, this.DoGlobalSearchOperationCompleted, userState);
        }
        
        private void OnDoGlobalSearchOperationCompleted(object arg) {
            if ((this.DoGlobalSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoGlobalSearchCompleted(this, new DoGlobalSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GetData", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetData(string resultsCriteriaString, string pagingInfoString, string dataViewString) {
            object[] results = this.Invoke("GetData", new object[] {
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(string resultsCriteriaString, string pagingInfoString, string dataViewString) {
            this.GetDataAsync(resultsCriteriaString, pagingInfoString, dataViewString, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(string resultsCriteriaString, string pagingInfoString, string dataViewString, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GetFilteredData", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFilteredData(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString, bool useRealTableNames) {
            object[] results = this.Invoke("GetFilteredData", new object[] {
                        searchCriteriaString,
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString,
                        useRealTableNames});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFilteredDataAsync(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString, bool useRealTableNames) {
            this.GetFilteredDataAsync(searchCriteriaString, resultsCriteriaString, pagingInfoString, dataViewString, useRealTableNames, null);
        }
        
        /// <remarks/>
        public void GetFilteredDataAsync(string searchCriteriaString, string resultsCriteriaString, string pagingInfoString, string dataViewString, bool useRealTableNames, object userState) {
            if ((this.GetFilteredDataOperationCompleted == null)) {
                this.GetFilteredDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilteredDataOperationCompleted);
            }
            this.InvokeAsync("GetFilteredData", new object[] {
                        searchCriteriaString,
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString,
                        useRealTableNames}, this.GetFilteredDataOperationCompleted, userState);
        }
        
        private void OnGetFilteredDataOperationCompleted(object arg) {
            if ((this.GetFilteredDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilteredDataCompleted(this, new GetFilteredDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GlobalSearchGetData", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GlobalSearchGetData(string resultsCriteriaString, string pagingInfoString, string dataViewString) {
            object[] results = this.Invoke("GlobalSearchGetData", new object[] {
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GlobalSearchGetDataAsync(string resultsCriteriaString, string pagingInfoString, string dataViewString) {
            this.GlobalSearchGetDataAsync(resultsCriteriaString, pagingInfoString, dataViewString, null);
        }
        
        /// <remarks/>
        public void GlobalSearchGetDataAsync(string resultsCriteriaString, string pagingInfoString, string dataViewString, object userState) {
            if ((this.GlobalSearchGetDataOperationCompleted == null)) {
                this.GlobalSearchGetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGlobalSearchGetDataOperationCompleted);
            }
            this.InvokeAsync("GlobalSearchGetData", new object[] {
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString}, this.GlobalSearchGetDataOperationCompleted, userState);
        }
        
        private void OnGlobalSearchGetDataOperationCompleted(object arg) {
            if ((this.GlobalSearchGetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GlobalSearchGetDataCompleted(this, new GlobalSearchGetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/DoSearchSimple", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataResult DoSearchSimple(SearchInput searchInput, string[] resultFields, ResultPageInfo pageInfo, int dataviewID) {
            object[] results = this.Invoke("DoSearchSimple", new object[] {
                        searchInput,
                        resultFields,
                        pageInfo,
                        dataviewID});
            return ((DataResult)(results[0]));
        }
        
        /// <remarks/>
        public void DoSearchSimpleAsync(SearchInput searchInput, string[] resultFields, ResultPageInfo pageInfo, int dataviewID) {
            this.DoSearchSimpleAsync(searchInput, resultFields, pageInfo, dataviewID, null);
        }
        
        /// <remarks/>
        public void DoSearchSimpleAsync(SearchInput searchInput, string[] resultFields, ResultPageInfo pageInfo, int dataviewID, object userState) {
            if ((this.DoSearchSimpleOperationCompleted == null)) {
                this.DoSearchSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSearchSimpleOperationCompleted);
            }
            this.InvokeAsync("DoSearchSimple", new object[] {
                        searchInput,
                        resultFields,
                        pageInfo,
                        dataviewID}, this.DoSearchSimpleOperationCompleted, userState);
        }
        
        private void OnDoSearchSimpleOperationCompleted(object arg) {
            if ((this.DoSearchSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSearchSimpleCompleted(this, new DoSearchSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GetIdsSimple", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataListResult GetIdsSimple(SearchInput searchInput, string pkField, ResultPageInfo pageInfo, int dataviewID) {
            object[] results = this.Invoke("GetIdsSimple", new object[] {
                        searchInput,
                        pkField,
                        pageInfo,
                        dataviewID});
            return ((DataListResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetIdsSimpleAsync(SearchInput searchInput, string pkField, ResultPageInfo pageInfo, int dataviewID) {
            this.GetIdsSimpleAsync(searchInput, pkField, pageInfo, dataviewID, null);
        }
        
        /// <remarks/>
        public void GetIdsSimpleAsync(SearchInput searchInput, string pkField, ResultPageInfo pageInfo, int dataviewID, object userState) {
            if ((this.GetIdsSimpleOperationCompleted == null)) {
                this.GetIdsSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIdsSimpleOperationCompleted);
            }
            this.InvokeAsync("GetIdsSimple", new object[] {
                        searchInput,
                        pkField,
                        pageInfo,
                        dataviewID}, this.GetIdsSimpleOperationCompleted, userState);
        }
        
        private void OnGetIdsSimpleOperationCompleted(object arg) {
            if ((this.GetIdsSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIdsSimpleCompleted(this, new GetIdsSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GetDataPageSimple", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataResult GetDataPageSimple(ResultPageInfo pageInfo, string[] resultFields, int dataviewID) {
            object[] results = this.Invoke("GetDataPageSimple", new object[] {
                        pageInfo,
                        resultFields,
                        dataviewID});
            return ((DataResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataPageSimpleAsync(ResultPageInfo pageInfo, string[] resultFields, int dataviewID) {
            this.GetDataPageSimpleAsync(pageInfo, resultFields, dataviewID, null);
        }
        
        /// <remarks/>
        public void GetDataPageSimpleAsync(ResultPageInfo pageInfo, string[] resultFields, int dataviewID, object userState) {
            if ((this.GetDataPageSimpleOperationCompleted == null)) {
                this.GetDataPageSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataPageSimpleOperationCompleted);
            }
            this.InvokeAsync("GetDataPageSimple", new object[] {
                        pageInfo,
                        resultFields,
                        dataviewID}, this.GetDataPageSimpleOperationCompleted, userState);
        }
        
        private void OnGetDataPageSimpleOperationCompleted(object arg) {
            if ((this.GetDataPageSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataPageSimpleCompleted(this, new GetDataPageSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/ExportData", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportData(string resultsCriteriaString, string pagingInfoString, string dataViewString, string exportType) {
            object[] results = this.Invoke("ExportData", new object[] {
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString,
                        exportType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportDataAsync(string resultsCriteriaString, string pagingInfoString, string dataViewString, string exportType) {
            this.ExportDataAsync(resultsCriteriaString, pagingInfoString, dataViewString, exportType, null);
        }
        
        /// <remarks/>
        public void ExportDataAsync(string resultsCriteriaString, string pagingInfoString, string dataViewString, string exportType, object userState) {
            if ((this.ExportDataOperationCompleted == null)) {
                this.ExportDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportDataOperationCompleted);
            }
            this.InvokeAsync("ExportData", new object[] {
                        resultsCriteriaString,
                        pagingInfoString,
                        dataViewString,
                        exportType}, this.ExportDataOperationCompleted, userState);
        }
        
        private void OnExportDataOperationCompleted(object arg) {
            if ((this.ExportDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportDataCompleted(this, new ExportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GetDataView", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("COEDataView", Namespace="COE.COEDataView", IsNullable=true)]
        public COEDataView GetDataView(int dataViewID) {
            object[] results = this.Invoke("GetDataView", new object[] {
                        dataViewID});
            return ((COEDataView)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataViewAsync(int dataViewID) {
            this.GetDataViewAsync(dataViewID, null);
        }
        
        /// <remarks/>
        public void GetDataViewAsync(int dataViewID, object userState) {
            if ((this.GetDataViewOperationCompleted == null)) {
                this.GetDataViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataViewOperationCompleted);
            }
            this.InvokeAsync("GetDataView", new object[] {
                        dataViewID}, this.GetDataViewOperationCompleted, userState);
        }
        
        private void OnGetDataViewOperationCompleted(object arg) {
            if ((this.GetDataViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataViewCompleted(this, new GetDataViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/DeleteDataView", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteDataView(int dataViewID) {
            object[] results = this.Invoke("DeleteDataView", new object[] {
                        dataViewID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDataViewAsync(int dataViewID) {
            this.DeleteDataViewAsync(dataViewID, null);
        }
        
        /// <remarks/>
        public void DeleteDataViewAsync(int dataViewID, object userState) {
            if ((this.DeleteDataViewOperationCompleted == null)) {
                this.DeleteDataViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDataViewOperationCompleted);
            }
            this.InvokeAsync("DeleteDataView", new object[] {
                        dataViewID}, this.DeleteDataViewOperationCompleted, userState);
        }
        
        private void OnDeleteDataViewOperationCompleted(object arg) {
            if ((this.DeleteDataViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDataViewCompleted(this, new DeleteDataViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/UpdateDataView", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDataView(int dataViewID, string databaseName, string name, string description, bool isPublic, int formgroup, string userName, [System.Xml.Serialization.XmlElementAttribute(Namespace="COE.COEDataView", IsNullable=true)] ref COEDataView COEDataView) {
            object[] results = this.Invoke("UpdateDataView", new object[] {
                        dataViewID,
                        databaseName,
                        name,
                        description,
                        isPublic,
                        formgroup,
                        userName,
                        COEDataView});
            COEDataView = ((COEDataView)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataViewAsync(int dataViewID, string databaseName, string name, string description, bool isPublic, int formgroup, string userName, COEDataView COEDataView) {
            this.UpdateDataViewAsync(dataViewID, databaseName, name, description, isPublic, formgroup, userName, COEDataView, null);
        }
        
        /// <remarks/>
        public void UpdateDataViewAsync(int dataViewID, string databaseName, string name, string description, bool isPublic, int formgroup, string userName, COEDataView COEDataView, object userState) {
            if ((this.UpdateDataViewOperationCompleted == null)) {
                this.UpdateDataViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataViewOperationCompleted);
            }
            this.InvokeAsync("UpdateDataView", new object[] {
                        dataViewID,
                        databaseName,
                        name,
                        description,
                        isPublic,
                        formgroup,
                        userName,
                        COEDataView}, this.UpdateDataViewOperationCompleted, userState);
        }
        
        private void OnUpdateDataViewOperationCompleted(object arg) {
            if ((this.UpdateDataViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataViewCompleted(this, new UpdateDataViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/UpdateDataViewStr", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("COEDataView", Namespace="COE.COEDataView", IsNullable=true)]
        public COEDataView UpdateDataViewStr(int dataViewID, string databaseName, string name, string description, bool isPublic, int formgroup, string userName, string coeDataView) {
            object[] results = this.Invoke("UpdateDataViewStr", new object[] {
                        dataViewID,
                        databaseName,
                        name,
                        description,
                        isPublic,
                        formgroup,
                        userName,
                        coeDataView});
            return ((COEDataView)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataViewStrAsync(int dataViewID, string databaseName, string name, string description, bool isPublic, int formgroup, string userName, string coeDataView) {
            this.UpdateDataViewStrAsync(dataViewID, databaseName, name, description, isPublic, formgroup, userName, coeDataView, null);
        }
        
        /// <remarks/>
        public void UpdateDataViewStrAsync(int dataViewID, string databaseName, string name, string description, bool isPublic, int formgroup, string userName, string coeDataView, object userState) {
            if ((this.UpdateDataViewStrOperationCompleted == null)) {
                this.UpdateDataViewStrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataViewStrOperationCompleted);
            }
            this.InvokeAsync("UpdateDataViewStr", new object[] {
                        dataViewID,
                        databaseName,
                        name,
                        description,
                        isPublic,
                        formgroup,
                        userName,
                        coeDataView}, this.UpdateDataViewStrOperationCompleted, userState);
        }
        
        private void OnUpdateDataViewStrOperationCompleted(object arg) {
            if ((this.UpdateDataViewStrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataViewStrCompleted(this, new UpdateDataViewStrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/InsertDataView", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertDataView(string databaseName, string name, string description, bool isPublic, int formgroup, string userName, [System.Xml.Serialization.XmlElementAttribute(Namespace="COE.COEDataView", IsNullable=true)] COEDataView COEDataView) {
            object[] results = this.Invoke("InsertDataView", new object[] {
                        databaseName,
                        name,
                        description,
                        isPublic,
                        formgroup,
                        userName,
                        COEDataView});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDataViewAsync(string databaseName, string name, string description, bool isPublic, int formgroup, string userName, COEDataView COEDataView) {
            this.InsertDataViewAsync(databaseName, name, description, isPublic, formgroup, userName, COEDataView, null);
        }
        
        /// <remarks/>
        public void InsertDataViewAsync(string databaseName, string name, string description, bool isPublic, int formgroup, string userName, COEDataView COEDataView, object userState) {
            if ((this.InsertDataViewOperationCompleted == null)) {
                this.InsertDataViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDataViewOperationCompleted);
            }
            this.InvokeAsync("InsertDataView", new object[] {
                        databaseName,
                        name,
                        description,
                        isPublic,
                        formgroup,
                        userName,
                        COEDataView}, this.InsertDataViewOperationCompleted, userState);
        }
        
        private void OnInsertDataViewOperationCompleted(object arg) {
            if ((this.InsertDataViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDataViewCompleted(this, new InsertDataViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/InsertDataViewStr", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertDataViewStr(string databaseName, string name, string description, bool isPublic, int formgroup, string userName, string coeDataView) {
            object[] results = this.Invoke("InsertDataViewStr", new object[] {
                        databaseName,
                        name,
                        description,
                        isPublic,
                        formgroup,
                        userName,
                        coeDataView});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDataViewStrAsync(string databaseName, string name, string description, bool isPublic, int formgroup, string userName, string coeDataView) {
            this.InsertDataViewStrAsync(databaseName, name, description, isPublic, formgroup, userName, coeDataView, null);
        }
        
        /// <remarks/>
        public void InsertDataViewStrAsync(string databaseName, string name, string description, bool isPublic, int formgroup, string userName, string coeDataView, object userState) {
            if ((this.InsertDataViewStrOperationCompleted == null)) {
                this.InsertDataViewStrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDataViewStrOperationCompleted);
            }
            this.InvokeAsync("InsertDataViewStr", new object[] {
                        databaseName,
                        name,
                        description,
                        isPublic,
                        formgroup,
                        userName,
                        coeDataView}, this.InsertDataViewStrOperationCompleted, userState);
        }
        
        private void OnInsertDataViewStrOperationCompleted(object arg) {
            if ((this.InsertDataViewStrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDataViewStrCompleted(this, new InsertDataViewStrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/PublishTableToDataview", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PublishTableToDataview(int dataviewID, string fullTableName, string primaryKeyFieldName, string parentTableJoinFieldName, string childTableJoinFieldName, JoinTypes joinType) {
            object[] results = this.Invoke("PublishTableToDataview", new object[] {
                        dataviewID,
                        fullTableName,
                        primaryKeyFieldName,
                        parentTableJoinFieldName,
                        childTableJoinFieldName,
                        joinType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PublishTableToDataviewAsync(int dataviewID, string fullTableName, string primaryKeyFieldName, string parentTableJoinFieldName, string childTableJoinFieldName, JoinTypes joinType) {
            this.PublishTableToDataviewAsync(dataviewID, fullTableName, primaryKeyFieldName, parentTableJoinFieldName, childTableJoinFieldName, joinType, null);
        }
        
        /// <remarks/>
        public void PublishTableToDataviewAsync(int dataviewID, string fullTableName, string primaryKeyFieldName, string parentTableJoinFieldName, string childTableJoinFieldName, JoinTypes joinType, object userState) {
            if ((this.PublishTableToDataviewOperationCompleted == null)) {
                this.PublishTableToDataviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishTableToDataviewOperationCompleted);
            }
            this.InvokeAsync("PublishTableToDataview", new object[] {
                        dataviewID,
                        fullTableName,
                        primaryKeyFieldName,
                        parentTableJoinFieldName,
                        childTableJoinFieldName,
                        joinType}, this.PublishTableToDataviewOperationCompleted, userState);
        }
        
        private void OnPublishTableToDataviewOperationCompleted(object arg) {
            if ((this.PublishTableToDataviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishTableToDataviewCompleted(this, new PublishTableToDataviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GetDataViewDataListByUser", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public COEDataView[] GetDataViewDataListByUser(string userName) {
            object[] results = this.Invoke("GetDataViewDataListByUser", new object[] {
                        userName});
            return ((COEDataView[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataViewDataListByUserAsync(string userName) {
            this.GetDataViewDataListByUserAsync(userName, null);
        }
        
        /// <remarks/>
        public void GetDataViewDataListByUserAsync(string userName, object userState) {
            if ((this.GetDataViewDataListByUserOperationCompleted == null)) {
                this.GetDataViewDataListByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataViewDataListByUserOperationCompleted);
            }
            this.InvokeAsync("GetDataViewDataListByUser", new object[] {
                        userName}, this.GetDataViewDataListByUserOperationCompleted, userState);
        }
        
        private void OnGetDataViewDataListByUserOperationCompleted(object arg) {
            if ((this.GetDataViewDataListByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataViewDataListByUserCompleted(this, new GetDataViewDataListByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GetDataViewDataListByDatabase", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public COEDataView[] GetDataViewDataListByDatabase(string databaseName) {
            object[] results = this.Invoke("GetDataViewDataListByDatabase", new object[] {
                        databaseName});
            return ((COEDataView[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataViewDataListByDatabaseAsync(string databaseName) {
            this.GetDataViewDataListByDatabaseAsync(databaseName, null);
        }
        
        /// <remarks/>
        public void GetDataViewDataListByDatabaseAsync(string databaseName, object userState) {
            if ((this.GetDataViewDataListByDatabaseOperationCompleted == null)) {
                this.GetDataViewDataListByDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataViewDataListByDatabaseOperationCompleted);
            }
            this.InvokeAsync("GetDataViewDataListByDatabase", new object[] {
                        databaseName}, this.GetDataViewDataListByDatabaseOperationCompleted, userState);
        }
        
        private void OnGetDataViewDataListByDatabaseOperationCompleted(object arg) {
            if ((this.GetDataViewDataListByDatabaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataViewDataListByDatabaseCompleted(this, new GetDataViewDataListByDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Framework.Web/GetDataViewListforAllDatabases", RequestNamespace="CambridgeSoft.COE.Framework.Web", ResponseNamespace="CambridgeSoft.COE.Framework.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public COEDataView[] GetDataViewListforAllDatabases() {
            object[] results = this.Invoke("GetDataViewListforAllDatabases", new object[0]);
            return ((COEDataView[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataViewListforAllDatabasesAsync() {
            this.GetDataViewListforAllDatabasesAsync(null);
        }
        
        /// <remarks/>
        public void GetDataViewListforAllDatabasesAsync(object userState) {
            if ((this.GetDataViewListforAllDatabasesOperationCompleted == null)) {
                this.GetDataViewListforAllDatabasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataViewListforAllDatabasesOperationCompleted);
            }
            this.InvokeAsync("GetDataViewListforAllDatabases", new object[0], this.GetDataViewListforAllDatabasesOperationCompleted, userState);
        }
        
        private void OnGetDataViewListforAllDatabasesOperationCompleted(object arg) {
            if ((this.GetDataViewListforAllDatabasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataViewListforAllDatabasesCompleted(this, new GetDataViewListforAllDatabasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CambridgeSoft.COE.Framework.Web")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="CambridgeSoft.COE.Framework.Web", IsNullable=false)]
    public partial class COECredentials : System.Web.Services.Protocols.SoapHeader {
        
        private string authenticationTicketField;
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string AuthenticationTicket {
            get {
                return this.authenticationTicketField;
            }
            set {
                this.authenticationTicketField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public partial class relationship {
        
        private int parentkeyField;
        
        private int childkeyField;
        
        private int parentField;
        
        private int childField;
        
        private JoinTypes jointypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int parentkey {
            get {
                return this.parentkeyField;
            }
            set {
                this.parentkeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int childkey {
            get {
                return this.childkeyField;
            }
            set {
                this.childkeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int child {
            get {
                return this.childField;
            }
            set {
                this.childField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public JoinTypes jointype {
            get {
                return this.jointypeField;
            }
            set {
                this.jointypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public enum JoinTypes {
        
        /// <remarks/>
        OUTER,
        
        /// <remarks/>
        INNER,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public partial class fields {
        
        private int idField;
        
        private string nameField;
        
        private AbstractTypes dataTypeField;
        
        private int lookupFieldIdField;
        
        private int lookupDisplayFieldIdField;
        
        private string aliasField;
        
        private IndexTypes indexTypeField;
        
        private MimeTypes mimeTypeField;
        
        private bool visibleField;
        
        private bool isDefaultField;
        
        private SortDirection lookupSortOrderField;
        
        private int sortOrderField;
        
        private bool isUniqueKeyField;
        
        public fields() {
            this.lookupFieldIdField = -1;
            this.lookupDisplayFieldIdField = -1;
            this.aliasField = "";
            this.visibleField = true;
            this.isDefaultField = false;
            this.lookupSortOrderField = SortDirection.ASCENDING;
            this.sortOrderField = -1;
            this.isUniqueKeyField = false;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public AbstractTypes dataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int lookupFieldId {
            get {
                return this.lookupFieldIdField;
            }
            set {
                this.lookupFieldIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int lookupDisplayFieldId {
            get {
                return this.lookupDisplayFieldIdField;
            }
            set {
                this.lookupDisplayFieldIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public IndexTypes indexType {
            get {
                return this.indexTypeField;
            }
            set {
                this.indexTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public MimeTypes mimeType {
            get {
                return this.mimeTypeField;
            }
            set {
                this.mimeTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool visible {
            get {
                return this.visibleField;
            }
            set {
                this.visibleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isDefault {
            get {
                return this.isDefaultField;
            }
            set {
                this.isDefaultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SortDirection.ASCENDING)]
        public SortDirection lookupSortOrder {
            get {
                return this.lookupSortOrderField;
            }
            set {
                this.lookupSortOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int sortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isUniqueKey {
            get {
                return this.isUniqueKeyField;
            }
            set {
                this.isUniqueKeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public enum AbstractTypes {
        
        /// <remarks/>
        INTEGER,
        
        /// <remarks/>
        REAL,
        
        /// <remarks/>
        TEXT,
        
        /// <remarks/>
        DATE,
        
        /// <remarks/>
        BOOLEAN,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public enum IndexTypes {
        
        /// <remarks/>
        NONE,
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        CS_CARTRIDGE,
        
        /// <remarks/>
        FULL_TEXT,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public enum MimeTypes {
        
        /// <remarks/>
        NONE,
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("image/jpeg")]
        imagejpeg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("image/gif")]
        imagegif,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("image/png")]
        imagepng,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("image/x-wmf")]
        imagexwmf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chemical/x-mdl-molfile")]
        chemicalxmdlmolfile,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chemical/x-cdx")]
        chemicalxcdx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chemical/x-smiles")]
        chemicalxsmiles,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("text/xml")]
        textxml,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("text/html")]
        texthtml,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("text/plain")]
        textplain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("text/raw")]
        textraw,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("application/vnd.ms-excel")]
        applicationvndmsexcel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("application/msword")]
        applicationmsword,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("application/pdf")]
        applicationpdf,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public enum SortDirection {
        
        /// <remarks/>
        ASCENDING,
        
        /// <remarks/>
        DESCENDING,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="COEDataView.Table", Namespace="COE.COEDataView")]
    public partial class COEDataViewTable {
        
        private fields[] fieldsField;
        
        private int idField;
        
        private string nameField;
        
        private string aliasField;
        
        private string databaseField;
        
        private string primaryKeyField;
        
        private bool isViewField;
        
        public COEDataViewTable() {
            this.isViewField = false;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("fields")]
        public fields[] fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string database {
            get {
                return this.databaseField;
            }
            set {
                this.databaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string primaryKey {
            get {
                return this.primaryKeyField;
            }
            set {
                this.primaryKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isView {
            get {
                return this.isViewField;
            }
            set {
                this.isViewField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public partial class COEDataView {
        
        private COEDataViewTable[] tablesField;
        
        private relationship[] relationshipsField;
        
        private int basetableField;
        
        private string databaseField;
        
        private int dataviewidField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string applicationField;
        
        private DataViewHandlingOptions dataviewHandlingField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("table")]
        public COEDataViewTable[] tables {
            get {
                return this.tablesField;
            }
            set {
                this.tablesField = value;
            }
        }
        
        /// <remarks/>
        public relationship[] relationships {
            get {
                return this.relationshipsField;
            }
            set {
                this.relationshipsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int basetable {
            get {
                return this.basetableField;
            }
            set {
                this.basetableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string database {
            get {
                return this.databaseField;
            }
            set {
                this.databaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int dataviewid {
            get {
                return this.dataviewidField;
            }
            set {
                this.dataviewidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string application {
            get {
                return this.applicationField;
            }
            set {
                this.applicationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public DataViewHandlingOptions dataviewHandling {
            get {
                return this.dataviewHandlingField;
            }
            set {
                this.dataviewHandlingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="COE.COEDataView")]
    public enum DataViewHandlingOptions {
        
        /// <remarks/>
        USE_CLIENT_DATAVIEW,
        
        /// <remarks/>
        USE_SERVER_DATAVIEW,
        
        /// <remarks/>
        MERGE_CLIENT_AND_SERVER_DATAVIEW,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CambridgeSoft.COE.Framework.Web")]
    public partial class DataListResult {
        
        private string statusField;
        
        private string[] resultListField;
        
        private string[] similarityScoresField;
        
        private ResultSetInfo resultSetInfoField;
        
        private ResultPageInfo resultPageInfoField;
        
        private string statusDetailsField;
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string[] ResultList {
            get {
                return this.resultListField;
            }
            set {
                this.resultListField = value;
            }
        }
        
        /// <remarks/>
        public string[] SimilarityScores {
            get {
                return this.similarityScoresField;
            }
            set {
                this.similarityScoresField = value;
            }
        }
        
        /// <remarks/>
        public ResultSetInfo resultSetInfo {
            get {
                return this.resultSetInfoField;
            }
            set {
                this.resultSetInfoField = value;
            }
        }
        
        /// <remarks/>
        public ResultPageInfo resultPageInfo {
            get {
                return this.resultPageInfoField;
            }
            set {
                this.resultPageInfoField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDetails {
            get {
                return this.statusDetailsField;
            }
            set {
                this.statusDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CambridgeSoft.COE.Framework.Web")]
    public partial class ResultSetInfo {
        
        private int idField;
        
        private int estimatedCountField;
        
        private int currentCountField;
        
        private int totalCountField;
        
        private bool isCompleteField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int EstimatedCount {
            get {
                return this.estimatedCountField;
            }
            set {
                this.estimatedCountField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentCount {
            get {
                return this.currentCountField;
            }
            set {
                this.currentCountField = value;
            }
        }
        
        /// <remarks/>
        public int TotalCount {
            get {
                return this.totalCountField;
            }
            set {
                this.totalCountField = value;
            }
        }
        
        /// <remarks/>
        public bool IsComplete {
            get {
                return this.isCompleteField;
            }
            set {
                this.isCompleteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CambridgeSoft.COE.Framework.Web")]
    public partial class ResultPageInfo {
        
        private int resultSetIDField;
        
        private int pageSizeField;
        
        private int startField;
        
        private int endField;
        
        /// <remarks/>
        public int ResultSetID {
            get {
                return this.resultSetIDField;
            }
            set {
                this.resultSetIDField = value;
            }
        }
        
        /// <remarks/>
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public int Start {
            get {
                return this.startField;
            }
            set {
                this.startField = value;
            }
        }
        
        /// <remarks/>
        public int End {
            get {
                return this.endField;
            }
            set {
                this.endField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CambridgeSoft.COE.Framework.Web")]
    public partial class DataResult {
        
        private string statusField;
        
        private string resultSetField;
        
        private ResultSetInfo resultSetInfoField;
        
        private ResultPageInfo resultPageInfoField;
        
        private string statusDetailsField;
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string ResultSet {
            get {
                return this.resultSetField;
            }
            set {
                this.resultSetField = value;
            }
        }
        
        /// <remarks/>
        public ResultSetInfo resultSetInfo {
            get {
                return this.resultSetInfoField;
            }
            set {
                this.resultSetInfoField = value;
            }
        }
        
        /// <remarks/>
        public ResultPageInfo resultPageInfo {
            get {
                return this.resultPageInfoField;
            }
            set {
                this.resultPageInfoField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDetails {
            get {
                return this.statusDetailsField;
            }
            set {
                this.statusDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CambridgeSoft.COE.Framework.Web")]
    public partial class SearchInput {
        
        private string[] fieldCriteriaField;
        
        private string[] domainField;
        
        private string domainFieldNameField;
        
        private bool returnPartialResultsField;
        
        private bool returnSimilarityScoresField;
        
        private string[] searchOptionsField;
        
        private bool avoidHitListField;
        
        /// <remarks/>
        public string[] FieldCriteria {
            get {
                return this.fieldCriteriaField;
            }
            set {
                this.fieldCriteriaField = value;
            }
        }
        
        /// <remarks/>
        public string[] Domain {
            get {
                return this.domainField;
            }
            set {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        public string DomainFieldName {
            get {
                return this.domainFieldNameField;
            }
            set {
                this.domainFieldNameField = value;
            }
        }
        
        /// <remarks/>
        public bool ReturnPartialResults {
            get {
                return this.returnPartialResultsField;
            }
            set {
                this.returnPartialResultsField = value;
            }
        }
        
        /// <remarks/>
        public bool ReturnSimilarityScores {
            get {
                return this.returnSimilarityScoresField;
            }
            set {
                this.returnSimilarityScoresField = value;
            }
        }
        
        /// <remarks/>
        public string[] SearchOptions {
            get {
                return this.searchOptionsField;
            }
            set {
                this.searchOptionsField = value;
            }
        }
        
        /// <remarks/>
        public bool AvoidHitList {
            get {
                return this.avoidHitListField;
            }
            set {
                this.avoidHitListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DoSearchCompletedEventHandler(object sender, DoSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DoGlobalSearchCompletedEventHandler(object sender, DoGlobalSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoGlobalSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoGlobalSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFilteredDataCompletedEventHandler(object sender, GetFilteredDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilteredDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilteredDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GlobalSearchGetDataCompletedEventHandler(object sender, GlobalSearchGetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GlobalSearchGetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GlobalSearchGetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DoSearchSimpleCompletedEventHandler(object sender, DoSearchSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSearchSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSearchSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIdsSimpleCompletedEventHandler(object sender, GetIdsSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIdsSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIdsSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataListResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataListResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataPageSimpleCompletedEventHandler(object sender, GetDataPageSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataPageSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataPageSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExportDataCompletedEventHandler(object sender, ExportDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataViewCompletedEventHandler(object sender, GetDataViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public COEDataView Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((COEDataView)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteDataViewCompletedEventHandler(object sender, DeleteDataViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDataViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDataViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateDataViewCompletedEventHandler(object sender, UpdateDataViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public COEDataView COEDataView {
            get {
                this.RaiseExceptionIfNecessary();
                return ((COEDataView)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateDataViewStrCompletedEventHandler(object sender, UpdateDataViewStrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataViewStrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataViewStrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public COEDataView Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((COEDataView)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertDataViewCompletedEventHandler(object sender, InsertDataViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDataViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDataViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertDataViewStrCompletedEventHandler(object sender, InsertDataViewStrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDataViewStrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDataViewStrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PublishTableToDataviewCompletedEventHandler(object sender, PublishTableToDataviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishTableToDataviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishTableToDataviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataViewDataListByUserCompletedEventHandler(object sender, GetDataViewDataListByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataViewDataListByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataViewDataListByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public COEDataView[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((COEDataView[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataViewDataListByDatabaseCompletedEventHandler(object sender, GetDataViewDataListByDatabaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataViewDataListByDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataViewDataListByDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public COEDataView[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((COEDataView[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataViewListforAllDatabasesCompletedEventHandler(object sender, GetDataViewListforAllDatabasesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataViewListforAllDatabasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataViewListforAllDatabasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public COEDataView[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((COEDataView[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591