// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using System.Data;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Insert and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Insert Unit Tests
    ///</summary>
    [TestClass()]
    public class InsertTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetDependantString (DBMSType, ref List&lt;Value&gt;)
        ///</summary>
        [TestMethod()]
        public void GetDependantStringInsertTest()
        {
            try
            {
                Query query = new Query();
                query.SetMainTable(new Table("INV_COMPOUNDS_OLD"));
                

                Insert target = new Insert();
                target.MainTable = new Table("INV_COMPOUNDS");
                target.Fields.Add(new Field("Base64_CDX", DbType.String, target.MainTable));
                target.Fields.Add(new Field("MolWeight", DbType.Decimal, target.MainTable));
                target.ParamValues.Add(new Value("C1CCCCC1", DbType.String));
                target.ParamValues.Add(new Value("123.321", DbType.Decimal));
                target.ParameterHolder = "?";
                string expected = "INSERT INTO INV_COMPOUNDS (Base64_CDX, MolWeight) VALUES (?0, ?1)";
                target.DataBaseType = DBMSType.ORACLE;
                string actual = target.ToString();

                List<Value> values = target.ParamValues;
                List<Value> values_expected = new List<Value>();
                values_expected.Add(new Value("C1CCCCC1", DbType.String));
                values_expected.Add(new Value("123.321", DbType.Decimal));

                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Insert.GetDependantString" +
                                            " did not return the expected value.");
                Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }
        private bool CompareElements(List<Value> values_expected, List<Value> values)
        {
            if (values_expected.Count != values.Count)
                return false;
            for (int i = 0; i < values.Count; i++)
            {
                if (values_expected[i] != values[i])
                    return false;
            }
            return true;
        }
    }
}
