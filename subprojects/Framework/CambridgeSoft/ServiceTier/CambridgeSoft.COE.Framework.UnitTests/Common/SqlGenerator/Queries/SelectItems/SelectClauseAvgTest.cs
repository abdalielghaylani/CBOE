// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.UnitTests.Helpers;
using CambridgeSoft.COE.Framework.COEDataViewService;
using System.Xml;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries;

namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg Unit Tests
    ///</summary>
    [TestClass()]
    public class SelectClauseAvgTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetDependantString (DBMSType)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetDependantStringORACLETest()
        {
            SelectClauseAvg target = new SelectClauseAvg();
            Field fld = new Field();
            fld.FieldId = 18;
            fld.FieldName = "COMPOUND_ID";
            fld.FieldType = System.Data.DbType.Binary;
            fld.Table = new Table();
            ((Table)fld.Table).TableName = "inv_compounds";

            target.DataField = fld;
            DBMSType dataBaseType = DBMSType.ORACLE;

            string expected = "AVG(inv_compounds.\"COMPOUND_ID\")";
            string actual = target.Execute(dataBaseType, new List<Value>());

            Assert.AreEqual(expected, actual, "SelectItems.SelectClauseAvg.GetDependantString did not return the expected value.");
        }

        /// <summary>
        /// A test for GetDependantString (DBMSType :MSACCESS)
        /// </summary>
        [TestMethod()]
        public void GetDependantStringMSACCESSTest()
        {
            SelectClauseAvg target = new SelectClauseAvg();
            Field fld = new Field();
            fld.FieldId = 18;
            fld.FieldName = "COMPOUND_ID";
            fld.FieldType = System.Data.DbType.Decimal;
            fld.Table = new Table();
            ((Table)fld.Table).TableName = "inv_compounds";

            target.DataField = fld;
            DBMSType dataBaseType = DBMSType.MSACCESS;
            string expected = "ROUND(AVG(inv_compounds.\"COMPOUND_ID\"), 10)";
            string actual = target.Execute(dataBaseType, new List<Value>());
            Assert.AreEqual(expected, actual, "SelectItems.SelectClauseAvg.GetDependantString did not return the expected value.");
        }
        /// <summary>
        ///  A test for GetDependantString (DBMSType :SQLSERVER)
        /// </summary>
        [TestMethod()]
        public void GetDependantStringSQLSERVERTest()
        {
            SelectClauseAvg target = new SelectClauseAvg();
            Field fld = new Field();
            fld.FieldId = 18;
            fld.FieldName = "COMPOUND_ID";
            fld.FieldType = System.Data.DbType.Decimal;
            fld.Table = new Table();
            ((Table)fld.Table).TableName = "inv_compounds";

            target.DataField = fld;
            DBMSType dataBaseType = DBMSType.SQLSERVER;

            string expected = "ROUND(AVG(inv_compounds.\"COMPOUND_ID\"), 10)";
            string actual = target.Execute(dataBaseType, new List<Value>());

            Assert.AreEqual(expected, actual, "SelectItems.SelectClauseAvg.GetDependantString did not return the expected value.");
        }

      

        [TestMethod]
        public void CreateInstanceTest()
        {
            XmlNode resultNode = null;
            XmlDocument doc = new XmlDocument();
            string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(SearchHelper._LookupSearchTestpathToXml);
            doc.Load(pathToXmls + @"\ResultsCriteria.xml");
            DataView theDataView = GetDataView();
            XmlNodeList personNodes = doc.GetElementsByTagName("field");
            foreach (XmlNode item in personNodes)
            {
                resultNode = item;
                break;
            }
            if (resultNode != null && theDataView != null)
            {
                SelectClauseAvg theClause = new SelectClauseAvg();
                theClause.CreateInstance(resultNode, theDataView);
                Assert.AreEqual(theClause.Name, "AggFor-1", "SelectClauseFormula.CreateInstance did not return expected result");
            }

        }


        private ResultsCriteria GetResultsCriteria(string filename)
        {
            XmlDocument doc = new XmlDocument();
            string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(SearchHelper._LookupSearchTestpathToXml);
            doc.Load(pathToXmls + filename);
            ResultsCriteria rc = new ResultsCriteria(doc);
            return rc;
        }


        private DataView GetDataView()
        {
            try
            {
                XmlDocument doc = new XmlDocument();
                string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(SearchHelper._LookupSearchTestpathToXml);
                doc.Load(pathToXmls + @"\DataView.xml");
                DataView dataView = new DataView();
                dataView.LoadFromXML(doc);
                return dataView;
            }
            catch (Exception)
            {
                throw;
            }

        }

    }


}
