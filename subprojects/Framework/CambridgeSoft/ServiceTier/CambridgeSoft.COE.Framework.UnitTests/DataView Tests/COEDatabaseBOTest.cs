// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Csla;
using Csla.Data;
using Csla.Validation;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.COEDatabasePublishingService;
using CambridgeSoft.COE.Framework.COESecurityService;
using System.Configuration;

namespace CambridgeSoft.COE.Framework.COEDatabasePublishingService.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO and is intended
    ///to contain all CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO Unit Tests
    ///</summary>
    [TestClass()]
    public class COEDatabaseBOTest
    {
        private TestContext testContextInstance;
        //reading values from config file now
        //Review ID #6991
        private string _password = ConfigurationManager.AppSettings["TestDBPassword"];
        private string _TestDBName = ConfigurationManager.AppSettings["TestDBName"];

        private const string DefaultInstanceName = "MAIN";

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Class Initialization
        // Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            CambridgeSoft.COE.Framework.UnitTests.Helpers.Authentication.Logon();
        }

        // Use ClassCleanup to run code after all tests in a class have run
        [ClassCleanup()]
        public static void MyClassCleanup()
        {
            CambridgeSoft.COE.Framework.UnitTests.Helpers.Authentication.Logoff();
        }

        #endregion

        #region Test cases for the class COEDatabaseBO

        /// <summary>
        ///A test for New(string)
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void New_Test()
        {
            COEDatabaseBO singleDatabase = COEDatabaseBO.New(_TestDBName);

            Assert.IsNotNull(singleDatabase, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.New did no" +
                    "t return the expected value.");
        }

        /// <summary>
        ///A test for Get(string)
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void Get_Test()
        {
            COEDatabaseBOList theList = COEDatabaseBOList.GetList(DefaultInstanceName);
            COEDatabaseBO singleDatabase = theList.GetDatabase(_TestDBName);
            singleDatabase = singleDatabase.Publish(_password);
            singleDatabase = null;
            singleDatabase = CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.Get(_TestDBName);
            bool theResult = singleDatabase.IsPublished;
            singleDatabase = singleDatabase.UnPublish();

            Assert.IsTrue(theResult == true, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.Get did no" +
                    "t return the expected value.");
        }

        /// <summary>
        ///A test for Publish (string)
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void Publish_Test()
        {
            COEDatabaseBOList theList = COEDatabaseBOList.GetList(DefaultInstanceName);
            COEDatabaseBO singleDatabase = theList.GetDatabase(_TestDBName);
            singleDatabase = singleDatabase.Publish(_password);
            bool theResult = singleDatabase.IsPublished;
            singleDatabase = singleDatabase.UnPublish();
            Assert.IsTrue(theResult == true, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.Publish di" +
                    "d not return the expected value.");
        }


        /// <summary>
        ///A test for UnPublish ()
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void UnPublish_Test()
        {
            COEDatabaseBOList theList = COEDatabaseBOList.GetList(DefaultInstanceName);
            COEDatabaseBO singleDatabase = theList.GetDatabase(_TestDBName);
            singleDatabase = singleDatabase.Publish(_password);
            singleDatabase = singleDatabase.UnPublish();
            Assert.IsTrue(singleDatabase.IsPublished == false, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.UnPublish di" +
                    "d not return the expected value.");
        }
        /// <summary>
        ///A test for RefreshPublish ()
        ///</summary>
        [TestMethod()]
        [Priority(103)]
        public void RefreshPublish_Test()
        {
            COEDatabaseBOList theList = COEDatabaseBOList.GetList(DefaultInstanceName);
            COEDatabaseBO singleDatabase = theList.GetDatabase(_TestDBName);
            singleDatabase = singleDatabase.Publish(_password);
            DateTime initialDate = singleDatabase.DateCreated;
            singleDatabase = null;
            singleDatabase = theList.GetDatabase(_TestDBName);
            singleDatabase = singleDatabase.RefreshPublish();
            DateTime newDate = singleDatabase.DateCreated;
            bool theResult = (initialDate != newDate);
            singleDatabase.UnPublish();
            Assert.IsTrue(theResult == true, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.RefreshPub" +
                    "lish did not return the expected value.");
        }
        /// <summary>
        ///A test for RefreshPublish ()
        ///</summary>
        [TestMethod]
        [Priority(103)]
        public void RefreshPublish_RefreshDB()
        {
            //Get Regdb database object
            try
            {
                COEDatabaseBOList theList = COEDatabaseBOList.GetList(true, DefaultInstanceName);
                COEDatabaseBO theCOEDatabaseBO = COEDatabaseBO.Get(theList[0].Name);

                COEDatabaseBO publishedCOEDatabaseBO = theCOEDatabaseBO.RefreshPublish();
                Assert.IsNotNull(publishedCOEDatabaseBO.COEDataView);
                Assert.IsTrue(publishedCOEDatabaseBO == theCOEDatabaseBO);
            }
            catch (Exception)
            {
            }
        }

        /// <summary>
        ///A test for RefreshPublish() to test if the new IsIndexed property is available on Field class
        ///</summary>
        [TestMethod]
        [Priority(103)]
        public void RefreshPublish_IsIndexedPropertyTestDB()
        {
            try
            {
                COEDatabaseBOList theList = COEDatabaseBOList.GetList(true, DefaultInstanceName);
                COEDatabaseBO theCOEDatabaseBO = COEDatabaseBO.Get(theList[0].Name);

                COEDatabaseBO publishedCOEDatabaseBO = theCOEDatabaseBO.RefreshPublish();
                Assert.IsNotNull(publishedCOEDatabaseBO.COEDataView);
                Assert.IsTrue(publishedCOEDatabaseBO == theCOEDatabaseBO);
                Common.COEDataView.Field theField = publishedCOEDatabaseBO.COEDataView.Tables[0].Fields[0];
                Assert.IsNotNull(theField, "Field object is null");
                System.Reflection.PropertyInfo pInfo = theField.GetType().GetProperty("IsIndexed", System.Reflection.BindingFlags.Public);
                Assert.IsNotNull(pInfo, "IsIndexed property not found on class Field");
            }
            catch (Exception)
            {
            }
        }


        /// <summary>
        ///A test for RefreshPublish() to test if the new IndexName property is available on Field class
        ///</summary>
        [TestMethod]
        [Priority(103)]
        public void RefreshPublish_IndexNamePropertyTestDB()
        {
            try
            {
                COEDatabaseBOList theList = COEDatabaseBOList.GetList(true, DefaultInstanceName);
                COEDatabaseBO theCOEDatabaseBO = COEDatabaseBO.Get(theList[0].Name);

                COEDatabaseBO publishedCOEDatabaseBO = theCOEDatabaseBO.RefreshPublish();
                Assert.IsNotNull(publishedCOEDatabaseBO.COEDataView);
                Assert.IsTrue(publishedCOEDatabaseBO == theCOEDatabaseBO);
                Common.COEDataView.Field theField = publishedCOEDatabaseBO.COEDataView.Tables[0].Fields[0];
                Assert.IsNotNull(theField, "Field object is null");
                System.Reflection.PropertyInfo pInfo = theField.GetType().GetProperty("IndexName", System.Reflection.BindingFlags.Public);
                Assert.IsNotNull(pInfo, "IndexName property not found on class Field");
            }
            catch (Exception)
            {
            }
        }

        [TestMethod]
        [Priority(1021)]
        public void GetUniqueFields_Test()
        {
            try
            {
                COEDatabaseBOList theList = COEDatabaseBOList.GetList(DefaultInstanceName);
                if (theList != null && theList.Count > 0)
                {
                    COEDatabaseBO theCOEDatabaseBO = COEDatabaseBO.Get(theList[0].Name);
                    if (theCOEDatabaseBO.COEDataView.Tables.Count > 0)
                    {
                        COEDataViewService.COEDataViewBO dvBo = COEDataViewService.COEDataViewBO.New();
                        System.Data.DataTable dt = dvBo.GetUniqueFields(theCOEDatabaseBO.COEDataView.Tables[0].Database, theCOEDatabaseBO.COEDataView.Tables[0].Name);
                        dvBo = null;
                        Assert.IsNotNull(dt, "DataTable is null");
                        Assert.IsTrue(dt.Rows.Count > 0, "Primary/Unique keys are not found for the specified table");
                    }
                    else
                        Assert.Inconclusive("Schema list not found.");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// To run this test ENBIOASSAYVIEWS schema should be present. Else this test will fail.
        /// </summary>
        [TestMethod]
        [Priority(1021)]
        public void GetUniqueFields_Test_ENBIOASSAYVIEWS()
        {
            try
            {
                COEDatabaseBO theCOEDatabaseBO = COEDatabaseBO.Get("ENBIOASSAYVIEWS");
                if (theCOEDatabaseBO.COEDataView.Tables.Count > 0)
                {
                    COEDataViewService.COEDataViewBO dvBo = COEDataViewService.COEDataViewBO.New();
                    System.Data.DataTable dt = dvBo.GetUniqueFields(theCOEDatabaseBO.COEDataView.Tables[0].Database, theCOEDatabaseBO.COEDataView.Tables[0].Name);
                    dvBo = null;

                    Assert.IsNotNull(dt, "DataTable is null");
                    Assert.IsTrue(dt.Rows.Count > 0, "Primary/Unique keys are not found for the specified table");
                }
                else
                    Assert.Inconclusive("Schema list not found.");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region Test Cases for the class COEDatabaseBOList
        /// <summary>
        ///A test for NewList()
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void NewList_Test()
        {
            COEDatabaseBOList actual = COEDatabaseBOList.NewList();
            Assert.IsTrue(actual != null, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBOList.NewList did not return the expected value.");
        }
        /// <summary>
        ///A test for GetList()
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void GetList_GetAllSchemas()
        {
            COEDatabaseBOList actual = COEDatabaseBOList.GetList(DefaultInstanceName);
            Assert.IsTrue(actual != null, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBOList.GetList did not return the expected value.");
        }

        /// <summary>
        ///A test for GetList() to get All Published Schema
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void GetList_GetAllPublishedSchemas()
        {
            COEDatabaseBOList actual = COEDatabaseBOList.GetList(true, DefaultInstanceName);
            Assert.IsTrue(actual != null, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBOList.GetList(true) did not return the expected value.");
        }
        // <summary>
        ///A test for GetList() to get All UnPublished Schema
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void GetList_GetAllUnPublishedSchemas()
        {
            COEDatabaseBOList actual = COEDatabaseBOList.GetList(false, DefaultInstanceName);
            Assert.IsTrue(actual != null, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBOList.GetList(false) did not return the expected value.");
        }

        // <summary>
        ///A test for GetDatabase(string)
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void GetDatabase_NullDBName()
        {
            COEDatabaseBOList actual = COEDatabaseBOList.NewList();
            Assert.IsNull(actual.GetDatabase(string.Empty),
                "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBOList.GetList(false) did not return the expected value.");
        }

        // <summary>
        ///A test for GetDatabase(string)
        ///</summary>
        [TestMethod()]
        [Priority(100)]
        public void GetDatabase_DBName()
        {
            COEDatabaseBOList actual = COEDatabaseBOList.GetList(true, DefaultInstanceName);
            Assert.IsNotNull(actual.GetDatabase(actual[0].Name),
                "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBOList.GetList(false) did not return the expected value.");
        }

        #endregion

        #region Test Cases for the class COEDatabasePublishingUtilities
        /// <summary>
        /// For testing COEDatabasePublishingUtilities.BuildTableName method by passing empty owner name
        /// This method internally called by DAL with proper owner name, 
        /// hence only tested with empty owner name here
        /// </summary>
        [TestMethod]
        [Priority(100)]
        public void BuildTableName_NullOwner()
        {
            string strTableName = string.Empty;
            COEDatabasePublishingUtilities.BuildTableName(string.Empty, ref strTableName);
            Assert.IsTrue(!string.IsNullOrEmpty(strTableName), "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishingUtilities.BuildTableName did not return the expected value.");
        }

        #endregion

        #region Tests for publishing without relationships
        /// <summary>
        ///A test for Publishing dataview with relationships - default is true for IsPublishRelationships
        ///</summary>
        [TestMethod()]
        [Priority(104)]
        public void Publish_PublishRelationshipsTest()
        {
            COEDatabaseBOList theList = COEDatabaseBOList.GetList(DefaultInstanceName);
            COEDatabaseBO singleDatabase = theList.GetDatabase(_TestDBName);
            if (singleDatabase.IsPublished)
            {
                singleDatabase.UnPublish();
                singleDatabase = theList.GetDatabase(_TestDBName);
            }
            singleDatabase = singleDatabase.Publish(_password);
            bool theResult = singleDatabase.IsPublished;
            Assert.IsTrue(singleDatabase.IsPublishRelationships, "IsPublishRelationships : Default value is not set to true");
            Assert.IsTrue(singleDatabase.COEDataView.Relationships.Count > 0, "Relationships are failed to publish or selected database does not have any relationships defined");
            singleDatabase = singleDatabase.UnPublish();
            Assert.IsTrue(theResult == true, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.Publish di" +
                    "d not return the expected value.");
        }

        /// <summary>
        ///A test for Publishing dataview without relationships - default is true for IsPublishRelationships
        ///</summary>
        [TestMethod()]
        [Priority(104)]
        public void Publish_PublishWithoutRelationshipsTest()
        {
            COEDatabaseBOList theList = COEDatabaseBOList.GetList(DefaultInstanceName);
            COEDatabaseBO singleDatabase = theList.GetDatabase(_TestDBName);
            if (singleDatabase.IsPublished)
            {
                singleDatabase.UnPublish();
                singleDatabase = theList.GetDatabase(_TestDBName);
            }
            singleDatabase.IsPublishRelationships = false;
            singleDatabase = singleDatabase.Publish(_password);
            bool theResult = singleDatabase.IsPublished;
            Assert.IsTrue(!singleDatabase.IsPublishRelationships, "IsPublishRelationships : Default value is not set to false");
            Assert.IsTrue(singleDatabase.COEDataView.Relationships.Count == 0, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.Publish did not set the relationships publishing to false");
            singleDatabase = singleDatabase.UnPublish();
            Assert.IsTrue(theResult == true, "CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabaseBO.Publish di" +
                    "d not return the expected value.");
        }
        #endregion

    }


}
