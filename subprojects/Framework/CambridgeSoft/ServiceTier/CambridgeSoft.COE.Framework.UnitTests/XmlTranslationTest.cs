// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Xml;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries;
using System.Data;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.XmlTranslation and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.XmlTranslation Unit Tests
    ///</summary>
    [TestClass()]
    public class XmlTranslationTest
    {
        private TestContext testContextInstance;
        private string path = Utilities.GetProjectBasePath("CambridgeSoft.COE.Framework.UnitTests");

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Transform (XmlDocument)
        ///</summary>
        [TestMethod()]
        public void TransformTest()
        {
            try
            {
                path = path + @"\SearchCriteria Pre-Parsing XML\";

                XmlDocument searchCriteriaXMLDocument = new XmlDocument();
                searchCriteriaXMLDocument.Load(path + "SearchCriteria.xml");

                XmlDocument expected = new XmlDocument();
                expected.Load(path + "ExpectedSearchCriteria.xml");

                XmlDocument actual = CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.XmlTranslation.Transform(searchCriteriaXMLDocument);

                System.Diagnostics.Debug.WriteLine(actual.OuterXml);


                XmlNodeList commentsList = actual.SelectNodes("//comment()");
                foreach (XmlNode currentComment in commentsList)
                {
                    currentComment.ParentNode.RemoveChild(currentComment);
                }

                Assert.AreEqual(expected.OuterXml.ToLower(), actual.OuterXml.ToLower(), "CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.XmlTranslation.Transform di" +
                        "d not return the expected value.");
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for Transform (XmlDocument)
        ///</summary>
        [TestMethod()]
        public void SplitTest()
        {
            try
            {
                path = path + @"\SearchCriteria Pre-Parsing XML\";

                string[] expected = new string[] { "benzene ", "or", "not", "(", "ciclobenzene ", "and", " octane", ")", "and", " 15 - 20" };
                string[] actual = XmlTranslation.Tokenizer.Split("benzene or not (ciclobenzene and octane) and 15 - 20", new string[] {"and", "not", "or", "(", ")" });

                AreEqual(expected, actual);
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for GetOperation (XmlNode, WhereClauseTypes)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void OperationGuessingTest()
        {
            try
            {
                path = path + @"\OperatorGuessingXML\";

                XmlDocument resultCriteriaXMLDocument = new XmlDocument();
                resultCriteriaXMLDocument.Load(path + "ResultCriteria.xml");
                XmlDocument searchCriteriaXMLDocument = new XmlDocument();
                searchCriteriaXMLDocument.Load(path + "SearchCriteria.xml");
                XmlDocument dataViewXMLDocument = new XmlDocument();
                dataViewXMLDocument.Load(path + "DataView.xml");

                QueryBuilder target = new QueryBuilder(dataViewXMLDocument, searchCriteriaXMLDocument, resultCriteriaXMLDocument);

                Query[] resultingQueries = target.BuildQuery(DBMSType.ORACLE);

                string expectedSQL = @"(SELECT ""INV_COMPOUNDS"".""BASE64_CDX"" AS ""fieldName"" FROM CHEMINVDB2.INV_COMPOUNDS ""INV_COMPOUNDS"", CHEMINVDB2.INV_CONTAINERS ""c"", CHEMINVDB2.CSDOHITLIST ""h"" WHERE ""INV_COMPOUNDS"".""COMPOUND_ID"" = ""c"".""COMPOUND_ID_FK""(+) AND ""c"".""CONTAINER_ID"" = ""h"".""ID""(+) AND (TRIM(""INV_COMPOUNDS"".""SUBSTANCE_NAME"") LIKE '%' || :0 || '%') AND (TRIM(""INV_COMPOUNDS"".""SUBSTANCE_NAME"") LIKE '%' || :1 || '%') AND (TRIM(""INV_COMPOUNDS"".""SUBSTANCE_NAME"") = :2) AND (""h"".""HITLISTID"" < :3) AND (""h"".""HITLISTID"" > :4) AND (""h"".""HITLISTID"" <= :5) AND (""h"".""HITLISTID"" >= :6) AND (""h"".""HITLISTID"" <> :7) AND (""h"".""HITLISTID"" = :8) AND (""h"".""HITLISTID"" = :9) AND (""h"".""HITLISTID"" IS NULL) AND NOT (""INV_COMPOUNDS"".""SUBSTANCE_NAME"" IS NULL))";
                string actualSQL = resultingQueries[0].ToString().Trim();

                List<Value> expectedParameters = new List<Value>();
                expectedParameters.Add(new Value("", DbType.String));
                expectedParameters.Add(new Value("lala*l_", DbType.String));
                expectedParameters.Add(new Value("lalaolo", DbType.String));
                expectedParameters.Add(new Value("123", DbType.Int32));
                expectedParameters.Add(new Value("123", DbType.Int32));
                expectedParameters.Add(new Value("123", DbType.Int32));
                expectedParameters.Add(new Value("123", DbType.Int32));
                expectedParameters.Add(new Value("123", DbType.Int32));
                expectedParameters.Add(new Value("123", DbType.Int32));
                expectedParameters.Add(new Value("123", DbType.Int32));

                List<Value> actualParameters = resultingQueries[0].ParamValues;

                foreach (Value currentParameter in actualParameters)
                {
                    System.Diagnostics.Debug.WriteLine(currentParameter.Val + " " + currentParameter.Type);
                }
                Assert.AreEqual(expectedSQL, actualSQL, "CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.BuildQuery did not r" +
                        "eturn the expected value.");
                AreEqual(expectedParameters, actualParameters);
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }
        private void AreEqual(string[] values_expected, string[] values)
        {
            if (values_expected.Length != values.Length)
                Assert.Fail("Expected and actual parameters count differ");

            for (int i = 0; i < values.Length; i++)
            {

                if (values_expected[i] != values[i])
                    Assert.Fail(string.Format("Actual and expected parameters are different: {0} - {1}", values[i].ToString(), values_expected[i].ToString()));
            }
        }
        private void AreEqual(List<Value> values_expected, List<Value> values)
        {
            if (values_expected.Count != values.Count)
                Assert.Fail("Expected and actual parameters count differ");

            for (int i = 0; i < values.Count; i++)
            {

                if (values_expected[i] != values[i])
                    Assert.Fail(string.Format("Actual and expected parameters are different: {0} - {1}", values[i].ToString(), values_expected[i].ToString()));
            }
        }
    }
}
