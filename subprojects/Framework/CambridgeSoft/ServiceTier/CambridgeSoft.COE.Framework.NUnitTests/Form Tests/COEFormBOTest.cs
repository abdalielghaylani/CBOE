// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System;
using System.Collections.Generic;
using System.Xml;
using CambridgeSoft.COE.Framework.COEFormService;
using CambridgeSoft.COE.Framework.COESecurityService;
using CambridgeSoft.COE.Framework.Common.Messaging;
using CambridgeSoft.COE.Framework.NUnitTests.Helpers;
using NUnit.Framework;
using System.Configuration;


namespace CambridgeSoft.COE.Framework.COEFormService.UnitTests
{

    [TestFixture]
    public class COEFormBOTest
    {
        #region Variables
        private string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(@"\TestXML");
        private string databaseName = "SAMPLE";
        private string USERNAME = ConfigurationManager.AppSettings["LogonUserName"];
        private string PASSWORD = ConfigurationManager.AppSettings["LogonPassword"];
        private TestContext testContextInstance;
        List<int> newIds = null;
        #endregion

        #region Properties
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #endregion


        [SetUp]
        public void MyTestInitialize()
        {
            COEPrincipal.Logout();
            System.Security.Principal.IPrincipal user = Csla.ApplicationContext.User;

            bool result = COEPrincipal.Login(USERNAME, PASSWORD);
            newIds = new List<int>();
        }

        [TearDown]
        public void MyTestCleanup()
        {
            foreach (int id in newIds) COEFormBO.Delete(id);
            COEPrincipal.Logout();
        }

        #region Test Methods
        /// <summary>
        ///A test for New ()
        ///</summary>
        [Test]
       // [Priority(109)]
        public void StoreFormTest()
        {
            int id = 0;
            try
            {
                //this should create a new object
                COEFormBO formTestObject = StoreForm(id, false);
                id = formTestObject.ID;
                newIds.Add(id);
            }
            catch (Exception) { }

            Assert.IsTrue(id != 0, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                    "eBO.New did not return the expected value.");
        }

        /// <summary>
        ///A test for New with access rights()
        ///</summary>
        [Test]
       // [Priority(109)]
        public void StoreFormTestWithAccessRights()
        {
            int id = 0;
            try
            {
                //this should create a new object
                COEFormBO formTestObject = StoreForm(id, true);
                id = formTestObject.ID;
                newIds.Add(id);
            }
            catch (Exception) { }

            Assert.IsTrue(id != 0, "StoreFormTestWithAccessRights did not return the expected value.");
        }

        /// <summary>
        ///A test for Get ()
        ///</summary>
        [Test]
       // [Priority(109)]
        public void GetFormTest()
        {
            ////First make sure their is an object to get
            COEFormBO formBO = StoreForm(-1, false);
            int id = formBO.ID;
            newIds.Add(id);

            FormGroup myGetObject = null;

            try
            {
                formBO = COEFormBO.Get(id);
                //chek that the generic object has something in it.
                myGetObject = (FormGroup)formBO.COEFormGroup;
            }
            catch (Exception) { }

            Assert.IsTrue(myGetObject != null, "GetFormTest did not return the expected value.");
        }

        /// <summary>
        ///A test for Get with access rights
        ///</summary>
        [Test]
       // [Priority(109)]
        public void GetFormTestWithAccessRights()
        {
            ////First make sure their is an object to get
            COEFormBO formBO = StoreForm(-1, true);
            int id = formBO.ID;
            newIds.Add(id);

            try
            {
                formBO = COEFormBO.Get(id, true);
            }
            catch (Exception) { }

            Assert.IsTrue(formBO.COEFormGroup != null, "GetFormTestWithAccessRights did not return the expected value.");
            Assert.IsTrue(formBO.COEAccessRights != null, "GetFormTestWithAccessRights did not return the expected value.");
            Assert.IsTrue(formBO.COEAccessRights.Roles.Count > 0 && formBO.COEAccessRights.Users.Count > 0, "GetFormTestWithAccessRights did not return the expected value.");
        }

        /// <summary>
        ///A test for TryGet ()
        ///</summary>
        [Test]
       // [Priority(109)]
        public void TryGetForm_Test()
        {
            ////First make sure their is an object to get
            COEFormBO formBO = StoreForm(-1, false);
            int id = formBO.ID;
            newIds.Add(id);

            FormGroup.Form formToModify = null;

            formToModify = formBO.TryGetForm(formBO.COEFormGroup.DetailsForms, 0, 0);

            Assert.IsTrue(formToModify != null, "TryGetForm did not return the expected value.");
        }

        /// <summary>
        /// A test for Delete function inside COEFORMBO.
        /// </summary>
        [Test]
       // [Priority(109)]
        public void DeleteFormBOTest()
        {
            COEFormBO formBO = StoreForm(-1, false);
            int id = formBO.ID;
            COEFormBO.Delete(id);
            formBO = null;
            try
            {
                formBO = COEFormBO.Get(id);
                Assert.Fail();
            }
            catch (Exception ex)
            {
                Assert.IsTrue(ex.Message.Contains("COEFormBO"), "Deletion not Confirmed");
            }
        }

        [Test]
       // [Priority(109)]
        public void UpdateFormBOTest()
        {
            COEFormBO formBO = StoreForm(-1, false);
            int id = formBO.ID;
            newIds.Add(id);
            formBO = null;
            formBO = COEFormBO.Get(id);
            formBO.Name = "TempChanged";
            formBO.DatabaseName = "CHEMINVDB2";
            formBO = formBO.Save();
            formBO = null;
            formBO = COEFormBO.Get(id);
            Assert.IsTrue(formBO.Name.Equals("TempChanged"), "Update is not Correct");
        }

        [Test]
       // [Priority(109)]
        public void UpdateFormBOTestWithAccessPrivileges()
        {
            COEFormBO formBO = StoreForm(-1, true);
            newIds.Add(formBO.ID);
            int usersCount = -1;
            int usersCount2 = -1;
            try
            {
                usersCount = formBO.COEAccessRights.Users.Count;
                //get some users and roles
                List<string> myAppList = new List<string>();
                myAppList.Add("REGISTRATION");
                COEUserReadOnlyBOList userList = COEUserReadOnlyBOList.GetListByApplication(myAppList);
                //build the accessrights object
                formBO.COEAccessRights.Users = userList;
                formBO = formBO.Save();
                usersCount2 = formBO.COEAccessRights.Users.Count;
            }
            catch (Exception) { }
            Assert.IsFalse(usersCount == usersCount2, "UpdateFormBOTestWithAccessPrivileges failed.");
        }
        /// <summary>
        /// A test for Delete function inside COEFORMBO.
        /// </summary>
        [Test]
       // [Priority(109)]
        public void StoreAndDeleteFormBOWithAGivenID()
        {
            int id = 80001;
            COEFormBO objBO = StoreForm(id, false);
            Assert.AreEqual(id, objBO.ID, "The object didn't use the given ID, but an autogenerated");
            objBO = COEFormBO.Get(id);
            Assert.AreEqual(id, objBO.ID, "The object didn't use the given ID, but an autogenerated");

            COEFormBO.Delete(id);
            objBO = null;
            try
            {
                //following line will throw exception if view deleted successfully
                objBO = COEFormBO.Get(id);
                Assert.Fail("Deletion not Confirmed");
            }
            catch (Exception ex)
            {
                Assert.IsTrue(ex.Message.Contains("COEFormBO"), "Deletion not Confirmed");
            }
        }

        #region Test Cases For AddFormElementsTOForm
        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_QueryForm_AddModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : QueryForm, Display Mode : Add, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : QueryForm, Display Mode : Add, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_QueryForm_AllModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : QueryForm, Display Mode : All, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : QueryForm, Display Mode : All, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_QueryForm_EditModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : QueryForm, Display Mode : Edit, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : QueryForm, Display Mode : Edit, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_QueryForm_ViewModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : QueryForm, Display Mode : View, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : QueryForm, Display Mode : View, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_ListForm_AddModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : ListForm, Display Mode : Add, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : ListForm, Display Mode : Add, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_ListForm_AllModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : ListForm, Display Mode : All, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : ListForm, Display Mode : All, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_ListForm_EditModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : ListForm, Display Mode : Edit, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : ListForm, Display Mode : Edit, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_ListForm_ViewModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : ListForm, Display Mode : View, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : ListForm, Display Mode : View, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_DetailForm_AddModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : DetailForm, Display Mode : Add, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : DetailForm, Display Mode : Add, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_DetailForm_AllModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : DetailForm, Display Mode : All, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : DetailForm, Display Mode : All, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_DetailForm_EditModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : DetailForm, Display Mode : Edit, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : DetailForm, Display Mode : Edit, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_DetailForm_ViewModeTest()
        {
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : DetailForm, Display Mode : View, AllowDuplicateFormElements");
            Assert.IsTrue(AddFormElementsToForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements), "method AddFormElementsToForm fails for Current Form : DetailForm, Display Mode : View, DisallowDuplicateFormElements");
        }

        [Test]
       // [Priority(110)]
        public void AddFormElementsToForm_WithoutBindingInfoTest()
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            int ID = theCOEFormBO.ID;
            List<FormGroup.FormElement> theFormElements = GetFormElements();

            theCOEFormBO.RemoveAllFormElementsFromForm(FormGroup.CurrentFormEnum.DetailForm, 0, 0, FormGroup.DisplayMode.All);
            theCOEFormBO.ClearRequiredValidationRule();
            theCOEFormBO.ClearValidationRulesFromSearch();
            theCOEFormBO.AddFormElementsToForm(FormGroup.CurrentFormEnum.DetailForm, 0, 0, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.DisallowDuplicateFormElements, theFormElements);

            theCOEFormBO.Save(true);

            theCOEFormBO = null;
            theCOEFormBO = COEFormBO.Get(ID);
            string Actual = string.Empty;
            if (theCOEFormBO.COEFormGroup.DetailsForms.Displays[0].Forms[0].AddMode.Count > 0)
                Actual = theCOEFormBO.COEFormGroup.DetailsForms.Displays[0].Forms[0].AddMode[0].Name;

            COEFormBO.Delete(ID);

            Assert.IsTrue(string.Equals(theFormElements[0].Name, Actual));
        }

        #endregion

        #region Test Cases For RemoveFormElementsFromForm_Test
        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_QueryForm_AddModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : QueryForm, Display Mode : Add, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_QueryForm_AllModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : QueryForm, Display Mode : All, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_QueryForm_EditModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : QueryForm, Display Mode : Edit, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_QueryForm_ViewModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.QueryForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : QueryForm, Display Mode : View, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_ListForm_AddModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : ListForm, Display Mode : Add, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_ListForm_AllModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : ListForm, Display Mode : All, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_ListForm_EditModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : ListForm, Display Mode : Edit, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_ListForm_ViewModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.ListForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : ListForm, Display Mode : View, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_DetailForm_AddModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : DetailForm, Display Mode : Add, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_DetailForm_AllModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : DetailForm, Display Mode : All, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_DetailForm_EditModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : DetailForm, Display Mode : Edit, AllowDuplicateFormElements");
        }

        [Test]
       // [Priority(111)]
        public void RemoveFormElementsFromForm_DetailForm_ViewModeTest()
        {
            Assert.IsTrue(RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum.DetailForm, FormGroup.DisplayMode.View, COEFormBO.FormAddBehavior.AllowDuplicateFormElements), "method RemoveFormElementsFromForm fails for Current Form : DetailForm, Display Mode : View, AllowDuplicateFormElements");
        }

        #endregion

        [Test]
       // [Priority(112)]
        public void ReorderSearchCriteriaBindingExpressions_Test()
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            int ID = theCOEFormBO.ID;
            List<FormGroup.FormElement> theFormElements = GetFormElements();


            theCOEFormBO.AddFormElementsToForm(FormGroup.CurrentFormEnum.QueryForm, 0, 0, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements, theFormElements);
            theCOEFormBO.Save(true);

            theCOEFormBO = null;
            theCOEFormBO = COEFormBO.Get(ID);

            theCOEFormBO.ReorderSearchCriteriaBindingExpressions();
            Assert.IsNotNull(theCOEFormBO);

        }

        [Test]
       // [Priority(113)]
        public void UpdateFormElemetsSortOrder_DetailFormTest()
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            int ID = theCOEFormBO.ID;
            List<FormGroup.FormElement> theFormElements = GetFormElements();
            List<FormGroup.FormElement> theFormElementsNew = new List<FormGroup.FormElement> { theFormElements[1], theFormElements[0] };

            theCOEFormBO.AddFormElementsToForm(FormGroup.CurrentFormEnum.DetailForm, 0, 0, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements, theFormElements);
            theCOEFormBO.AddFormElementsToForm(FormGroup.CurrentFormEnum.DetailForm, 0, 0, FormGroup.DisplayMode.Edit, COEFormBO.FormAddBehavior.AllowDuplicateFormElements, theFormElementsNew);
            theCOEFormBO.Save(true);

            theCOEFormBO = null;
            theCOEFormBO = COEFormBO.Get(ID);

            String strActual = theCOEFormBO.COEFormGroup.DetailsForms.Displays[0].Forms[0].AddMode[0].Name;
            String strActual1 = theCOEFormBO.COEFormGroup.DetailsForms.Displays[0].Forms[0].EditMode[0].Name;

            theCOEFormBO.UpdateFormElemetsSortOrder(FormGroup.CurrentFormEnum.DetailForm, 0, 0, new List<string> { "FormulaTextBox", "BatchIDTextBox" });

            String strExpected = theCOEFormBO.COEFormGroup.DetailsForms.Displays[0].Forms[0].AddMode[0].Name;
            String strExpected1 = theCOEFormBO.COEFormGroup.DetailsForms.Displays[0].Forms[0].EditMode[0].Name;

            COEFormBO.Delete(ID);
            Assert.IsTrue((strActual == strExpected && strActual1 != strExpected1));
        }
        [Test]
       // [Priority(113)]
        public void UpdateFormElemetsSortOrder_QueryFormTest()
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            int ID = theCOEFormBO.ID;
            List<FormGroup.FormElement> theFormElements = GetFormElements();
            List<FormGroup.FormElement> theFormElementsNew = new List<FormGroup.FormElement> { theFormElements[1], theFormElements[0] };

            theCOEFormBO.RemoveAllFormElementsFromForm(FormGroup.CurrentFormEnum.QueryForm, 0, 0, FormGroup.DisplayMode.All);
            theCOEFormBO.AddFormElementsToForm(FormGroup.CurrentFormEnum.QueryForm, 0, 0, FormGroup.DisplayMode.All, COEFormBO.FormAddBehavior.AllowDuplicateFormElements, theFormElementsNew);
            theCOEFormBO.Save(true);

            theCOEFormBO = null;
            theCOEFormBO = COEFormBO.Get(ID);

            String strActual = theCOEFormBO.COEFormGroup.QueryForms.Displays[0].Forms[0].LayoutInfo[0].Name;
            String strActual1 = theCOEFormBO.COEFormGroup.QueryForms.Displays[0].Forms[0].LayoutInfo[1].Name;

            theCOEFormBO.UpdateFormElemetsSortOrder(FormGroup.CurrentFormEnum.QueryForm, 0, 0, new List<string> { "FormulaTextBox", "BatchIDTextBox" });

            String strExpected = theCOEFormBO.COEFormGroup.QueryForms.Displays[0].Forms[0].LayoutInfo[0].Name;
            String strExpected1 = theCOEFormBO.COEFormGroup.QueryForms.Displays[0].Forms[0].LayoutInfo[1].Name;
            COEFormBO.Delete(ID);
            Assert.IsTrue((strActual != strExpected && strActual1 != strExpected1));
        }

        [Test]
       // [Priority(114)]
        public void SetForm_DetailFormTest()
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            //int ID = theCOEFormBO.ID;

            COEFormBO.Delete(theCOEFormBO.ID);

            List<FormGroup.FormElement> theFormElements = GetFormElements();

            XmlDocument doc = new XmlDocument();
            doc.Load(SearchHelper.GetExecutingTestResultsBasePath(@"\FormGenerator XML") + "\\FormGroup.xml");
            FormGroup.Form theForm = FormGroup.GetFormGroup(doc.OuterXml).DetailsForms[0].Forms[0];

            //Here we are adding 2 form elements in Add Mode. 
            theCOEFormBO.AddFormElementsToForm(FormGroup.CurrentFormEnum.DetailForm, 0, 0, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements, theFormElements);

            int Expected = theCOEFormBO.COEFormGroup.DetailsForms.Displays[0].Forms[0].AddMode.Count;

            //The form in Add mode must be replaced in next stetment.
            //Which means there must be 0 form elements in Add mode after that.
            theCOEFormBO.SetForm(FormGroup.CurrentFormEnum.DetailForm, 0, 0, theForm);
            int Actual = theCOEFormBO.COEFormGroup.DetailsForms.Displays[0].Forms[0].AddMode.Count;

            Assert.IsTrue(Actual < Expected);

        }
        [Test]
       // [Priority(114)]
        public void SetForm_ListFormTest()
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            //int ID = theCOEFormBO.ID;

            COEFormBO.Delete(theCOEFormBO.ID);

            List<FormGroup.FormElement> theFormElements = GetFormElements();

            XmlDocument doc = new XmlDocument();
            doc.Load(SearchHelper.GetExecutingTestResultsBasePath(@"\FormGenerator XML") + "\\FormGroup.xml");
            FormGroup.Form theForm = FormGroup.GetFormGroup(doc.OuterXml).DetailsForms[0].Forms[0];

            //Here we are adding 2 form elements in Add Mode. 
            theCOEFormBO.AddFormElementsToForm(FormGroup.CurrentFormEnum.ListForm, 0, 0, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements, theFormElements);

            int Expected = theCOEFormBO.COEFormGroup.ListForms.Displays[0].Forms[0].AddMode.Count;

            //The form in Add mode must be replaced in next stetment.
            //Which means there must be 0 form elements in Add mode after that.
            theCOEFormBO.SetForm(FormGroup.CurrentFormEnum.ListForm, 0, 0, theForm);
            int Actual = theCOEFormBO.COEFormGroup.ListForms.Displays[0].Forms[0].AddMode.Count;

            Assert.IsTrue(Actual < Expected);

        }
        [Test]
       // [Priority(114)]
        public void SetForm_QueryFormTest()
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            //int ID = theCOEFormBO.ID;

            COEFormBO.Delete(theCOEFormBO.ID);

            List<FormGroup.FormElement> theFormElements = GetFormElements();

            XmlDocument doc = new XmlDocument();
            doc.Load(SearchHelper.GetExecutingTestResultsBasePath(@"\FormGenerator XML") + "\\FormGroup.xml");
            FormGroup.Form theForm = FormGroup.GetFormGroup(doc.OuterXml).DetailsForms[0].Forms[0];

            //Here we are adding 2 form elements in Add Mode. 
            theCOEFormBO.AddFormElementsToForm(FormGroup.CurrentFormEnum.QueryForm, 0, 0, FormGroup.DisplayMode.Add, COEFormBO.FormAddBehavior.AllowDuplicateFormElements, theFormElements);

            int Expected = theCOEFormBO.COEFormGroup.QueryForms.Displays[0].Forms[0].AddMode.Count;

            //The form in Add mode must be replaced in next stetment.
            //Which means there must be 0 form elements in Add mode after that.
            theCOEFormBO.SetForm(FormGroup.CurrentFormEnum.QueryForm, 0, 0, theForm);
            int Actual = theCOEFormBO.COEFormGroup.QueryForms.Displays[0].Forms[0].AddMode.Count;

            Assert.IsTrue(Actual < Expected);

        }

        #endregion

        #region Private Methods
        private FormGroup BuildCOEFormFromXML()
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(pathToXmls + "\\COEFormForTests.xml");
            return FormGroup.GetFormGroup(doc.OuterXml);
        }

        private COEFormBO StoreForm(int id, bool includeAccessRights)
        {
            //this should create a new object
            COEFormBO formObject = COEFormBO.New(databaseName);
            formObject.Name = "temp";
            formObject.Description = "temp";
            formObject.DatabaseName = databaseName;
            //this really should come from the logged in user..
            formObject.UserName = USERNAME;
            formObject.ID = id;
            formObject.COEFormGroup = BuildCOEFormFromXML();

            if (includeAccessRights)
            {
                COEUserReadOnlyBOList userList = COEUserReadOnlyBOList.GetList();
                COERoleReadOnlyBOList rolesList = COERoleReadOnlyBOList.GetList();
                //build the accessrights object
                formObject.COEAccessRights = new COEAccessRightsBO(userList, rolesList);
            }
            else
                formObject.IsPublic = true;


            //this is where it get's persisted
            formObject = formObject.Save();
            return formObject;
        }

        private bool AddFormElementsToForm_Test(FormGroup.CurrentFormEnum currentForm, FormGroup.DisplayMode displayMode, COEFormBO.FormAddBehavior FormAddBehavior)
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            int ID = theCOEFormBO.ID;
            List<FormGroup.FormElement> theFormElements = new List<FormGroup.FormElement>();

            FormGroup.FormElement theFormElement = new FormGroup.FormElement();
            theFormElement.Name = "Structure";
            theFormElement.Label = "Formula";
            theFormElement.Id = "FormulaTextBox";
            theFormElement.BindingExpression = "SearchCriteria.Items[3].Criterium.Structure";
            theFormElement.DisplayInfo.Top = "60px";
            theFormElement.DisplayInfo.Left = "10px";
            theFormElement.DisplayInfo.Type = "CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly";
            theFormElements.Add(theFormElement);

            theFormElement = new FormGroup.FormElement();
            theFormElement.Name = "RegNum";
            theFormElement.Id = "BatchIDTextBox";
            theFormElement.BindingExpression = "SearchCriteria.Items[0].Criterium.InnerText";
            theFormElement.DisplayInfo.Top = "540px";
            theFormElement.DisplayInfo.Left = "15px";
            theFormElement.DisplayInfo.Height = "15px";
            theFormElement.DisplayInfo.Width = "100px";
            theFormElement.DisplayInfo.Type = "CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox";
            theFormElements.Add(theFormElement);

            try
            {
                theCOEFormBO.RemoveAllFormElementsFromForm(currentForm, 0, 0, displayMode);

                theCOEFormBO.AddFormElementsToForm(currentForm, 0, 0, displayMode, FormAddBehavior, theFormElements);

                theCOEFormBO.Save(true);

                theCOEFormBO = null;
                theCOEFormBO = COEFormBO.Get(ID);
                string Actual = string.Empty;
                FormGroup.DisplayCollection theDisplayCollection = null;

                switch (currentForm)
                {
                    case FormGroup.CurrentFormEnum.QueryForm: theDisplayCollection = theCOEFormBO.COEFormGroup.QueryForms;
                        break;
                    case FormGroup.CurrentFormEnum.DetailForm: theDisplayCollection = theCOEFormBO.COEFormGroup.DetailsForms;
                        break;
                    case FormGroup.CurrentFormEnum.ListForm: theDisplayCollection = theCOEFormBO.COEFormGroup.ListForms;
                        break;
                }

                switch (displayMode)
                {
                    case FormGroup.DisplayMode.Add: if (theDisplayCollection.Displays[0].Forms[0].AddMode.Count > 0) Actual = theDisplayCollection.Displays[0].Forms[0].AddMode[0].Name;
                        break;
                    case FormGroup.DisplayMode.Edit: if (theDisplayCollection.Displays[0].Forms[0].EditMode.Count > 0) Actual = theDisplayCollection.Displays[0].Forms[0].EditMode[0].Name;
                        break;
                    case FormGroup.DisplayMode.View: if (theDisplayCollection.Displays[0].Forms[0].ViewMode.Count > 0) Actual = theDisplayCollection.Displays[0].Forms[0].ViewMode[0].Name;
                        break;
                    case FormGroup.DisplayMode.All: if (theDisplayCollection.Displays[0].Forms[0].LayoutInfo.Count > 0) Actual = theDisplayCollection.Displays[0].Forms[0].LayoutInfo[0].Name;
                        break;
                }

                return string.Equals(theFormElements[0].Name, Actual);
            }
            catch
            {
                return false;
            }
            finally
            {
                COEFormBO.Delete(ID);
            }


        }

        private bool RemoveFormElementsFromForm_Test(FormGroup.CurrentFormEnum currentForm, FormGroup.DisplayMode displayMode, COEFormBO.FormAddBehavior FormAddBehavior)
        {
            COEFormBO theCOEFormBO = StoreForm(-1, false);
            int ID = theCOEFormBO.ID;
            List<FormGroup.FormElement> theFormElements = GetFormElements();

            try
            {
                theCOEFormBO.RemoveAllFormElementsFromForm(currentForm, 0, 0, displayMode);
                theCOEFormBO.AddFormElementsToForm(currentForm, 0, 0, displayMode, FormAddBehavior, theFormElements);
                theCOEFormBO.Save(true);

                theCOEFormBO = null;
                theCOEFormBO = COEFormBO.Get(ID);
                int iOriginal = -1;
                FormGroup.DisplayCollection theDisplayCollection = null;
                switch (currentForm)
                {
                    case FormGroup.CurrentFormEnum.QueryForm: theDisplayCollection = theCOEFormBO.COEFormGroup.QueryForms;
                        break;
                    case FormGroup.CurrentFormEnum.DetailForm: theDisplayCollection = theCOEFormBO.COEFormGroup.DetailsForms;
                        break;
                    case FormGroup.CurrentFormEnum.ListForm: theDisplayCollection = theCOEFormBO.COEFormGroup.ListForms;
                        break;
                }

                switch (displayMode)
                {
                    case FormGroup.DisplayMode.Add: iOriginal = theDisplayCollection.Displays[0].Forms[0].AddMode.Count;
                        break;
                    case FormGroup.DisplayMode.Edit: iOriginal = theDisplayCollection.Displays[0].Forms[0].EditMode.Count;
                        break;
                    case FormGroup.DisplayMode.View: iOriginal = theDisplayCollection.Displays[0].Forms[0].ViewMode.Count;
                        break;
                    case FormGroup.DisplayMode.All: iOriginal = theDisplayCollection.Displays[0].Forms[0].LayoutInfo.Count;
                        break;
                }

                theCOEFormBO.RemoveFormElementsFromForm(currentForm, 0, 0, displayMode, new List<string> { "FormulaTextBox", "BatchIDTextBox" });
                theCOEFormBO.Save(true);

                theCOEFormBO = null;
                theCOEFormBO = COEFormBO.Get(ID);

                int Actual = -1;
                theDisplayCollection = null;
                switch (currentForm)
                {
                    case FormGroup.CurrentFormEnum.QueryForm: theDisplayCollection = theCOEFormBO.COEFormGroup.QueryForms;
                        break;
                    case FormGroup.CurrentFormEnum.DetailForm: theDisplayCollection = theCOEFormBO.COEFormGroup.DetailsForms;
                        break;
                    case FormGroup.CurrentFormEnum.ListForm: theDisplayCollection = theCOEFormBO.COEFormGroup.ListForms;
                        break;
                }

                switch (displayMode)
                {
                    case FormGroup.DisplayMode.Add: Actual = theDisplayCollection.Displays[0].Forms[0].AddMode.Count;
                        break;
                    case FormGroup.DisplayMode.Edit: Actual = theDisplayCollection.Displays[0].Forms[0].EditMode.Count;
                        break;
                    case FormGroup.DisplayMode.View: Actual = theDisplayCollection.Displays[0].Forms[0].ViewMode.Count;
                        break;
                    case FormGroup.DisplayMode.All: Actual = theDisplayCollection.Displays[0].Forms[0].LayoutInfo.Count;
                        break;
                }

                return (Actual < iOriginal);

            }
            catch
            {
                return false;
            }
            finally
            {
                COEFormBO.Delete(ID);
            }
        }

        private List<FormGroup.FormElement> GetFormElements()
        {
            List<FormGroup.FormElement> theFormElements = new List<FormGroup.FormElement>();
            FormGroup.FormElement theFormElement = new FormGroup.FormElement();
            theFormElement.Name = "Structure";
            theFormElement.Label = "Formula";
            theFormElement.Id = "FormulaTextBox";
            theFormElement.DisplayInfo.Top = "60px";
            theFormElement.DisplayInfo.Left = "10px";
            theFormElement.DisplayInfo.Type = "CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly";
            theFormElements.Add(theFormElement);

            theFormElement = new FormGroup.FormElement();
            theFormElement.Name = "RegNum";
            theFormElement.Id = "BatchIDTextBox";
            theFormElement.DisplayInfo.Top = "540px";
            theFormElement.DisplayInfo.Left = "15px";
            theFormElement.DisplayInfo.Height = "15px";
            theFormElement.DisplayInfo.Width = "100px";
            theFormElement.DisplayInfo.Type = "CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox";
            theFormElements.Add(theFormElement);

            return theFormElements;
        }
        #endregion
    }
}