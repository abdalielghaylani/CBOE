//// The following code was generated by Microsoft Visual Studio 2005.
//// The test owner should check each test for validity.
//using NUnit.Framework;
//using System;
//using System.Text;
//using System.Collections.Generic;
//using CambridgeSoft.COE.Framework.Services.QueryCriteria;
//using CambridgeSoft.COE.Framework.Common;
//using CambridgeSoft.COE.Framework;
//using System.Data;
//using System.Data.Common;

//namespace CambridgeSoft.COE.Framework.NUnitTests
//{
//    /// <summary>
//    ///This is a test class for CambridgeSoft.COE.Framework.Services.QueryCriteria.QueryCriteriaManager and is intended
//    ///to contain all CambridgeSoft.COE.Framework.Services.QueryCriteria.QueryCriteriaManager Unit Tests
//    ///</summary>
//    [TestFixture]
//    public class QueryCriteriaManagerTest
//    {
//        private static QueryCriteriaDAL target = null;

//        private TestContext testContextInstance;

//        /// <summary>
//        ///Gets or sets the test context which provides
//        ///information about and functionality for the current test run.
//        ///</summary>
//        public TestContext TestContext
//        {
//            get
//            {
//                return testContextInstance;
//            }
//            set
//            {
//                testContextInstance = value;
//            }
//        }
//        [TestFixtureSetUp]
//        public static void MyClassInitialize()
//        {
//            DALFactory dalFactory = new DALFactory();
//            SecurityInfo secInfo = new SecurityInfo("", "SAMPLE", "ORACLE");
//            dalFactory.GetDAL<QueryCriteriaDAL>(ref target, "QueryCriteria", "SAMPLE_ORACLE", secInfo);
//        }
//        #region Additional test attributes
//        // 
//        //You can use the following additional attributes as you write your tests:
//        //
//        //Use ClassInitialize to run code before running the first test in the class
//        //

//        //
//        //Use ClassCleanup to run code after all tests in a class have run
//        //
//        //[TestFixtureTearDown]
//        //public static void MyClassCleanup()
//        //{
//        //}
//        //
//        //Use TestInitialize to run code before running each test
//        //
//        //[SetUp]
//        //public void MyTestInitialize()
//        //{
//        //}
//        //
//        //Use TestCleanup to run code after each test has run
//        //
//        //[TearDown]
//        //public void MyTestCleanup()
//        //{
//        //}
//        //
//        #endregion

//        private static int ExecuteScalar(string commandString)
//        {
//            DbCommand dbCommand = target.DALManager.Database.GetSqlStringCommand(commandString);
//            return int.Parse(target.DALManager.Database.ExecuteScalar(dbCommand).ToString());
//        }


//        public string GetAppName(string dbmsType)
//        {
//            string appName = null;
//            switch (dbmsType.ToUpper())
//            {
//                case "MSACCESS":
//                    appName = "SAMPLE_MSACCESS";
//                    break;
//                case "SQLSERVER":
//                    appName = "SAMPLE_SQLSERVER";
//                    break;
//                case "ORACLE":
//                    appName = "SAMPLE_ORACLE";
//                    break;
//            }
//            return appName;
//        }

//        public SecurityInfo GetSecurityInfo(string appName)
//        {
//            SecurityInfo secInfo = null;
//            switch (appName.ToUpper())
//            {
//                case "SAMPLE_MSACCESS":
//                    secInfo = new SecurityInfo("", "admin", "");
//                    break;
//                case "SAMPLE_SQLSERVER":
//                    secInfo = new SecurityInfo("", "sa", "q3tech");
//                    break;
//                case "SAMPLE_ORACLE":
//                    secInfo = new SecurityInfo("", "SAMPLE", "ORACLE");
//                    break;
//            }
//            return secInfo;
//        }


//        /// <summary>
//        ///A test for InsertQueryCriteria (SecurityInfo, string, SearchCriteria)
//        ///</summary>
//        [Test]
//        public void InsertQueryCriteriaTest()
//        {
//            try
//            {

//                QueryCriteriaManager target = new QueryCriteriaManager();

//                string appName = GetAppName("oracle");
//                SecurityInfo securityInfo = GetSecurityInfo(appName);

//                SearchCriteria searchCriteria = new SearchCriteria();
//                SearchCriteria.SearchCriteriaItem searchCriteriaItem = new SearchCriteria.SearchCriteriaItem();
//                //one parameter
//                SearchCriteria.SearchCriteriaItem field1 = new SearchCriteria.SearchCriteriaItem();
//                field1.ID = 1;
//                field1.FieldId = 9;
//                field1.TableId = 3;

//                SearchCriteria.TextCriteria text1 = new SearchCriteria.TextCriteria();
//                text1.Operator = SearchCriteria.COEOperators.LIKE;
//                text1.InnerText = "benzene";
//                field1.Criterium = text1;

//                //second parameter
//                SearchCriteria.SearchCriteriaItem field2 = new SearchCriteria.SearchCriteriaItem();
//                field2.ID = 2;
//                field2.FieldId = 10;
//                field2.TableId = 2;

//                SearchCriteria.TextCriteria text2 = new SearchCriteria.TextCriteria();
//                text2.Operator = SearchCriteria.COEOperators.LIKE;
//                text2.InnerText = "abc";
//                field2.Criterium = text2;

//                searchCriteria.Items.Add(field1);
//                searchCriteria.Items.Add(field2);

//                int sessionId = 1;
//                string queryName = "my Query";
//                string description = "testing";
//                string isPublic = "y";
//                int formGroupId = 1;
//                int numberHits = 2;
//                string userName = securityInfo.UserName;


//                int actual;

//                target.SecurityInfo = securityInfo;
//                target.AppName = appName;

//                actual = target.InsertQueryCriteria(securityInfo, appName, searchCriteria, sessionId, queryName, description, isPublic, formGroupId, numberHits, userName);
//                int expected = Convert.ToInt16(ExecuteScalar("SELECT MAX(QUERY_ID) FROM DB_QUERY"));
//                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Services.QueryCriteria.QueryCriteriaManager.InsertQue" +
//                        "ryCriteria did not return the expected value.");
//            }
//            catch (Exception ex)
//            {
//                Assert.Fail(ex.Message);
//            }

//        }


//        /// <summary>
//        ///A test for DeleteQueryCriteria (SecurityInfo, string, int[])
//        ///</summary>
//        [Test]
//        public void DeleteQueryCriteriaTest()
//        {
//            try
//            {
//                QueryCriteriaManager target = new QueryCriteriaManager();
//                string appName = GetAppName("oracle");

//                SecurityInfo securityInfo = GetSecurityInfo(appName);
//                target.AppName = appName;
//                target.SecurityInfo = securityInfo;

//                int[] queryID = { 82, 101 };

//                target.DeleteQueryCriteria(securityInfo, appName, queryID);
//            }
//            catch (Exception ex)
//            {
//                Assert.Fail(ex.Message);
//            }


//        }
//        /// <summary>
//        ///A test for DeleteUserQueryCriteria (SecurityInfo, string)
//        ///</summary>
//        [Test]
//        public void DeleteUserQueryCriteriaTest()
//        {
//            try
//            {
//                QueryCriteriaManager target = new QueryCriteriaManager();
//                string appName = GetAppName("msaccess");
//                SecurityInfo securityInfo = GetSecurityInfo(appName);

//                target.AppName = appName;
//                target.SecurityInfo = securityInfo;
//                string userName = securityInfo.UserName;

//                target.DeleteUserQueryCriteria(securityInfo, appName, userName);
//            }
//            catch (Exception ex)
//            {
//                Assert.Fail(ex.Message);
//            }


//        }

//        /// <summary>
//        ///A test for GetQueryCriteria (SecurityInfo, string, int)
//        ///</summary>
//        [Test]
//        public void GetQueryCriteriaTest()
//        {
//            try
//            {
//                QueryCriteriaManager target = new QueryCriteriaManager();
//                string appName = GetAppName("msaccess");
//                SecurityInfo securityInfo = GetSecurityInfo(appName);

//                int searchCriteriaID = 5;

//                QueryCriteriaInfo actual;
//                target.AppName = appName;
//                target.SecurityInfo = securityInfo;

//                actual = target.GetQueryCriteria(securityInfo, appName, searchCriteriaID);

//                Assert.IsNotNull(actual, "CambridgeSoft.COE.Framework.Services.QueryCriteria.QueryCriteriaManager.GetQueryC" +
//                        "riteria did not return the expected value.");
//            }
//            catch (Exception ex)
//            {
//                Assert.Fail(ex.Message);
//            }
//        }

//        /// <summary>
//        ///A test for UpdateQueryCriteria (SecurityInfo, string, int, SearchCriteria, string, string, string)
//        ///</summary>
//        [Test]
//        public void UpdateQueryCriteriaTest()
//        {
//            try
//            {
//                QueryCriteriaManager target = new QueryCriteriaManager();

//                string appName = GetAppName("msaccess");

//                SecurityInfo securityInfo = GetSecurityInfo(appName);

//                int searchCriteriaID = 5;

//                SearchCriteria searchCriteria = new SearchCriteria();
//                SearchCriteria.SearchCriteriaItem searchCriteriaItem = new SearchCriteria.SearchCriteriaItem();
//                //one parameter
//                SearchCriteria.SearchCriteriaItem field1 = new SearchCriteria.SearchCriteriaItem();
//                field1.ID = 1;
//                field1.FieldId = 9;
//                field1.TableId = 3;

//                SearchCriteria.TextCriteria text1 = new SearchCriteria.TextCriteria();
//                text1.Operator = SearchCriteria.COEOperators.NOTEQUAL;
//                text1.InnerText = "first searching";
//                field1.Criterium = text1;

//                //second parameter
//                SearchCriteria.SearchCriteriaItem field2 = new SearchCriteria.SearchCriteriaItem();
//                field2.ID = 2;
//                field2.FieldId = 10;
//                field2.TableId = 2;

//                SearchCriteria.TextCriteria text2 = new SearchCriteria.TextCriteria();
//                text2.Operator = SearchCriteria.COEOperators.LIKE;
//                text2.InnerText = "second searching";
//                field2.Criterium = text2;

//                searchCriteria.Items.Add(field1);
//                searchCriteria.Items.Add(field2);


//                string queryName = "updated query";

//                string description = "updating";

//                string isPublic = "n";
//                target.AppName = appName;
//                target.SecurityInfo = securityInfo;

//                target.UpdateQueryCriteria(securityInfo, appName, searchCriteriaID, searchCriteria, queryName, description, isPublic);

//            }
//            catch (Exception ex)
//            {
//                Assert.Fail(ex.Message);
//            }

//        }



//        /// <summary>
//        ///A test for GetUserQueryCriteria (SecurityInfo, string, string)
//        ///</summary>
//        [Test]
//        public void GetUserQueryCriteriaTest()
//        {
//            try
//            {
//                QueryCriteriaManager target = new QueryCriteriaManager();

//                string appName = GetAppName("oracle");

//                SecurityInfo securityInfo = GetSecurityInfo(appName);

//                string userName = securityInfo.UserName;

//                System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.QueryCriteriaInfo> actual;
//                target.AppName = appName;
//                target.SecurityInfo = securityInfo;


//                actual = target.GetUserQueryCriteria(securityInfo, appName, userName);

//                Assert.IsNotNull(actual, "CambridgeSoft.COE.Framework.Services.QueryCriteria.QueryCriteriaManager.GetUserQu" +
//                        "eryCriteria did not return the expected value.");
//            }
//            catch (System.Exception ex)
//            {
//                Assert.Fail(ex.Message);
//            }

//        }

//        /// <summary>
//        ///A test for GetAllQueryCriteria (SecurityInfo, string, bool)
//        ///</summary>
//        [Test]
//        public void GetAllQueryCriteriaTest()
//        {
//            QueryCriteriaManager target = new QueryCriteriaManager();

//            string appName = GetAppName("oracle");
//            SecurityInfo securityInfo = GetSecurityInfo(appName);

//            bool IsPublic = true;
//            target.AppName = appName;
//            target.SecurityInfo = securityInfo;

//            System.Collections.Generic.List<CambridgeSoft.COE.Framework.Common.QueryCriteriaInfo> actual;

//            actual = target.GetAllQueryCriteria(securityInfo, appName, IsPublic);

//            Assert.IsNotNull(actual, "CambridgeSoft.COE.Framework.Services.QueryCriteria.QueryCriteriaManager.GetAllQue" +
//                    "ryCriteria did not return the expected value.");

//        }
//    }


//}
