// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using System.Security.Principal;
using CambridgeSoft.COE.Framework.COESecurityService;
namespace CambridgeSoft.COE.Framework.NUnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal and is intended
    ///to contain all CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal Unit Tests
    ///</summary>
    [TestFixture]
    public class COEPrincipalTest
    {


        private TestContext testContextInstance;

        /// <summary>
        /// Gets or sets the test context which provides
        /// information about and functionality for the current test run.
        /// </summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[TestFixtureSetUp]
        //public static void MyClassInitialize()
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[TestFixtureTearDown]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[SetUp]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TearDown]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        /// A test for COEPrincipal (IIdentity)
        /// </summary>
       // [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [Test]
        public void ConstructorTest()
        {
            IIdentity identity = null; // TODO: Initialize to an appropriate value

            COEPrincipal target = CambridgeSoft.COE.Framework.NUnitTests.CambridgeSoft_COE_Framework_COESecurityService_COEPrincipalAccessor.CreatePrivate(identity);

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        /// A test for RenewToken ()
        /// </summary>
        [Test]
        public void RenewTokenTest()
        {
            if (COEPrincipal.Login("cssadmin", "cssadmin"))
            {
                string ticket = COEPrincipal.Token;
                string newTicket = COEPrincipal.RenewToken();
                Assert.AreEqual(ticket, newTicket, "Ticket was changed, it was not supposed to do so as the ticked did not expired.");
                Assert.AreEqual(newTicket, COEPrincipal.Token, "COEPrincipal.Token was not updated properly");
                COEPrincipal.Logout();
                newTicket = COEPrincipal.RenewToken();
                Assert.AreEqual("This is an invalid ticket", newTicket, "The ticket was not updated to state is invalid");
            }
            else
            {
                Assert.Fail("Authentication failed for user cssadmin");
            }
        }

        /// <summary>
        /// A test for IsValidToken ()
        /// </summary>
        [Test]
        public void IsValidTokenTest()
        {
            if (COEPrincipal.Login("cssadmin", "cssadmin"))
            {
                // An expired ticket
                // 785EE32A9EEDD8DA6DA84A5CFDBC355955074BB1A46C1D436AF49A8E8ED24955B652121C9DC261758631922646322BB67340695AF7CE7F3C0D44649F7A534AE7144D319C3D9A325A571CCD2749FE567EC29C8EE312FC544359B62DC98EE424AEA65342E0C52458D932936E3E3295C3AB50B05C0A4DE5648065522A9274C550D8CDA55A19611F8569C3858582AAA4341665DFB25C1CCE93CEBB2297420BE22F2EA94EF93C023AFDBCE728B319986A03384140B30A99596B26442134B25C4A67AD73F47CCF
                bool isValid = COEPrincipal.IsValidToken();
                Assert.IsTrue(isValid, "Ticket is not valid, but it should be.");
                COEPrincipal.Logout();
                isValid = COEPrincipal.IsValidToken();
                Assert.IsFalse(isValid, "The ticket was not set as invalid.");
            }
            else
            {
                Assert.Fail("Authentication failed for user cssadmin");
            }
        }
    }
}
