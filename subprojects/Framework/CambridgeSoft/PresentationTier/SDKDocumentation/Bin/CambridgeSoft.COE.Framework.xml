<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CambridgeSoft.COE.Framework</name>
    </assembly>
    <members>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton">
            <summary>
            <para>
            This class implements a LinkButton control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COELinkButton class accepts every LinkButton property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default text?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                  &lt;defaultValue&gt;Resolve This Compound&lt;/defaultValue&gt;
                  &lt;bindingExpression/&gt;
                  &lt;serverEvents&gt;
                    &lt;event eventName="Click" handlerName="ResolveLinkButton_Click"/&gt;
                  &lt;/serverEvents&gt;
                  &lt;configInfo&gt;
                    &lt;fieldConfig&gt;
                    &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
                    &lt;ID&gt;ResolveLinkButton&lt;/ID&gt;
                    &lt;/fieldConfig&gt;
                  &lt;/configInfo&gt;
                  &lt;displayInfo&gt;
                    &lt;top&gt;325px&lt;/top&gt;
                    &lt;left&gt;100px&lt;/left&gt;
                    &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton&lt;/type&gt;
                  &lt;/displayInfo&gt;
                &lt;/formElement&gt;
              &lt;/formElements&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Text property.
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEGenerableControl">
            <summary>
            <para>
            Every control that is intended to be rendered by a FormGenerator must implement this interface.
            In order to allow the proper communication between a FormGenerator containing a control, and the control
            itself, four members must be implemented:
            </para>
            <list type="bullet">
                <item>GetData method: Defines what is being returned by a control, usually this is as simple as returning
                the Text property of the base class, but sometimes this method can be quite more complex.</item>
                <item>PutData method: Defines where is being set the values (usually) entered by the user. It can be as simple
                as setting a Text property of the base class, but can be quite more complex, for instance in a GridView
                implementation.</item>
                <item>LoadFromXml method: Each control will need some specific information, is responsibility of each control
                to define and to understand/parse its own configuration in some xml like format.</item>
                <item>DefaultValue property: When the control is initialized this property may be called.</item>
            </list>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEGenerableControl.GetData">
            <summary>
            <para>Returns whatever the underlying control has defined as the main property to communicate with a 
            FormGenerator</para>
            </summary>
            <returns>An object defined by the underlying control.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEGenerableControl.PutData(System.Object)">
            <summary>
            <para>
            Sets the control's main property used to communicate with a FormGenerator.
            </para>
            </summary>
            <param name="data">An object with the values being sent by the user to the FormGenerator</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEGenerableControl.LoadFromXml(System.String)">
            <summary>
            <para>
            Method intended to delegate specific configurations to the underlying control. This config info will
            come inside an xml tag <b>&lt;configInfo&gt;</b>.
            </para>
            </summary>
            <param name="xmlDataAsString">A string with xml format that contains control's configurations</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEGenerableControl.DefaultValue">
            <summary>
            Gets or sets the default value of the control.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOELabelable">
            <summary>
            <para>
            This interface is intended to give the controls the ability to have a label.
            Along with a Property called Label another one is provided, called LabelCSSClass, to allow different css classes
            for the control itself and for the label.
            </para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOELabelable.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOELabelable.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOERequireable">
            <summary>
            <para>
            This interface is intended to give the controls the ability to be marked as required.
            Each control may use this interface to be rendered in some different way if the control is required.
            </para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOERequireable.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton.GetData">
            <summary>
            <para>Gets the Text of the link button.</para>
            </summary>
            <returns>A string with the link button's text</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton.PutData(System.Object)">
            <summary>
            <para>Sets the link button's text.</para>
            </summary>
            <param name="data">A string with the desired link button's text</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
              &lt;ID&gt;ResolveLinkButton&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton.DefaultValue">
            <summary>
            <para>Sets the default Text.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELinkButton.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed">
            <summary>
            <para>
            This class is used to render an ChemDraw activex, which basically allows to draw and analyze chemical structures, as well as 
            data formatting.
            This server controls has plenty of the functionality running on client side, but that means that ChemDraw activex <b>must</b> be
            installed on the client machine.
            </para>
            <para>
            Other important consideration is that the chemdraw needs to be activated to a PRO license in order to be fully functional. The NET
            version of it may cause the control to behave in an unexpected manner.
            </para>
            <para><b>Example:</b></para>
            <para><i>Adding the control in the html source is as easy as follows:</i></para>
            <code lang="HTML/.NET">
            &lt;%@ Page Language="C#" ...  %&gt;
            &lt;%@ Register Assembly="CambridgeSoft.COE.Framework"
            Namespace="CambridgeSoft.COE.Framework.Controls.ChemDraw" TagPrefix="cc1" %&gt;
            
            ...
            
            &lt;cc1:COEChemDrawEmbed id="COEChemDrawEmbedControl" runat="server"&gt;&lt;/cc1:COEChemDrawEmbed&gt;
            
            ...
            </code>
            
            <para><i>And to include the control programatically is as simple as:</i></para>
            <code lang="C#">
            COEChemDrawEmbed ChemDrawControl = new COEChemDrawEmbed();
            ChemDrawControl.ID = "COEChemDrawEmbedControl";
            ChemDrawControl.InlineData = "Some base64 structure representation";
            </code>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.MimeType">
            <summary>
            Gets or sets the mime type of the data passed to the control. <seealso cref="T:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes"/>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.Src">
            <summary>
            Gets or sets the chem draw source to display
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.Name">
            <summary>
            Gets or sets the name of the control.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.ViewOnly">
            <summary>
            Gets or sets if the control is in mode View only.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.DockingReferenceID">
            <summary>
            Gets or sets the docking reference id.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.DataURL">
            <summary>
            Gets or sets the data URL.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.InlineData">
            <summary>
            Gets or sets the data inline.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.ShrinkToFit">
            <summary>
            Gets or sets if the control should shrink to fit.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.DontCache">
            <summary>
            Gets or sets if the control shouldnt be catched.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.EditOutOfPlace">
            <summary>
            Gets or sets if the control can be edited out of place.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed.ShowToolsWhenVisible">
            <summary>
            Gets or sets if the tools should be shown when the control is visible.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes">
            <summary>
            Supported mime types by chem draw plugin.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xcdx">
            <summary>
            chemical/x-cdx
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.cdx">
            <summary>
            chemical/cdx
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xml">
            <summary>
            text/xml
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xchemdraw">
            <summary>
            chemical/x-chemdraw
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xmdlmolfile">
            <summary>
            chemical/x-mdl-molfile
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.mdlmolfile">
            <summary>
            chemical/mdl-molfile
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xmdltgf">
            <summary>
            chemical/x-mdl-tgf
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.mdltgf">
            <summary>
            chemical/mdl-tgf
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xmdlrxn">
            <summary>
            chemical/x-mdl-rxn
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.mdlrxn">
            <summary>
            chemical/mdl-rxn
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xdaylightsmiles">
            <summary>
            chemical/x-daylight-smiles
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.daylightsmiles">
            <summary>
            chemical/daylight-smiles
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xsmiles">
            <summary>
            chemical/x-smiles
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.smiles">
            <summary>
            chemical/smiles
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xmdlisis">
            <summary>
            chemical/x-mdl-isis
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.mdlisis">
            <summary>
            chemical/mdl-isis
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xquestelf1">
            <summary>
            chemical/x-questel-f1
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xquestelf1query">
            <summary>
            chemical/x-questel-f1-query
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xmsimolfile">
            <summary>
            chemical/x-msi-molfile
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.msimolfile">
            <summary>
            chemical/msi-molfile
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xsmd">
            <summary>
            chemical/x-smd
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.smd">
            <summary>
            chemical/smd
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xct">
            <summary>
            chemical/x-ct
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.ct">
            <summary>
            chemical/ct
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xcml">
            <summary>
            chemical/x-cml
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.cml">
            <summary>
            chemical/cml
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Controls.ChemDraw.MimeTypes.xname">
            <summary>
            chemical/x-name
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.OracleDataAccessClientDAL">
            <summary>
            Class for supporting Oracle based COEGenericObjectStorage Service.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL">
            <summary>
            Base Data access logic layer class for supporting COEGenericObjectStorage Service.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DALBase">
            <summary>
            Base class for Data Access Logic Layer
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.LoaderBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.LoaderBase.GetConfigData(System.String,System.String,System.String)">
            <summary>
            Populates the database, service and application configuration data from its names.
            </summary>
            <param name="databaseName">The database schema name</param>
            <param name="serviceName">The service name</param>
            <param name="appName">The application name</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.LoaderBase.AppConfigData">
            <summary>
            Application confituration data
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.LoaderBase.ServiceConfigData">
            <summary>
            Service confituration data
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.LoaderBase.DatabaseConfigData">
            <summary>
            Database configuration data
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALBase.SetServiceSpecificVariables">
            <summary>
            A general purpose method that you can override in a service that is called after a DAL is instantiated. Allows
            you to create a method that does general purposed variable settings taht require a fully constructed DAL
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALBase.SetServiceSpecificVariables(System.String)">
            <summary>
            Overloaded. A general purpose method that you can override in a service that is called after a DAL is instantiated. Allows
            you to create a method that does general purposed variable settings taht require a fully constructed DAL.
            </summary>
            <param name="param">The parameters</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALBase.DALManager">
            <summary>
            Data Access Manager
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALBase.Database">
            <summary>
            Database object
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.TruncateGenericObjectStorageTable">
            <summary>
            Truncates the generic object storage table.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.SetServiceSpecificVariables">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.DeleteCOEGenericObjectStorageTable">
            <summary>
            Deletes the COEGenericObjectStorage table.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.CheckCOEGenericObjectStorageTableExists">
            <summary>
            Checks if COEGenericObjectStorage table exists.
            </summary>
            <returns>True if the table exists, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.EnsureCOEGenericObjectStorageTablesAndSequenceExists">
            <summary>
            Make sure that the COEFormTables and Sequence exist. Create if necessary
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.CreateCOEGenericObjectStorageTable">
            <summary>
            Creates an empty COEGenericObjectStorage table.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.GetNewID">
            <summary>
            Gets the new available id to be used as id for a record in COEGenericObjectStorage.
            </summary>
            <returns>The new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.Insert(System.Int32,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates a new record in the COEGenericObjectStorage table.
            </summary>
            <param name="name">The name of the form.</param>
            <param name="description">The description of the form.</param>
            <param name="userId">The user that is making the request.</param>
            <param name="coeGenericObjectStorage">The string version of the object to be stored.</param>
            <param name="formgroup">The form group.</param>
            <param name="isPublic">Is the object public?.</param>
            <returns>The form's id.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.Delete(System.Int32)">
            <summary>
            Deletes a form record containing a coeDataView.
            </summary>
            <param name="dataViewID">A form id.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.DeleteAll">
            <summary>
            Empties the table in the database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.DeleteUserGenericObjects(System.String)">
            <summary>
            Deletes all dataviews for a user.
            </summary>
            <param name="userName">The user name.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.GetAll">
            <summary>
            Gets all stored generic objects.
            </summary>
            <returns>A safedatareader containing the generic objects.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.GetAll(System.String)">
            <summary>
            Gets all form data for a user named <paramref name="userName"/>.
            </summary>
            <param name="userName">The user name.</param>
            <returns>A safedatareader containing all dataviews for a user.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.GetAll(System.String,System.Int32)">
            <summary>
            Gets all form data for a user and a form group.
            </summary>
            <param name="userName">The user name.</param>
            <returns>A safedatareader containing all dataviews for a user.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.GetAll(System.Boolean,System.String)">
            <summary>
            Gets all form data for a user.
            </summary>
            <param name="userName">The user name.</param>
            <returns>A safedatareader containing all dataviews for a user.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.GetAll(System.String,System.Boolean)">
            <summary>
            Gets all form data for a user.
            </summary>
            <param name="userName">The user name.</param>
            <returns>A safedatareader containing all dataviews for a user.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.GetAll(System.String,System.Boolean,System.Int32)">
            <summary>
            Gets all form data for all users except for excluded user.
            </summary>
            <param name="excludedUser">The user to be excluded.</param>
            <returns>A safedatareader containing all dataviews for all users except for excluded user.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.Update(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates a generic object.
            </summary>
            <param name="id">ID of the generic object.</param>
            <param name="coeGenericObject">The updated xml form of the form.</param>
            <param name="name">The updated name of the form.</param>
            <param name="description">The updated description of the form.</param>
            <param name="isPublic">The is public updated property.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.DAL.Get(System.Int32)">
            <summary>
            Gets a form.
            </summary>
            <param name="id">The id for the form.</param>
            <returns>A safedatareader containing the form.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.OracleDataAccessClientDAL.TruncateGenericObjectStorageTable">
            <summary>
            Truncates the generic object storage table.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.OracleDataAccessClientDAL.DeleteCOEGenericObjectStorageTable">
            <summary>
            Deletes the COEGenericObjectStorage table.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.OracleDataAccessClientDAL.CheckCOEGenericObjectStorageTableExists">
            <summary>
            Checks if COEGenericObjectStorage table exists.
            </summary>
            <returns>True if the table exists, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.OracleDataAccessClientDAL.CreateCOEGenericObjectStorageTable">
            <summary>
            Creates an empty COEGenericObjectStorage table.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.OracleDataAccessClientDAL.GetNewID">
            <summary>
            Gets the new available id to be used as id for a record in COEGenericObjectStorage.
            </summary>
            <returns>The new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.OracleDataAccessClientDAL.Insert(System.Int32,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates a new record in the COEGenericObjectStorage table.
            </summary>
            <param name="name">The name of the form.</param>
            <param name="description">The description of the form.</param>
            <param name="userId">The user that is making the request.</param>
            <param name="coeGenericObjectStorage">The string version of the object to be stored.</param>
            <param name="formgroup">The form group.</param>
            <param name="isPublic">Is the object public?.</param>
            <returns>The form's id.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.OracleDataAccessClientDAL.Update(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates a generic object.
            </summary>
            <param name="id">ID of the generic object.</param>
            <param name="coeGenericObject">The updated xml form of the form.</param>
            <param name="name">The updated name of the form.</param>
            <param name="description">The updated description of the form.</param>
            <param name="isPublic">The is public updated property.</param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem">
            <summary>
            Base class for select clause items, like fields or functions to return in a select.
            This class is intended to be inherited and implemented, and not instanced directly (as it's abstract). 
            It represents a field to be added to the select clause, wich needs certain format. 
            Let's suppose we have the following select:
            SELECT SUBSTANCEID, MOLWEIGTH(SUBSTANCEID) FROM SUBSTANCES
            To build this query we would need to instance two SelectClauseItems: one for the substanceid column, 
            and one for the function molweight wich operates on column substanceid.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem.Execute(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Basically execute should call the method GetDependantString after setting the database type.
            if any other functionality is needed the method may be overriden.
            </summary>
            <param name="dataBaseType">The database type. I.E.: Oracle 9i, MSSQL 2005, a member of 
             enumeration DBMSType enum.</param>
            <returns>A string representing this part of the clause select. I.E.: MolWeight(MoleculeID)</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method must be overriden to return a representation of this part of the select clause.
            If different strings are needed for different databases, this should be solved here.
            </summary>
            <returns>A string representing this part of the clause select for the specific 
            database. I.E.: CONVERT(101, '6/8/2006') or (DateTime)"6/8/2006" "</returns>		
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.Truncate">
            <summary>
            Insert non query statement.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery">
            <summary>
            Abstract superclass of non queries (inserts and updates)
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns the non query itself as a string, and the list of parameters.
            </summary>
            <param name="databaseType">The DBMSType.</param>
            <returns>The string of the NON-QUERY statement.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.ToString">
            <summary>
            Overriden.
            Returns the NON-QUERY itself as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.ParameterHolder">
            <summary>
            The character to use in the resulting prepared statement for indicating a parameter position (i.e. the parameter holder).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.UseParametersByName">
            <summary>
            Indicates the way parameters are specified: 
            	if true parameters are specified by name (and an ordinal is appended to te character. ie ':1')
            	otherwise parameters are specified by position (and nothing is appended. ie ':')
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.UseParameters">
            <summary>
            Determines whether produce a prepared statment (with parameter holders and actual parameters in the paramValues List), or a plain query.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.Fields">
            <summary>
            A List of columns to be updated/inserted.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.ParamValues">
            <summary>
            The values to be inserted or updated to. 
            These parameters will be also needed when executing the prepared statement.
            In the case of an insert with a select query, the parameters of the query are copied here too.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.MainTable">
            <summary>
            Main table upon wich is to be executed the non query.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery.DataBaseType">
            <summary>
            Target Database for wich the nonquery will be generated. Posible values = ORACLE, MSSQLSERVER, ACCESS
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.Truncate.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.Truncate.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns the INSERT itself as a string, and the list of parameters.
            </summary>
            <param name="databaseType">The DBMSType.</param>
            <returns>The string of the insert statement.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.Truncate.SelectStatement">
            <summary>
            If the values to be inserted are to be extracted from a subquery, the query is specified in this property.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorVertexEdgeProvider">
            <summary>
            Custom Edge and Vertex Creator, required for integrating QuickGraph Library into SQLGenerator.
            Its only purpose is to create SQLGeneratorVertexs and SQLGeneratorEdges.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDataView">
            COEDataView
            <summary>
            Write something here.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.#ctor(System.Xml.XmlDocument)">
            <summary>
            Dataview Constructor that receives the xml view of the object.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.GetFromXML(System.Xml.XmlDocument)">
            <summary>
            Fills the DataView object from it's xml representation contained in an XmlDocument.
            </summary>
            <param name="xmlDataView">xml representation of this DataView object</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.GetFromXML(System.String)">
            <summary>
            Fills the DataView object from it's xml representation contained in a string.
            </summary>
            <param name="xmlDataView">the string containing the dataview xml representation</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.ToString">
            <summary>
            Converts the current DataView object to it's xml representation and returns it into a string
            </summary>
            <returns>the resulting string containing the xml representation of the DataView</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.GetTableNameById(System.Int32)">
            <summary>
            returns the tableName from a tableID
            </summary>
            <param name="tableID"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.GetDatabaseNameById(System.Int32)">
            <summary>
            returns the tableName from a tableID
            </summary>
            <param name="tableID"></param>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Tables">
            <summary>
            List of tables that are mapped by this dataview.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Relationships">
            <summary>
            Array of relationships between the tables that contains the dataview. They contain the parent and child keys, as well as the fields that relate them.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Basetable">
            <summary>
            Base table Id for the current DataView - Default value = -1
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.BaseTableName">
            <summary>
            basetable name of current dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Database">
            <summary>
            Database that the dataview refers to 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.BaseTablePrimaryKey">
            <summary>
            Base Table primary key Id (just for saving effort of looking it) - NOT mapped to the xml view of this object
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.XmlNs">
            <summary>
            XML Namespace of the dataview. NOT mapped to the xml view of this object.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewID">
            <summary>
            Identifier of the dataview. Default value = -1
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable">
            Table
            <summary>
            Single DataView Table that keeps track of a database table and it's fields.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor receiving the xml portion that represents the DataViewTable.
            </summary>
            <param name="tableNode">the xml representation of the DataViewTable</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.ToString">
            <summary>
            Converts the DataView Table to it's xml representation and returns it into an string object.
            </summary>
            <returns>the string containing the xml representation of the DataView Table</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.Fields">
            <summary>
            List of fields that contains this table
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.Id">
            <summary>
            Table Identifier.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.Name">
            <summary>
            Table Name
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.Alias">
            <summary>
            Table Alias
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.Database">
            <summary>
            Table DataBase owner name
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable.PrimaryKey">
            <summary>
            Table primary key id
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDataView.Field">
            Field
            <summary>
            This class keeps track of a database field.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.Field.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.Field.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor that fills the field object from an xml portion that represents the field.
            </summary>
            <param name="fieldNode">the xml representation of the field</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.Field.ToString">
            <summary>
            Converts the DataView Field to it's xml representation and returns it into an string object.
            </summary>
            <returns>the string containing the xml representation of the DataView Field</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Field.Id">
            <summary>
            The identifier of the field. This id is correlative for all fields in the dataview.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Field.Name">
            <summary>
            Field Name
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Field.DataType">
            <summary>
            Field Type
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Field.LookupFieldId">
            <summary>
            TODO: Write something here
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Field.LookupDisplayFieldId">
            <summary>
            TODO: Write something here
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Field.Alias">
            <summary>
            Alias of a field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Field.IndexType">
            <summary>
            indexType of a field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Field.MimeType">
            <summary>
            mimeType of a field.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship">
            Relationship
            <summary>
            This class keeps track of the relationships between tables, including the parent and child tables as well as the fields that act as keys for joining.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor that fills the object from it's xml representation.
            </summary>
            <param name="relationshipNode">xml snippet containing the xml representation of the object.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship.ToString">
            <summary>
            Converts the DataView Relationship to it's xml representation and returns it into an string object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship.ParentKey">
            <summary>
            The parent table key id, used for linking the tables.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship.ChildKey">
            <summary>
            The child table key id, used for linking the tables.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship.Parent">
            <summary>
            The id of the parent table in the relationship.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship.Child">
            <summary>
            The id of the child table in the relationship
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEDataView.Relationship.JoinType">
            <summary>
            Type of join to be performed when creating the query. Outer or inner.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDataView.AbstractTypes">
            <summary>
            Used to determine how to generate the field strings. Possible values: INTEGER, REAL, TEXT, DATE OR BOOLEAN.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.AbstractTypes.Integer">
            <summary>
            An integer field type. This can be an integer, a shor or another integer database types.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.AbstractTypes.Real">
            <summary>
            An real field type. This can be a float, a double or another real database types.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.AbstractTypes.Text">
            <summary>
            A text field type. This can be a text, a varchar, a char or other Text database types.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.AbstractTypes.Date">
            <summary>
            A date field type. This can be a DateTime, a Date or other Date database types.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.AbstractTypes.Boolean">
            <summary>
            A boolean field type. This can be a bit or other boolean database type.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDataView.JoinTypes">
            <summary>
            Indicates a join blend. Possible values: OUTER INNER
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.JoinTypes.OUTER">
            <summary>
            Specifies the join to be created is an outer join
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.JoinTypes.INNER">
            <summary>
            Specifies the join to be created is an inner join
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDataView.IndexTypes">
            <summary>
            Indicates the type of index on a field. Possible values: CS_CARTRIDGE, FULL_TEXT
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.IndexTypes.NONE">
            <summary>
            Specifies no index
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.IndexTypes.UNKNOWN">
            <summary>
            UNKNOWN
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.IndexTypes.CS_CARTRIDGE">
            <summary>
            NO_INDEX
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.IndexTypes.FULL_TEXT">
            <summary>
            Specifies the join to be created is an inner join
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes">
            <summary>
            Indicates a join blend. Possible values: OUTER INNER
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.NONE">
            <summary>
            Specifies no mimetyp;e
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.UNKNOWN">
            <summary>
            Specifies UNKNOWN mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.IMAGE_JPEG">
            <summary>
            Specifies IMAGE_JPEG mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.IMAGE_GIF">
            <summary>
            Specifies IMAGE_GIF mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.IMAGE_PNG">
            <summary>
            Specifies IMAGE_PNG mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.IMAGE_X_WMF">
            <summary>
            Specifies IMAGE_X_WMF mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.CHEMICAL_X_MDLMOLFILE">
            <summary>
            Specifies IMAGE/JPEG mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.CHEMICAL_X_CDX">
            <summary>
            Specifies CHEMICAL_X_CDX mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.CHEMICAL_X_SMILES">
            <summary>
            Specifies CHEMICAL_X_SMILES mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.TEXT_XML">
            <summary>
            Specifies TEXT_XML mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.TEXT_HTML">
            <summary>
            Specifies TEXT_HTML mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.TEXT_PLAIN">
            <summary>
            Specifies IMAGE/JPEG mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.TEXT_RAW">
            <summary>
            Specifies TEXT_RAW mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.APPLICATION_MS_EXCEL">
            <summary>
            Specifies APPLICATION_MS_EXCEL mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.APPLICATION_MS_MSWORD">
            <summary>
            Specifies IMAGE/JPEG mimetype
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes.APPLICATION_PDF">
            <summary>
            Specifies APPLICATION_PDF mimetype
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Services.Configuration.ICOEConfigurationManager">
            <summary>
            Public interface that needs to be implemented for each Configuration Manager.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Services.Configuration.ICOEConfigurationManager.GetSection(CambridgeSoft.COE.Framework.Common.SecurityInfo,System.String,System.String)">
            <summary>
            Retrieves a ConfigurationSection from the proper configuration location (text file or database).
            </summary>
            <param name="applicationName">The name of the application trying to retrieve configuration</param>
            <param name="sectionName">The section to be returned</param>
            <returns>returns a configuration management class that extends ConfiguraitonSection</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Services.Configuration.ICOEConfigurationManager.GetSectionXml(CambridgeSoft.COE.Framework.Common.SecurityInfo,System.String,System.String)">
            <summary>
            Retrieves the xml representation of a configuration section from the proper configuration location (text file or database)
            </summary>
            <param name="applicationName">The name of the application trying to retrieve configuration</param>
            <param name="sectionName">The name of the section to be returned</param>
            <returns>The xml representation of the configuration section</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Types.Exceptions.InvalidCompoundIDType">
            <summary>
            Exception raised when a compound id is not valid
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.TableEditor">
            <summary>
            This class defines the configuration data for the TableEditor for each application
            properties can be added as needed. Each propery will be added to the add element in the TableEditor parent element
            <code lang="Xml">
            &lt;application name="SAMPLE"&gt;   
                &lt;TableEditor&gt;
                    &lt;add name="Project" PrimaryKeyField="ID" FieldToShow="Name" &gt;
                &lt;/TableEditor&gt;
            &lt;/application&gt;
            </code>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.TableEditor.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.TableEditor"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.TableEditor.Name">
            <summary>
            Name of the Table used by application
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.TableEditor.PrimaryKey">
            <summary>
            Primary key of the Table
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.TableEditor.FieldToShow">
            <summary>
            Field to be shown in combobox
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.TableEditor.TableEditorData">
            <summary>
            Gets the collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.TableEditor.TableEditorData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.TableEditor.TableEditorData"/> objects.
            </value>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ConfigUtils">
            <summary>
            Deprecated.
            </summary>
            <remarks>Deprecated.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseToDate" -->
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseSQLFunction" -->
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.ISelectClauseParser">
            <summary>
            Interface that is needed to implement when adding select clauses. Its responsibility is to 
            get an instance of a subclass of SelectClauseItem.
            Usually this interface is implemented by the same class that inherits SelectClauseItem.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.ISelectClauseParser.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Gets an instance of a provided subclass of SelectClauseItem.
            </summary>
            <param name="resultsXmlNode">The node of the searchResults.xml that the select clause represents</param>
            <param name="dvnLookup">This interface provides methods to lookup the names of fields and tables
            in the data view schema.</param>
            <returns>The SelectClauseItem</returns>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseSQLFunction.parameters">
            <summary>
            The Select Clauses to be used by the named function.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseSQLFunction.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseSQLFunction.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns the string representation of the Concatenation, to be inserted into a select clause.
            </summary>
            <param name="dataBaseType">The target database for wich the concatenation will be generated</param>
            <returns>a string containing the concatenation</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseSQLFunction.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a new Instance based upon a xml represntation of the clause. 
            </summary>
            <param name="resultsXmlNode">The xml snippet containing the xml representation of the clause</param>
            <param name="dvnLookup">DataView Naming Lookup object used for translating identifiers to objects</param>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseSQLFunction.Parameters">
            <summary>
            The Select Clauses to be parameters for the named function.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseToDate.dataField">
            <summary>
            Name of the DataBase Field on which the TOData function is to be applied.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseToDate.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseToDate.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method calls the selectclauseaggretate function getDependString to do the actual job. 
            First you prepare the parameters and add them to the base.Parameters collection
            then you call base.GetDependentString to do the jog
            The return will be:
            In this case returns the to date function applied to the specified field.
            TO_DATE(FieldName, dataMask)
            </summary>
            <param name="dataBaseType">The underlying Database.</param>
            <returns>Returns a string with the To_Date  function, to be added to the SELECT clause</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseToDate.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a new Instance based upon a xml represntation of the clause. 
            </summary>
            <param name="resultsXmlNode">The xml snippet containing the xml representation of the clause</param>
            <param name="dvnLookup">DataView Naming Lookup object used for translating identifiers to objects</param>
            <returns>a SelectClauseLowerCase item</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseToDate.DataField">
            <summary>
            Name of the DataBase Field to be included in the SELECT clause.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg" -->
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAggregateFunction" -->
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAggregateFunction.parameters">
            <summary>
            The Select Clauses to be used by the named function.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAggregateFunction.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAggregateFunction.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns the string representation of the Concatenation, to be inserted into a select clause.
            </summary>
            <param name="dataBaseType">The target database for wich the concatenation will be generated</param>
            <returns>a string containing the concatenation</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAggregateFunction.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a new Instance based upon a xml represntation of the clause. 
            </summary>
            <param name="resultsXmlNode">The xml snippet containing the xml representation of the clause</param>
            <param name="dvnLookup">DataView Naming Lookup object used for translating identifiers to objects</param>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAggregateFunction.Parameters">
            <summary>
            The Select Clauses to be parameters for the named function.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg.dataField">
            <summary>
            Name of the DataBase Field on which the TOData function is to be applied.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method calls the selectclauseaggretate function getDependString to do the actual job. 
            First you prepare the parameters and add them to the base.Parameters collection
            then you call base.GetDependentString to do the jog
            The return will be:
            In this case returns the SQL AVG aggregate function applied to the specified field.
            AVG(FieldName)
            </summary>
            <param name="dataBaseType">The underlying Database.</param>
            <returns>Returns a string with the AVG aggregate function, to be added to the SELECT clause</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a new Instance based upon a xml represntation of the clause. 
            </summary>
            <param name="resultsXmlNode">The xml snippet containing the xml representation of the clause</param>
            <param name="dvnLookup">DataView Naming Lookup object used for translating identifiers to objects</param>
            <returns>a SelectClauseAvg item</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAvg.DataField">
            <summary>
            Name of the DataBase Field to be included in the SELECT clause.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Services.Configuration.IConfigurationManager.GetSection(System.String,System.String)">
            <summary>
            Retrieves a ConfigurationSection from the proper configuration location (text file or database).
            </summary>
            <param name="applicationName">The name of the application trying to retrieve configuration</param>
            <param name="sectionName">The section to be returned</param>
            <returns>returns a configuration management class that extends ConfiguraitonSection</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Services.Configuration.IConfigurationManager.GetSectionXml(System.String,System.String)">
            <summary>
            Retrieves the xml representation of a configuration section from the proper configuration location (text file or database)
            </summary>
            <param name="applicationName">The name of the application trying to retrieve configuration</param>
            <param name="sectionName">The name of the section to be returned</param>
            <returns>The xml representation of the configuration section</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager">
            <summary>
            <para>
            This class implements an infragistics' UltraWebGrid that gets the doc manager (v11) documents associated to a registration record 
            and may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COEDocManager class accepts every UltraWebGrid property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What value would be the default reg number?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;label&gt;Doc Manager associated documents:&lt;/label&gt;
                &lt;bindingExpression&gt;RegNumber.RegNum&lt;/bindingExpression&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
                  &lt;CSSLabelClass&gt;COELabelTitle&lt;/CSSLabelClass&gt;
                  &lt;CSSLinkClass&gt;COELabelTitle&lt;/CSSLinkClass&gt;
                  &lt;Protocol&gt;http&lt;/Protocol&gt;
                  &lt;TargetURL&gt;%2Fdocmanager%2Fdocmanager%2Fexternallinks%2FgetDocumentsNoGUI.asp&lt;/TargetURL&gt;
                  &lt;AddDocsURL&gt;%2Fdocmanager%2Fdefault.asp%3Fdataaction%3Ddb%26formgroup%3Dbase_form_group%26dbname%3Ddocmanager%26extAppName%3DChem_Reg%26LinkType%3DCHEMREGREGNUMBER%26linkfieldname%3DROOT_NUMBER%26showselect%3Dtrue%26extlinkid%3D&lt;/AddDocsURL&gt;
                  &lt;ReturnType&gt;xml&lt;/ReturnType&gt;
                  &lt;LinkType&gt;CHEMREGREGNUMBER&lt;/LinkType&gt;
                  &lt;LinkTarget&gt;_blank&lt;/LinkTarget&gt;
                  &lt;DeleteItemText&gt;Delete&lt;/DeleteItemText&gt;
                  &lt;ShowLogo&gt;false&lt;/ShowLogo&gt;
                  &lt;EmptyGridMessage&gt;No documents links currently exists.&lt;/EmptyGridMessage&gt;
                  &lt;ShowSubmitDate&gt;true&lt;/ShowSubmitDate&gt;
                  &lt;Columns&gt;
                  &lt;Column key='Name' width='80px'/&gt;
                  &lt;Column key='Link' width='0px'/&gt;
                  &lt;Column key='DocName' width='250px'/&gt;
                  &lt;Column key='Owner' width='80px'/&gt;
                  &lt;Column key='Date' type='Button' width='200px'/&gt;
                  &lt;Column key='Delete' width='100px'/&gt;
                  &lt;/Columns&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;top&gt;325px&lt;/top&gt;
                  &lt;left&gt;5px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            <b>The xml examples are based on the "Classic" implementation of DocManager, because version 11 of DocManager is still unavailable.</b>
            </para>
            <para>
            In this implementation "Default Value", and PutData Methods reffer to the registry number, and GetData reffers to the documents
            associated to that registration number.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.GetData">
            <summary>
            Gets the documents associated to the previously set registry number.
            </summary>
            <returns>A DataTable with the associated links to the documents found.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.PutData(System.Object)">
            <summary>
            Sets the registry number that we are looking documents for.
            </summary>
            <param name="data">A string with the registry number</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.SetDataTableColumnsText(System.Xml.XmlDocument)">
            <summary>
            Method to read from the url response and set the columns title text
            </summary>
            <param name="xmlDoc">The xml source of information</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.OnDataBinding(System.EventArgs)">
            <summary>
            Here we try to get the info from a source Url.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.SetURL">
            <summary>
            Sets the url to the docmanager application.
            </summary>
            <returns>The url</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.PopulateDataTableFromXML(System.Xml.XmlDocument)">
            <summary>
            Fill the Dt with the information of the XMLdoc
            </summary>
            <param name="currentXmlDoc">Source of info</param>
            <remarks>I didn't (Ulises) find a better way to do this, but I think it must be possible to do this with just one call, like ReadXml...</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.GetResponseFromURL(System.String)">
            <summary>
            Request a URL for an XML response object
            </summary>
            <param name="url">The server address</param>
            <returns>An xmlDoc with the response</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COELabelTitle&lt;/CSSLabelClass&gt;
              &lt;CSSLinkClass&gt;COELabelTitle&lt;/CSSLinkClass&gt;
              &lt;Protocol&gt;http&lt;/Protocol&gt;
              &lt;TargetURL&gt;%2Fdocmanager%2Fdocmanager%2Fexternallinks%2FgetDocumentsNoGUI.asp&lt;/TargetURL&gt;
              &lt;AddDocsURL&gt;%2Fdocmanager%2Fdefault.asp%3Fdataaction%3Ddb%26formgroup%3Dbase_form_group%26dbname%3Ddocmanager%26extAppName%3DChem_Reg%26LinkType%3DCHEMREGREGNUMBER%26linkfieldname%3DROOT_NUMBER%26showselect%3Dtrue%26extlinkid%3D&lt;/AddDocsURL&gt;
              &lt;ReturnType&gt;xml&lt;/ReturnType&gt;
              &lt;LinkType&gt;CHEMREGREGNUMBER&lt;/LinkType&gt;
              &lt;LinkTarget&gt;_blank&lt;/LinkTarget&gt;
              &lt;DeleteItemText&gt;Delete&lt;/DeleteItemText&gt;
              &lt;ShowLogo&gt;false&lt;/ShowLogo&gt;
              &lt;EmptyGridMessage&gt;No documents links currently exists.&lt;/EmptyGridMessage&gt;
              &lt;ShowSubmitDate&gt;true&lt;/ShowSubmitDate&gt;
              &lt;Columns&gt;
              &lt;Column key='Name' width='80px'/&gt;
              &lt;Column key='Link' width='0px'/&gt;
              &lt;Column key='DocName' width='250px'/&gt;
              &lt;Column key='Owner' width='80px'/&gt;
              &lt;Column key='Date' type='Button' width='200px'/&gt;
              &lt;Column key='Delete' width='100px'/&gt;
              &lt;/Columns&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.LinkType">
            <summary>
            The LinkType, currently Chem registry number is the only allowed.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.ReturnType">
            <summary>
            The return type, that may be xml or string.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.ShowLogo">
            <summary>
            Would the logo be shown?
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.ShowSubmitDate">
            <summary>
            Would the submission date be shown?
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.DefaultValue">
            <summary>
            Gets or sets the default registry number.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.ReturnTypes">
            <summary>
            Enumeration for return types. Allowed values are:
            <list type="bullet">
              <item>Xml</item>
              <item>String</item>
            </list>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManager.LinkTypes">
            <summary>
            Ling types enumeration.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor">
            <summary>
            This processor is in charge of handling a Formula type queries. This class follows the template pattern along with search service GetHitList Method
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.Processors.SearchProcessor">
            <summary>
            Abstract super class for the search processors.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.COESearchService.Processors.SearchProcessor.chemImpl">
            <summary>
            Indicates the chemical subsystem that resolves chemical queries. Possible values: CSCartridge, MolServer
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.SearchProcessor.PreProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template method Preprocess - performs the required setup steps for executing this processor.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.SearchProcessor.Process">
            <summary>
            Template Method Process - returns the modified xml to be inserted in searchCriteria.xml
            </summary>
            <returns>a new searchCriteriaItem that is used to rebuild the searchCriteria xml</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.SearchProcessor.PostProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template Method PostProcess - Performs the required steps for cleaning up the command execution.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor that fills the object with the SearchCriteriaItem received in xml form
            </summary>
            <param name="xmlNode">An xml snippet that represents the SearchCriteriaItem to be handled by this processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor.#ctor(CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)">
            <summary>
            Constructor that fills the object with the SearchCriteriaItem received
            </summary>
            <param name="item">The searchCriteriaItem that is to be handled by this processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor.PreProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template method Preprocess - performs the required setup steps for executing this processor.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor.Process">
            <summary>
            Template Method Process - returns the modified xml to be inserted in searchCriteria.xml
            </summary>
            <returns>a new searchCriteriaItem that is used to rebuild the searchCriteria xml</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.FormulaProcessor.PostProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template Method PostProcess - Performs the required steps for cleaning up the command execution.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder">
            <summary>
            This class is a holder for a ref cursor and connection to an oracle database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder.#ctor(Oracle.DataAccess.Client.OracleConnection,Oracle.DataAccess.Types.OracleRefCursor,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the holder with the desired parameters.
            </summary>
            <param name="connection">The oracle connection.</param>
            <param name="refCursor">Its Ref Cursor.</param>
            <param name="key">Its unique identifier</param>
            <param name="timerPolicy">Determines whether to use a timer to release its resources or not.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder.Dispose">
            <summary>
            Releases its resources.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder.Connection">
            <summary>
            Its oracle database connection.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder.RefCursor">
            <summary>
            Its ref cursor.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder.Key">
            <summary>
            Its unique identifier.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder.LastRecord">
            <summary>
            The last accessed record.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder.TimerPolicy">
            <summary>
            Determines whether a timer policy will be applied to auto release its resources or not.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEHitListService.SystemDataOledbClientDAL">
            <summary>
            
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEHitListService.DAL">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.DeleteCOESavedHitListTables">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.CheckCOESavedHitListTablesExist">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.CheckCOETempHitListTablesExist">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.UnionHitLists(System.Int32,CambridgeSoft.COE.Framework.HitListType,System.Int32,CambridgeSoft.COE.Framework.HitListType)">
            <summary>
            Create the union of two hitlist
            </summary>
            <param name="hitListID1">the first id</param>
            <param name="hitListID1Type">the first table type</param>
            <param name="hitListID2">the second id</param>
            <param name="hitListID2Type">the second table type</param>
            <returns>the new id for the newly created hitlist</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.SubtractHitLists(System.Int32,CambridgeSoft.COE.Framework.HitListType,System.Int32,CambridgeSoft.COE.Framework.HitListType)">
            <summary>
            Create the subtraction of two hitlist
            </summary>
            <param name="hitListID1">the first id</param>
            <param name="hitListID1Type">the first table type</param>
            <param name="hitListID2">the second id</param>
            <param name="hitListID2Type">the second table type</param>
            <returns>the new id for the newly created hitlist</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.IntersectHitLists(System.Int32,CambridgeSoft.COE.Framework.HitListType,System.Int32,CambridgeSoft.COE.Framework.HitListType)">
            <summary>
            Create the intersection of two hitlist
            </summary>
            <param name="hitListID1">the first id</param>
            <param name="hitListID1Type">the first table type</param>
            <param name="hitListID2">the second id</param>
            <param name="hitListID2Type">the second table type</param>
            <returns>the new id for the newly created hitlist</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.GetNewTempHitlistID">
            <summary>
            this method is for generating the next value of the temp hit list
            </summary>
            <param name="tempHitListCreateRequestInfo">to take all the required info</param>
            <returns>the new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.CreateNewTempHitList(System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            this function will create a new entry in temp hitlist table. it first reterieves the value of the next id to be inserted 
            by calling the getnewtemphitlistid.
            it inserts in two table the values simultaneously. first in csdohitlistid table with all the info being passed by temphitlistcreaterequestinfo
            and other csdohitlist where it stores the respective hitlistid with the ids of the hitlist returned. this entry will depend on the number_hits returned after a search.
            this functionis called by default. every serach that is made will first go in this table thereafter it is either usermarked or saved in user table.
            </summary>
            <param name="tempHitListCreateRequestInfo">it will take all the info required for csdohitlistid table like name,description, is_publice, number_hits, datecreated</param>
            <returns>the new id generated.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.CreateNewSavedHitList(System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            this function will create a new entry in temp hitlist table. it first reterieves the value of the next id to be inserted 
            by calling the getnewtemphitlistid.
            it inserts in two table the values simultaneously. first in csdohitlistid table with all the info being passed by temphitlistcreaterequestinfo
            and other csdohitlist where it stores the respective hitlistid with the ids of the hitlist returned. this entry will depend on the number_hits returned after a search.
            this functionis called by default. every serach that is made will first go in this table thereafter it is either usermarked or saved in user table.
            </summary>
            <param name="tempHitListCreateRequestInfo">it will take all the info required for csdohitlistid table like name,description, is_publice, number_hits, datecreated</param>
            <returns>the new id generated.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.GetSavedHitListID">
            <summary>
            this will generate the new id from the userhitlist table to store the new entry.
            </summary>
            <param name="tempID">the id from csdohitlistd table which will be saved in userhitlist table or will be usermarked.</param>
            <param name="name">the name of the list tbe saved or usermarked</param>
            <param name="description">the description of the list</param>
            <returns>the new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.GetMarkedHitListID(System.String,System.String)">
            <summary>
            this will generate the new id from the userhitlist table to store the new entry.
            </summary>
            <param name="tempID">the id from csdohitlistd table which will be saved in userhitlist table or will be usermarked.</param>
            <param name="name">the name of the list tbe saved or usermarked</param>
            <param name="description">the description of the list</param>
            <returns>the new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.CreateNewSavedHitListFromTemp(System.Int32,System.String,System.String,System.Int32,System.Boolean)">
             <summary>
             this will create the user hit list. the id which os selected from the temphitlist table. it wil ask for name of the list and the description of the list 
             and rest others values are reterieved from temp hit list table depending on the id selected.
             it will first call getnewuserhitlistid so as to get the next value of the id.
             it will store the entries in two table simultaneouly...userhitlistid and userhitlist. 
             in main table only the info is there ,and in the child table there are multiple entries i.e. storing the ids of the number_hits, along with the newid generated.
            it will be called when a user wants to save the list. 
             </summary>
             <param name="tempID">the tempid from csdohitlistid table which is being saved in user table</param>
             <param name="name">name of the list</param>
             <param name="description">description of the list</param>
             <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.UpdateSavedHitList(System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            update a user hit list. it will uodate info like name, description, is_public for the id which is bieng passed
            it accepts a row of the dataset with all the values.
            </summary>
            <param name="hitListRow">row of the dataset to pass all the values.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CambridgeSoft.COE.Framework.COEHitListService.DAL.UpdateTempHitList(System.Int32,System.String,System.String,System.Boolean,System.Int32)" -->
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.DeleteHitList(CambridgeSoft.COE.Framework.HitListType,System.Int32)">
            <summary>
            delete a hitlist
            </summary>
            <param name="hitListType"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.DeleteAllHitLists(System.String)">
             <summary>
             delete all hitlists of a certain type
             </summary>
             <param name="hitListType"></param>
            this should be overridden for oracle to truncate!!!  
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.DeleteHitLists(System.String,System.String)">
            <summary>
            delete all hitlists of a certain type for a single user
            </summary>
            <param name="hitListType"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.AddAllMarkedHit(System.String,System.Int32,System.Int32)">
            <summary>
            this function will add all hits to the usermarked records. it will accept a tempid from the temporarry table and will pick its corresponding details from both of the temp (mailn 
            and child) table and will save the list in user table with the name as USERMARKED.
            it will save in two steps...first the entry goes in main user table and the corresponding multiple entries goes in child user table.
            it will first call th function to reterieve the maximum id from the user table and then wil save the values in both tables.
            </summary>
            <param name="userID">the current user that is logged in</param>
            <param name="formGroupID">the group of the table</param>
            <param name="tempID">the tempid from temp table which is made as usermarked.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.AddMarkedHitList(System.String,System.String,System.Int32[],System.Int32)">
            <summary>
            this function will mark one oe many hitlists in the usermarked list. it will take an id and its corresponding ids of the histlists
            in the form of array which are to be marked
            it will first call the function to reterive the maximum id from the user table and then will store the values in user tables both...child and main table.
            it will store the list by the name of USERMARKED.
            </summary>
            <param name="userId">the current user that is logged in</param>
            <param name="formgroupId">the group of the table</param>
            <param name="hitsToBeMarked">the array of the hitlists to be marked ny the user</param>
            <param name="tempId">the id from temp table whose hitlists are to be marked.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.UnMarkAllMarked(System.String,System.Int32)">
            <summary>
            to unmark all the marked records. all the USERMARKED records are unmarked.in the case the number of hits of all the USERMARKED records will turn zero from the main user table
            and will delete all the hitlistids which are usermarked from the user child table.
             
            </summary>
            <param name="userId">the current user that is logged in.</param>
            <param name="formgroupId">the group of the table.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.UnMarkHitList(System.String,System.Int32[],System.Int32)">
            <summary>
            to unmark one or many USERMARKED records from the userhitlist. it will decrease the number_hits by the number of the hits that have been unmarked.
            and will delete the same entries from user child table.
            it will accept an array of hitlistids to be unmarked.
            and a id for which hitlists are unmarked.
            </summary>
            <param name="userId">the current user logged in</param>
            <param name="hitsToBeUnmarked">array of hitlist to be unmarked</param>
            <param name="hitlistId">the id for which we are unmarking the records.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.DeleteMarkedHit(System.String,System.Int32[],System.Int32)">
            <summary>
            to delete one or many usermarked hitlists for the given hitlistid. it will delete those ids from the user child table and will update the number_hits 
            in the main user table by subtracting from the number hits , the number that has been deleted.
            it will accept an array of ids to be deleted.
            </summary>
            <param name="userID">the current user logged in</param>
            <param name="markedIDArray">the array of the ids to be deleted</param>
            <param name="hitlistID">the id for which it is deleted.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.DAL.DeleteAllMarkedHits(System.String,System.Int32)">
            <summary>
            delete all the usermarked hit list. it will delete all the records from the user child table and then will delete all the USERMARKED records
            from user main table.
            </summary>
            <param name="userID">the current user logged in</param>
            <param name="formgroupId">the group of the table</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.SystemDataOledbClientDAL.GetNewTempHitlistID">
            <summary>
            
            </summary>
            <param name="tempHitListCreateRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBinaryOperation">
            <summary>
            A representation of a binary operation to be applied in the where clause of a select.
                I.E.: An equal operation is a binary operation: ... Field.name = Field.value
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem">
            <summary>
            This class is intended to be inherited and implemented. This one represents an operation or keyword
            of a SQL select statement.
            Let's suppose we have the following select:
            SELECT EMPLOYEEID FROM EMPLOYEES WHERE FIRSTNAME='DAVID' AND LASTNAME LIKE ('GOSAL')
            Here we shoud have 2 Where clause items 1 for the equal and other for the like.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem.Execute(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Basically execute should call the method GetDependantString after setting the database type.
            if any other functionality is needed the method may be overriden.
            </summary>
            <param name="databaseType">The database type. I.E.: Oracle 9i, MSSQL 2005, ... All of 
            them should be in an enumeration.</param>
            <param name="values">The list of values to add in it its values.</param>
            <returns>A string representing this part of the clause select. I.E.: FIRSTNAME='david'</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            This method must be overriden to return a representation of this part of the select clause.
            If different strings are needed for different databases, here should be implemented.
            </summary>
            <param name="databaseType">The database to generate code to.</param>
            <param name="values">The list of values to add in it its values.</param>
            <returns>A string representing this part of the clause select for the specific 
            database. I.E.: FIRSTNAME='david' or FIRSTNAME="david"</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem.ParameterHolder">
            <summary>
            The character to use in the resulting prepared statement for indicating a parameter position (i.e. the parameter holder).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem.UseParametersByName">
            <summary>
            Indicates the way parameters are specified: 
            	if true parameters are specified by name (and an ordinal is appended to te character)
            	otherwise parameters are specified by position (and nothing is appended)
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBinaryOperation.dataField">
            <summary>
            The database field name and its value. We recommend setting the tablename to use
            fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBinaryOperation.val">
            <summary>
            The value to compare to.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBinaryOperation.DataField">
            <summary>
            The database field name and its value. We recommend setting the tablename to use
            fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBinaryOperation.Val">
            <summary>
            The value to compare to.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight">
            <summary>
            <para>
            This class allows the user to perform a CsCartridge.MolWeight SQL Statement. Which is implemented only in Oracle by now.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The SelectClauseMolWeight class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field DataField:</b> The field where is located the molecule structure.</item>
            <item><b>string CartridgeSchema:</b> The name of the cartridge schema.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            This class supports only Oracle cartridge implementation.
            SelectClauses are implemented in two differentiable parts: The SelectClause itself, in charge of generating the string and a Parser whose responsibility is to extract the information needed for building the clause from an xmlnode.
            All SelectClause are mapped in mappings.xml, wich indicates given a SelectClause name, wich class to use for parsing and obtaining the generated string. There is a set of predefined SelectClauseItems, but the user can expand with his own. By implementing SelectClauseItem and ISelectClauseParser and adding the corresponding entry in this file.
            Along with SelectClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            SelectClauseMolWeight molweight = new SelectClauseMolWeight();
            molweight.DataField.FieldId = 20;
            molweight.DataField.FieldName = "base64_cdx";
            molweight.DataField.FieldType = System.Data.SqlDbType.VarBinary;
            molweight.DataField.Table.TableName = "inv_compounds";
            molweight.CartridgeSchema = "CSCARTRIDGE";
            query.AddSelectItem(molweight);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;CsCartridgeMolWeight fieldId="20" CartridgeSchema="CSCARTRIDGE" /&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following select clause statement:
            </para>
            <para>
            CSCARTRIDGE.MolWeight(inv_compounds.base64_cdx, '')
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method does the actual job.
            In this case returns the cscartridge formula sintaxys.
            </summary>
            <param name="dataBaseType">The database type.</param>
            <returns>A string containing the select part corresponding to this clause (i.e. the CsCartridge.Molweight(fieldName))</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Implementation of ISelectClauseParser. Returns an Instance of SelectClauseMolWeight according to the desired xml snippet.
            </summary>
            <param name="fieldNode">The CsCartridge MolWeight node of the search results xml definition.</param>
            <param name="dvnLookup">The INamesLookup interface from wich the parser can obtain the names corresponding to ids in dataview.xml</param>
            <returns>An instance of SelectClauseMolWeight.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight.Alias">
            <summary>
            The field that contains the alias for the molweight field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight.DataField">
            <summary>
            The field that contains the structure in the database.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMolWeight.CartridgeSchema">
            <summary>
            The cartridge name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause">
            <summary>
            A wrapper for a select clause. Expose methods to modify the select clause.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.items">
            <summary>
            A list of SelectClauseItems.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.defaultConcatenationLiteral">
            <summary>
            By default all where clauses are separated by commas...
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.#ctor">
            <summary>
            Initializes the WhereClause to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.AddItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)">
            <summary>
            Adds an item to the end of the select clause.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.RemoveItem(System.Int32)">
            <summary>
            Removes an item of the select clause.
            </summary>
            <param name="position">The item position where is located the item to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.RemoveItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)">
            <summary>
            Removes an item of the select clause.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.ToString">
            <summary>
            Returns a string with all the items concatenated for the database Oracle 10g
            </summary>
            <returns>The select clause as string.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.ToString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns a string with all the items concatenated for the specified database.
            </summary>
            <param name="dataBaseType">the underlying database.</param>
            <returns>The select clause as string.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause.Items">
            <summary>
            Gets or sets the list of Select Clause Items.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup">
            <summary>
            Iterface that expose methods for lookups.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup.GetFieldName(System.Int32)">
            <summary>
            Gets the field name from its id.
            </summary>
            <param name="fieldIndex">The id in the xml.</param>
            <returns>The name as string.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup.GetFieldType(System.Int32)">
            <summary>
            Gets the field type from its id.
            </summary>
            <param name="fieldIndex">The id in the xml.</param>
            <returns>The SqlDbType.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup.GetParentTable(System.Int32)">
            <summary>
            Gets the Parent Table of a field from the field id.
            </summary>
            <param name="fieldIndex">The field id in the xml.</param>
            <returns>The Table instance.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup.GetTable(System.Int32)">
            <summary>
            Gets a table from its id.
            </summary>
            <param name="tableIndex">The table id in the xml.</param>
            <returns>The Table instance.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup.GetColumn(System.Int32)">
            <summary>
            Gets an IColumn from its id. This can be a lookup or a regular field.
            </summary>
            <param name="fieldIndex">The field id in the xml.</param>
            <returns>The IColumn instance.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup.GetColumnAlias(System.Int32)">
            <summary>
            Gets the alias of a column from its id.
            </summary>
            <param name="fieldId">The field id in  the xml.</param>
            <returns>The alias.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.ISource">
            <summary>
            Represents a container of columns.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.ISource.GetAlias">
            <summary>
            Gets the alias of the source.
            </summary>
            <returns>The alias or string.Empty.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DBMSType">
            <summary>
            Enum for supported databases. Allowed values are:
            <list type="bullet">
              <item>Oracle</item>
              <item>SQL Server</item>
              <item>Ms Access</item>
            </list>
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.DBMSType.ORACLE">
            <summary>represents an Oracle database</summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.DBMSType.SQLSERVER">
            <summary>represents an SQLService database</summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.DBMSType.MSACCESS">
            <summary>represents an Microsoft Access database</summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Types.Exceptions.NoRecordToSaveException">
            <summary>
            Exception raised when there are no records to be saved.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.NamespaceDoc">
            <summary>
            <para>In this namespaces there are several classes intended for Form Generation. The following controls are already implemented:
            </para>
            <list type="bullet">
                <item>COECheckBox: A checkbox for the FormGenerator.</item>
                <item>COECheckBoxReadOnly: A read only checkbox for the FormGenerator.</item>
                <item>COEChemDraw: A ChemDrawEmbed for the FormGenerator.</item>
                <item>COEChemDrawEmbedReadOnly: A read only ChemDrawEmbed for the FormGenerator.</item>
                <item>COEDatePicker: An infragistics' DatePicker for the FormGenerator.</item>
                <item>COEDatePickerReadOnly: An infragistics' read only DatePicker for the FormGenerator.</item>
                <item>COEDocManager: A docmanager for the FormGenerator.</item>
                <item>COEDocManagerClassic: A docmanager classic for the FormGenerator.</item>
                <item>COEDropDownList: A dropdownlist for the FormGenerator</item>
                <item>COEFormGenerator: A container that is capable of dinamically rendering several <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEGenerableControl"/> based on
                an xml definition.</item>
                <item>COEFormGeneratorManager: A <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/> holder that allows to manipulate several form generators into a 
                single xml definition.</item>
                <item>COEFormGeneratorRepeater: A <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/> repeater.</item>
                <item>COEGridView: A gridview for the FormGenerator.</item>
                <item>COELabel: A label for the FormGenerator.</item>
                <item>COELinkButton: A linkbutton for the FormGenerator.</item>
                <item>COERadioButton: A radiobutton for the FormGenerator.</item>
                <item>COETexArea: A multiline TextBox for the FormGenerator.</item>
                <item>COETextAreaReadOnly: A read only multiline TextBox for the FormGenerator.</item>
                <item>COETextBox: A TextBox for the FormGenerator.</item>
                <item>COETextBoxReadOnly: A read only TextBox for the FormGenerator.</item>
                <item>COETextEdit: An infragistic's textbox for the FormGenerator.</item>
                <item>COEUrlControl: Unknown.</item>
            </list>
            <para>
            Some interfaces are also provided to allow thid party controls to be plugged into a FormGenerator:
            </para>
            <list type="bullet">
                <item>ICOEContainer: Mark a control as holder of controls and that allows the use of Datasources and pagging.</item>
                <item>ICOECultureable: Mark a control as cultureable, meaning that the control will behave different for each CultureInfo.</item>
                <item>ICOEGenerableControl: This is the main interface and is mandatory to implement, it defines de basic capabilities needed
                to be rendered by a FormGenerator.</item>
                <item>ICOELabelable: Mark the control as labelable.</item>
                <item>ICOERequireable: Defines that the control may be required, and may behave different if it is required.</item>
            </list>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.ChemDraw.NamespaceDoc">
            <summary>
            <para>In this namespaces there are several classes intended for Chemimcal drawing.</para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.NamespaceDoc">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.NamespaceDoc">
            <summary>
            <para>
            Base namespace. It encapsulates all the tasks requied for generating executable SQL queries in the form of prepared statements 
            (that means, the query text on one side and the parameters in the other) whether from xml input or programmatically.
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.NamespaceDoc">
            <summary>
            <para>
            Metadata namespace contains classes DataView, ResultCriteria and SearchCriteria. These classes are responsible for creating a query 
            based upon the corresponding input xmls: DataView.xml, ResultCriterial.xml and SearchCriteria.xml (or the MessagingType that 
            represents them). For this purpose, these classes use the classes contained in the query. 
            The DataView, class besides parsing the input xml, stores the database schema required for this query. It translates ids to names, 
            solves relationships between tables, etc. 
            Both ResultCriteria and SearchCriteria use the following approach for parsing: They iterate through the items of the xml, and extract 
            the xml tag of that portion. This is passed as parameter to a factory that knows wich class to instanciate depending on the type of 
            item and returns it. The resulting item is then added to the query. 
            ResultsCriteria differs in that the user can provide new plug-in based resultsCriteria. For this, the user must supply an assembly 
            containing the item itself and a parser, required for creating the item from xml. Also, this plug-in has to be registered in the file 
            mappings.xml. 
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.NamespaceDoc">
            <summary>
            <para>
            This namespace wraps the functionality of the quickgraph library, needed for resolving tables relationships from the dataview.
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.NamespaceDoc">
            <summary>
            <para>
            This namespace contains the required classes for producing a SQL Select Statement targeted to a given DataBase. Currently supports 
            Oracle, MS-Access and MS-SQL Server. 
            
            This classes only manipulate strings, and don't have any additional "inteligence". 
            
            The Design of this classes follow a Command Pattern: The Main class contains an array of Commands. Each Command implements an 
            "Execute" Method. When the main class is asked to perform its task, ir loops the array calling the execute method of every command 
            that was added to it. 
            
            In this case, the main class is Query, and the "Execute method" is called GetDependantString. In this case, there are two arrays of 
            commands: one for the select clause and other for the where clause. 
            
            When you want to retrieve the sql query string, you call GetDependantString on Query, which in turn calls it on every command it 
            contains. 
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NamespaceDoc">
            <summary>
            <para>
            This namespace contains the required classes for producing a SQL Statement that are not Select (Queries), targeted to a given DataBase. Currently supports 
            Oracle, MS-Access and MS-SQL Server. 
            
            This classes only manipulate strings, and don't have any additional "inteligence". 
            
            The Design of this classes follow a Command Pattern, with the difference that the method to be called is named GetDependantString instead
            of Execute.
            
            Currently there are two NonQueries implemented:
            </para>
            <list type="bullet">
              <item>Insert statement</item>
              <item>Truncate statement</item>
            </list>
            
            <para>
            When you want to retrieve the sql nonquery string, you call GetDependantString on NonQuery, which in turn calls it on every command it 
            contains. 
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.NamespaceDoc">
            <summary>
            <para>
            Select items of a query (Single Field, Literal, MAX(Field), ISNULL(...), etc. Anything that can go in the select part of the statement.
            
            Analog to WhereClauseItems with the exception that the user can supply it's own commands here, as plug-ins located in a separate 
            assembly. 
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.NamespaceDoc">
            <summary>
            <para>
            Where items of a query (Comparisons, IN, ISNULL, etc.). Anything that can go in the where part of the query statement.
            Analog to SelectClauseItems
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.NamespaceDoc">
            <summary>
            <para>
            Numerous utilities needed for making our life easier :). Convertion from db-specific types to abstracts like numeric, text, date, etc.
            Data Manipulation functions like trims of numeric values, chemical normalizations, etc. Special Characters Handling. 
            </para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAnalyticalRowNum" -->
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAnalyticalRowNum.clauses">
            <summary>
            The "order by" clauses to be ordered previous to generate the RowNum.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAnalyticalRowNum.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAnalyticalRowNum.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns the string representation of the Analytical row num, to be inserted into a select clause.
            </summary>
            <param name="dataBaseType">The target database for which the RowNum will be generated</param>
            <returns>A string containing the RowNum</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAnalyticalRowNum.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a new Instance based upon a xml represntation of the clause. 
            </summary>
            <param name="resultsXmlNode">The xml snippet containing the xml representation of the clause</param>
            <param name="dvnLookup">DataView Naming Lookup object used for translating identifiers to objects</param>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseAnalyticalRowNum.Clauses">
            <summary>
            The "order by" clauses to be ordered previous to generate the RowNum.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax" -->
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax.dataField">
            <summary>
            Name of the DataBase Field on which the TOData function is to be applied.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax.fieldName">
            <summary>
            Name of the DataBase Field to be included in the SELECT clause.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax.fieldId">
            <summary>
            Id of the DataBase Field.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method does the actual job.
            In this case just return the name of the field.
            </summary>
            <returns>A string containing the select part corresponding to this field (i.e. the field name)</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a instance of the SelectClauseMax item
            </summary>
            <param name="fieldNode">xml representing the xml node</param>
            <returns>SelectClauseMax item,</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMax.DataField">
            <summary>
            Name of the DataBase Field to be included in the SELECT clause.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox">
            <summary>
            <para>
            This class implements a TextBox control in Singleline mode that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COETextBox class accepts every TextBox property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default text of the textbox?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;label&gt;Optical Rotation&lt;/label&gt;
                &lt;bindingExpression&gt;PropertyList[@Name='OPTICALROTATION' | Value]&lt;/bindingExpression&gt;
                &lt;validationRuleList&gt;
                  &lt;validationRule validationRuleName="textLength" errorMessage="The length must be between 0 and 200"&gt;
                    &lt;params&gt;
                      &lt;param name="min" value="0"/&gt;
                      &lt;param name="max" value="200"/&gt;
                    &lt;/params&gt;
                  &lt;/validationRule&gt;
                &lt;/validationRuleList&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COETextBoxView&lt;/CSSClass&gt;
                  &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
                  &lt;ID&gt;OpticalRotationTextBox&lt;/ID&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;top&gt;220px&lt;/top&gt;
                  &lt;left&gt;15px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Text property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox.GetData">
            <summary>
            <para>Gets the Text of the control.</para>
            </summary>
            <returns>A string with the control's text.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox.PutData(System.Object)">
            <summary>
            Sets the control's text.
            </summary>
            <param name="data">A string with the desired text of the control.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COETextBoxView&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
              &lt;ID&gt;OpticalRotationTextBox&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox.DefaultValue">
            <summary>
            Allows to set the default text.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea">
            <summary>
            <para>
            This class implements a TextBox control in Multiline mode that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COETextArea class accepts every TextBox property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default text of the text area?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;label&gt;Comments&lt;/label&gt;
                &lt;bindingExpression&gt;PropertyList[@Name='COMMENTS' | Value]&lt;/bindingExpression&gt;
                &lt;validationRuleList&gt;
                  &lt;validationRule validationRuleName="textLength" errorMessage="The length must be between 0 and 60"&gt;
                    &lt;params&gt;
                      &lt;param name="min" value="0"/&gt;
                      &lt;param name="max" value="60"/&gt;
                    &lt;/params&gt;
                  &lt;/validationRule&gt;
                &lt;/validationRuleList&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COETextAreaLong&lt;/CSSClass&gt;
                  &lt;ID&gt;CommentsTextArea&lt;/ID&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;height&gt;50px&lt;/height&gt;
                  &lt;width&gt;680px&lt;/width&gt;
                  &lt;top&gt;175px&lt;/top&gt;
                  &lt;left&gt;15px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Text property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea.GetData">
            <summary>
            <para>Gets the Text of the control.</para>
            </summary>
            <returns>A string with the control's text.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea.PutData(System.Object)">
            <summary>
            Sets the control's text.
            </summary>
            <param name="data">A string with the desired text of the control.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COETextAreaLong&lt;/CSSClass&gt;
              &lt;ID&gt;CommentsTextArea&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea.DefaultValue">
            <summary>
            Allows to set the default text.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator">
            <summary>
            <para>
            COEFormGenerator is the core class of this namespace. It is a control that is capable of rendering dinamically a Form definition.
            That means that if that definition is changed in runtime, the resulting rendered form will automatically adopt the new layout and
            control's change.
            That Form Definition is specified by the class <see cref="T:CambridgeSoft.COE.Framework.Common.COEForm"/> and defines which controls will be rendered in which modes and also where in the screen. Additionally binding expressions
            may be defined for each control to control the databinding process.
            This last means that the form generator may be bound to a Datasource (or datasourceid), and is capable of reading and writing values
            from and to the datasource.
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer">
            <summary>
            <para>
            This interface defines methods and properties that are usefull for those controls that are intended to
            contain other controls, and moreover, that may contain datasources.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer.DataBind">
            <summary>
            <para>Triggers the databinding process.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer.Update">
            <summary>
            <para>
            If used with DataSourceID this should start its datasource update process, otherwise it should
            fire some "Updating" events.
            </para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer.DisplayMode">
            <summary>
            <para>
            Gets or set the container's display mode. Every container should allow one of the following modes:
            </para>
            <list type="bullet">
                <item>Add</item>
                <item>Edit</item>
                <item>Query</item>
                <item>View</item>
            </list>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer.PageIndex">
            <summary>
            <para>If the container will have pagging capabilities, this property should be implemented to 
            get or set the current page index.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer.Visible">
            <summary>
            <para>Gets or sets if the container should be rendered or not.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer.DataSource">
            <summary>
            <para>Gets or sets the container's datasource.</para>
            <remarks>DataSource and DataSourceID mutually exclusive.</remarks>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer.DataSourceID">
            <summary>
            <para>Gets or sets the container's datasourceid.</para>
            <remarks>DataSource and DataSourceID mutually exclusive.</remarks>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.Update">
            <summary>
            <para>This methods will trigger the update process through the binding datasource. If datasourceid is being used, then
            its dataview.Update methods is called, otherwise ItemUpdating and ItemUpdated events are fired.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.GetControlValue(System.String)">
            <summary>
            <para>Helper method that returns the value of a control inside the form using the bindingExpression to locate the control.</para>
            </summary>
            <param name="bindingExpression">The binding expression of the control.</param>
            <returns>The control's value.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/> class in Add mode.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.#ctor(CambridgeSoft.COE.Framework.Common.COEForm)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/> class with the specified FormDescription.</para>
            </summary>
            <param name="formData">The desired form description.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.ToString">
            <summary>
            <para>Returns the name of the class followed by a slash and by its ID.</para>
            </summary>
            <returns>A string of the form "COEFormGenerator - ID".</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.DisplayMode">
            <summary>
            <para>Sets or gets the current display mode of the form. Four types are supported:</para>
            <list type="bullet">
                <item>Add Mode</item>
                <item>Edit Mode</item>
                <item>View Mode</item>
                <item>Query Mode</item>
            </list>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.PageIndex">
            <summary>
            <para>
            The index of the current page to be displayed. 
            </para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.FormDescription">
            <summary>
            <para>
            The messaging type description of the form. This is the main property which will determine how the form will rendered at runtime.
            </para>
            </summary>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.ItemUpdated">
            <summary>
            <para>When the form is not bound to a datasourceid, but a datasource ItemUpdated event is fired when the Update process ends.</para>
            </summary>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator.ItemUpdating">
            <summary>
            <para>When the form is not bound to a datasourceid, but a datasource ItemUpdating event is fired when the Update process is in progress.</para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs">
            <summary>
            <para>General event arguments class for describing old values and new values of the control's values.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs.#ctor(System.Int32,System.Exception,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs"/>.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs.#ctor(System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs"/>.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs.ExceptionHandled">
            <summary>
            <para>Tells if an exception was handled.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs.OldValues">
            <summary>
            <para>Dictionary containing the values previous to the last databinding operation.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs.NewValues">
            <summary>
            <para>Dictionary containing the values of the current databinding operation.</para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventHandler">
            <summary>
            <para>Form Generator Event Handler that contains a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFGEventArgs"/> as parameter, which has the old and the new values of the 
            binding process</para>
            </summary>
            <param name="sender">The sender control.</param>
            <param name="e">The Event Arguments, that contains control's old and new values.</param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox">
            <summary>
            <para>
            This class implements a CheckBox control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COECheckBox class accepts every CheckBox property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: Would be checked by default?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
                &lt;formElement&gt;
                  &lt;defaultValue&gt;true&lt;/defaultValue&gt;
                  &lt;bindingExpression&gt;Compound.BaseFragment.Structure.UseNormalizedStructure&lt;/bindingExpression&gt;
                  &lt;label&gt;Use normalized structure&lt;/label&gt;
                  &lt;configInfo&gt;
                    &lt;fieldConfig&gt;
                    &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
                    &lt;ID&gt;UseNormalizedStructureCheck&lt;/ID&gt;
                    &lt;/fieldConfig&gt;
                  &lt;/configInfo&gt;
                  &lt;displayInfo&gt;
                    &lt;top&gt;310px&lt;/top&gt;
                    &lt;left&gt;100px&lt;/left&gt;
                    &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox&lt;/type&gt;
                  &lt;/displayInfo&gt;
                &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Checked property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox.GetData">
            <summary>
            Gets if this checkbox is currently checked.
            </summary>
            <returns>A bool value that shows if it is checked or not.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox.PutData(System.Object)">
            <summary>
            Sets if it should be checked.
            </summary>
            <param name="data">A bool or a parseable string that sets if this should be checked or not.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
                &lt;fieldConfig&gt;
                    &lt;Style&gt;border-color:blue;&lt;/Style&gt;
                    &lt;Height&gt;&lt;/Height&gt;
                    &lt;Width&gt;&lt;/Width&gt;
                    &lt;Text&gt;&lt;/Text&gt;
                    &lt;CssClass&gt;&lt;/CssClass&gt;
                    &lt;CSSLabelClass&gt;&lt;/CSSLabelClass&gt;
                    &lt;ID&gt;32&lt;/ID&gt;
                &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox.DefaultValue">
            <summary>
            Allows to set if it is checked or not by default.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEWebGrid.XmlCriteriaBuilder.BuildSearchCriteriaFromXML(System.String)">
            <summary>
                Builds a SearchCriteria object from xml file
            </summary>
            <param name="searchCriteriaXml"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEWebGrid.XmlCriteriaBuilder.BuildResultsCriteriaFromXML(System.String)">
            <summary>
                Builds a ResultsCriteria object from xml file
            </summary>
            <param name="resultsCriteriaXml"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEWebGrid.XmlCriteriaBuilder.BuildPagingInfoFromXML(System.String)">
            <summary>
                Builds a ResultsCriteria object from xml file
            </summary>
            <param name="resultsCriteriaXml"></param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.Processors.DomainProcessor">
            <summary>
            A dummy processor for Criteria that don't need specific work. This class follows the template pattern along with search service GetHitList Method
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.DomainProcessor.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates a new instance of Generic Processor with an xmlNode of the SearchCriteria XML.
            </summary>
            <param name="xmlNode">The node of a SearchCriteriaItem.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.DomainProcessor.#ctor(CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)">
            <summary>
            Creates a new instance of Generic Processor with a given SearchCriteria Item
            </summary>
            <param name="item">The SearchCriteriaItem that is to be handled by this Processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.DomainProcessor.#ctor(CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Generic Processor with a given SearchCriteria Item
            </summary>
            <param name="item">The SearchCriteriaItem that is to be handled by this Processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.DomainProcessor.PreProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template method Preprocess - performs the required setup steps for executing this command: Nothing in this case.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.DomainProcessor.Process">
            <summary>
            add a numerical criteria that specifies teh hitlist table, hitlist id field and hitlistid to search over
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.DomainProcessor.PostProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template method PostProcess - Performs the required steps for cleaning up the command execution - Nothing in this case.
            </summary>
            <param name="searchDAL"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.HitListUtilities.BuildTempHitListTableName(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.HitListUtilities.BuildTempHitListIDTableName(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.HitListUtilities.BuildSavedHitListTableName(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.HitListUtilities.BuildSavedHitListIDTableName(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="tableName"></param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEHitListService.OracleDataAccessClientDAL">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.OracleDataAccessClientDAL.DeleteCOESavedHitListTables">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.OracleDataAccessClientDAL.CheckCOETempHitListTablesExist">
            <summary>
            Check that the temp hitlist
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.OracleDataAccessClientDAL.CheckCOESavedHitListTablesExist">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.OracleDataAccessClientDAL.CreateCOETempHitListTables">
            <summary>
            Create COETempHitList and COETempHitListID tables
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.OracleDataAccessClientDAL.GetNewTempHitlistID">
            <summary>
            
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEHitListService.SystemDataSqlClientDAL">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.SystemDataSqlClientDAL.GetNewTempHitlistID">
            <summary>
            
            </summary>
            <param name="tempHitListCreateRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.New(System.String,CambridgeSoft.COE.Framework.HitListType)">
            <summary>
            Creates a new COEHitListBO object with default vaules
            </summary>
            <param name="hitListType">specify the type of hitlist to create</param>
            <returns>a COEHitListBO object with default values</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.New(System.String,CambridgeSoft.COE.Framework.HitListType,System.Int32)">
            <summary>
            Overload. Creates a new COEHitListBO object set to a particular id
            </summary>
            <param name="hitListType">specify the type of hitlist to create</param>
            <returns>a COEHitListBO object with default values</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.Get(System.String,CambridgeSoft.COE.Framework.HitListType,System.Int32)" -->
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.Delete(System.String,CambridgeSoft.COE.Framework.HitListType,System.Int32)">
            <summary>
            Deletes a COEHitListBO object from the coe hitlist tables
            </summary>
            <param name="hitListType">specify the type of hitlist to be deleted</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.Update">
            <summary>
            This may be deleted, When you call .SAVE on a hitlist, internally, the insert or update will be called depending on whether it is a new object
            //this method is likely not needed
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.NewSavedFromTempHitList(System.Int32)">
            <summary>
            Creates a Save hitlist from an existing temporary hitlist
            </summary>
            <param name="tempHitListID">the tempoary hitlist id</param>
            <returns>a COEHitListBO object representing the newly saved hitlist</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.NewTempFromSubtraction(CambridgeSoft.COE.Framework.Common.HitListInfo,CambridgeSoft.COE.Framework.HitListType,CambridgeSoft.COE.Framework.Common.HitListInfo,CambridgeSoft.COE.Framework.HitListType)">
            <summary>
            Creates a new temporary hitlist by subtracting two hitlists
            </summary>
            <param name="hitListID1">the id of the first hitlist</param>
            <param name="hitListID1Type">the hitlisttype for the first hitlist</param>
            <param name="hitListID2">the id of the second hitlist</param>
            <param name="hitListID2Type">the hitlisttype for the second hitlist</param>
            <returns>a COEHitListBO object representing the newly created temp hitlist</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.NewTempFromIntersection(CambridgeSoft.COE.Framework.Common.HitListInfo,CambridgeSoft.COE.Framework.HitListType,CambridgeSoft.COE.Framework.Common.HitListInfo,CambridgeSoft.COE.Framework.HitListType)">
            <summary>
            Creates a new temporary hitlist by intersecting two hitlists
            </summary>
            <param name="hitListID1">the id of the first hitlist</param>
            <param name="hitListID1Type">the hitlisttype for the first hitlist</param>
            <param name="hitListID2">the id of the second hitlist</param>
            <param name="hitListID2Type">the hitlisttype for the second hitlist</param>
            <returns>a COEHitListBO object representing the newly created temp hitlist</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.NewTempFromUnion(CambridgeSoft.COE.Framework.Common.HitListInfo,CambridgeSoft.COE.Framework.HitListType,CambridgeSoft.COE.Framework.Common.HitListInfo,CambridgeSoft.COE.Framework.HitListType)">
            <summary>
            Creates a new temporary hitlist by making a union of two hitlists
            </summary>
            <param name="hitListID1">the id of the first hitlist</param>
            <param name="hitListID1Type">the hitlisttype for the first hitlist</param>
            <param name="hitListID2">the id of the second hitlist</param>
            <param name="hitListID2Type">the hitlisttype for the second hitlist</param>
            <returns>a COEHitListBO object representing the newly created temp hitlist</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.CopyHitListExcluding(CambridgeSoft.COE.Framework.Common.HitListInfo,CambridgeSoft.COE.Framework.HitListType,System.Int32[])">
            <summary>
            Creates a new temp hitlist by subtracting hits to exclude from an existing hitlist
            </summary>
            <param name="hitListInfo1">hitlist to operate on</param>
            <param name="hitListID1Type">hitlist type to operate on</param>
            <param name="idsToExclude">ids to exclude</param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.GetHitListTableNames">
            <summary>
            Utiltiy function to get the fully qualified hitlist table names
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.SystemDataSqlClientDAL">
            <summary>
            Class for supporting SQL server based COEGenericObjectStorage Service.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.SystemDataSqlClientDAL.CreateCOEGenericObjectStorageTable">
            <summary>
            Creates an empty COEGenericObjectStorage table.
            </summary>
            <remarks>Method not implemented yet.</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.SystemDataSqlClientDAL.GetNewID">
            <summary>
            Gets the new available id to be used as id for a record in COEGenericObjectStorage.
            </summary>
            <returns>The new id generated</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.NormalizationUtils">
            <summary>
            Provides methods to normalize strings.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.NormalizationUtils.GetSearchRange(System.String,System.Double@,System.Double@)">
             <summary>
            		  Examines the provided string, which represents a real number, possibly
                   in exponential notation, and determines the number of significant figures present.
                   In the conventional simple and scientific representations of real numbers, there is
                   one region within the string that represents the significant digits.  The position
                   of this region given by (start,finish).
            
                   To determine this region:
                       1)  Locate the decimal point.
                       2)  Remove a leading minus or plus sign.
            
                       3)  Remove leading zeroes.
                       4)  Strip off everything including and following an exponent (E).
                       5)  If a decimal point is not present, strip off trailing zeroes.
                       6)  Count the number of characters left, ignoring any decimal point.
                       7)  Every number is considered to have *at least* one significant figure.
            
                   Examples of "significant regions" are:
                           "-003.14E01"    -> "3.14",      3 sig figs.
                           "0.0300"        -> ".0300",     3 sig figs.
                           "3020"          -> "3020",      3 sig figs.
                           ".00E-7"        -> ".00",       1 sig figs.
             
            		  Penned by HEH, 12/15/95.
            		  Ported by DGB, 7/2003.
            		  Ported by fgaldeano to C#, 9/2005.
            		  Fixed by llillo 10/2005. 
             </summary>
             <param name="src">The string containing the representation of the original value.</param>
             <param name="loVal">The lower value to set.</param>
             <param name="hiVal">The higher value to set.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.NormalizationUtils.CleanTheSyns(System.String@)">
            <summary>
            Clean name query to match the format of cleanfield in database.
            </summary>
            <param name="thesyns">Not cleaned thesyns.</param>
            <returns>Cleaned thesyns</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.NormalizationUtils.CleanTheSynsPart2(System.String@)">
            <summary>
            Clean name query to match the format of cleanfield in database.
            Called by CleanTheSyns.
            </summary>
            <param name="thesyns">Partially cleaned thesyns.</param>
            <returns>More cleaned thesyns.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.NormalizationUtils.FixIcAte(System.String)">
            <summary>
            Part of the chemical name normalization routine.
            Used primarily for acids, esters, and acid halides.
            Called by CleanTheSyns.
            </summary>
            <param name="thesyns">thesyns.</param>
            <returns>More cleaned thesyns.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.NormalizationUtils.SubString(System.String,System.Int32,System.Int32)">
            <summary>
            This function is just to avoid exceptions when trying to get a substring that exceeds the string length
            </summary>
            <param name="original">The original string.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length</param>
            <returns>If it is possible the substring, otherwise the original string.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.NormalizationUtils.TrimValue(System.String,System.Data.DbType,CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)">
            <summary>
            Trims value taking into account whether it's text or number
            </summary>
            <param name="value">The value to trim.</param>
            <param name="type">Its DbType.</param>
            <param name="trimPosition">The position to trim.</param>
            <returns>A trimmed string.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table">
            <summary>
            This class stores a table information.
            The logic for obtaining its string representation is implemented here.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.database">
            <summary>
            Name of the database or schema.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.tableName">
            <summary>
            Name of the table in the xml schema.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.tableId">
            <summary>
            The id of the table in the xml schema.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.alias">
            <summary>
            The table alias to be used.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes its members to the desired values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.#ctor(System.String)">
            <summary>
            Initializes its members to its default values except of its name.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.Equals(System.Object)">
            <summary>
            Two tables are equals if all of its members has the same values.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if they are equals false if not.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.op_Equality(CambridgeSoft.COE.Framework.Common.SqlGenerator.Table,CambridgeSoft.COE.Framework.Common.SqlGenerator.Table)">
            <summary>
            Determines if two tables are equal or not.
            </summary>
            <param name="left">Left member of the operation.</param>
            <param name="right">Right member of the operation.</param>
            <returns>True if equals, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.op_Inequality(CambridgeSoft.COE.Framework.Common.SqlGenerator.Table,CambridgeSoft.COE.Framework.Common.SqlGenerator.Table)">
            <summary>
            Determines if two tables are different or not.
            </summary>
            <param name="left">Left member of the operation.</param>
            <param name="right">Right member of the operation.</param>
            <returns>True if defferents, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.GetAlias">
            <summary>
            Returns the alias of the table if defined, otherwise returns string.Empty.
            </summary>
            <returns>The alias or string.Empty.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.ToString">
            <summary>
            Gets the string that represents the fully qualified name of this table.
            </summary>
            <returns>The fully qualified name.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.TableName">
            <summary>
            Name of the table in the xml schema.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.TableId">
            <summary>
            The id of the table in the xml schema.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.Alias">
            <summary>
            The table alias to be used.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Table.Database">
            <summary>
            Name of the database or schema.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween">
             <summary>
             <para>
             This class implements a IN operator in a  SQL where clause. This Class is designed to handle lots of input, that’s why a temporary table strategy is used, if possible (in access this is not possible). Also, an approximated row count (cardinality) is calculated and inserted into the clause, for purposes of DBMS Query optimization.
             </para>
             <para>
             <b>Input</b>
             </para>
             <para>
             The WhereClauseBetween class requires the following members to be initialized to the desired value:
             </para>
             <list type="bullet">
             <item><b>Field dataField</b> Represents the field of the database that is being compared. Its name and type are required.</item>
             <item><b>Value [] Values:</b> represents the array values against wich the dataField is being compared.</item>
             </list>
             <para>
             <b>Notes:</b>
             </para>
             <para>
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
             </para>
             <para>
             <b>Example:</b>
             </para>
             <b>Programatically:</b>
             <code lang="C#">
            WhereClauseBetween target = new WhereClauseBetween();
            	target.DataField = new Field();
            	target.DataField.FieldName = "MolId";
            	target.DataField.FieldType = DbType.Int32;
            	target.Values = new Value[3] { 
            	new Value("12", DbType.Int32), 
            	new Value("13", DbType.Int32), 
            	new Value("24", DbType.Int32) };
            	Query.AddWhereClauseItem(clause)
             </code>
             
             <b>With XML:</b>
             <code lang="XML">
            &lt;searchCriteriaItem id="1" fieldid="27" modifier="" tableid="6"&gt;
            	&lt;numericalCriteria operator="IN"&gt;12, 13, 14&lt;/numericalCriteria&gt;
            &lt;/searchCriteriaItem&gt;
             </code>
             <para>
             <b>Output</b>
             </para>
             <para>
             This code will produce the following where clause statement:
             </para>
             <para>
             MolId IN(
            		SELECT /*+ cardinality(t 10)*/ * 
            		FROM TABLE(CAST(STR2TBL(:1) as MYTABLETYPE)) t 
            		WHERE ROWNUM &gt;= 0)
             </para>
             <para>
             And will add the following parameters to the query parameter list:
             </para>
             <list type="bullet">
             <item>Value("12", DbType.Int32)</item>
            	 <item>Value("13", DbType.Int32)</item>
            	 <item>Value("24", DbType.Int32)</item>
             </list>
             </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNAryOperation">
            <summary>
            A representation of a N-Ary operation to be used in a where clause.
                I.E.: IN operation is an N-ary operation ... Field.name = IN(field[0].value, ..., field[n].value)...
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNAryOperation.dataField">
            <summary>
            The database field name. We recommend setting the tablename to use
            fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNAryOperation.values">
            <summary>
            The values to compare to.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNAryOperation.DataField">
            <summary>
            The database field name. We recommend setting the tablename to use
            fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNAryOperation.Values">
            <summary>
            The values to compare to.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Resolves the differences between databases to generate the string of Execute method..
            </summary>
            <remarks>Missing implementation for Access.</remarks>
            <returns>A string of the form: IN('value0', 'value1', ... , 'valueN') for the specific
            database.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween.TrimPosition">
            <summary>
            Determines if the value must be triimed, and where.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseBetween.NormalizeChemicalName">
            <summary>
            Gets or sets if it is necessary to normalize the name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Types.Exceptions.MolServerException">
            <summary>
            Exception raised when an error ocurred inside the Mol Server.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DALProviderData">
            <summary>
            Configuration data defining a data access provider.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALProviderData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.DALProviderData"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALProviderData.Name">
            <summary>
            Name of the provider
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALProviderData.DALClass">
            <summary>
            Name of application
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEPickListPickerService.DAL">
            <summary>
            Base class for accessing PickList and PickListDomain tables.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMin" -->
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMin.dataField">
            <summary>
            Name of the DataBase Field on which the TOData function is to be applied.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMin.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMin.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method does the actual job.
            In this case just return the name of the field.
            </summary>
            <returns>A string containing the select part corresponding to this field (i.e. the field name)</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMin.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a new Instance based upon a xml represntation of the clause. 
            </summary>
            <param name="resultsXmlNode">The xml snippet containing the xml representation of the clause</param>
            <param name="dvnLookup">DataView Naming Lookup object used for translating identifiers to objects</param>
            <returns>a SelectClauseMin item</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseMin.DataField">
            <summary>
            Name of the DataBase Field to be included in the SELECT clause.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly">
            <summary>
            <para>
            This the read only version of <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker"/> class.
            </para>
            <para>
            The COEDatePickerReadOnly class accepts every WebDateChooser property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            All dates are stored internally as Universal Time amd converted based on <see cref="F:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.Constants.DatesFormat"/>.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default date?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;label&gt;Date Created&lt;/label&gt;
                &lt;bindingExpression&gt;&lt;/bindingExpression&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COEDropDownList&lt;/CSSClass&gt;
                  &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
                  &lt;ID&gt;DateCreatedTextBox&lt;/ID&gt;
                  &lt;NullDateLabel&gt;&lt;/NullDateLabel&gt;
                  &lt;Width&gt;150&lt;/Width&gt;
                  &lt;Height&gt;15&lt;/Height&gt;
                  &lt;FontSize&gt;11px&lt;/FontSize&gt;
                  &lt;ForeColor&gt;484848&lt;/ForeColor&gt;
                  &lt;BackColor&gt;EAEAEA&lt;/BackColor&gt;
                  &lt;FontNames&gt;Verdana&lt;/FontNames&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;height&gt;15px&lt;/height&gt;
                  &lt;width&gt;212px&lt;/width&gt;
                  &lt;top&gt;50px&lt;/top&gt;
                  &lt;left&gt;349px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Value property.
            </para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOECultureable">
            <summary>
            <para>
            This interface should be implemented for those controls that may be configured for using different culture info, like a Date picker.
            It only provides a DisplayCulture property, which accepts a CultureInfo Property.
            </para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOECultureable.DisplayCulture">
            <summary>
            Sets the culture info for the underlying control.
            <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly"/> class
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.GetData">
            <summary>
            Gets the date as string, formatted as defined in <see cref="F:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.Constants.DatesFormat"/>.
            </summary>
            <returns>A string value with the date.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.PutData(System.Object)">
            <summary>
            Sets the date.
            </summary>
            <param name="data">A string with the desired date.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COEDatePicker&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
              &lt;ID&gt;DateCreatedTextBox&lt;/ID&gt;
              &lt;NullDateLabel&gt;&lt;/NullDateLabel&gt;
              &lt;Width&gt;150&lt;/Width&gt;
              &lt;Height&gt;15&lt;/Height&gt;
              &lt;FontSize&gt;11px&lt;/FontSize&gt;
              &lt;ForeColor&gt;484848&lt;/ForeColor&gt;
              &lt;BackColor&gt;EAEAEA&lt;/BackColor&gt;
              &lt;FontNames&gt;Verdana&lt;/FontNames&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.DefaultValue">
            <summary>
            Allows to set the default date.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePickerReadOnly.DisplayCulture">
            <summary>
            Sets the culture info for the control.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataMapper">
            <summary>
            <para>
            Utilitarian class that allows to Map CEOFramework's binding expressions to objects.
            This class uses <see cref="T:CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataBinder"/> on its behalf.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataMapper.Map(System.Collections.IDictionary,System.Object)">
            <summary>
            Maps a 
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageUtilities">
            <summary>
            Utilitarian class for COEGenericObjectStorage service.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageUtilities.BuildCOEGenericObjectStorageTableName(System.String,System.String@)">
            <summary>
            Builds the sql string for creating the generic object storage table.
            </summary>
            <param name="owner">The schema owner</param>
            <param name="tableName">The desired name</param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike">
            <summary>
            <para>
            This class implements a LIKE comparison operator in a  SQL where clause.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The WhereClauseLike class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field dataField:</b> Represents the field of the database that is being compared. Its name and type are required.</item>
            <item><b>Value Val:</b> represents the value against wich the dataField is being compared. Its value and type are required. The type of the field can differ from the type of the value.</item>
            <item><b>bool CaseSensitive:</b> flag that indicates whether take into account casing or not.</item>
            <item><b>Position TrimPosition:</b> flag that indicates how to perform the trim of value. Posible Values: Left, Right, Both, None.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            The WhereClause decides whether it’s TextCriteria, NumericalCriteria, etc. based upon the Val Value field.
            This Where Clause can take into account casing and can perform trim of the input value. 
            In the special case of a numericalCriteria that is applied into a text database field, the trim operation trims leading and or trailing zeroes (instead of just spaces).
            In the case of a TextCriteria, this implementation compares the ascii codes of the strings.
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            WhereClauseLike target = new WhereClauseLike();
            target.DataField = new Field();
            target.DataField.FieldName = "Structure";
            target.DataField.FieldType = DbType.String;
            target.Val = new Value("	C1CCCCC1  ", DbType.String);
            target.CaseSensitive = false;
            target.TrimPosition = Positions.Both;
            Query.AddWhereClauseItem(clause);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;structureCriteriaItem id=XX fieldid=20 modifier='' tableid=3&gt;
            	&lt;textCriteria operator='LIKE' trim='BOTH' caseSensitive='NO'&gt;	C1CCCCC1  
            	&lt;/textCriteria&gt;
            &lt;/structureCriteriaItem&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following where clause statement:
            </para>
            <para>
            [AND] (LOWER(Structure) LIKE :0);
            </para>
            <para>
            And will add the following parameters to the query parameter list:
            </para>
            <list type="bullet">
            <item>Value(c1ccccc1, DataFieldtype.Text</item>
            </list>
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike.wildCardPosition">
            <summary>
            Where will be applied the wildcard. For instance if left is selected the generated like will
            be in the form: FieldName Like('%FieldValue')
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Encapsulates different sintaxis for the underlying RDBMS. If the equal will be case insensitive,
            then a lower is applied to the field and the value is lowered too.
            </summary>
            <exception cref="T:System.Exception">Thrown when the data type is not Text</exception>
            <returns>A string for the underlying RDBMS, in the form of: FieldName Like('%FieldValue%')</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike.WildCardPosition">
            <summary>
            Where will be applied the wildcard. For instance if left is selected the generated like will
            be in the form: FieldName Like('%FieldValue')
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike.CaseSensitive">
            <summary>
            Determines if the comparation is case sensitive.
            <remarks>If the field type is not Text this property is discarded.</remarks>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike.TrimPosition">
            <summary>
            Determines if the value must be triimed, and where.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike.FullWordSearch">
            <summary>
            Determines if the like must be a Full word search.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike.NormalizeChemicalName">
            <summary>
            Gets or sets if it is necessary to normalize the name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause">
            <summary>
            A wrapper for a where clause. Expose methods to modify the where clause.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.items">
            <summary>
            A list of WhereClauseItems.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.defaultConcatenationOperator">
            <summary>
            By default all where clauses are separated by ands...
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.#ctor">
            <summary>
            Initializes the WhereClause to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.AddItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem)">
            <summary>
            Adds an item to the end of the where clause.
            </summary>
            <param name="item">A where clause item.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.RemoveItem(System.Int32)">
            <summary>
            Removes an item of the where clause.
            </summary>
            <param name="position">The item position where is located the item to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.RemoveItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem)">
            <summary>
            Removes an item of the where clause.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.ToString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Returns a string with all the items concatenated for the specified database
            </summary>
            <returns>The where clause as string</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.ParameterHolder">
            <summary>
            The character to use in the resulting prepared statement for indicating a parameter position (i.e. the parameter holder).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause.UseParametersByName">
            <summary>
            Indicates the way parameters are specified: 
            	if true parameters are specified by name (and an ordinal is appended to te character)
            	otherwise parameters are specified by position (and nothing is appended)
             THIS PROPERTY IS MEANT TO BE SET BY THE QUERY THAT CONTAINS THE WHERECLAUSE. THE USER SHOULD USE THAT PROPERTY.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLiteral">
            <summary>
            <para>
            This class represents a literal text the user wants to add to the select clause.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The SelectClauseLiteral class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>string  Literal:</b> The text that is going to be added to the columns of the query.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            SelectClauses are implemented in two differentiable parts: The SelectClause itself, in charge of generating the string and a Parser whose responsibility is to extract the information needed for building the clause from an xmlnode.
            All SelectClause are mapped in mappings.xml, wich indicates given a SelectClause name, wich class to use for parsing and obtaining the generated string. There is a set of predefined SelectClauseFields, but the user can expand with his own. By implementing SelectClauseItem and ISelectClauseParser and adding the corresponding entry in this file.
            Along with SelectClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            SelectClauseLiteral literal = new SelectClauseLiteral();
            item.Literal = "literal";
            query.AddSelectItem(literal);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;literal&gt;literal&lt;/literal&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following select clause statement:
            </para>
            <para>
            'literal'
            </para>
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLiteral.literal">
            <summary>
            String containing the literal to be included in the SELECT clause.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLiteral.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLiteral.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method does the actual job.
            In this case just return the desired string as literal.
            </summary>
            <returns>A string containing the select part corresponding to this field (i.e. the field name)</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLiteral.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Implementation of ISelectClauseParser. Returns an Instance of SelectClauseLiteral, which 
            is initialized with the inner text of the literal node.
            </summary>
            <param name="literalNode">The literal node of the search results xml definition.</param>
            <param name="dvnLookup">The INamesLookup interface from wich the parser can obtain the names corresponding to ids in dataview.xml</param>
            <returns>An instance of SelectClauseLiteral.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLiteral.Literal">
            <summary>
            String containing the literal to be included in the SELECT clause.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase">
            <summary>
            <para>
            This class allows the user to perform a Switch (CASE or DECODE) SQL Statement.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The SelectClauseCase class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>List&lt;SelectClauseItem&gt; Clauses:</b> The SelectClauseItems to be concatenated.</item>
            <item><b>SelectClauseItem Clause:</b> The SelectClauseItem used for the swich condition.</item>
            <item><b>SortedDictionary&lt;string, SelectClauseItem&gt; Cases:</b> A Dictionary of switch possible cases, where the string key is to be used as the case and the SelectClauseItem is the result.</item>
            <item><b>SelectClauseItem Default:</b> The default result.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            This class doesn’t support Access yet, and will throw an exception if used on that “dbms”.
            SelectClauses are implemented in two differentiable parts: The SelectClause itself, in charge of generating the string and a Parser whose responsibility is to extract the information needed for building the clause from an xmlnode.
            All SelectClause are mapped in mappings.xml, wich indicates given a SelectClause name, wich class to use for parsing and obtaining the generated string. There is a set of predefined SelectClauseFields, but the user can expand with his own. By implementing SelectClauseItem and ISelectClauseParser and adding the corresponding entry in this file.
            Along with SelectClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            Table emp = new Table();
            emp.TableName = "emp";
            emp.Alias = "e";
            Field nameField = new Field();
            nameField.Table = emp;
            nameField.FieldName = "NAME";
            Field lastNameField = new Field();
            lastNameField.Table = emp;
            lastNameField.FieldName = "LASTNAME";
            SelectClauseField clause = new SelectClauseField();
            clause.DataField = nameField;
            SelectClauseLiteral caseLiteral = new SelectClauseLiteral();
            caseLiteral.Literal = "'Literal Name'";
            SelectClauseField caseField = new SelectClauseField();
            caseField.DataField = lastNameField;
            SelectClauseCase target = new SelectClauseCase();
            target.Clause = clause;
            target.Cases.Add("'JOHN'", caseLiteral);
            target.Cases.Add("'SMITH'", caseField);
            target.Default = caseField;			
            query.AddSelectItem(itemConcatenation);query.AddSelectItem(literal);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;switch inputType="text"&gt;
            	&lt;clause&gt;
            		&lt;field id ="2"/&gt;
            	&lt;/clause&gt;
            	&lt;condition value="123"&gt;
            		&lt;field id ="2"/&gt;
            	&lt;/condition&gt;
            	&lt;condition value="aBb"&gt;
            		&lt;literal&gt;12323&lt;/literal&gt;
            	&lt;/condition&gt;
            	&lt;condition value="C"&gt;
            		&lt;literal&gt;'12323'&lt;/literal&gt;
            	&lt;/condition&gt;
            	&lt;condition default=""&gt;
            		&lt;field id="1"/&gt;
            	&lt;/condition&gt;
            &lt;/switch&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following select clause statements:
            </para>
            <para>
            <b>In Oracle:</b>
            DECODE (e.NAME, 'JOHN', Literal Name, 'SMITH', e.LASTNAME, e.LASTNAME)
            </para>
            <para>
            <b>In MS-SQLSERVER:</b>
            case e.NAME
            	WHEN 'JOHN' THEN 'Literal Name' 
            	WHEN 'SMITH' THEN e.LASTNAME 
            	ELSE e.LASTNAME 
            END
            </para>
            <para>
            <b>To Be Done:</b> Review the SelectClauses Aliases (In this case there is no place to put it on the xml). And Implement this in Ms-Asccess.
            </para>
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.clause">
            <summary>
            Field describing the column on wich the switch-case is being performed
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.cases">
            <summary>
            Dictionary containing all the posible cases of the switch-case statement.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.inputType">
            <summary>
            Type of the column on wich the case is being performed. TODO: Review this method of handling the type (we preferred this instead of adding a type to selectClauses)
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.defaultItem">
            <summary>
            Default response of the switch-case statement, if none of the "cases" is fullfilled.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.#ctor">
            <summary>
            Initialize its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Write something here.
            </summary>
            <param name="dataBaseType">Write something here.</param>
            <returns>Write something here.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Write something here.
            </summary>
            <param name="resultsXmlNode">Write something here.</param>
            <param name="dvnLookup">Write something here.</param>
            <returns>Write something here.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.Clause">
            <summary>
            Clause describing the column on wich the switch-case is being performed
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.Cases">
            <summary>
            Dictionary containing all the posible cases of the switch-case statement.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.Default">
            <summary>
            Default response of the switch-case statement, if none of the "cases" is fullfilled.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCase.InputType">
            <summary>
            Type of the column on wich the case is being performed. TODO: Review this method of handling the type (we preferred this instead of adding a type to selectClauses)
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause">
            <summary>
            A wrapper for a join clause. Expose methods to modify the join clause.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.relations">
            <summary>
            The list of relations of a query. This is later rendered into "join", "inner join", or a list of tables.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.mainSource">
            <summary>
            The main table of a query. In SQL terms it defines wich is the table after FROM clause.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.AddRelation(CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation)">
            <summary>
            Adds a relation to the join clause. Depending on the database type will be rendered as JOIN or
            a list of tables and wheres.
            </summary>
            <param name="relation">The relation to add.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.RemoveRelation(CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation)">
            <summary>
            Removes a relation from the join clause.
            </summary>
            <param name="relation">The relation to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.RemoveRelation(System.Int32)">
            <summary>
            Removes a relation from the join clause.
            </summary>
            <param name="position">The position where is located the relation to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.FromToString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value})">
            <summary>
            Gets the from part of a query, regarding to the join.
            </summary>
            <param name="dataBaseType">Determines which is the underlying database to generate SQL to.</param>
            <returns>The from part of a query. This can be a list of tables, a set of JOIN or a set of INNER JOIN.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.WhereToString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Gets the where part of a join, regarding to the join.
            </summary>
            <returns>If the underlying database needs the "old sql style" a list of WHERE/AND is returned.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.IsEmpty(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Determines whether the generated string of this join clause will be empty, based upon the underlying dbms
            </summary>
            <param name="dataBaseType">the target database for wich the join clause is supposed to be generated</param>
            <returns>true if nothing would be generated for the specified underlying database</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause.MainSource">
            <summary>
            The main table name of a query. In SQL terms it defines wich is the table after FROM clause.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage">
            <summary>
            This will be the base page for all those pages who want to be part of the GUIShell.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.SetPageControlsStatus">
            <summary>
            Method to put disable some controls according Session var COEPageSettings.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.FindControlInsidePage(System.String)">
            <summary>
            Method to find a control inside a ContentPlaceHolder1
            </summary>
            <param name="controlID">The control's ID to search </param>
            <returns>The found control</returns>
            <remarks>TODO: This method doesn't support search inside others controls yet</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.FindGroupInsideAccordion(System.String)">
            <summary>
            Method to find a group in a given accordion
            </summary>
            <param name="accordindID">The identifier of the accordion to search inside</param>
            <returns>The list of groups</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.ControlExists(System.String)">
            <summary>
            Method to verify of the controls exists in the current page.
            </summary>
            <param name="controlID">The control identifier</param>
            <returns>A boolean indicating if the controls was found or not</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.GroupExists(System.String,System.String)">
            <summary>
            Check if the group exists in the given accordion.
            </summary>
            <param name="accordionID">The identifier ff the accordion to search</param>
            <param name="groupID">The identifier of the group</param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.DisableControl(System.String)">
            <summary>
            Method to disable some controls inside the current page (if the control exists).
            </summary>
            <param name="controlID">The identifier of the controls to disable</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.DisableGroup(System.String,System.String)">
            <summary>
            Method to disable a group inside an accordion (if the group exists)
            </summary>
            <param name="accordionID">The id of the accordion in which the group is inside</param>
            <param name="groupID"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.DisablePage(System.String,System.String)">
            <summary>
            Method to transfer to the Messages page and display a message according the forbiden action
            </summary>
            <param name="pageName"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.SetExpiredPage">
            <summary>
            Method to make pages always refresh from Server side (always serve expired pages)
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellPage.SetJScriptReference">
            <summary>
            Set the reference to the JScript Page.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEConfigurationSettings">
            <summary>
            Overall configuration settings for ChemOffice Enterprise Services
            </summary>    
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COEConfigurationSettings.SectionName">
            <summary>
            Configuration key for ChemOffice Enterprise applications and services.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEConfigurationSettings.SingleSignOnURL">
            <summary>
            Defines the base type used for loading services
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEConfigurationSettings.Applications">
            <summary>
            Gets the collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.ApplicationData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.ApplicationData"/> objects.
            </value>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEConfigurationSettings.Services">
            <summary>
            Gets the collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.ServiceData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.ServiceData"/> objects.
            </value>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEConfigurationSettings.Databases">
            <summary>
            Gets the collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.DatabaseData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.DatabaseData"/> objects.
            </value>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEConfigurationSettings.DBMSTypes">
            <summary>
            Gets the collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.DBMSTypeData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.DBMSTypeData"/> objects.
            </value>
            
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEConfigurationSettings.ExportFormatters">
            <summary>
            Gets the collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.ExportFormatterData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.ExportFormatterData"/> objects.
            </value>
            
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.FormatterBase.ModifyResultsCriteria(CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            Method called by export servic for modifying results criteria. This is the default that finds structure fields.  this method
            can be overriden in the formatter
            </summary>
            <param name="resultsCriteria">Results criteria to modify</param>
            <param name="dataView">dataview to modify</param>
            <returns>modifed results criteria</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.FormatterBase.IsStructureField(System.Int32,System.Int32,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            helper method for finding a tableid/fieldid in a dataview to determine if it is a structure field.
            </summary>
            <param name="tableID">table id from results criteria to look up in dataview</param>
            <param name="fieldID">field id from results criteria to look up in dataview</param>
            <param name="dataView">dataview being examined</param>
            <returns>false if not a structure field, true if it is.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.FormatterBase.Modify(CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable,System.Int32)">
            <summary>
            This method by default simply returns the originating dataview. However, it can be overridden in the formatter class and used
            to modify results criteria
            </summary>
            <param name="resultsCriteria">Results Criteria to be used in GetData call</param>
            <param name="dataView">DataView used in GetDataCall</param>
            <returns>results criteria object</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.IFormatter.FormatDataSet(System.Data.DataSet,CambridgeSoft.COE.Framework.Common.COEDataView,CambridgeSoft.COE.Framework.Common.ResultsCriteria)">
            <summary>
            modify by david zhang for export services,because need relationship between parent table and child table
            in the dataset , so add two parameter 'COEDataView dataView,ResultsCriteria resultCriteria'
            </summary>
            <param name="dataSet"></param>
            <param name="dataView"></param>
            <param name="resultCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.SDFFlatFileUncorrelated.Modify(CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable,System.Int32)">
            <summary>
            Overridden ModifyResultsCriteria to format structure fields to return molfiles
            </summary>
            <param name="resultsCriteria">originating results criteria object</param>
            <returns>results critiria modified to include criteria itme in desired format</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.SDFFlatFileUncorrelated.FormatDataSet(System.Data.DataSet,CambridgeSoft.COE.Framework.Common.COEDataView,CambridgeSoft.COE.Framework.Common.ResultsCriteria)">
            <summary>
            reshape a dataset as an SDF flatfile that is uncorrelated
            </summary>
            <param name="dataSet">dataset to reshape</param>
            <returns>a sdf flat file containing molfiles for structures</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLowerCase" -->
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLowerCase.dataField">
            <summary>
            Name of the DataBase Field on which the TOData function is to be applied.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLowerCase.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLowerCase.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method calls the selectclauseaggretate function getDependString to do the actual job. 
            First you prepare the parameters and add them to the base.Parameters collection
            then you call base.GetDependentString to do the jog
            The return will be:
            In this case returns the SQL AVG aggregate function applied to the specified field.
            AVG(FieldName)
            </summary>
            <param name="dataBaseType">The underlying Database.</param>
            <returns>Returns a string with the AVG aggregate function, to be added to the SELECT clause</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLowerCase.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a new Instance based upon a xml represntation of the clause. 
            </summary>
            <param name="resultsXmlNode">The xml snippet containing the xml representation of the clause</param>
            <param name="dvnLookup">DataView Naming Lookup object used for translating identifiers to objects</param>
            <returns>a SelectClauseLowerCase item</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseLowerCase.DataField">
            <summary>
            Name of the DataBase Field to be included in the SELECT clause.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker">
            <summary>
            <para>
            This class implements an Infragistics' WebDateChooser control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COEDatePicker class accepts every WebDateChooser property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            All dates are stored internally as Universal Time amd converted based on <see cref="F:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.Constants.DatesFormat"/>.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default date?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
                &lt;formElement&gt;
                   &lt;label&gt;Synthesis Date&lt;/label&gt;
                   &lt;bindingExpression&gt;PropertyList[@Name='DATEENTERED' | Value]&lt;/bindingExpression&gt;
                   &lt;configInfo&gt;
                     &lt;fieldConfig&gt;
                     &lt;CSSClass&gt;COEDropDownList&lt;/CSSClass&gt;
                     &lt;CSSLabelClass&gt;COETextBox&lt;/CSSLabelClass&gt;
                     &lt;ID&gt;DateEnteredTextBox&lt;/ID&gt;
                     &lt;NullDateLabel&gt;Pick a date&lt;/NullDateLabel&gt;
                     &lt;Width&gt;150&lt;/Width&gt;
                     &lt;Height&gt;15&lt;/Height&gt;
                     &lt;FontSize&gt;11px&lt;/FontSize&gt;
                     &lt;ForeColor&gt;484848&lt;/ForeColor&gt;
                     &lt;BackColor&gt;FFFFFF&lt;/BackColor&gt;
                     &lt;FontNames&gt;Verdana&lt;/FontNames&gt;
                     &lt;/fieldConfig&gt;
                   &lt;/configInfo&gt;
                   &lt;displayInfo&gt;
                     &lt;height&gt;15px&lt;/height&gt;
                     &lt;width&gt;212px&lt;/width&gt;
                     &lt;top&gt;50px&lt;/top&gt;
                     &lt;left&gt;184px&lt;/left&gt;
                     &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker&lt;/type&gt;
                   &lt;/displayInfo&gt;
                &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Value property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker"/> class
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.GetData">
            <summary>
            Gets the date as string, formatted as defined in <see cref="F:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.Constants.DatesFormat"/>.
            </summary>
            <returns>A string value with the date.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.PutData(System.Object)">
            <summary>
            Sets the date.
            </summary>
            <param name="data">A string with the desired date.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COEDropDownList&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COETextBox&lt;/CSSLabelClass&gt;
              &lt;ID&gt;DateEnteredTextBox&lt;/ID&gt;
              &lt;NullDateLabel&gt;Pick a date&lt;/NullDateLabel&gt;
              &lt;Width&gt;150&lt;/Width&gt;
              &lt;Height&gt;15&lt;/Height&gt;
              &lt;FontSize&gt;11px&lt;/FontSize&gt;
              &lt;ForeColor&gt;484848&lt;/ForeColor&gt;
              &lt;BackColor&gt;FFFFFF&lt;/BackColor&gt;
              &lt;FontNames&gt;Verdana&lt;/FontNames&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.DefaultValue">
            <summary>
            Allows to set the default date.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDatePicker.DisplayCulture">
            <summary>
            Sets the culture info for the control.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetServiceData(System.String)">
            <summary>
            
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetDALProviderClass(CambridgeSoft.COE.Framework.Common.ServiceData,System.String)">
            <summary>
            
            </summary>
            <param name="serviceData"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetMappingsPath">
            <summary>
            This is just a hack to avoid harcoding in SQLGenerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetChemEngineSchema(CambridgeSoft.COE.Framework.Common.DatabaseData)">
            <summary>
            
            </summary>
            <param name="appData"></param>
            <param name="engineName"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetTempQueryTable(System.String)">
            <summary>
            
            </summary>
            <param name="appData"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetAllAppNamesInConfig">
            <summary>
            Retrieves all the AppNames reading from the  configuration file that is associated with the framework located in  C:\Documents and Settings\All Users\Application Data\ChemOfficeEnterprise11 COEFrameworkConfig.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetAppNameByDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetAppNameByOwner(System.String)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetAllDatabaseNamesInConfig">
            <summary>
            Retrieves all the DatabaseNames reading from the  configuration file that is associated with the framework located in  C:\Documents and Settings\All Users\Application Data\ChemOfficeEnterprise11 COEFrameworkConfig.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetDatabaseNameByType(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Creates and returns a list of DatabaseNames in FrameWorkConfig that has the DBMSType of type provided.
            </summary>
            <param name="dbType">Type of the DBMS required</param>
            <returns>List of Database Names in the frameworkConfig</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetAllDatabaseNamesInConfig(System.Boolean)">
            <summary>
            Retrieves all the DatabaseNames reading from the  configuration file that is associated with the framework located in  C:\Documents and Settings\All Users\Application Data\ChemOfficeEnterprise11 COEFrameworkConfig.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.ConfigurationUtilities.GetDatabaseNameFromAppName(System.String)">
            <summary>
            Get the databaseName associated with an Application section in the config file
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor">
            <summary>
            This class is responsible for handling MolWeight queries. This class follows the template pattern along with search service GetHitList Method
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates a new instance of MolWeight Processor with a given SearchCriteria Item xml representation
            </summary>
            <param name="xmlNode">The SearchCriteriaItem xml represntation that is to be handled by this Processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor.#ctor(CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)">
            <summary>
            Creates a new instance of MolWeight Processor with a given SearchCriteria Item
            </summary>
            <param name="item">The SearchCriteriaItem that is to be handled by this Processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor.PreProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template method Preprocess - performs the required setup steps for executing this processor.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor.Process">
            <summary>
            Template Method Process - returns the modified xml to be inserted in searchCriteria.xml
            </summary>
            <returns>a new searchCriteriaItem that is used to rebuild the searchCriteria xml</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.MolWeightProcessor.PostProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template Method PostProcess - Performs the required steps for cleaning up the command execution.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.GetIndexTypeFields(System.String)">
            <summary>
            get Index type fields containing chemical structure for data view
            <returns>table of table and column name containing chemical structure</returns>
            </summary>
            <param name="database">Name of the data base</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.GetCOEDataViewID(System.String)">
            <summary>
            get Data view Id
            <returns>Data view Id</returns>
            </summary>
            <param name="database">Name of the data base</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.InsertSecurityPrivileges(System.String)">
            <summary>
            Insert values to security table, create role for the selected schema 
            </summary>
            <param name="schemaName">Name of the schema</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.GrantRole(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Grant the Role for the created Schema.
            </summary>
            <param name="userList">List of users</param>        
            <param name="schemaName">Name of the schema</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.CreateSecurityPrivilegesTable(System.String)">
            <summary>
            Create Privilege table
            </summary>
            <param name="schemaName">Name of the schema</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.CheckSecurityPrivilegesExists(System.String)">
            <summary>
            Check for the Privilege table
            <returns>true, if Privilege table exist</returns>
            </summary>
            <param name="schemaName">Name of the schema</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.GetUsers">
            <summary>
            Get the list of user from Security table to Grant the Role for the created Schema.
            <returns>Table with the list of users</returns>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.AuthenticateUser(System.String,System.String,System.String)">
            <summary>   
            Check owner in the database
            <returns>true, if owner and password are correct</returns>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.Get_DatabaseSchema(System.String)">
            <summary>   
            Executes two queries defined in the method.
            <returns>DataSet Containing two tables, one containing the list of columns of each table in the database and the other containing the relationships </returns>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DAL.GetOwners">
            <summary>
            Populate all the Owners in dte database
            </summary>
            <returns>list of Owners </returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation">
            <summary>
            This class keeps tracks of a relation between two tables, by means of two Field objects. It's used by several other
            classes. 
            It's independent of the DataView class, although it's used by it.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.parent">
            <summary>
            Parent Field of the relation. The Name of the table that cointains this field can be extracted from the field itself
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.child">
            <summary>
            Child Field of the relation. The Name of the table that cointains this field can be extracted from the field itself
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.innerJoin">
            <summary>
            Determines whether it is a inner or outer join.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.Equals(System.Object)">
            <summary>
            Two relations are equals if its parents are equals and its childs are equals.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if they are equals.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.op_Equality(CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation,CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation)">
            <summary>
            Determines if two relations are equals or not.
            </summary>
            <param name="left">Left member of the operation.</param>
            <param name="right">Right member of the operation</param>
            <returns>True if equals, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.op_Inequality(CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation,CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation)">
            <summary>
            Determines if two relations are differents or not.
            </summary>
            <param name="left">Left member of the operation</param>
            <param name="right">Rightmember of the operation</param>
            <returns>True if differents, false otherwise.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.Parent">
            <summary>
            Parent Field of the relation. The Name of the table that cointains this field can be extracted from the field itself
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.Child">
            <summary>
            Child Field of the relation. The Name of the table that cointains this field can be extracted from the field itself
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation.InnerJoin">
            <summary>
            Determines whether it is a inner or outer join.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan">
            <summary>
            <para>
            This class implements a less than comparison operator, "&gt;" or “&gt;=”, in a  SQL where clause.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The WhereClauseLessThan class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field dataField:</b> Represents the field of the database that is being compared. Its name and type are required.</item>
            <item><b>Value Val:</b> represents the value against wich the dataField is being compared. Its value and type are required. The type of the field can differ from the type of the value.</item>
            <item><b>bool GreaterEqual:</b> flag that indicates whether it’s &gt; or &gt;=.</item>
            <item><b>bool CaseSensitive:</b> flag that indicates whether take into account casing or not.</item>
            <item><b>Position TrimPosition:</b> flag that indicates how to perform the trim of value. Posible Values: Left, Right, Both, None.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            The WhereClause decides whether it’s TextCriteria, NumericalCriteria, etc. based upon the Val Value field.
            This Where Clause can take into account casing and can perform trim of the input value. 
            In the special case of a numericalCriteria that is applied into a text database field, the trim operation trims leading and or trailing zeroes (instead of just spaces).
            In the case of a TextCriteria, this implementation compares the ascii codes of the strings.
            </para>
            <para>
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            WhereClauseGreaterThan target = new WhereClauseGreaterThan();
            target.DataField = new Field();
            target.DataField.FieldName = "MolWeight";
            target.DataField.FieldType = SqlDbType.Float;
            target.Val.Val = "00012.0000";
            target.Val.Type = SqlDbType.Float;
            target.GreaterEqual = true;
            target.TrimPosition = Positions.Both;
            Query.AddWhereClauseItem(clause);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;structureCriteriaItem id=XX fieldid=19 modifier=’’ tableid=3&gt;
            	&lt;numericalCriteria
            		operator='GTE' trim='BOTH'&gt;00012.0000
            	&lt;/numericalCriteria&gt;
            &lt;/structureCriteriaItem&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following where clause statement:
            </para>
            <para>
            [AND] (MolWeight &gt;= :0);
            </para>
            <para>
            And will add the following parameters to the query parameter list:
            </para>
            <list type="bullet">
            <item>Value(12, DataFieldtype.Float)</item>
            </list>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Encapsulates different sintaxis for the underlying RDBMS. If the equal will be case insensitive,
            then a lower is applied to the field and the value is lowered too.
            </summary>
            <exception cref="T:System.Exception">Thrown when the data type is not Text</exception>
            <returns>A string for the underlying RDBMS, in the form of: FieldName &gt; FieldValue</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan.GreaterEqual">
            <summary>
            Determines if it will be a greater or a greater equal operation.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan.TrimPosition">
            <summary>
            Determines if the value must be triimed, and where.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan.NormalizeChemicalName">
            <summary>
            Gets or sets if it is necessary to normalize the name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView">
            <summary>
            Representation of the database schema. Usually loaded from an xml.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.databaseRelations">
            <summary>
            Contains the database Relations set needed for joining the tables.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.dataViewXML">
            <summary>
            The source xml containing the database schema.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.ToString">
            <summary>
            Returns the xml representation of this dataView into a string 
            </summary>
            <returns>the string containing the xml representation of the DataView</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.LoadFromXML(System.String)">
            <summary>
            Loads the  values of this class from an xml string.
            </summary>
            <param name="dataViewXMLString">The schema xml in a string format.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.LoadFromXML(System.Xml.XmlDocument)">
            <summary>
            Loads the  values of this class from a XMLDocument.
            </summary>
            <param name="dataViewXMLDocument">The schema xml in a XmlDocument format.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetTableName(System.Int32)">
            <summary>
            Gets the table name from its id.
            </summary>
            <param name="tableIndex">The id of the table in the xml.</param>
            <returns>The table name.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetTable(System.Int32)">
            <summary>
            Gets the table from its id..
            </summary>
            <param name="tableIndex">The id of the table in the xml.</param>
            <returns>A Table instance.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetFieldName(System.Int32)">
            <summary>
            Gets the field name from its id.
            </summary>
            <param name="fieldIndex">The field id in the xml.</param>
            <returns>The field name.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetFieldType(System.Int32)">
            <summary>
            Returns the FieldType of the field whose id equals fieldIndex
            </summary>
            <param name="fieldIndex">The field id in the xml.</param>
            <returns>The DbType</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetParentTableName(System.Int32)">
            <summary>
            Returns the name of the parent table of the Field whose id is fieldIndex.
            </summary>
            <param name="fieldIndex">The field id in the xml.</param>
            <returns>The table name of its parent table.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetRelations(System.Int32,System.Int32)">
            <summary>
            Gets all the relation needed to access a parent table from a child. It is the shortest path between them.
            </summary>
            <param name="parentTableIndex">The parent table id in the xml.</param>
            <param name="childTableIndex">the child table id in the xml.</param>
            <returns>A List&lt;Relation&gt; with the relationships between two tables.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetParentTableId(System.String)">
            <summary>
            Gets the id of the table containing a field.
            </summary>
            <param name="fieldId">The field id in the xml.</param>
            <returns>The table id in the xml.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetField(System.Int32)">
            <summary>
            Returns a Field object from the dataView, given the Identifier.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <returns>The Field.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetParentTable(System.Int32)">
            <summary>
            Returns a Table object from the dataView, given the Identifier.
            </summary>
            <param name="fieldId">The field id in the xml.</param>
            <returns>An instance of its Parent Table.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetColumn(System.Int32)">
            <summary>
            Returns a Column instance (Which can be a Lookup or a regular field) from the dataView, given the Identifier.
            </summary>
            <param name="fieldId">The field id in the xml.</param>
            <returns>An instance of the corresponding field.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView.GetColumnAlias(System.Int32)">
            <summary>
            Gets the alias of a column from its id.
            </summary>
            <param name="fieldId">The field id in  the xml.</param>
            <returns>The alias.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup">
            <summary>
            A lookup is a column that belongs to a table, but it's information is extracted from another table. Those table are linked by a one to one relationship
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.IColumn">
            <summary>
            Interface that defines a DataBase column and it's properties. This class is implemented by Field and Lookup classes.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.IColumn.GetFullyQualifiedNameString">
            <summary>
            returns the name of the column into a string
            </summary>
            <returns>the string that contains the name</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.IColumn.FieldId">
            <summary>
            Identifier of the database column
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.IColumn.Table">
            <summary>
            Source owner of the column
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.GetFullyQualifiedNameString">
            <summary>
            Gets the string representation of the lookup, which is in the form: 
                (SELECT DISPLAYFIELDNAME 
                    FROM LOOKUPTABLE
                    WHERE SOURCEFIELDNAME = LOOKUPFIELDNAME)
            
            Where sourcefieldname and lookupfieldname are fully qualified.
            </summary>
            <returns>A string of the SQL lookup.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.LookupTable">
            <summary>
            The table related to the lookup field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.Table">
            <summary>
            The table related to the source field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.LookupFieldId">
            <summary>
            The lookup field id.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.LookupFieldName">
            <summary>
            The lookup field name.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.LookupDisplayFieldId">
            <summary>
            Id of the lookup field to display.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.LookupDisplayFieldName">
            <summary>
            Name of the lookup field to display.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.FieldId">
            <summary>
            Id of the source field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Lookup.FieldName">
            <summary>
            Name of the source field.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SecurityInfo">
            <summary>
            The security info messaging type.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SecurityInfo.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SecurityInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes its members to the desired values.
            </summary>
            <param name="identityToken">The identity token.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SecurityInfo.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="doc">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SecurityInfo.GetFromXml(System.Xml.XmlDocument)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="doc">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SecurityInfo.GetFromXml(System.String)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="xml">The xml representation as string.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SecurityInfo.ToString">
            <summary>
            Builds its xml representation as string .
            </summary>
            <returns>The xml representation as string.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SecurityInfo.IdentityToken">
            <summary>
            The identity token.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SecurityInfo.UserName">
            <summary>
            The user name.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SecurityInfo.Password">
            <summary>
            The password.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchResponse">
            <summary>
            Class that represents the response of a search.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchResponse.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="doc">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchResponse.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchResponse.GetFromXml(System.Xml.XmlDocument)">
            <summary>
            Loads itself from its xml representation.
            </summary>
            <param name="doc">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchResponse.GetFromXml(System.String)">
            <summary>
            Loads itself from its xml representation as a string.
            </summary>
            <param name="xml">The xml representation as a string.</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchResponse.HitListInfo">
            <summary>
            Info about Hit List, like its id and its record count.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchResponse.ResultsDataSet">
            <summary>
            The returning dataset which contains the datatables as defined by ResultsCriteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchResponse.PagingInfo">
            <summary>
            Information about paging, including records per page, start and end and keep alive mode.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Types.Exceptions.SQLGeneratorException">
            <summary>
            Exception raised when an error ocurred inside the SQL Generator sub system.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly">
            <summary>
            <para>
            This is the read only version of <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBox"/>.
            </para>
            <para>
            The COECheckBoxReadOnly class accepts every CheckBox property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: Would be checked by default?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
                &lt;formElement&gt;
                  &lt;defaultValue&gt;true&lt;/defaultValue&gt;
                  &lt;bindingExpression&gt;Compound.BaseFragment.Structure.UseNormalizedStructure&lt;/bindingExpression&gt;
                  &lt;label&gt;Use normalized structure&lt;/label&gt;
                  &lt;configInfo&gt;
                    &lt;fieldConfig&gt;
                    &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
                    &lt;ID&gt;UseNormalizedStructureCheck&lt;/ID&gt;
                    &lt;/fieldConfig&gt;
                  &lt;/configInfo&gt;
                  &lt;displayInfo&gt;
                    &lt;top&gt;310px&lt;/top&gt;
                    &lt;left&gt;100px&lt;/left&gt;
                    &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly&lt;/type&gt;
                  &lt;/displayInfo&gt;
                &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Checked property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly.GetData">
            <summary>
            Gets if this checkbox is currently checked.
            </summary>
            <returns>A bool value that shows if it is checked or not.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly.PutData(System.Object)">
            <summary>
            Sets if it should be checked.
            </summary>
            <param name="data">A parseable string that sets if this should be checked or not.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
                &lt;fieldConfig&gt;
                    &lt;Style&gt;border-color:blue;&lt;/Style&gt;
                    &lt;Height&gt;&lt;/Height&gt;
                    &lt;Width&gt;&lt;/Width&gt;
                    &lt;Text&gt;&lt;/Text&gt;
                    &lt;CssClass&gt;&lt;/CssClass&gt;
                    &lt;CSSLabelClass&gt;&lt;/CSSLabelClass&gt;
                    &lt;ID&gt;32&lt;/ID&gt;
                &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly.DefaultValue">
            <summary>
            Allows to set if it is checked or not by default.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COECheckBoxReadOnly.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal.HasPrivilege(System.String,System.String)">
            <summary>
            Method to check if the current user has the privileges set in the rolePrivs param. 
            </summary>
            <param name="rolePrivileges">The list of roles to check</param>
            <param name="logOperator">The Logical operator to apply</param>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchCriteriaService.OracleDataAccessClientDAL">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.SetServiceSpecificVariables">
            <summary>
            to get the name of the table
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.DeleteCOESearchCriteriaTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.CheckCOESearchCriteriaTableExists">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.CreateCOESearchCriteriaTable">
            <summary>
            Create empty COESearchCriteria table is not found in schema. 
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.GetNewID">
            <summary>
            Inserts a new record in the coedataview table and returns its unique id,
            </summary>
            <returns>the new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.Insert(System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            creates a new record in the coedataview table
            </summary>
            <param name="formgroup">the id of the formgroup</param>
            <param name="name">the name of the dataview</param>
            <param name="description">the description of the dataview</param>
            <param name="isPublic">whether the dataview is available as public</param>
            <param name="userId">the userid of the current user logged in</param>
            <param name="serializedCOESearchCriteria">the serialized/xml form of the coedataview object</param>
            <returns>the dataview id</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.Delete(System.Int32)">
            <summary>
            deletes a dataview record containing a coeSearchCriteria
            </summary>
            <param name="dataViewID">a dataview id</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.DeleteAll">
            <summary>
            empties the table in the database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.DeleteUserSearchCriteria(System.String)">
            <summary>
            deletes all dataviews for a user
            </summary>
            <param name="userName">the user name</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.GetUserSearchCriterias(System.String)">
            <summary>
            gets all dataview data for a user
            </summary>
            <param name="userName">the user name</param>
            <returns>a safedatareader containing all dataviews for a user </returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.GetAll(System.Boolean)">
            <summary>
            returns dataviews filtered by isPublic flag
            </summary>
            <param name="isPublic">whether the dataview is public or private</param>
            <returns>a safedatareader containing the dataviews</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.GetAll">
            <summary>
            get all dataviews
            </summary>
            <returns>a safedatareader containing the dataviews</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.Update(System.Int32,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            update a dataview
            </summary>
            <param name="dataViewId">dataviewid for which update in done</param>
            <param name="dataView">the updated xml form of the dataview</param>
            <param name="dataViewName">the updated name of the dataview</param>
            <param name="description">the updated description of the dataview</param>
            <param name="isPublic">whether the dataview is made public or not</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.DAL.Get(System.Int32)">
            <summary>
            get a dataview
            </summary>
            <param name="id">the id for the dataview</param>
            <returns>a safedatareader containing the dataview</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.OracleDataAccessClientDAL.GetNewID">
            <summary>
            to return the next id
            </summary>
            <param name="dataView"></param>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList">
            <summary>
            This class provides access to several generic objects at once.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.NewList(System.String)">
            <summary>
            Instanciates a new <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList"/> for a given database.
            </summary>
            <param name="databaseName">The database name.</param>
            <returns>The <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(System.String)">
            <summary>
            Gets the entire list of generic object previously saved in the database called <paramref name="databaseName"/>
            </summary>
            <param name="databaseName">The database name.</param>
            <returns>A <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList"/> with all generic objects saved.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(System.String,System.String)">
            <summary>
            Gets all the generic objecs of a given database for a particular user.
            </summary>
            <param name="databaseName">The database name</param>
            <param name="userName">The user</param>
            <returns>The <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList"/> with all the records for this user</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(System.String,System.String,System.Boolean)">
            <summary>
            Gets all the generic objects that are in the given database that matches the Is Public and User Name parameters.
            </summary>
            <param name="databaseName">The database name</param>
            <param name="userName">The user name</param>
            <param name="isPublic">A flag indicating if public records will be retrieved or not</param>
            <returns>The matching <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(System.String,System.String,System.Int32)">
            <summary>
            Gets all the generic objects that are in the given database that matches the User Name and Form Group parameters.
            </summary>
            <param name="databaseName">The database name</param>
            <param name="userName">The user name</param>
            <param name="formGroup">The form group id</param>
            <returns>The matching <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(System.String,System.Boolean,System.String)">
            <summary>
            Gets all the generic objects that are in the given database that matches the Is Public parameter, excludind the
            records owned by the given <paramref name="excludeUser"/>.
            </summary>
            <param name="databaseName">The database name</param>
            <param name="isPublic">A flag indicating if public records will be retrieved or not</param>
            <param name="excludeUser">The name of the user whose records will be excluded</param>
            <returns>The matching <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Gets all the generic objects that are in the given database that matches the User Name, Is Public and Form Group parameters.
            </summary>
            <param name="databaseName">The database name</param>
            <param name="userName">The user name</param>
            <param name="isPublic">A flag indicating if public records will be retrieved or not</param>
            <param name="formGroup">The form group id</param>
            <returns>The matching <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.CanAddObject">
            <summary>
            Determines if an object can be added.
            </summary>
            <returns>True if the object can be added, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.CanGetObject">
            <summary>
            Determines if an object can be retrieved.
            </summary>
            <returns>True if the object can be retrieved, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.CanEditObject">
            <summary>
            Determines if an object can be edited.
            </summary>
            <returns>True if the object can be edited, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.CanDeleteObject">
            <summary>
            Determines if an object can be deleted.
            </summary>
            <returns>True if the object can be deleted, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.SetServiceSpecificVariables">
            <summary>
            to get the name of the table
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.DeleteCOEFormTable">
            <summary>
            Delete the COEForm table
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.CheckCOEFormTableExists">
            <summary>
            Check if COEForm table exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.EnsureCOEFormTablesAndSequenceExists">
            <summary>
            Make sure that the COEFormTables and Sequence exist. Create if necessary
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.CreateCOEFormTable">
            <summary>
            Create empty COEForm table
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.GetNewID">
            <summary>
            Inserts a new record in the COEForm table and returns the id
            </summary>
            <returns>the new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.Insert(System.Int32,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            creates a new record in the coeform table
            </summary>
            <param name="name">the name of the form</param>
            <param name="description">the description of the form</param>
            <param name="isPublic">is form available to users other then the one that created it</param>
            <param name="userId">the user that is making the request</param>
            <param name="formgroup">the id of the formgroup</param>
            <param name="serializedCOEForm">the serialized/xml form of the coeform object</param>
            <returns>the form id</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.Delete(System.Int32)">
            <summary>
            deletes a form record containing a coeForm
            </summary>
            <param name="dataViewID">a form id</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.DeleteAll">
            <summary>
            empties the table in the database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.DeleteUserForm(System.String)">
            <summary>
            deletes all forms for a user
            </summary>
            <param name="userName">the user name</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.GetUserForms(System.String)">
            <summary>
            gets all form data for a user
            </summary>
            <param name="userName">the user name</param>
            <returns>a safedatareader containing all forms for a user </returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.GetAll(System.Boolean)">
            <summary>
            returns forms filtered by isPublic flag
            </summary>
            <param name="isPublic">whether the form is public or private</param>
            <returns>a safedatareader containing the forms</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.GetAll">
            <summary>
            get all forms
            </summary>
            <returns>a safedatareader containing the forms</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.Update(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            update a form
            </summary>
            <param name="id">id of form</param>
            <param name="serializedCOEForm">the updated xml form of the form</param>
            <param name="name">the updated name of the form</param>
            <param name="description">the updated description of the form</param>
            <param name="isPublic">whether the form is made internal or not</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.DAL.Get(System.Int32)">
            <summary>
            get a form
            </summary>
            <param name="id">the id for the form</param>
            <returns>a safedatareader containing the form</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.SystemDataSqlClientDAL.GetNewID">
            <summary>
            
            </summary>
            <param name="dataView"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.SystemDataOledbClientDAL.GetNewID">
            <summary>
            will get the new id by selecting max id from teh table DB_DATAVIEW_SEQ
            if the max id is 0 then will return the new id as 1 else will update the max id by 1 and wil
            return that id and also will update the DB_DATAVIEW_SEQ by the same value.
            </summary>
            <returns>the new id retrived</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfiguration.GetAllAppNamesInConfig">
            <summary>
            Command object for Retrieving all the AppNames reading from the configuration file that is associated with the framework located in  C:\Documents and Settings\All Users\Application Data\ChemOfficeEnterprise11 COEFrameworkConfig.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfiguration.GetAllDatabaseNamesInConfig">
            <summary>
            Command object for Retrieving all the AppNames reading from the configuration file that is associated with the framework located in  C:\Documents and Settings\All Users\Application Data\ChemOfficeEnterprise11 COEFrameworkConfig.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfiguration.GetAppByDatabase(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Command object for Retrieving all the AppNames reading from the configuration file that is associated with the framework located in  C:\Documents and Settings\All Users\Application Data\ChemOfficeEnterprise11 COEFrameworkConfig.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfiguration.GetDatabaseByDatabaseType(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Command object for Retrieving all the Database Names reading from the configuration file that is associated with the framework located in  
            C:\Documents and Settings\All Users\Application Data\ChemOfficeEnterprise11 COEFrameworkConfig.xml
            and having DBMSType same as passed as parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfiguration.GetDatabaseNameFromAppName(System.String)">
            <summary>
            Get the database associated with an application name
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfiguration.GetAllDatabaseNames(System.Boolean)">
            <summary>
            Get the databases available in the coeframeworkconfig. associated with an application name
            </summary>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.TypesConversor">
            <summary>
            Provides static methods to manipulate data types.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.TypesConversor.GetType(System.String)">
            <summary>
            Get a DbType from a string.
            </summary>
            <param name="type">The type as string.</param>
            <returns>The type as DbType.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.TypesConversor.IsNumeric(System.Data.DbType)">
            <summary>
            Utility method to know if a DBType is numeric or not.
            </summary>
            <param name="type">The DbType.</param>
            <returns>True if numeric, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.TypesConversor.IsText(System.Data.DbType)">
            <summary>
            Utility method to know if a DBType is Text or not.
            </summary>
            <param name="type">The DbType.</param>
            <returns>True if Text, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.TypesConversor.IsBoolean(System.Data.DbType)">
            <summary>
            Utility method to know if a DBType is Boolean or not.
            </summary>
            <param name="type">The DbType.</param>
            <returns>True if Boolean, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.TypesConversor.IsDate(System.Data.DbType)">
            <summary>
            Utility method to know if a DBType is Date or not.
            </summary>
            <param name="type">The DbType.</param>
            <returns>True if Date, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.TypesConversor.GetAbstractType(System.Data.DbType)">
            <summary>
            Returns the equivalent abstract type, given a DbType.
            </summary>
            <param name="concreteType">The DbType.</param>
            <returns>The abstract type.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim">
            <summary>
            <para>
            This class permits the user to insert its SQL clause textually, while sticking to the prepared statement overall design.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The WhereClauseIn class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>string Verbatim:</b> Represents Literal (or Verbatim) SQL text that the user wants to add to the query. Parameters must be incated by using the parameter marker</item>
            <item><b>List&lt;Value&gt; Parameters:</b>: represents the array values that will populate the query when executing, at a later stage (and a different subsystem).</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            The Field and the Values array are ignored in this implementation.
            This class is not guaranteed to be present in future implementations, as it poses high security problems (SQL Injection, etc.)
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            WhereClauseVerbatim target = new WhereClauseVerbatim();
            target.Verbatim = "myTable.MyField = ? AND myTable.MyOtherField = ?";
            target.Parameters = new List&lt;Value&gt;()
            target.Parameters.Add(new Value("12", System.Data.DbType.Int32));
            target.Parameters.Add(new Value("lelele", System.Data.DbType.String));
            Query.AddWhereClauseItem(clause)
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;searchCriteriaItem id="1" fieldid="1" tableid="1" modifier=""&gt;
            &lt;verbatimCriteria&gt;
            &lt;verbatim&gt;myTable.MyField = ? AND myTable.MyOtherField = ?&lt;/verbatim&gt;
            &lt;parameter&gt;12&lt;/parameter&gt;
            &lt;parameter&gt;lelele&lt;/parameter&gt;
            &lt;/verbatimCriteria&gt;
            &lt;/searchCriteriaItem&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following where clause statement:
            </para>
            <para>
            myTable.MyField = :0 AND myTable.MyOtherField = :1
            </para>
            <para>
            And will add the following parameters to the query parameter list:
            </para>
            <list type="bullet">
            <item>Value("12", DbType.Int32)</item>
            <item>Value("lelele", System.Data.DbType.String)</item>
            </list>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Gets the string representation of the verbatim clause for the given database, and adds the param values 
            to the values list.
            </summary>
            <param name="databaseType">The database to get the string for.</param>
            <param name="values">Already existent values of a query.</param>
            <returns>The string representation of the clause.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim.Verbatim">
            <summary>
            Gets or sets the verbatim value.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseVerbatim.Parameters">
            <summary>
            Gets or sets the list of parameters.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn">
             <summary>
             <para>
             This class implements a IN operator in a  SQL where clause. This Class is designed to handle lots of input, that’s why a temporary table strategy is used, if possible (in access this is not possible). Also, an approximated row count (cardinality) is calculated and inserted into the clause, for purposes of DBMS Query optimization.
             </para>
             <para>
             <b>Input</b>
             </para>
             <para>
             The WhereClauseIn class requires the following members to be initialized to the desired value:
             </para>
             <list type="bullet">
             <item><b>Field dataField</b> Represents the field of the database that is being compared. Its name and type are required.</item>
             <item><b>Value [] Values:</b> represents the array values against wich the dataField is being compared.</item>
             </list>
             <para>
             <b>Notes:</b>
             </para>
             <para>
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
             </para>
             <para>
             <b>Example:</b>
             </para>
             <b>Programatically:</b>
             <code lang="C#">
            WhereClauseIn target = new WhereClauseIn();
            	target.DataField = new Field();
            	target.DataField.FieldName = "MolId";
            	target.DataField.FieldType = DbType.Int32;
            	target.Values = new Value[3] { 
            	new Value("12", DbType.Int32), 
            	new Value("13", DbType.Int32), 
            	new Value("24", DbType.Int32) };
            	Query.AddWhereClauseItem(clause)
             </code>
             
             <b>With XML:</b>
             <code lang="XML">
            &lt;searchCriteriaItem id="1" fieldid="27" modifier="" tableid="6"&gt;
            	&lt;numericalCriteria operator="IN"&gt;12, 13, 14&lt;/numericalCriteria&gt;
            &lt;/searchCriteriaItem&gt;
             </code>
             <para>
             <b>Output</b>
             </para>
             <para>
             This code will produce the following where clause statement:
             </para>
             <para>
             MolId IN(
            		SELECT /*+ cardinality(t 10)*/ * 
            		FROM TABLE(CAST(STR2TBL(:1) as MYTABLETYPE)) t 
            		WHERE ROWNUM &gt;= 0)
             </para>
             <para>
             And will add the following parameters to the query parameter list:
             </para>
             <list type="bullet">
             <item>Value("12", DbType.Int32)</item>
            	 <item>Value("13", DbType.Int32)</item>
            	 <item>Value("24", DbType.Int32)</item>
             </list>
             </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Resolves the differences between databases to generate the string of Execute method..
            </summary>
            <remarks>Missing implementation for Access.</remarks>
            <returns>A string of the form: IN('value0', 'value1', ... , 'valueN') for the specific
            database.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn.TrimPosition">
            <summary>
            Determines if the value must be triimed, and where.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseIn.NormalizeChemicalName">
            <summary>
            Gets or sets if it is necessary to normalize the name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ConnStringType">
            <summary>
            Enumerate allowed connectrion string types. Allowed values are:
            <list type="bullet">
              <item>Proxy: Schema owner that uses logged in user for permissions</item>
              <item>Owner: Schema owner</item>
            </list>
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.ConnStringType.PROXY">
            <summary>Schema owner that uses logged in user for permissions</summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.ConnStringType.OWNER">
            <summary>schema owner</summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler">
            <summary>
            Configuration information for mapping select clauses with its implementing class
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.XmlNamespace">
            <summary>
            The xml namespace if applies.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.Mappings">
            <summary>
            Collection of Select clause to map.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMappingCollection">
            <summary>
            Class that represents a collection of select clause mapping
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMappingCollection.CreateNewElement">
            <summary>
            Creates a new xml data element.
            </summary>
            <returns>The configuration element.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets an element by its key.
            </summary>
            <param name="element">The element with the key.</param>
            <returns>A string with the element's name</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMappingCollection.Item(System.Int32)">
            <summary>
            Indexer for select clause mapping by its index
            </summary>
            <param name="index">The index</param>
            <returns>The <see cref="T:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMapping"/></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMappingCollection.Item(System.String)">
            <summary>
            Indexer for select clause mapping by its name
            </summary>
            <param name="index">The name</param>
            <returns>The <see cref="T:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMapping"/></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMapping">
            <summary>
            Class that maps a Select clause with its implementing class
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMapping.Name">
            <summary>
            Select clause's name
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SelectClassMappingsHandler.SelectClauseMapping.ParserClassName">
            <summary>
            Parser class' name for the select clause.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.SetServiceSpecificVariables(System.String)">
            <summary>
            to get/set the name of the table. This function need to be called by COETableEditorBOList in order to set the Table that has been selected by user.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.DeleteCOETableEditorTable">
            <summary>
            Delete the COETableEditor table
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.IsCDXField(System.String)">
            <summary>
            Checks if the passed parameter fieldName have BASE64 CDX data in it?
            </summary>
            <param name="fieldName">Field Name</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.CheckCOETableEditorTableExists">
            <summary>
            Check if COETableEditor table exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.EnsureCOETableEditorTablesAndSequenceExists">
            <summary>
            Make sure that the COETableEditorTables and Sequence exist. Create if necessary
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.GetNewID">
            <summary>
            Inserts a new record in the COETableEditor table and returns the id
            </summary>
            <returns>the new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.Insert(System.Collections.Generic.List{CambridgeSoft.COE.Framework.COETableEditorService.Column})">
            <summary>
            
            </summary>
            <param name="CList"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.Delete(System.Int32)">
            <summary>
            deletes a form record containing a COETableEditor
            </summary>
            <param name="dataViewID">a form id</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.DeleteAll">
            <summary>
            empties the table in the database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.GetAll">
            <summary>
            get all forms
            </summary>
            <returns>a safedatareader containing the forms</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.Update(System.Int32,System.Collections.Generic.List{CambridgeSoft.COE.Framework.COETableEditorService.Column})">
            <summary>
            Update 
            </summary>
            <param name="id">Id field of the Record</param>
            <param name="CList">List of Fields in the Record</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.DAL.Get(System.Int32)">
            <summary>
            get a form
            </summary>
            <param name="id">the id for the form</param>
            <returns>a safedatareader containing the form</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.OracleDataAccessClientDAL.GetNewID">
            <summary>
            to return the next id
            </summary>
            <returns>New Id that can be used to insert the record</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager">
            <summary>
            Control Class, This contains the complete description for the Control.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.#ctor">
            <summary>
            Constructor for the Control
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.CreateFormRestore(Infragistics.WebUI.UltraWebTab.Tab)">
            <summary>
            This method will draw the Restore Tab.
            </summary>
            <param name="tab">tabRestore tab would be passed as parameter</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.btn_Click(System.Object,Infragistics.WebUI.WebDataInput.ButtonEventArgs)">
            <summary>
            Restores the selected Hitlist:
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.CreateFormSave(Infragistics.WebUI.UltraWebTab.Tab)">
            <summary>
            This method would draw the Save Tab of the MainTab inside COEHitlistManager.
            </summary>
            <param name="tab">tabSave : as the input from CreateChildControls. </param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.CreateFormManage(Infragistics.WebUI.UltraWebTab.Tab)">
            <summary>
            This methods draws the Manage Tab control on tha tab.
            </summary>
            <param name="tab">tabManage: as the input from CreateChildControls</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.btnPerformOperation_Click(System.Object,Infragistics.WebUI.WebDataInput.ButtonEventArgs)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.btnEdit_Click(System.Object,Infragistics.WebUI.WebDataInput.ButtonEventArgs)">
            <summary>
            Saves the Edited Data inside the Selected Hitlist Object from the WebCombo inside Manage Tab.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.PopulateDataInManageSubTab(Infragistics.WebUI.UltraWebTab.Tab)">
            <summary>
            Populate the Edit and Delete tabs value.
            </summary>
            <param name="tab">Either of the Tab inside Manage Tab, Edit or Delete</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.PopulateSaveTab(Infragistics.WebUI.UltraWebTab.Tab)">
            <summary>
            Populates the Save Tab Fields with the CurrentHitlist Data.
            </summary>
            <param name="tab"></param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.CurrentTab">
            <summary>
            Currently Selected Main Tab .
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.SelectedHitlistManage">
            <summary>
            Maintain the selected Item from the Webcombo inside Manage Tab
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.AppName">
            <summary>
            Application Name that has been selected.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.CurrentHitListID">
            <summary>
            CurrentHitlistID, that is currently control is working on.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.CurrentHitListType">
            <summary>
            CurrentHitlistID, that is currently control is working on.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.ResolvedHitListID">
            <summary>
            ResolvedHitListID (Resolved Hitlist After operations), that is currently control is working on.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.ResolvedHitListType">
            <summary>
            ResolvedHitlistType (HitlistType of the Resolved Hitlist), that is currently control is working on.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.LastHitListID">
            <summary>
            LastHitListID (Hitlist that has been used before the current one), that is currently control is having.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.LastHitlistType">
            <summary>
            LastHitlistType (HitlistType of the Last Hitlist), that is currently control is having.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.RecordToManage">
            <summary>
            Manage tab can handle 2 type of records Either Saved (Can be selected from DropDown),
            or Current Record (select the CheckBox). This property keep track of that Record.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEHitlistManager.COEHitlistManager.eMode">
            <summary>
            Custom Enumeration to keep track of selected Tab.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorRepeater">
            <summary>
            <para>As a COEFormGeneratorRepeater it repeats a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/> based on a single form definition.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorRepeater.Update">
            <summary>
            <para>Triggers the update process over each formgenerator's datasource.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorRepeater.ToString">
            <summary>
            Overriden. Returns a string of the form: COEFormGeneratorRepeater - ID
            </summary>
            <returns>A string of the form: COEFormGeneratorRepeater - ID</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorRepeater.DisplayMode">
            <summary>
            The display mode that every repeated form will have.
            Allowed modes are:
            <list type="bullet">
                <item>Add Mode</item>
                <item>Edit Mode</item>
                <item>View Mode</item>
                <item>Query Mode</item>
            </list>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorRepeater.PageIndex">
            <summary>
            <para>Current page index. <remarks>Not implemented, always returns zero.</remarks></para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorRepeater.Visible">
            <summary>
            Gets or sets if the repeater is visible or not.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorRepeater.DataSourceID">
            <summary>
            <para>Sets the same datasourceid to each form generator.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEWebGrid.COEWebGrid.TargetDetailView">
            <summary>
            True after Postback
            </summary>
            
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.SearchManager">
            <summary>
            Class for managing tasks releated to Searching
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.BLLBase">
            <summary>
            Base class for Business Logic Layer
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.BLLBase.SecurityInfo">
            <summary>
            SecurityInfo object
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.BLLBase.Notifications">
            <summary>
            Error and warning notifications
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.BLLBase.ServiceName">
            <summary>
            Service name 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.BLLBase.AppName">
            <summary>
            App name 
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.#ctor">
            <summary>
            Default constructor for the Search Manager. This is used when
            instantiation via direct reference to this assembly
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.DoSearch(CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView,System.Boolean)">
            <summary>
            General purpose search method
            </summary>
            <param name="searchCriteria">object containing fields and criteria for search</param>
            <param name="resultsCriteria">object containing fields and criteria for returning results dataset</param>
            <param name="pagingInfo">object containing paging info for getting results from a cached search</param>
            <param name="dataView">object containing the data view or an id of it</param>
            <param name="directCall">boolen value indicating if this is a direct call or a remote one.</param>
            <returns>SearchResponse object made up of hitlist object, paging info object and dataset object. One or more of these objects might be null
            depending on the initial search</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.DoSearch(CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            General purpose search method
            </summary>
            <param name="searchCriteria">object containing fields and criteria for search, null searchCriteria will invoke a browse</param>
            <param name="resultsCriteria">object containing fields and criteria for returning results dataset</param>
            <param name="pagingInfo">object containing paging info for getting results from a cached search</param>
            <param name="dataView">object containing the data view or an id of it</param>
            <returns>SearchResponse object made up of hitlist object, paging info object and dataset object. One or more of these objects might be null
            depending on the initial search</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.DoGlobalSearch(CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView[])">
            <summary>
            Global search method
            </summary>
            <param name="searchCriteria">object containing fields and criteria for search, null searchCriteria will invoke a browse</param>
            <param name="resultsCriteria">object containing fields and criteria for returning results dataset</param>
            <param name="pagingInfo">object containing paging info for getting results from a cached search</param>
            <param name="dataView">array of dataview objects containing the databases(2) to search and the dataview to use</param>
            <returns>List of SearchResponse objects made up of hitlist object, paging info object and dataset object. One or more of these objects might be null
            depending on the initial search</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.GetGlobalSearchData(CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo[],CambridgeSoft.COE.Framework.Common.COEDataView[])">
            <summary>
            Global search Get Data
            </summary>
            <param name="resultsCriteria">object containing fields and criteria for returning results dataset</param>
            <param name="pagingInfo">an array of paging info one for each dataview </param>
            <param name="dataView">an array  of dataviews </param>
            <returns>List of DataSet containing results</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.GetFastRecordCount(CambridgeSoft.COE.Framework.Common.HitListInfo,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            Get row count
            </summary>
            <param name="hitListInfo">object containing hitlist info for getting results from a cached search</param>
            <param name="dataView">object containing the data view or an id of it</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.GetExactRecordCount(CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            Get exact row count
            </summary>
            <param name="dataView">object containing the data view </param>
            <returns>returns exact rowcount</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.GetData(CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            Search method for return dataset
            </summary>
            <param name="resultsCriteria">object containing fields and criteria for returning results dataset</param>
            <param name="pagingInfo">object containing paging info for getting results from a cached search</param>
            <param name="dataView">object containing the data view or an id of it</param>
            <returns>DataSet containing results</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.AddHitListTableToDataView(CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            Add hitlist table to dataview
            </summary>
            <param name="dataView"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.GetHitList(CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            Search method that performs a search and returns a hitlistInfo object
            </summary>
            <param name="searchCriteria">object containing query criteria</param>
            <param name="dataView">object containing the data view or an id of it</param>
            <returns>HitListInfo is an object containing hitlist info</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.AddPaging(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.DBMSType,CambridgeSoft.COE.Framework.Common.COEDataView)">
             <summary>
             Adds paging to the query when it is not a keep alive request.
             </summary>
             <param name="query">The query to add paging to.</param>
             <param name="pagingInfo">The object that has the paging info.</param>
             <param name="dbmsType">The underlying dbms.</param>
             <param name="dataview">The object that has table and relationship info</param>
             <returns>A query that has only a page as described in paging info.</returns>
            
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.InitKeepAlive(CambridgeSoft.COE.Framework.Common.KeepAliveModes)">
            <summary>
            Initializes variables related to paging modes.
            </summary>
            <param name="keepAliveModes">The keep alive mode.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.LoadDAL">
            <summary>
            Load the DAL
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.SearchManager.GetQualifiedFieldName(CambridgeSoft.COE.Framework.Common.COEDataView.DataViewTable,CambridgeSoft.COE.Framework.Common.COEDataView.Field)">
            <summary>
                Builds a string with the qualified field name by using either the 
                table alias or the table name.  The alias if used preferentially.
            </summary>
            <param name="table"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.SystemDataOledbClientDAL">
            <summary>
            Class for supporting Oledb based COEGenericObjectStorage Service.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.SystemDataOledbClientDAL.CreateCOEGenericObjectStorageTable">
            <summary>
            Creates an empty COEGenericObjectStorage table.
            </summary>
            <remarks>Method not implemented yet.</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.SystemDataOledbClientDAL.GetNewID">
            <summary>
            Gets the new available id to be used as id for a record in COEGenericObjectStorage.
            </summary>
            <returns>The new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.SetServiceSpecificVariables">
            <summary>
            to get the name of the table
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.CreateCOEDataViewTable">
            <summary>
            Create empty COEDataView table is not found in schema. 
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.DeleteCOEDataViewTable">
            <summary>
            Delete the COEDataViewTable
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.GetNewID">
            <summary>
            Inserts a new record in the coedataview table and returns its unique id,
            </summary>
            <returns>the new id generated</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.Insert(System.Int32,System.String,System.Boolean,System.String,System.String,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            creates a new record in the coedataview table
            </summary>
            <param name="formgroup">the id of the formgroup</param>
            <param name="name">the name of the dataview</param>
            <param name="description">the description of the dataview</param>
            <param name="isPublic">whether the dataview is available as public</param>
            <param name="userId">the userid of the current user logged in</param>
            <param name="serializedCOEDataView">the serialized/xml form of the coedataview object</param>
            <returns>the dataview id</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.Delete(System.Int32)">
            <summary>
            deletes a dataview record containing a coeDataView
            </summary>
            <param name="dataViewID">a dataview id</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.DeleteAll">
            <summary>
            empties the table in the database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.DeleteUserDataView(System.String)">
            <summary>
            deletes all dataviews for a user
            </summary>
            <param name="userName">the user name</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.GetUserDataViews(System.String)">
            <summary>
            gets all dataview data for a user
            </summary>
            <param name="userName">the user name</param>
            <returns>a safedatareader containing all dataviews for a user </returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.GetAll(System.Boolean)">
            <summary>
            returns dataviews filtered by isPublic flag
            </summary>
            <param name="isPublic">whether the dataview is public or private</param>
            <returns>a safedatareader containing the dataviews</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.GetAll(System.String)">
            <summary>
            gets all dataview for a user
            </summary>
            <param name="userName">the user name</param>
            <returns>a safedatareader containing all dataviews for a user </returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.GetAll">
            <summary>
            get all dataviews
            </summary>
            <returns>a safedatareader containing the dataviews</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.GetAllLightWeight">
            <summary>
            get all dataviews without getting the actual COEDATAVIEW object
            </summary>
            <returns>a safedatareader containing the dataviews</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.Update(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            update a dataview
            </summary>
            <param name="dataViewId">dataviewid for which update in done</param>
            <param name="dataView">the updated xml form of the dataview</param>
            <param name="dataViewName">the updated name of the dataview</param>
            <param name="description">the updated description of the dataview</param>
            <param name="isPublic">whether the dataview is made public or not</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.DAL.Get(System.Int32)">
            <summary>
            get a dataview
            </summary>
            <param name="id">the id for the dataview</param>
            <returns>a safedatareader containing the dataview</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.OracleDataAccessClientDAL.GetNewID">
            <summary>
            to return the next id
            </summary>
            <param name="dataView"></param>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula">
             <summary>
             <para>
             This class implements a FormulaContains operator, which is an Oracle depandant query. The query is of type "CartridgeSchema.FormulaContains(fld, formula, options)=1”.
             </para>
             <para>
             <b>Input</b>
             </para>
             <para>
             The WhereClauseFormula class required the following members to be initialized to the desired value:
             </para>
             <list type="bullet">
             <item>Field dataField: Represents the field of the database that is being compared. Its name and type are required.</item>
             <item>Value Val: represents the formula against which the dataField is being compared. Its value and type are required.</item>
             <item>bool FullWordSearch: flag that indicates whether it’s full or not. This is passed to options SQL parameter.</item>
             <item>String  CartridgeSchema: This should be the name of the schema for the Cs Cartridge. By default it is set to CsCartridge.</item>
             </list>
             <para>
             <b>Notes:</b>
             </para>
             <para>
             This implementation will work on Oracle database only and will throw an exception if other database is used.
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
             </para>
             <para>
             <b>Example:</b>
             </para>
             <b>Programatically:</b>
             <code lang="C#">
             WhereClauseFormula clause = new WhereClauseFormula();
             clause.DataField.FieldId = 20;
             clause.DataField.FieldName = "Base64_cdx";
             clause.DataField.FieldType = System.Data.DbType.VarBinary;
             clause.Val.Val = "c1ccccc1";
             clause.CartridgeSchema = "CSCARTRIDGE";
             Query.AddWhereClauseItem(clause);
             </code>
             
             <b>With XML:</b>
             <code lang="XML">
             &lt;searchCriteriaItem id=XX fieldid=20 modifier=’’ tableid=3&gt;
             	&lt;FormulaCriteria&gt;
             		&lt;CsCartridgeFormulaCriteria Full=’NO’&gt;c1ccccc1
             		&lt;/CsCartridgeFormulaCriteria&gt;
             	&lt;/FormulaCriteria&gt;
             &lt;searchCriteriaItem&gt;
             </code>
             <para>
             <b>Output</b>
             </para>
             <para>
             This code will produce the following where clause statement:
             </para>
             <para>
             [AND] (CSCARTRIDGE.FormulaContains(:1, :2, :3)=1);
             </para>
             <para>
             And will add the following parameters to the query parameter list:
             </para>
             <list type="bullet">
            		<item>Value(Base64_cdx, DataFieldtype.Text),</item>
            		<item>Value(c1ccccc1, DataFieldtype.Text),</item>
            		<item>Value(FULL=YES, DataFieldtype.Text)</item>
             </list>
             <para>
             <b>To Be Done:</b> There is no way to define the CartridgeSchema in the xml. We should extend the xml to allow for it.
             </para>
             </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Gets the string representation of the Where clause formula for the given database and adds
            its param values to the list of param values of the query that cames in "values".
            </summary>
            <param name="databaseType">The database te get the string for.</param>
            <param name="values">The existing param values of a query.</param>
            <returns>A string of the form: (CartridgeSchema.FormulaContains(:1, :2, :3)=1).</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula.FullWordSearch">
            <summary>
            Gets or sets if it is a full word search.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFormula.CartridgeSchema">
            <summary>
            Gets or sets the cartridge schema name.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation" -->
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation.clauses">
            <summary>
            The Select Clauses to be concatenated.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns the string representation of the Concatenation, to be inserted into a select clause.
            </summary>
            <param name="dataBaseType">The target database for wich the concatenation will be generated</param>
            <returns>a string containing the concatenation</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a new Instance based upon a xml represntation of the clause. 
            </summary>
            <param name="resultsXmlNode">The xml snippet containing the xml representation of the clause</param>
            <param name="dvnLookup">DataView Naming Lookup object used for translating identifiers to objects</param>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseConcatenation.Clauses">
            <summary>
            The Select Clauses to be concatenated.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query">
            <summary>
            The main class to represent a portable select statement.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.dataBaseType">
            <summary>
            The underlying database.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.where">
            <summary>
            The where part of a select statement.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.select">
            <summary>
            The returning fields/functions of a select statement.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.join">
            <summary>
            The join needed plus the from part of a select statement.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.AddWhereItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem)">
            <summary>
            Adds a where item to the query.
            </summary>
            <param name="item">The WhereClauseItem to add.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.RemoveWhereItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseItem)">
            <summary>
            Removes a where item from the query.
            </summary>
            <param name="item">The WhereClauseItem to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.RemoveWhereItem(System.Int32)">
            <summary>
            Removes a where item from the query.
            </summary>
            <param name="position">The position of the WhereClauseItem to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.AddSelectItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)">
            <summary>
            Adds a select item to the query.
            </summary>
            <param name="item">The SelectClauseItem to add.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.RemoveSelectItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)">
            <summary>
            Removes a select item from the query.
            </summary>
            <param name="item">The SelectClauseItem to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.RemoveSelectItem(System.Int32)">
            <summary>
            Removes a select item from the query.
            </summary>
            <param name="position">The position of the SelectClauseItem to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.AddJoinRelation(CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation)">
            <summary>
            Adds a join relation to the query.
            </summary>
            <param name="item">The Relation to add.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.RemoveJoinRelation(CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation)">
            <summary>
            Removes a join relation from the query.
            </summary>
            <param name="item">The Relation to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.RemoveJoinRelation(System.Int32)">
            <summary>
            Removes a join relation from the query.
            </summary>
            <param name="position">The position of the Relation to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.SetOrderByClause(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause)">
            <summary>
            Sets the order by clause.
            </summary>
            <param name="orderByClause">The order by clause.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.GetOrderByClause">
            <summary>
            Gets the list of order by clauses.
            </summary>
            <returns>The list of order by.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.AddOrderByItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem)">
            <summary>
            Adds an order by clause item to the query.
            </summary>
            <param name="item">The order by clause item.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.RemoveOrderByItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem)">
            <summary>
            Removes a select item from the query.
            </summary>
            <param name="item">The SelectClauseItem to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.RemoveOrderByItem(System.Int32)">
            <summary>
            Removes a select item from the query.
            </summary>
            <param name="position">The position of the SelectClauseItem to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.SetMainTable(CambridgeSoft.COE.Framework.Common.SqlGenerator.ISource)">
            <summary>
            Adds the main table to the query. This is the one that follows the FROM.
            </summary>
            <param name="mainSource">The name of the main table.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.GetMainTable">
            <summary>
            Gets the main table of the query.
            </summary>
            <returns>The main table.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.SetSelectClause(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause)">
            <summary>
            Sets the select clause.
            </summary>
            <param name="clause">The SelectClause.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.GetSelectClauseItems">
            <summary>
            Gets the list of select clauses.
            </summary>
            <returns>The list of select clauses.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.SetWhereClause(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereClause)">
            <summary>
            Sets the where clause.
            </summary>
            <param name="clause">The WhereClause</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.SetJoinClause(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.JoinClause)">
            <summary>
            Sets the join clause.
            </summary>
            <param name="clause">The JoinClause</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.ToString">
            <summary>
            Gets the string of the query for the underlying database.
            </summary>
            <returns>The query string.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.GetAlias">
            <summary>
            Gets the alias of the query.
            </summary>
            <returns>The alias or string.Empty.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.DataBaseType">
            <summary>
            To generate specific sql statements for each database, this property should be used.
            The list of supported database can be found in:
                <see cref="T:CambridgeSoft.COE.Framework.Common.DBMSType"/>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.MainTableID">
            <summary>
            the TableID for the main table in the query
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.ParamValues">
            <summary>
            Gets or sets the parameter values to use in prepared statements.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.ParameterHolder">
            <summary>
            The character to use in the resulting prepared statement for indicating a parameter position (i.e. the parameter holder).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.UseParametersByName">
            <summary>
            Indicates the way parameters are specified: 
            	if true parameters are specified by name (and an ordinal is appended to te character. ie ':1')
            	otherwise parameters are specified by position (and nothing is appended. ie ':')
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.Top">
            <summary>
            Determines how many records you want to retrive. If set to a value less equal than zero no restriction is applied.
            Its Default value is -1.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.Alias">
            <summary>
            Nested queries may have an alias, which is set here.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.EncloseInParenthesis">
            <summary>
            Determines whether enclose the resulting query in parenthesis or not. Default = true.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query.UseParameters">
            <summary>
            Determines whether produce a prepared statment (with parameter holders and actual parameters in the paramValues List), or a plain query.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorVertex">
            <summary>
            Custom Vertex class required for integrating QuickGraph Library.
            SQLGeneratorVertex contains the name of the table it represents.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorVertex.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorVertex.TableId">
            <summary>
            The name of the table that is represented by this vertex in the graph
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field">
            <summary>
            This class stores a field information.
            The logic for obtaining its string representation is implemented here.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.name">
            <summary>
            Name of the field. 
            Can be ignored if the field is used for storing a parameter for a sql function.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.orderbyname">
            <summary>
            DBType of the field. Used for producing the string representation of the field.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.table">
            <summary>
            The table related to the field.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.id">
            <summary>
            Its identifier.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.#ctor(System.Int32,System.String,System.Data.DbType)">
            <summary>
            Initializes its members to the desired values.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The field name</param>
            <param name="type">Its DbType</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes its members to the desired values.
            </summary>
            <param name="name">The field name.</param>
            <param name="type">Its DbType.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.#ctor(System.String,System.Data.DbType,CambridgeSoft.COE.Framework.Common.SqlGenerator.ISource)">
            <summary>
            Initializes its members to the desired values.
            </summary>
            <param name="name">The field name.</param>
            <param name="type">Its DbType.</param>
            <param name="parentTable">Its Parent Table.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.GetFullyQualifiedNameString">
            <summary>
            Gets the string representation of the field fully qualified name.
            </summary>
            <returns>A string cointaining the string representation of the name of the Field. 
            i.e. SPONSORS.SPONSORID</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.Equals(System.Object)">
            <summary>
            Two fields are equals if all of its members has the same values.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if they are equals false if not.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.op_Equality(CambridgeSoft.COE.Framework.Common.SqlGenerator.Field,CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)">
            <summary>
            Determines if two field are equal or not.
            </summary>
            <param name="left">Left member of the operation.</param>
            <param name="right">Right member of the operation.</param>
            <returns>True if equals, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.op_Inequality(CambridgeSoft.COE.Framework.Common.SqlGenerator.Field,CambridgeSoft.COE.Framework.Common.SqlGenerator.Field)">
            <summary>
            Determines if two field are different or not.
            </summary>
            <param name="left">Left member of the operation.</param>
            <param name="right">Right member of the operation.</param>
            <returns>True if defferents, false otherwise.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.FieldName">
            <summary>
            Name of the field. 
            Can be ignored if the field is used for storing a parameter for a sql function.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.OrderByIdName">
            <summary>
            DBType of the field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.FieldType">
            <summary>
            DBType of the field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.Table">
            <summary>
            The table related to the field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Field.FieldId">
            <summary>
            Gets or sets the identifier of the field.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria">
            <summary>
            Class that provides messaging capabilities to communicate some search criteria.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes the messaging type from its xml representation.
            </summary>
            <param name="doc">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.GetFromXML(System.Xml.XmlDocument)">
            <summary>
            Loads itself from an xml representation of the object.
            </summary>
            <param name="xmlSearchCriteria">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.GetFromXML(System.String)">
            <summary>
            Fills the search criteria object from it's xml representation contained in a string.
            </summary>
            <param name="xmlSearchCriteria">The string containing the search criteria xml representation</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.ToString">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.Items">
            <summary>
            The list of criterium.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.XmlNS">
            <summary>
            Xml Namespace.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaID">
            <summary>
            Unique identifier of the search criteria.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem">
            <summary>
            A particular search criterium.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem.ToString">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem.FieldId">
            <summary>
            The field id that is going to be used in this criterium. This is related to the COEDataView type.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem.ID">
            <summary>
            Unique identifier of the criterium.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem.Modifier">
            <summary>
            Modifier is currently unused.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem.TableId">
            <summary>
            The table id that is going to be used in this criterium. This is related to the COEDataView type.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem.Criterium">
            <summary>
            The actual criterium to be applied to the choosen field.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.ISearchCriteriaBase">
            <summary>
            Base type for an specific criterium.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.ISearchCriteriaBase.GenerateXmlSnippet">
            <summary>
            Method intended to build its xml string representation.
            </summary>
            <returns>Its xml string representation</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria">
            <summary>
            Class for querying in text mode.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes the text criteria from its xml representation.
            </summary>
            <param name="node">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            <para>Default values are:</para>
            <para>operation = Greater Than Equal</para>
            <para>trim = None</para>
            <para>caseSensitive = Yes</para>
            <para>fullWordSearch = No</para>
            <para>hillFormula = No</para>
            <para>normalizedChemicalName = No</para>
            <para>innerText = Empty string</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.GenerateXmlSnippet">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.NormalizedChemicalName">
            <summary>
            Gets or sets if the query must normalize a chemical name. (Currently not implemented)
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.HillFormula">
            <summary>
            Gets or sets if this search is about a hill formula.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.FullWordSearch">
            <summary>
            Gets or sets if only full word search matches must be returned.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.CaseSensitive">
            <summary>
            Gets or sets if the query must be case sensitive.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.Trim">
            <summary>
            Determines where trim must be applied.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.Operator">
            <summary>
            Determines which is the operator of the search.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.TextCriteria.InnerText">
            <summary>
            The value to compare to.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.NumericalCriteria">
            <summary>
            Class for querying in numerical mode.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.NumericalCriteria.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes the numerical criteria from its xml representation.
            </summary>
            <param name="node">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.NumericalCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            <para>Default values are:</para>
            <para>operation = Greater Than Equal</para>
            <para>trim = None</para>
            <para>innerText = 0</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.NumericalCriteria.GenerateXmlSnippet">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.NumericalCriteria.Trim">
            <summary>
            Determines where trim must be applied.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.NumericalCriteria.Operator">
            <summary>
            Determines which is the operator of the search.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.NumericalCriteria.InnerText">
            <summary>
            The value to compare to.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.DateCriteria">
            <summary>
            Class for querying in date mode.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.DateCriteria.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes the date criteria from its xml representation.
            </summary>
            <param name="node">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.DateCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            <para>Default values are:</para>
            <para>operation = Greater Than Equal</para>
            <para>innerText = 01/01/2006</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.DateCriteria.GenerateXmlSnippet">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.DateCriteria.Operator">
            <summary>
            Determines which is the operator of the search.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.DateCriteria.InnerText">
            <summary>
            The value to compare to.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.MolWeightCriteria">
            <summary>
            Class for querying chemical mol weights.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.MolWeightCriteria.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes the mol weight criteria from its xml representation.
            </summary>
            <param name="node">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.MolWeightCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            <para>Default values are:</para>
            <para>min = 0</para>
            <para>max = 100</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.MolWeightCriteria.GenerateXmlSnippet">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.MolWeightCriteria.Implementation">
            <summary>
            Allowed values are: CsCartridge and MolServer.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.MolWeightCriteria.Max">
            <summary>
            Upper limit.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.MolWeightCriteria.Min">
            <summary>
            Lower limit.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.FormulaCriteria">
            <summary>
            Class for querying Formulas.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.FormulaCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            <para>Default values are:</para>
            <para>implementation = Empty string</para>
            <para>formula = Empty string</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.FormulaCriteria.#ctor(System.String,System.String)">
            <summary>
            Initializes its members with the desired values.
            </summary>
            <param name="formula">The value to compare to.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.FormulaCriteria.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes the formula criteria from its xml representation.
            </summary>
            <param name="node">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.FormulaCriteria.GenerateXmlSnippet">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.FormulaCriteria.Formula">
            <summary>
            The value to compare to.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.FormulaCriteria.Implementation">
            <summary>
            Allowed values are: CsCartridge and MolServer.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria">
            <summary>
            Class for querying molecular structures.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            Default values are:
            <para>implementation: Empty string.</para>
            <para>cartridgeSchema: Empty string.</para>
            <para>absoluteHitsRel: No.</para>
            <para>relativeTetStereo: No.</para>
            <para>tetrahedralStereo: Yes.</para>
            <para>simThreshold: 100.</para>
            <para>reactionCenter: Yes.</para>
            <para>fullSearch: No.</para>
            <para>tautometer: No.</para>
            <para>fragmentsOverlap: No.</para>
            <para>permitExtraneousFragmentsIfRXN: No.</para>
            <para>permitExtraneousFragments: No.</para>
            <para>doubleBondStereo: Yes.</para>
            <para>hitAnyChargeHetero: Yes.</para>
            <para>identity: No.</para>
            <para>hitAnyChargeCarbon: Yes.</para>
            <para>similar: No.</para>
            <para>format: base64cdx.</para>
            <para>structure: Empty string.</para>
            <para>query8000: Empty string.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes the structure criteria from its xml representation.
            </summary>
            <param name="node">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.GenerateXmlSnippet">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.CartridgeSchema">
            <summary>
            Cartridge schema is set based on configuration.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.Implementation">
            <summary>
            Allowed values are: CsCartridge and MolServer.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.Format">
            <summary>
            Describes in which format comes the structure.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.AbsoluteHitsRel">
            <summary>
            Gets or sets if absolute hits or not. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.RelativeTetStereo">
            <summary>
            Gets or sets if relative tet stereo. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.ReactionCenter">
            <summary>
            Gets or sets if reaction search can match only reaction centers. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.FullSearch">
            <summary>
            Gets or sets if it will be a full structure search. Default is substructure search.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.Tautometer">
            <summary>
            Gets or sets if tautometer. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.FragmentsOverlap">
            <summary>
            Gets or sets if fragments can overlap. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.PermitExtraneousFragmentsIfRXN">
            <summary>
            Gets or sets if permit extraneous fragments. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.PermitExtraneousFragments">
            <summary>
            Gets or sets if permit extraneous fragments. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.DoubleBondStereo">
            <summary>
            Gets or sets if double bond stereo matching. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.HitAnyChargeHetero">
            <summary>
            Gets or sets if hit any charged hetero atom. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.Identity">
            <summary>
            Gets or sets if identity matching. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.HitAnyChargeCarbon">
            <summary>
            Gets or sets if hit any charged carbon. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.Similar">
            <summary>
            Gets or sets if similarity search. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.SimThreshold">
            <summary>
            Gets or sets the similarity percentage. It is taken into account when SIMILAR=YES is set as well, 
            otherwise disregarded. Default value (used if it is omitted) is 90 percent.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.TetrahedralStereo">
            <summary>
            Gets or sets the tetrahedral stereo matching. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.Query8000">
            <summary>
            Query8000 is the first 4000 characters of the query string. The query string can be an encoded CDX document, a SMILES string, or a MolFile. For more information about these formats, please see DDL Considerations. The Oracle server limits the size of string literals to 4000 characters. 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.Structure">
            <summary>
            The structure to compare to.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.StructureCriteria.Query4000">
            <summary>
            Query4000 is the first 4000 characters of the query string. The query string can be an encoded CDX document, a SMILES string, or a MolFile. For more information about these formats, please see DDL Considerations. The Oracle server limits the size of string literals to 4000 characters. 
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.DomainCriteria">
            <summary>
            Class for querying over an existing hitlist mode.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.DomainCriteria.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes the domain criteria from its xml representation.
            </summary>
            <param name="node">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.DomainCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            <para>Default values are:</para>
            <para>innerText = string.empty</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchCriteria.DomainCriteria.GenerateXmlSnippet">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>Its xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchCriteria.DomainCriteria.InnerText">
            <summary>
            The value to compare to.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators">
            <summary>
             List of Supported Comparison Operators for using with Where Clause Items.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.GT">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.GTE">
            <summary>
            Greater or equal than.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.LT">
            <summary>
            Lower than.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.LTE">
            <summary>
            Lower or equal than.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.EQUAL">
            <summary>
            Equal than.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.NOTEQUAL">
            <summary>
            Not equal than.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.LIKE">
            <summary>
            Like.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.IN">
            <summary>
            In.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators.NOTIN">
            <summary>
            In.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEBoolean">
            <summary>
            COE Boolean class using yes-no instead of true-false.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEBoolean.Yes">
            <summary>
            Yes.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.COEBoolean.No">
            <summary>
            No.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching">
            <summary>
            Allowed values for tetrahedral stereo matching when searching:
            <list type="bullet">
              <item>Yes</item>
              <item>No</item>
              <item>Same</item>
              <item>Either</item>
              <item>Any</item>
            </list>
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching.Yes">
            <summary>
            Yes.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching.No">
            <summary>
            No.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching.Same">
            <summary>
            Same.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching.Either">
            <summary>
            Either.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions">
            <summary>
            Used in commands like WhereClauseLike to determine where to apply the wildcards. 
            Also specifies trim side.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions.Left">
            <summary>
            Wildcard will be applied at the left side.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions.Right">
            <summary>
            Wildcard will be applied at the right side.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions.Both">
            <summary>
            Wildcard will be applied both sides (left AND right).
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions.None">
            <summary>
            There will be no wildcard.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria">
            ResultsCriteria
            <summary>
            Class that provides messaging capabilities to communicate some result criteria.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initialies its members from its xml representation.
            </summary>
            <param name="doc">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.GetFromXML(System.Xml.XmlDocument)">
            <summary>
            Load its members from its xml representation.
            </summary>
            <param name="xmlResultsCriteria">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.GetFromXML(System.String)">
            <summary>
            Fills the result criteria object from it's xml representation contained in a string.
            </summary>
            <param name="xmlResultsCriteria">The string containing the result criteria xml representation</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToString">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Add(CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable)">
            <summary>
            Adds a Table to the collection.
            </summary>
            <param name="table">The table to add.</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Tables">
            <summary>
            The list of tables to be retrieved.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.XmlNS">
            <summary>
            The xml namespace.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable">
            Table
            <summary>
            A table to be get in a search.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation of the table.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable.ToString">
            <summary>
            Builds and xml string representation of the table.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable.Id">
            <summary>
            An unique identifier of the table.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable.Criterias">
            <summary>
            The list of returning operators for this table.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.IResultsCriteriaBase">
            IResultsCriteriaBase
            <summary>
            Base abstract class for each result criterium.
            </summary>
               
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.IResultsCriteriaBase.GenerateXmlSnippet">
            <summary>
            Method intended to build the xml string representation of the criterium.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field">
            Field
            <summary>
            Represents a single field in database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field.#ctor(System.Int32)">
            <summary>
            Accepts the fieldId as parameter
            </summary>
            <param name="id">A fieldId that points to a field in a dataview</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the field.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field.Id">
            <summary>
            The field id in dataview to be get.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field.Alias">
            <summary>
            The desired alias of the returning field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field.OrderById">
            <summary>
            If ordering by this field is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Field.Direction">
            <summary>
            If ordering by this field is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Literal">
            Literal
            <summary>
            Represents a returning literal.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Literal.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Literal.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Literal.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the literal.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Literal.LiteralValue">
            <summary>
            The literal to be displayed.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Literal.Alias">
            <summary>
            Sets or gets the alias of the literal.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Literal.OrderById">
            <summary>
            If ordering by this literal is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Literal.Direction">
            <summary>
            If ordering by this literal is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Concatenation">
            Concatenation
            <summary>
            Represents a concatenation of several ResultCriteriaItems.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Concatenation.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Concatenation.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor that instanciates a new concatenation criteria based upon it's xml representation.
            </summary>
            <param name="node">The xml representation of the concatenation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Concatenation.GenerateXmlSnippet">
            <summary>
            Builds the xml representation of the concatenation.
            </summary>
            <returns>The xml representation of the criteria contained into a string.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Concatenation.Operands">
            <summary>
            The result criteria to concatenate.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Concatenation.Alias">
            <summary>
            The alias of the concatenation.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Concatenation.OrderById">
            <summary>
            If ordering by this concatenation is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Concatenation.Direction">
            <summary>
            If ordering by this concatenation is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition">
            Condition
            <summary>
            Represents the condition for a switch criterium.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the Condition.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.Alias">
            <summary>
            The alias of the condition.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.Value">
            <summary>
            The value to compare to, that determines if this case applies. If the clause equals this value, then the corresponding conditional is used.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.OrderById">
            <summary>
            If ordering by this condition is wanted (in the ORDER BY clause), here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.Direction">
            <summary>
            If ordering by this condition is wanted (in the ORDER BY clause), you may set if is ascending or descending.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.Conditional">
            <summary>
            The Result criteria used if the corresponding value matches.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Condition.IsDefault">
            <summary>
            Determines if this is the default case.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch">
            Switch
            <summary>
            Represents a switch operator.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the switch.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.Alias">
            <summary>
            The alias of the whole switch operator.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.OrderById">
            <summary>
            If ordering by this switch is wanted (in the ORDER BY clause), here it must be set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.Direction">
            <summary>
            If ordering by this switch is wanted (in the ORDER BY clause), you may set if is ascending or descending.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.Clause">
            <summary>
            The clause used to determine which condition applies. Analog to switch(clause) in C# or C++.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.Conditions">
            <summary>
            The list of ResultsCriteria.Condition used for representing "case" (as in C# or C++) statements.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Switch.InputType">
            <summary>
            The input type.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.MolWeight">
            MolWeight
            <summary>
            Represents a mol weight returning operator.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.MolWeight.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.MolWeight.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.MolWeight.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the molweight.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.MolWeight.Id">
            <summary>
            The field id in dataview that contains the molecule structure.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.MolWeight.Alias">
            <summary>
            The alias of the mol weight.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.MolWeight.OrderById">
            <summary>
            If ordering by this molweight is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.MolWeight.Direction">
            <summary>
            If ordering by this molweight is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Formula">
            Formula
            <summary>
            Represents a formula returning operator.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Formula.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Formula.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Formula.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the formula.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Formula.Id">
            <summary>
            The field id in dataview that contains the molecule structure.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Formula.Alias">
            <summary>
            The alias of the formula.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Formula.OrderById">
            <summary>
            If ordering by this formula is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Formula.Direction">
            <summary>
            If ordering by this formula is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CDXToMolFile">
            cdxToMolFile
            <summary>
            Represents a cdxToMolFile returning operator.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CDXToMolFile.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CDXToMolFile.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CDXToMolFile.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the molweight.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CDXToMolFile.Id">
            <summary>
            The field id in dataview that contains the molecule structure.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CDXToMolFile.Alias">
            <summary>
            The alias of the CDXToMolFile.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CDXToMolFile.OrderById">
            <summary>
            If ordering by this CDXToMolFile is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CDXToMolFile.Direction">
            <summary>
            If ordering by this CDXToMolFile is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CustomCriteria">
            Custom Criteria: 
             <summary>
             Represents a custom criteria
             </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CustomCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CustomCriteria.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes the Criteria with the outer xml of the node.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CustomCriteria.GenerateXmlSnippet">
            <summary>
            Builds its xml string representation.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.CustomCriteria.Criteria">
            <summary>
            Whichever xml that a third party add in recongnizes.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction">
            Function: 
             <summary>
             Represents a function criteria
             </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor that instanciates a new function criteria based upon it's xml representation.
            </summary>
            <param name="node">The xml representation of the function.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction.GenerateXmlSnippet">
            <summary>
            Builds the xml representation of the concatenation.
            </summary>
            <returns>The xml representation of the criteria contained into a string.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction.Parameters">
            <summary>
            The result criteria to concatenate.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction.FunctionName">
            <summary>
            The name of the function.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction.Alias">
            <summary>
            The alias of the function.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction.OrderById">
            <summary>
            If ordering  is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SQLFunction.Direction">
            <summary>
            If ordering by this function is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase">
            LowerCase function
            <summary>
            Represents a LowerCase function on a single field in database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase.#ctor(System.Int32)">
            <summary>
            Accepts the fieldId as parameter
            </summary>
            <param name="id">A fieldId that points to a field in a dataview</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the field.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase.Id">
            <summary>
            The field id in dataview to be get.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase.Alias">
            <summary>
            The desired alias of the returning field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase.OrderById">
            <summary>
            If ordering by this field is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.LowerCase.Direction">
            <summary>
            If ordering by this field is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate">
            LowerCase function
            <summary>
            Represents a LowerCase function on a single field in database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate.#ctor(System.Int32,System.String)">
            <summary>
            Accepts the fieldId as parameter
            </summary>
            <param name="id">A fieldId that points to a field in a dataview</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the field.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate.Id">
            <summary>
            The field id in dataview to be get.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate.Alias">
            <summary>
            The desired alias of the returning field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate.OrderById">
            <summary>
            If ordering by this field is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ToDate.Direction">
            <summary>
            If ordering by this field is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction">
            AggregateFunction: 
             <summary>
             Represents a AggregateFunction criteria
             </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor that instanciates a new function criteria based upon it's xml representation.
            </summary>
            <param name="node">The xml representation of the function.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction.GenerateXmlSnippet">
            <summary>
            Builds the xml representation of the concatenation.
            </summary>
            <returns>The xml representation of the criteria contained into a string.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction.Parameters">
            <summary>
            The result criteria that are parameters for the aggregate function.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction.FunctionName">
            <summary>
            The name of the function.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction.Alias">
            <summary>
            The alias of the function.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction.OrderById">
            <summary>
            If ordering  is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.AggregateFunction.Direction">
            <summary>
            If ordering by this function is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max">
            Max aggregate function
            <summary>
            Represents a Max aggregate function on a single field in database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max.#ctor(System.Int32)">
            <summary>
            Accepts the fieldId as parameter
            </summary>
            <param name="id">A fieldId that points to a field in a dataview</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the field.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max.Id">
            <summary>
            The field id in dataview to be get.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max.Alias">
            <summary>
            The desired alias of the returning field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max.OrderById">
            <summary>
            If ordering by this field is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Max.Direction">
            <summary>
            If ordering by this field is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min">
            Min aggregate function
            <summary>
            Represents a Min aggregate function on a single field in database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min.#ctor(System.Int32)">
            <summary>
            Accepts the fieldId as parameter
            </summary>
            <param name="id">A fieldId that points to a field in a dataview</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the field.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min.Id">
            <summary>
            The field id in dataview to be get.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min.Alias">
            <summary>
            The desired alias of the returning field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min.OrderById">
            <summary>
            If ordering by this field is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Min.Direction">
            <summary>
            If ordering by this field is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg">
            Avg aggregate function
            <summary>
            Represents a Avg aggregate function on a single field in database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg.#ctor(System.Int32)">
            <summary>
            Accepts the fieldId as parameter
            </summary>
            <param name="id">A fieldId that points to a field in a dataview</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="node">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg.GenerateXmlSnippet">
            <summary>
            Builds and xml string representation of the field.
            </summary>
            <returns>The xml string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg.Id">
            <summary>
            The field id in dataview to be get.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg.Alias">
            <summary>
            The desired alias of the returning field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg.OrderById">
            <summary>
            If ordering by this field is wanted, here it must me set which is its importance between other ordered criteria.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ResultsCriteria.Avg.Direction">
            <summary>
            If ordering by this field is wanted, you may set if is ascending or descending.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaBuilder">
            <summary>
            Builds a proper ResultCriteria item from an xml representation.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaBuilder.BuildCriteria(System.Xml.XmlNode)">
            <summary>
            Builds a proper ResultCriteria item from an xml representation.
            </summary>
            <param name="criteriaNode">The xml node.</param>
            <returns>An IResultsCriteriaBase built with the proper subclass.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SortDirection">
            <summary>
            Represents the ways of sorting.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SortDirection.ASC">
            <summary>
            Ascending sorting.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.ResultsCriteria.SortDirection.DESC">
            <summary>
            Descending sorting.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSStrucSearchType">
            <summary>
            Types of searches available against MolServer.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSStrucSearchType.Exact">
            <summary>
            An exact search.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSStrucSearchType.Substructure">
            <summary>
            A search by substructure.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSStrucSearchType.Similarity">
            <summary>
            A search by similarity.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSStrucSearchType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType">
            <summary>
            Supported FieldTypes
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType.CSFDFormula">
            <summary>
            Formula in IUPAC standard notation.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType.CSFDMolWt">
            <summary>
            Molecular weight.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType.CSFDSmiles">
            <summary>
            Simple structure notation.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType.CSFDStructure">
            <summary>
            Full structure.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType.CSFDStructFile">
            <summary>
            A file with a Structure.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType.CSFDBase64Cdx">
            <summary>
            A cdx coded in Base64.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType.CSFDRelational">
            <summary>
            A realtional field.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSFieldType.CSFDUnknown">
            <summary>
            Others.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DALUtils">
            <summary>
            Common Data Access Logic utils.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALUtils.GetDALManager(CambridgeSoft.COE.Framework.Common.DatabaseData,CambridgeSoft.COE.Framework.Common.ServiceData,CambridgeSoft.COE.Framework.Common.ConnStringType)">
            <summary>
            <para>Gets a <see cref="T:CambridgeSoft.COE.Framework.Common.DALManager"/> based on the configuration.</para>
            </summary>
            <param name="databaseData">Database configuration section</param>
            <param name="serviceData">Service configuration section</param>
            <param name="connStringType">Connection string type</param>
            <returns>A <see cref="T:CambridgeSoft.COE.Framework.Common.DALManager"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALUtils.GetConnString(CambridgeSoft.COE.Framework.Common.DatabaseData,CambridgeSoft.COE.Framework.Common.ConnStringType)">
            <summary>
            Build a connection string for calling the datastore
            </summary>
            <param name="databaseData">Database configuration section</param>
            <param name="connStringType">Connection string type</param>
            <returns>The connection string</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALUtils.AddCredentials(System.String,System.String,System.String,CambridgeSoft.COE.Framework.Common.ConnStringType)">
            <summary>
            Adds credentials to the connection string.
            </summary>
            <param name="providerName">Fully calified class name of the data access provider</param>
            <param name="userName">The user name</param>
            <param name="password">The password</param>
            <param name="connStringType">The connection string type</param>
            <returns>The connection string with the added credentials</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALUtils.AddDataSource(System.String,System.String)">
            <summary>
            Adds a datasource to the connection string
            </summary>
            <param name="dataSource">The datasource name</param>
            <param name="connString">The connection string without datasource</param>
            <returns>The connection string with the added datasource</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALUtils.AddProviderOptions(System.String,System.String)">
            <summary>
            Adds specific provider options to the connection string
            </summary>
            <param name="providerOptions">The provider options</param>
            <param name="connString">The connection string</param>
            <returns>The connection string with the added provider options</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.TableEditorData">
            <summary>
            This class defines the configuration data for the TableEditor's each Element that has been added inside each application
            properties can be added as needed. Each propery will be added to the add element in the TableEditor parent element
            <code lang="Xml">
            &lt;application name="SAMPLE"&gt;   
                &lt;TableEditor&gt;
                    &lt;add name="Project"&gt;
                        &lt;TableEditorData&gt;
                                &lt;add name"ID" dataType="Int" LookupField="Table.Field"&gt;
                        &lt;/TableEditorData&gt;
                    &lt;/add&gt;
                &lt;/TableEditor&gt;
            &lt;/application&gt;
            </code>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.TableEditorData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.TableEditorData"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CambridgeSoft.COE.Framework.Common.TableEditorData.Name" -->
        <!-- Badly formed XML comment ignored for member "P:CambridgeSoft.COE.Framework.Common.TableEditorData.LookupField" -->
        <!-- Badly formed XML comment ignored for member "P:CambridgeSoft.COE.Framework.Common.TableEditorData.LookupID" -->
        <member name="P:CambridgeSoft.COE.Framework.Common.TableEditorData.DataType">
            <summary>
            Data type of the Column (<see cref="T:CambridgeSoft.COE.Framework.Common.TableEditorData"/>)
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.COEExport.#ctor">
            <summary>
            Service for converting dataset to alternate data format
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.COEExport.GetData(CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView,System.String)">
            <summary>
            Main method for COEExport 
            </summary>
            <param name="resultsCriteria">Results Criteria indicating fields and their types</param>
            <param name="pagingInfo">the part of the dataset to return</param>
            <param name="dataView">Dataview object describing the tables, fields and relationships to used.</param>
            <param name="exportType">Type of export format type</param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.COEExport.GetFormatterTypesList">
            <summary>
            Returns a list of available formmatters found in the COEFrameworkConfig file
            </summary>
            <returns>List of formats types as  string</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorBOList.GetLookupFieldList(System.Int32,System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorBOList.GetID_columnList">
            <summary>
            Fetches the list of ID_Column pairs that need to be resolved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorBOList.getLookupField(System.String,System.String)">
            <summary>
            to have the FieldName that has come as the resolution of the current Field.
            </summary>
            <param name="FieldName">FieldName that need to be resolved</param>
            <returns>Resolved Field name after lookup</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorBOList.getLookupID(System.String)">
            <summary>
            The Foriegn Key ID field in the lookup Table.
            Sumeet: I don't think this would be ever used in the client application but I adding for the future scope.
            </summary>
            <param name="FieldName">FieldName that need to be resolved</param>
            <returns>Resolved Field name after lookup</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorBOList.LoadDAL(System.String)">
            <summary>
            Overloaded method of the LoadDAL, 
            </summary>
            <param name="appName">Name of the Application, It should be one from the provided in the Configuration.</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorBOList.TableName">
            <summary>
            Would set the TableName for the complete References.
            </summary>
            <param name="tableName">TableName need to be set after selection by the user</param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COETableEditorService.ID_Column">
            <summary>
            Class to represent ID with Anyother field/Column of the Record. Its object can be 
            used inside the combobox of the TableEditor Control.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COETableEditorService.GetColumn">
            <summary>
            Predicate column so that the Columns Property can be searched for the Particular column.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.SpecialCharacters">
            <summary>
            Provides translation for different special characters between diferent RDBMS
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Utils.SpecialCharacters.GetParameterSeparatorChar(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns the character used by a database for parametrized queries.
            </summary>
            <param name="dataBaseType">The underlying database.</param>
            <returns>The charachter that is used for parameters.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseUnaryOperation">
            <summary>
            A representation of an unary operation to be applied in the where clause of a select.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseUnaryOperation.dataValue">
            <summary>
            The value to apply the operation. If a field is represented we recommend using 
            fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseUnaryOperation.DataValue">
            <summary>
            The value to apply the operation. If a field is represented we recommend using 
            fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan">
            <summary>
            <para>
            This class implements a less than comparison operator, "&lt;" or "&lt;=", in a  SQL where clause.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The WhereClauseLessThan class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field dataField:</b> Represents the field of the database that is being compared. Its name and type are required.</item>
            <item><b>Value Val:</b> represents the value against wich the dataField is being compared. Its value and type are required. The type of the field can differ from the type of the value.</item>
            <item><b>bool LessEqual:</b> flag that indicates whether it’s &lt; or &lt;=.</item>
            <item><b>bool CaseSensitive:</b> flag that indicates whether take into account casing or not.</item>
            <item><b>Position TrimPosition:</b> flag that indicates how to perform the trim of value. Posible Values: Left, Right, Both, None.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            The WhereClause decides whether it’s TextCriteria, NumericalCriteria, etc. based upon the Val Value field.
            This Where Clause can take into account casing and can perform trim of the input value. 
            </para>
            <para>
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            WhereClauseLessThan target = new WhereClauseLessThan();
            target.DataField = new Field();
            target.DataField.FieldName = "Formula";
            target.DataField.FieldType = DbType.String;
            target.Val = new Value("C1CCCC1", DbType.String);
            target.TrimPosition = Positions.Both;
            target.CaseSensitive = false;
            Query.AddWhereClauseItem(clause);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;structureCriteriaItem id=XX fieldid=21 modifier='' tableid=3&gt;
            	&lt;textCriteria operator='LTE' trim='BOTH' caseSensitive='NO'&gt;00012.0000
            	&lt;/textCriteria&gt;
            &lt;/structureCriteriaItem&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following where clause statement:
            </para>
            <para>
            [AND] (Formula &lt; :0)
            </para>
            <para>
            And will add the following parameters to the query parameter list:
            </para>
            <list type="bullet">
            <item>Value(C1CCCC1, DataFieldtype.Text)</item>
            </list>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Encapsulates different sintaxis for the underlying RDBMS. If the equal will be case insensitive,
            then a lower is applied to the field and the value is lowered too.
            </summary>
            <exception cref="T:System.Exception">Thrown when the data type is not Text</exception>
            <returns>A string for the underlying RDBMS, in the form of: FieldName <!--<--> FieldValue</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan.LessEqual">
            <summary>
            Determines if it will be a greater or a greater equal operation.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan.TrimPosition">
            <summary>
            Determines if the value must be triimed, and where.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLessThan.NormalizeChemicalName">
            <summary>
            Gets or sets if it is necessary to normalize the name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFactory">
            <summary>
            Creates the right Where Clause Item subclass.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseFactory.CreateWhereClauseItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Field,System.Xml.XmlNode)">
            <summary>
            Creates the right Where Clause Item subclass.
            </summary>
            <param name="field">Field name in database.</param>
            <param name="operationNode">Parameters in an xml node format.</param>
            <returns>A WhereClauseItem created with the right subclass.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria">
            <summary>
            Representation of a search criteria to generate a query. Usaully loaded from an xml.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.searchCriteriaXML">
            <summary>
            The source xml containing the search criteria.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.ToString">
            <summary>
            returns the xml representation of the searchCriteria
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.LoadFromXML(System.String)">
            <summary>
            Loads the  values of this class from an xml.
            </summary>
            <param name="searchCriteriaXMLString">The schema xml in a string format.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.LoadFromXML(System.Xml.XmlDocument)">
            <summary>
            Loads the  values of this class from an xml.
            </summary>
            <param name="searchCriteriaXMLDocument">The schema in a xml format.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.GetWhereClause(System.String)">
            <summary>
            Gets a where clause from the underlying xml definition.
            </summary>
            <param name="dataViewXMLString">The database xml schema in a string format.</param>
            <returns>The Where Clause.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.GetWhereClause(System.Xml.XmlDocument)">
            <summary>
            Gets a where clause from the underlying xml definition.
            </summary>
            <param name="dataViewXMLDocument">The database xml schema in a XmlDocument format.</param>
            <returns>The Where Clause.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.GetWhereClause(CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView)">
            <summary>
            Gets a where clause from the underlying xml definition.
            </summary>
            <param name="dataView">The object that encapsulates the database schema.</param>
            <returns>The Where Clause.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.SearchCriteria.GetTableIds(CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView)">
            <summary>
            Gets all the table ids involved in the select clause
            </summary>
            <returns>The table ids involved in the select clause</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.Graph">
            <summary>
            Wrapper class to encapsulate the Graphs Library to be used.
            Used for representing the required table relations.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.Graph.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.Graph.AddTable(System.Int32)">
            <summary>
            Adds a Table to the Graph that stores tables and relationships between them.
            </summary>
            <param name="TableId">The identifier of the table. This int is stored inside the vertex</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.Graph.AddRelation(CambridgeSoft.COE.Framework.Common.SqlGenerator.Relation)">
            <summary>
            Adds an arist between two nodes to the Graph. - Review if Relation class will be used, or what
            </summary>
            <param name="relation">this objects stores the names of the two tables to link, as well as the keys that relates them.
            The names of the tables are converted to vertices before adding the edge. An exception is raised if the tables names 
            are not included as vertices on the graph.
            </param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.Graph.GetPath(System.Int32,System.Int32)">
            <summary>
            Returns an optimized path between starting in OriginNode and ending in DestinationNode
            </summary>
            <param name="originTableId">The source table id.</param>
            <param name="destinationTableId">The destination table id.</param>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.Graph.adjacencyGraph">
            <summary>
            This Property exposes the quickgraph lib graph that's being used. 
            For debugging Purposes only.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DALFactory">
            <summary>
            Class for loading a DAL for a service. 
            </summary>
            <remarks>This will likely move to core.  However, at this time it doens't instantiate properly when in COE.CORE.COMMON</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALFactory.GetDAL``1(``0@,System.String,System.String,System.Boolean)">
            <summary>
            Creates a DAL object for calling the DAL layer
            </summary>
            <param name="adminConn">Indicates if the connection is and admin connection or not</param>
            <param name="databaseName">The database schema name</param>
            <param name="serviceName">The service name</param>
            <param name="Tvariable">The DAL class modified by ref</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALFactory.GetDAL``1(``0@,System.String,System.String)">
            <summary>
            Overload to create default dal using user connection
            </summary>
            <param name="databaseName">The database schema name</param>
            <param name="serviceName">The service name</param>
            <param name="Tvariable">The DAL class modified by ref</param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SQLGeneratorData">
            <summary>
            This class defines the any configuration data for the sql generator for each application
            properties can be added as needed. Each propery will be added to the add element in the sqlGeneratorData parent element
            <code lang="Xml">
            &lt;application name="SAMPLE"&gt;   
                &lt;sqlGeneratorData&gt;
                    &lt;add cartridgeSchema="CSCARTRIDGE"/&gt;
              &lt;/sqlGeneratorData&gt;
            &lt;/application&gt;
            </code>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SQLGeneratorData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.SQLGeneratorData"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SQLGeneratorData.Name">
            <summary>
            Name of the chemistry cartridge used by application
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SQLGeneratorData.Schema">
            <summary>
            what is the schema/database name used by the cartridge
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SQLGeneratorData.TempQueries">
            <summary>
            Name of the temporal table where the queries are stored
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DBMSTypeData">
            <summary>
            Configuration data defining a DBMS type. 
            </summary>    	
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DBMSTypeData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.DBMSTypeData"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DBMSTypeData.Name">
            <summary>
            Name of Data Provider
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DBMSTypeData.DataSource">
            <summary>
            source for data  
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DBMSTypeData.SQLGeneratorData">
            <summary>
            Gets the collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.DBMSTypeData.SQLGeneratorData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.DBMSTypeData.SQLGeneratorData"/> objects.
            </value>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ExportFormatterData">
            <summary>
            Configuration data defining formatters for the COEExport service
            </summary>    	
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ExportFormatterData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.ApplicationData"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ExportFormatterData.Name">
            <summary>
            Name of service
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ExportFormatterData.FormatterAssemblyName">
            <summary>
            Full name of assebmly, including public token for the formater
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ExportFormatterData.FormatterTypeName">
            <summary>
            Name type for formatter
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextEdit">
            <summary>
            <para>
            This class implements an Infragistics' WebTextEdit control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COETextEdit class accepts every Infragistics' WebTextEdit property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default value of the text edit?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;label&gt;Optical Rotation&lt;/label&gt;
                &lt;bindingExpression&gt;PropertyList[@Name='OPTICALROTATION' | Value]&lt;/bindingExpression&gt;
                &lt;validationRuleList&gt;
                  &lt;validationRule validationRuleName="textLength" errorMessage="The length must be between 0 and 200"&gt;
                    &lt;params&gt;
                      &lt;param name="min" value="0"/&gt;
                      &lt;param name="max" value="200"/&gt;
                    &lt;/params&gt;
                  &lt;/validationRule&gt;
                &lt;/validationRuleList&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COETextEdit&lt;/CSSClass&gt;
                  &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
                  &lt;ID&gt;OpticalRotationTextEdit&lt;/ID&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;top&gt;220px&lt;/top&gt;
                  &lt;left&gt;15px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextEdit&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Value property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextEdit.GetData">
            <summary>
            <para>Gets the value of the control.</para>
            </summary>
            <returns>A string with the control's value.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextEdit.PutData(System.Object)">
            <summary>
            Sets the control's value.
            </summary>
            <param name="data">A string with the desired value of the control.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextEdit.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COETextEdit&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
              &lt;ID&gt;OpticalRotationTextEdit&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextEdit.DefaultValue">
            <summary>
            Allows to set the default value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEPickListPickerService.PickListNameValueList">
            <summary>
            <para>
            Main class of the service COEPickListPicker, which provides the ability to retrieve name value list values from database.
            </para>
            <para>
            This service is mainly intended for those typical cases of retriveing all the allowed status for a particular object or even
            more typical for retrieving all the countries/states.
            </para>
            <para>
            For this service to work you have to configure two tables in the schema you are working with.
            </para>
            <list type="bullet">
              <item>PickList: This table contains a list of values for an specific domain. For instance all the values for the domain Country.</item>
              <item>PickListDomain: This table contains the list of known domains.</item>
            </list>
            <para>Once the tables are set you can start using this service for retrieven the NameValueList for each domain you require.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEPickListPickerService.PickListNameValueList.GetPickListNameValueList(System.String,System.String)">
            <summary>
            Retrieves all the values allowed for the given <paramref name="domainName"/> over the provided <paramref name="databaseName"/>
            </summary>
            <param name="databaseName">Database schema name.</param>
            <param name="domainName">The domain name.</param>
            <returns>The list of values for the given domain.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEPickListPickerService.PickListNameValueList.GetPickListNameValueList(System.String,System.Int32)">
            <summary>
            Retrieves all the values allowed for the given <paramref name="domainId"/> over the provided <paramref name="databaseName"/>
            </summary>
            <param name="databaseName">Database schema name.</param>
            <param name="domainId">The domain ID.</param>
            <returns>The list of values for the given domain.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEPickListPickerService.PickListNameValueList.InvalidateCache">
            <summary>
            Cleans previously cached values.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEPickListPickerService.PickListNameValueList.DomainID">
            <summary>
            Related domain for the list.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.SDFFlatFileCorrelated.Modify(CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable,System.Int32)">
            <summary>
            Overridden ModifyResultsCriteria to format structure fields to return molfiles
            </summary>
            <param name="resultsCriteria">originating results criteria object</param>
            <returns>results critiria modified to include criteria itme in desired format</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.SDFFlatFileCorrelated.FormatDataSet(System.Data.DataSet,CambridgeSoft.COE.Framework.Common.COEDataView,CambridgeSoft.COE.Framework.Common.ResultsCriteria)">
            <summary>
            reshape a dataset as an SDF flatfile that is correlated
            </summary>
            <param name="dataSet">dataset to reshape</param>
            <returns>a sdf flat file containing molfiles for structures  modified on 12.5</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.SDFFlatFileCorrelated.AddChildTableData(System.Collections.Generic.List{System.String},System.Data.DataTable,System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{System.String}},CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView,System.Int32)">
            <summary>
            add every row info of child table into a list
            </summary>
            <param name="parTempList">the previous base table and child table info string list</param>
            <param name="childTable">the current child table</param>
            <param name="parBtRecordIndex">base table record index</param>
            <param name="_tableFiledsIdList">the filed list of all fields in every  table</param>
            <param name="_dataView">COEDataView</param>
            <param name="_chdTabIdIndex">child table id index in child table id list</param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.SDFNested.Modify(CambridgeSoft.COE.Framework.Common.ResultsCriteria.ResultsCriteriaTable,System.Int32)">
            <summary>
            Overridden ModifyResultsCriteria to format structure fields to return molfiles
            </summary>
            <param name="resultsCriteria">originating results criteria object</param>
            <returns>results critiria modified to include criteria itme in desired format</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEExportService.SDFNested.FormatDataSet(System.Data.DataSet,CambridgeSoft.COE.Framework.Common.COEDataView,CambridgeSoft.COE.Framework.Common.ResultsCriteria)">
            <summary>
            reshape a dataset as an SDF flatfile that is uncorrelated
            </summary>
            <param name="dataSet">dataset to reshape</param>
            <returns>a sdf flat file containing molfiles for structures</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly">
            <summary>
            <para>
            This is the read only version of <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextEdit"/>.
            </para>
            <para>
            The COETextBoxReadOnly class accepts every Infragistics' WebTextEdit property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default value of the text box?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;label&gt;Optical Rotation&lt;/label&gt;
                &lt;bindingExpression&gt;PropertyList[@Name='OPTICALROTATION' | Value]&lt;/bindingExpression&gt;
                &lt;validationRuleList&gt;
                  &lt;validationRule validationRuleName="textLength" errorMessage="The length must be between 0 and 200"&gt;
                    &lt;params&gt;
                      &lt;param name="min" value="0"/&gt;
                      &lt;param name="max" value="200"/&gt;
                    &lt;/params&gt;
                  &lt;/validationRule&gt;
                &lt;/validationRuleList&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COETextBoxView&lt;/CSSClass&gt;
                  &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
                  &lt;ID&gt;OpticalRotationTextBox&lt;/ID&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;top&gt;220px&lt;/top&gt;
                  &lt;left&gt;15px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Value property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly.GetData">
            <summary>
            <para>Gets the value of the control.</para>
            </summary>
            <returns>A string with the control's value.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly.PutData(System.Object)">
            <summary>
            Sets the control's value.
            </summary>
            <param name="data">A string with the desired value of the control.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COETextBoxView&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
              &lt;ID&gt;OpticalRotationTextBox&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly.DefaultValue">
            <summary>
            Allows to set the default value.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBoxReadOnly.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.COEMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Validate user
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.COEMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change password
            </summary>
            <param name="username"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.COEMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Change password only after answering questions
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="newPasswordQuestion"></param>
            <param name="newPasswordAnswer"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.COEMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create user
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="passwordQuestion"></param>
            <param name="passwordAnswer"></param>
            <param name="isApproved"></param>
            <param name="providerUserKey"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COESecurityService.COEMembershipProvider.ApplicationName">
            <summary>
            Application Name property
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.OracleDataAccessClientDAL">
            <summary>
            The Data Access class in charge of communicating against oracle database for searching data.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.DAL">
            <summary>
            Base DAL class for search service
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.DAL.ExecuteNonQuery(CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery)">
            <summary>
            Executes a non query statement.
            </summary>
            <param name="statement">The statement.</param>
            <returns>The number of records affected.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.DAL.ExecuteDataSet(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query)">
            <summary>
            Executes a query.
            </summary>
            <param name="query">The query.</param>
            <returns>A DataSet named SearchResults.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.DAL.ExecuteDataSetKeepAlive(System.String,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder)">
            <summary>
            Executes a query and keeps the connection alive.
            </summary>
            <param name="query">The query.</param>
            <param name="pagingInfo">Info about paging.</param>
            <param name="tableName">The table name to be filled.</param>
            <returns>A DataSet named SearchResults.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.DAL.ExecuteDataTable(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query,System.String)">
            <summary>
            Executes a query.
            </summary>
            <param name="query">The query.</param>
            <param name="tableName">The desired name of the resulting data table.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.DAL.ExecuteDataTable(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query)">
            <summary>
            Executes a query.
            </summary>
            <param name="query">The query.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.DAL.CreateKeepAliveHolder(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query,System.Boolean,System.String)">
            <summary>
            Creates a cursor and returns its holder.
            </summary>
            <param name="query">The query to fill the cursor.</param>
            <param name="timerPolicy">Determines if a timer policy will be applied to release the resources.</param>
            <param name="key">The identifier of the holder.</param>
            <returns>The holder.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CambridgeSoft.COE.Framework.COESearchService.DAL.GetExactRecordCount(System.String,System.String)" -->
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.DAL.GetFastRecordCount(CambridgeSoft.COE.Framework.Common.HitListInfo,System.String,System.String)">
            <summary>
            Get RowCount use a DBMS type specific method table
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.OracleDataAccessClientDAL.ExecuteDataSet(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query)">
            <summary>
            Executes a Query against a database and returns a DataSet.
            </summary>
            <param name="query">The query.</param>
            <returns>A DataSet containing the results.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.OracleDataAccessClientDAL.ExecuteDataTable(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query,System.String)">
            <summary>
            Executes a query agains database and Returns a DataTable.
            </summary>
            <param name="query">The query.</param>
            <param name="tableName">The desired name of the resulting table.</param>
            <returns>The resulting rows in a DataTable.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.OracleDataAccessClientDAL.ExecuteDataTable(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query)">
            <summary>
            Executes a query agains database and Returns a DataTable.
            </summary>
            <param name="query">The query.</param>
            <returns>The resulting rows in a DataTable.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.OracleDataAccessClientDAL.ExecuteNonQuery(CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.NonQuery)">
            <summary>
            Executes a Non Query statement like insert and update.
            </summary>
            <param name="statement">The Statement.</param>
            <returns>The number of records affected.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.OracleDataAccessClientDAL.ExecuteDataSetKeepAlive(System.String,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.COESearchService.KeepAliveHolder)">
            <summary>
            Executes a query and keeps the connection alive.
            </summary>
            <param name="tableName">The table name to be filled.</param>
            <param name="pagingInfo">Info about paging.</param>
            <param name="holder">The keep alive holder.</param>
            <returns>A DataSet named SearchResults.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.OracleDataAccessClientDAL.CreateKeepAliveHolder(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.Query,System.Boolean,System.String)">
            <summary>
            Creates a cursor and returns its holder.
            </summary>
            <param name="query">The query to fill the cursor.</param>
            <param name="timerPolicy">Determines if a timer policy will be applied to release the resources.</param>
            <returns>The holder.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.OracleDataAccessClientDAL.GetFastRecordCount(CambridgeSoft.COE.Framework.Common.HitListInfo,System.String,System.String)">
            <summary>
            Override: Get RowCount via statisstics if table size is less then a threshold
            </summary>
            <param name="hitListInfo"></param>
            <param name="tableName"></param>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.#ctor">
            <summary>
            Default constructor for the DatabasePublishingManager. This is used when
            instantiation via direct reference to this assembly
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.GetInstanceDatabase(CambridgeSoft.COE.Framework.Common.DBMSType,System.String,CambridgeSoft.COE.Framework.Common.SecurityInfo)">
            <summary>
            Get all databases for a partiular database instance
            </summary>
            <param name="dbmsType"></param>
            <param name="connInfo"></param>
            <param name="securityInfo"></param>
            <returns>returns a list of database</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.GetDatabase">
            <summary>
            Get a list of Owners presnet in a database
            </summary>
            <returns>a list of owners for the database </returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.PublishDatabase(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Validate Credentials, Add database to COE registered database, and create COE tables in exposed database
            </summary>
            <param name="dataBaseName">Database Name</param>
            <param name="Password">Password</param>
            <returns>DataView in Prredefined Xml format of the database</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.AddApplicationInConfig(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            It verify the application name in COEConfig file, if not present then the application name is added
            </summary>
            <param name="password">Password</param>
            <returns>True, if the Application is added in COEConfig file</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.PublishTableDataView(System.Data.DataTable)">
            <summary>
            Fill COEDataView object with tables in the database
            </summary>
            <param name="DbTablesStructure">Tables Schema</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.PublishRelationDataView(System.Data.DataTable)">
            <summary>
            Fill COEDataView object with relations in the database
            </summary>
            <param name="DBRelationStructure">Relations Schema</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.AddIdToTables(System.Data.DataSet)">
            <summary>
            Check Application from COEConfig file
            </summary>
            <param name="OwnerName">Owner Name</param>
            <returns>dataset, containing the </returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.GetDataTypes(System.String)">
            <summary>
            Check the Database columns Data type and Concvert it to COEDataView's AbstractTypes  
            </summary>
            <param name="DataTypes">Data Types</param>
            <returns>Datatype Compatible to COEDataView class</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.GetDataSet">
            <summary>
            load DAL and Populate Tables Schema and Relations from the database
            </summary>
            <returns>dataset contains tables schame and relations</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.PublishTables(System.String[],System.String)">
            <summary>
            Validates and Creates default dataview for and application
            </summary>
            <param name="tables">array of tables to be published</param>
            <param name="publishedDatabaseName">name of database that the tables are in</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.GetUserList(System.String)">
            <summary>
            Get the list of user from Security table to Grant the Role for the created Schema.
            <returns>Table with the list of users</returns>
            </summary>
            <param name="schemaName">Name of the schema</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.GrantRole(System.Collections.Generic.List{System.String})">
            <summary>
            Method excepts the list of user to Grant the Role for the created Schema.
            </summary>
            <param name="userList">List of users</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.LoadDAL">
            <summary>
            load DAL with Current application name
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.Provider">
            <summary>
            Database provider name
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.DataSource">
            <summary>
            Data source name
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.Username">
            <summary>
            Username for Saving Dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.Name">
            <summary>
            Name of Dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.Description">
            <summary>
            Description of Dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.Ispublic">
            <summary>
            true,if public Dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.DatabasePublishingManager.COEDataViewID">
            <summary>
            ID of Dataview Created for the current Schema
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.COEDataViewBOList.LoadDAL(System.String)">
            <summary>
            Overloaded method of the LoadDAL, 
            </summary>
            <param name="appName">Name of the Application, It should be one from the provided in the Configuration.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure" -->
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Gets the string representation of the where clause structure for the given database and
            adds its parameter values to the values list.
            </summary>
            <param name="databaseType">The database to get the string for.</param>
            <param name="values">Already existing parameter values or a query.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.CartridgeSchema">
            <summary>
            Gets or sets the cartridge schema.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.AbsoluteHitsRel">
            <summary>
            Gets or sets if absolute hits or not. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.RelativeTetStereo">
            <summary>
            Gets or sets if relative tet stereo. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.TetrahedralStereo">
            <summary>
            Gets or sets the tetrahedral stereo matching. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.SimThreshold">
            <summary>
            Gets or sets the similarity percentage. It is taken into account when SIMILAR=YES is set as well, 
            otherwise disregarded. Default value (used if it is omitted) is 90 percent.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.ReactionCenter">
            <summary>
            Gets or sets if reaction search can match only reaction centers. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.FullSearch">
            <summary>
            Gets or sets if it will be a full structure search. Default is substructure search.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.Tautometer">
            <summary>
            Gets or sets if tautometer. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.FragmentsOverlap">
            <summary>
            Gets or sets if fragments can overlap. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.PermitExtraneousFragmentsIfRXN">
            <summary>
            Gets or sets if permit extraneous fragments. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.PermitExtraneousFragments">
            <summary>
            Gets or sets if permit extraneous fragments. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.DoubleBondStereo">
            <summary>
            Gets or sets if double bond stereo matching. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.HitAnyChargeHetero">
            <summary>
            Gets or sets if hit any charged hetero atom. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.Identity">
            <summary>
            Gets or sets if identity matching. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.HitAnyChargeCarbon">
            <summary>
            Gets or sets if hit any charged carbon. Default is YES.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.Similar">
            <summary>
            Gets or sets if similarity search. Default is NO.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.Format">
            <summary>
            Gets or sets the input format.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.Query8000">
            <summary>
            Query8000 is the first 4000 characters of the query string. The query string can be an encoded CDX document, a SMILES string, or a MolFile. For more information about these formats, please see DDL Considerations. The Oracle server limits the size of string literals to 4000 characters. 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseStructure.Query4000">
            <summary>
            Query4000 is the first 4000 characters of the query string. The query string can be an encoded CDX document, a SMILES string, or a MolFile. For more information about these formats, please see DDL Considerations. The Oracle server limits the size of string literals to 4000 characters. 
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseField">
            <summary>
            <para>
            This class represents a simple field. 
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The SelectClauseField class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field dataField:</b> Represents the field itself that is going to be added to the columns of the query.</item>
            <item><b>int FieldId:</b> The Id of the field DataField. This can be obtained directly from the dataField, and is left only for backward compatibility.</item>
            <item><b>string FieldName:</b> The Name of the field DataField. This can be obtained directly from the dataField, and is left only for backward compatibility.</item>
            <item><b>string TableName:</b> The Table owner of the field DataField. This can be obtained directly from the dataField, and is left only for backward compatibility.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            SelectClauses are implemented in two differentiable parts: The SelectClause itself, in charge of generating the string and a Parser whose responsibility is to extract the information needed for building the clause from an xmlnode.
            All SelectClause are mapped in mappings.xml, wich indicates given a SelectClause name, wich class to use for parsing and obtaining the generated string. There is a set of predefined SelectClauseFields, but the user can expand with his own. By implementing SelectClauseItem and ISelectClauseParser and adding the corresponding entry in this file.
            Along with SelectClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            Table emp = new Table();
            emp.TableName = "emp";
            emp.Alias = "e";
            SelectClauseField field  = new SelectClauseField();
            field.DataField.Table = emp;
            field.DataField.FieldName = "name";
            query.AddSelectItem(field);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;field id="2" /&gt;
            </code>
            <i>where the field 2 is called "name" and belongs to "emp" table (whose alias is e) in the dataview defined for this query.</i>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following select clause statement:
            </para>
            <para>
            e.name
            </para>
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseField.fieldName">
            <summary>
            Name of the DataBase Field to be included in the SELECT clause.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseField.fieldId">
            <summary>
            Id of the DataBase Field.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseField.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseField.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method does the actual job.
            In this case just return the name of the field.
            </summary>
            <returns>A string containing the select part corresponding to this field (i.e. the field name)</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseField.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Implementation of ISelectClauseParser. Returns an Instance of SelectClauseField, which at this point
            has only set its id.
            </summary>
            <param name="fieldNode">The field node of the search results xml definition.</param>
            <param name="dvnLookup">The INamesLookup interface from wich the parser can obtain the names corresponding to ids in dataview.xml</param>
            <returns>An instance of SelectClauseField.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseField.DataField">
            <summary>
            Name of the DataBase Field to be included in the SELECT clause.
            We recommend using fully qualified names to avoid any posibility of ambiguity.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseField.FieldId">
            <summary>
            Gets or sets the id of the DataBase Field.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria">
            <summary>
            Representation of the fields to display. Usaully loaded from an xml.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.ToString">
            <summary>
            Returns the xml representation of the dataview
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.LoadFromXML(System.String)">
            <summary>
            Loads the  values of this class from an xml.
            </summary>
            <param name="resultsCriteriaXMLString">The schema xml in a string format.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.LoadFromXML(System.Xml.XmlDocument)">
            <summary>
            Loads the  values of this class from an xml.
            </summary>
            <param name="resultsCriteriaXMLDocument">The schema xml in a XmlDocument format.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.GetSelectClause(System.String)">
            <summary>
            Gets a list of Select Clause, each clause of the list is for a different query.
            </summary>
            <param name="dataViewXMLString">The database xml schema in a string format.</param>
            <returns>The list of Select Clauses.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.GetSelectClause(System.Xml.XmlDocument)">
            <summary>
            Gets a list of Select Clause, each clause of the list is for a different query.
            </summary>
            <param name="dataViewXMLDocument">The database xml schema in a XmlDocument format.</param>
            <returns>The list of Select Clauses.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.GetSelectClause(CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView)">
            <summary>
            Gets a list of Select Clause, each clause of the list is for a different query.
            </summary>
            <param name="dataView">The object that encapsulates the database schema.</param>
            <returns>The list of Select Clauses.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.GetOrderByClause(CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView,CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectClause[])">
            <summary>
            Gets the list of Order by clauses from the list of select clauses and the dataview.
            </summary>
            <param name="dataView">The dataview.</param>
            <param name="selectClauses">The list of select clauses.</param>
            <returns>The list of Order by clauses.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.GetTableIds(CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.DataView)">
            <summary>
            Gets all the table ids involved in the select clause
            </summary>
            <returns>The table ids involved in the select clause</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.ResultsCriteria.GetMainTableId">
            <summary>
            Gets the id of the main table of a query.
            </summary>
            <returns>The main table id for that query.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Services.Search.ISearchManager">
            <summary>
            Search Service public Interface
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Services.Search.ISearchManager.DoSearch(CambridgeSoft.COE.Framework.Common.SecurityInfo,System.String,CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            General purpose search method
            </summary>
            <param name="securityInfo">object cantaining user credentials</param>
            <param name="appName">name of application</param>
            <param name="searchCriteria">object containing fields and criteria for search</param>
            <param name="resultsCriteria">object containing fields and criteria for returning results dataset</param>
            <param name="pagingInfo">object containing paging info for getting results from a cached search</param>
            <param name="dataView">object containing database structure view required for search</param>
            <returns>SearchResponse object made up of hitlist object, paging info object and dataset object. One or more of these objects might be null
            depending on the initial search</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Services.Search.ISearchManager.GetData(CambridgeSoft.COE.Framework.Common.SecurityInfo,System.String,CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo@,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            Search method for return dataset from preexisting search
            </summary>
            <param name="securityInfo">object cantaining user credentials</param>
            <param name="appName">name of application</param>
            <param name="resultsCriteria">object containing fields and criteria for returning results dataset</param>
            <param name="pagingInfo">object containing paging info for getting results from a cached search</param>
            <param name="dataView">object containing database structure view required for search</param>
            <returns>Dataset containing results</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Services.Search.ISearchManager.GetHitList(CambridgeSoft.COE.Framework.Common.SecurityInfo,System.String,CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            Search method that performs a search and returns a hitlistInfo object
            </summary>
            <param name="securityInfo">object cantaining user credentials</param>
            <param name="appName">name of application</param>
            <param name="dataView">object containing database structure view required for search</param>
            <param name="searchCriteria">object containing fields and criteria for search</param>
            <returns>HitListInfo is an object containing hitlist info</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.COELoggingService.COELog" -->
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.#ctor(System.String)">
            <summary>
             Constructor for the COELog service. Checks to see if logging is enabled by checking the calling
             clients app or web.config file.
             here we will check the state of the csla global context variable. If it is empty we will look in the local configuration file
             the app should have the following. The enterpriseLibrary.ConfigurationSource says to point to the framework
             config file. the coeLoggingConfiguration says to enable and what categories and priorities to log
             <configSections>
                 <section name="enterpriseLibrary.ConfigurationSource" type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection, Microsoft.Practices.EnterpriseLibrary.Common, Version=2.0.0.0, Culture=neutral, PublicKeyToken=6579c5fdfc419d72" />
                 <section name="coeLoggingConfiguration" type="CambridgeSoft.COE.Framework.Common.COELoggingConfiguration, CambridgeSoft.COE.Framework, Version=11.0.0.0, Culture=neutral, PublicKeyToken=1e3754866626dfbf" />
             </configSections>
             <enterpriseLibrary.ConfigurationSource selectedSource="File Configuration Source">
                 <sources>
                     <add name="File Configuration Source" type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource, Microsoft.Practices.EnterpriseLibrary.Common, Version=2.0.0.0, Culture=neutral, PublicKeyToken=6579c5fdfc419d72"
                         filePath="C:\Documents and Settings\All Users\Application Data\ChemOfficeEnterprise11\COEFrameworkConfig.xml" />
                 </sources>
             </enterpriseLibrary.ConfigurationSource>
             <coeLoggingConfiguration enableLogging="false" categories="ALL" level="10"/>
            the actually logging configuration is specified in the COEFrameworkConfig.xml on the application server
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.Log(System.String,System.Int32,System.Diagnostics.SourceLevels)">
            <summary>
            This is main log method for the COELog service.  All other methods call this method.  
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.Log(System.String,System.Int32)">
            <summary>
            log method overload
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.Log(System.String)">
            <summary>
            log method overload
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.LogStart(System.String,System.Int32,System.Diagnostics.SourceLevels)">
            <summary>
            Prefix log with "START" and use message paramter
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.LogStart(System.String,System.Int32)">
            <summary>
            Prefix log with "START" and use message paramter
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.LogStart(System.String)">
            <summary>
            Prefix log with "START" and use message paramter
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.LogEnd(System.String,System.Int32,System.Diagnostics.SourceLevels)">
            <summary>
            Prefix log with "END" and use message paramter
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.LogEnd(System.String,System.Int32)">
            <summary>
            Prefix log with "END" and use message paramter
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.LogEnd(System.String)">
            <summary>
            Prefix log with "END" and use message paramter
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.ClearLogFile">
            <summary>
            Clear the user/session log files
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.GetLogFile(System.String)">
            <summary>
            Gets the log file for the user/session
            </summary>
            <param name="outputpath">path for outputting the local log file</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELog.GetLogFileAsDataTable">
            <summary>
            Gets the log file for the user/session as a DataTable
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COELoggingService.COELog.WriteCommand">
            <summary>
            This is the writecommand that does all the work. It is run on the applicaiton server side
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COELoggingService.COELog.GetLogFileCommand">
            <summary>
            DataPortal command for getting user/session log file 
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COELoggingService.COELog.GetLogFileAsDataTableCommand">
            <summary>
            DataPortal command for getting user/session log file as a datatable
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COELoggingService.COELog.ClearLogFileCommand">
            <summary>
            DataPortal command for clearing user/session log file 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CambridgeSoft.COE.Framework.Common.WebGrid" -->
        <member name="M:CambridgeSoft.COE.Framework.Common.WebGrid.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.TableEditor"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.WebGrid.Name">
            <summary>
            Name of the Table used by application
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.WebGrid.Value">
            <summary>
            Primary key of the Table
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorUtilities.getLookupColumnList(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorUtilities.getLookupField(System.String,System.String)">
            <summary>
            LookupField for the Particular Field.
            </summary>
            <param name="tableName">Table name whose field need to be resolved</param>
            <param name="fieldName">Field Name for which lookup need to be resolved</param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorUtilities.getLookupID(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName">Table name whose field need to be resolved</param>
            <param name="fieldName">Field Name for which lookup need to be resolved</param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.CreateChildControls">
            <summary>
            Main Function that draws the Controls. contains the logic to implement the Control 
            and binding them with the Events dynamically on the basis of the data that has been 
            fetched from the TableEditor Service.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.CreateForm(CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorBO,Infragistics.WebUI.UltraWebTab.Tab@,CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.ModeOfAction)">
            <summary>
            Dynamically creates the Form on the current Tab with the required controls according 
            to the field type of selected Record.
            </summary>
            <param name="DataItem"> Object of the TableEditorBO class</param>
            <param name="tb"> Current Tab (Add, Update, Delete)</param>
            <param name="selecteMode"> currently selected Mode <see cref="T:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.ModeOfAction"/></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.processUpdate">
            <summary>
            Update operation on the Current Record.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.processAdd">
            <summary>
            Add operation on the Table.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.processDelete">
            <summary>
            Delete operation on the Current Record.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.process(CambridgeSoft.COE.Framework.COETableEditorService.COETableEditorBO,Infragistics.WebUI.UltraWebTab.Tab)">
            <summary>
            Implements the functionality of Add/ Update according to the object 
            of TableEditor has been provided.
            </summary>
            <param name="obj"> Object of COETableEditorBO</param>
            <param name="tb"> Tab on which the Control would be found to have the value for the Fields </param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.btn_Click(System.Object,Infragistics.WebUI.WebDataInput.ButtonEventArgs)">
            <summary>
            Event fired for the Action over the Selected Operation Mode (Add, Update and Delete)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.CurrentTable">
            <summary>
            Property to keep track of the Selected Table to interact with the using TableEditor control
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.CurrentMode">
            <summary>
            Property to keep track of the Current Action mode selected
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.AppName">
            <summary>
            Application Name that has been selected.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.SelectedRecord">
            <summary>
            Currently selected Record of the Table.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COETableManager.COETableManager.ModeOfAction">
            <summary>
            Enumeration for serving the tracking of Currently selected Operation Mode.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton">
            <summary>
            <para>
            This class implements a RadioButton control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COERadioButton class accepts every RadioButton property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: Would be checked by default?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like GroupName, CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;defaultValue&gt;true&lt;/defaultValue&gt;
                &lt;bindingExpression&gt;Compound.BaseFragment.Structure.UseNormalizedStructure&lt;/bindingExpression&gt;
                &lt;label&gt;Use normalized structure&lt;/label&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;GroupName&gt;StructureSelectionGroup&lt;/GroupName&gt;
                  &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
                  &lt;ID&gt;UseNormalizedStructureRadio&lt;/ID&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;top&gt;310px&lt;/top&gt;
                  &lt;left&gt;100px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Checked property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton.GetData">
            <summary>
            Gets if this checkbox is currently checked.
            </summary>
            <returns>A bool value that shows if it is checked or not.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton.PutData(System.Object)">
            <summary>
            Sets if it should be checked.
            </summary>
            <param name="data">A bool or a parseable string that sets if this should be checked or not.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;GroupName&gt;StructureSelectionGroup&lt;/GroupName&gt;
              &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
              &lt;ID&gt;UseNormalizedStructureRadio&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton.DefaultValue">
            <summary>
            Allows to set if it is checked or not by default.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COERadioButton.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder">
            <summary>
            Its responsibility is to build a QUERY. Usually taken info from 3 xmls, a search criteria, 
            a search result and a data view (a schema).
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.dataView">
            <summary>
            Object that encapsuletes the logic for the database schema.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.resultsCriteria">
            <summary>
            Object that encapsuletes the logic for the results schema.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.searchCriteria">
            <summary>
            Object that encapsuletes the logic for the search criterias.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.#ctor(System.Xml.XmlDocument,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Initializes its members from XMLs
            </summary>
            <param name="dataViewXmlDocument">The data view schema of the database in a XmlDocument.</param>
            <param name="searchCriteriaXmlDocument">The search criterias in a XmlDocument.</param>
            <param name="resultsCriteriaXmlDocument">The results in a XmlDocuemt.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes its members from XMLs
            </summary>
            <param name="dataViewXmlString">The xml data view schema of the database in a string.</param>
            <param name="searchCriteriaXmlString">The xml search criterias in a string.</param>
            <param name="resultsCriteriaXmlString">The xml results in a string.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.BuildQuery(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Build queries from xmls definitions.
            </summary>
            <param name="databaseType">The underlying database to generate queries.</param>
            <returns>A list of queries based on the xmls definitions.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.QueryBuilder.GetQueryString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Build queries string from xmls definitions.
            </summary>
            <param name="databaseType">The underlying database to generate queries.</param>
            <returns>A list of string queries based on the xmls definitions.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause">
            <summary>
            A wrapper for an order by clause. Expose methods to modify the order by clause.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause.ToString">
            <summary>
            Gets the string representation for the default DBMS (Oracle).
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause.ToString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Gets the string representation for the given database.
            </summary>
            <param name="dataBaseType">The database to generate the string to.</param>
            <returns>The SQL string.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause.AddItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem)">
            <summary>
            Adds an order by clause item.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause.RemoveItem(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem)">
            <summary>
            Removes an item.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause.RemoveItem(System.Int32)">
            <summary>
            Removes an item.
            </summary>
            <param name="position">The position to remove at.</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.OrderByClause.Items">
            <summary>
            Gets or sets the order by items.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem">
            <summary>
            OrderByClauseItem class wraps a selectClauseItem and uses it for generating an ordering based upong it.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem.#ctor(CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseItem)">
            <summary>
            Receives a selectClauseItem on wich the order by will be performed
            </summary>
            <param name="item">The SelectClause item to be used</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            returns the string representation of this single order by item, so that it's concatenated by the order by clause and inserted into the whole query
            </summary>
            <param name="dataBaseType">Supported databases: ORACLE, SQLServer, ACCESS</param>
            <returns>string representation of this single order by item</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.AggregateItems.OrderByClauseItem.Item">
            <summary>
            Order By is performed upon a SelectClause Item, wich is specified in this property.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorEdge">
            <summary>
            This class links SQLGenerator and QuickGraphLibrary. 
            The edges of the graph store relationships between tables (although not using Relation class).
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorEdge.#ctor(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Default Constructors. Receives two SQLGenerator Vertices
            </summary>
            <param name="source">Source Vertex of the relationship. This Vertex contains the parent table name</param>
            <param name="target">Destination Vertex of the relationship. This vertex contains the child table name</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorEdge.CompareTo(System.Object)">
            <summary>
            Compare operator. Required for implementing IEdge interface.
            </summary>
            <param name="obj">Object to wich current instance is compared to</param>
            <returns></returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorEdge.ParentFieldId">
            <summary>
            The Key of the parent table that is used for linking to the other table.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorEdge.ChildFieldId">
            <summary>
            The Key of the Child table that is used for linking to the other table
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorEdge.InnerJoin">
            <summary>
            Determines whether it is an inner or outer join what is represented here.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorEdge.Source">
            <summary>
            Source Vertex of the relation. This Vertex contains the name of the Parent table 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.Graphs.SQLGeneratorEdge.Target">
            <summary>
            Target Vertex of the relation. This Vertex Contains the name of the Child Table
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.#ctor">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetAuthenticationTicket(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetAuthenticationTicketAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetAuthenticationTicketAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.Authenticate(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.AuthenticateAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.AuthenticateAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.ValidateTicket(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.ValidateTicketAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.ValidateTicketAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.RenewTicketIfOld(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.RenewTicketIfOldAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.RenewTicketIfOldAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.RenewTicket(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.RenewTicketAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.RenewTicketAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserFromTicket(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserFromTicketAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserFromTicketAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetTicketExpirationDate(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetTicketExpirationDateAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetTicketExpirationDateAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetTicketIssueDate(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetTicketIssueDateAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetTicketIssueDateAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.EchoString(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.EchoStringAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.EchoStringAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetCookieName">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetCookieNameAsync">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetCookieNameAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.UserExists(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.UserExistsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.UserExistsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserInfo(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserInfoAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserInfoAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserInfoAsString(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserInfoAsStringAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserInfoAsStringAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.IsExemptUser(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.IsExemptUserAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.IsExemptUserAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetAuthenticationTicketCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.AuthenticateCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.ValidateTicketCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.RenewTicketIfOldCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.RenewTicketCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserFromTicketCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetTicketExpirationDateCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetTicketIssueDateCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.EchoStringCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetCookieNameCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.UserExistsCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserInfoCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.GetUserInfoAsStringCompleted">
            <remarks/>
        </member>
        <member name="E:CambridgeSoft.COE.Framework.coesinglesignon.SingleSignOn.IsExemptUserCompleted">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetAuthenticationTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetAuthenticationTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.GetAuthenticationTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.AuthenticateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.AuthenticateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.AuthenticateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.ValidateTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.ValidateTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.ValidateTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.RenewTicketIfOldCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.RenewTicketIfOldCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.RenewTicketIfOldCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.RenewTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.RenewTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.RenewTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetUserFromTicketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetUserFromTicketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.GetUserFromTicketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetTicketExpirationDateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetTicketExpirationDateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.GetTicketExpirationDateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetTicketIssueDateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetTicketIssueDateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.GetTicketIssueDateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.EchoStringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.EchoStringCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.EchoStringCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetCookieNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetCookieNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.GetCookieNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.UserExistsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.UserExistsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.UserExistsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetUserInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetUserInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.GetUserInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetUserInfoAsStringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.GetUserInfoAsStringCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.GetUserInfoAsStringCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.IsExemptUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.coesinglesignon.IsExemptUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.coesinglesignon.IsExemptUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly">
            <summary>
            <para>
            This is the read only version of <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw"/> class.
            </para>
            <para>
            The COEChemDrawEmbedReadOnly class accepts every <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw"/> property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default base64?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
            &lt;formElement&gt;
                &lt;defaultValue/&gt;
                &lt;bindingExpression&gt;Compound.BaseFragment.Structure.Value&lt;/bindingExpression&gt;
                &lt;configInfo&gt;
                    &lt;fieldConfig&gt;
                    &lt;CSSClass&gt;COEChemDrawView&lt;/CSSClass&gt;
                    &lt;ID&gt;BaseFragmentStructure&lt;/ID&gt;
                    &lt;Height&gt;300px&lt;/Height&gt;
                    &lt;Width&gt;300px&lt;/Width&gt;
                    &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                    &lt;height&gt;300px&lt;/height&gt;
                    &lt;width&gt;300px&lt;/width&gt;
                    &lt;top&gt;12px&lt;/top&gt;
                    &lt;left&gt;15px&lt;/left&gt;
                    &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly&lt;/type&gt;
                &lt;/displayInfo&gt;
            &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to its base64 representation.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly"/> class
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly.GetData">
            <summary>
            Gets the base64 representation of the control.
            </summary>
            <returns>A string with its base64 representation.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly.PutData(System.Object)">
            <summary>
            Sets the base64 representation of the control.
            </summary>
            <param name="data">A string with the desired base64 representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
                &lt;configInfo&gt;
                    &lt;fieldConfig&gt;
                    &lt;CSSClass&gt;COEChemDraw&lt;/CSSClass&gt;
                    &lt;ID&gt;BaseFragmentStructure&lt;/ID&gt;
                    &lt;Height&gt;300px&lt;/Height&gt;
                    &lt;Width&gt;300px&lt;/Width&gt;
                    &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly.DefaultValue">
            <summary>
            Allows to set which is the default base64.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDrawEmbedReadOnly.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEWebGrid.AjaxCallbacks">
            <summary>
            Summary description for TestAjaxCallbacks.
            </summary>
            
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.SystemDataSqlClientDAL.GetNewID">
            <summary>
            
            </summary>
            <param name="dataView"></param>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.XMLValidator">
            <summary>
            Provides methods to validate XMLs.searchResults
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.XMLValidator.ValidateDataView(System.Xml.XmlDocument)">
            <summary>
            Validates the dataview xml.
            </summary>
            <param name="dataView">The xml to validate.</param>
            <returns>True if it is ok, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.XMLValidator.ValidateSearchCriteria(System.Xml.XmlDocument)">
            <summary>
            Validates the searchCriteria xml.
            </summary>
            <param name="searchCriteria"></param>
            <returns>True if it is ok, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.XMLValidator.ValidateSearchResults(System.Xml.XmlDocument)">
            <summary>
            Validates the searchResults xml.
            </summary>
            <param name="searchResults">The xml to validate.</param>
            <returns>True if it is ok, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.XMLValidator.ValidateSelectClauseMappings(System.Xml.XmlDocument)">
            <summary>
            Validates the mappings xml.
            </summary>
            <param name="mappings">The xml to validate.</param>
            <returns>True if it is ok, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.XMLValidator.ValidateXmlWithSchema(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Validates the dataview xml.
            </summary>
            <param name="xml">The xml to validate.</param>
            <param name="targetNamespace">The namespace to validate.</param>
            <param name="schemaUri">URI where the schema is located.</param>
            <returns>True if it is ok, false otherwise.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Types.Exceptions.EmptyRegistryRecord">
            <summary>
            Exception raised for empties registry records
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COELoggingConfiguration">
            <summary>
            Logging settings
            </summary>    
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.COELoggingConfiguration.SectionName">
             <summary>
             Configuration key for ChemOffice Enterprise applications and services.
             </summary>
            
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COELoggingConfiguration.LogEntryIdentifier">
            <summary>
            name used to identify calling app in logging config output
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COELoggingConfiguration.Enabled">
            <summary>
            specifies if logging is turned on or off
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COELoggingConfiguration.Categories">
            <summary>
            Defines the categories for logging 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COELoggingConfiguration.Severity">
            <summary>
            Defines the severities for logging 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COELoggingConfiguration.Priority">
            <summary>
            Defines the priority of logging 
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw">
            <summary>
            <para>
            This class implements a <see cref="T:CambridgeSoft.COE.Framework.Controls.ChemDraw.COEChemDrawEmbed"/> control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COEChemDraw class accepts every COEChemDraw property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default base64?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
            &lt;formElement&gt;
                &lt;defaultValue/&gt;
                &lt;bindingExpression&gt;Compound.BaseFragment.Structure.Value&lt;/bindingExpression&gt;
                &lt;configInfo&gt;
                    &lt;fieldConfig&gt;
                    &lt;CSSClass&gt;COEChemDraw&lt;/CSSClass&gt;
                    &lt;ID&gt;BaseFragmentStructure&lt;/ID&gt;
                    &lt;Height&gt;300px&lt;/Height&gt;
                    &lt;Width&gt;300px&lt;/Width&gt;
                    &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                    &lt;height&gt;300px&lt;/height&gt;
                    &lt;width&gt;300px&lt;/width&gt;
                    &lt;top&gt;12px&lt;/top&gt;
                    &lt;left&gt;15px&lt;/left&gt;
                    &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw&lt;/type&gt;
                &lt;/displayInfo&gt;
            &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to its base64 representation.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw.GetData">
            <summary>
            Gets the base64 representation of the control.
            </summary>
            <returns>A string with its base64 representation.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw.PutData(System.Object)">
            <summary>
            Sets the base64 representation of the control.
            </summary>
            <param name="data">A string with the desired base64 representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
                &lt;configInfo&gt;
                    &lt;fieldConfig&gt;
                    &lt;CSSClass&gt;COEChemDraw&lt;/CSSClass&gt;
                    &lt;ID&gt;BaseFragmentStructure&lt;/ID&gt;
                    &lt;Height&gt;300px&lt;/Height&gt;
                    &lt;Width&gt;300px&lt;/Width&gt;
                    &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw.DefaultValue">
            <summary>
            Allows to set which is the default base64.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEChemDraw.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfigurationManager">
            <summary>
            Class for managing tasks releated to Query Managdment
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfigurationManager.#ctor">
            <summary>
            Default construction for the User Setting Manager. This is used when
            instantiation is done via a client directly referencing the services assembly
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfigurationManager.#ctor(CambridgeSoft.COE.Framework.Common.SecurityInfo)">
            <summary>
            Constructor used for the Schema Manager when instantiation is through a webservice
            </summary>
            <param name="securityInfo"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEConfigurationService.COEConfigurationManager.LoadDAL">
            <summary>
            Load the ConfigurationDAL used by the HitListManager
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor">
            <summary>
            A dummy processor for Criteria that don't need specific work. This class follows the template pattern along with search service GetHitList Method
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates a new instance of Generic Processor with an xmlNode of the SearchCriteria XML.
            </summary>
            <param name="xmlNode">The node of a SearchCriteriaItem.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor.#ctor(CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)">
            <summary>
            Creates a new instance of Generic Processor with a given SearchCriteria Item
            </summary>
            <param name="item">The SearchCriteriaItem that is to be handled by this Processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor.PreProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template method Preprocess - performs the required setup steps for executing this command: Nothing in this case.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor.Process">
            <summary>
            Template Method Process - in this case returns the original resultsCriteria item
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.GenericProcessor.PostProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template method PostProcess - Performs the required steps for cleaning up the command execution - Nothing in this case.
            </summary>
            <param name="searchDAL"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.SystemDataOledbClientDAL.GetNewID">
            <summary>
            will get the new id by selecting max id from teh table DB_DATAVIEW_SEQ
            if the max id is 0 then will return the new id as 1 else will update the max id by 1 and wil
            return that id and also will update the DB_DATAVIEW_SEQ by the same value.
            </summary>
            <returns>the new id retrived</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.WebUtils">
            <summary>
            Utilitarian class for web applications.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.WebUtils.SetCslaPrincipal">
            <summary>
            Sets the CSLA principal based on the Http Current Context
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual">
            <summary>
            <para>
            This class implements an different comparison operator, "&lt;&gt;", in a  SQL where clause.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The WhereClauseNotEqual class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field dataField:</b> Represents the field of the database that is being compared. Its name and type are required.</item>
            <item><b>Value Val:</b> represents the value against wich the dataField is being compared. Its value and type are required. The type of the field can differ from the type of the value.</item>
            <item><b>bool CaseSensitive:</b> flag that indicates whether take into account casing or not.</item>
            <item><b>Position TrimPosition:</b> flag that indicates how to perform the trim of value. Posible Values: Left, Right, Both, None.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            The WhereClause decides whether it’s TextCriteria, NumericalCriteria, etc. based upon the Val Value field.
            This WhereClause can take into account casing and can perform trim of the input value. 
            In the special case of a numericalCriteria that is applied into a text database field, the trim operation trims leading and or trailing zeroes (instead of just spaces).
            In the case of a TextCriteria, this implementation compares the ascii codes of the strings.
            </para>
            <para>
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            WhereClauseNotEqual target = new WhereClauseNotEqual();
            target.DataField = new Field();
            target.DataField.FieldName = "MolWeight";
            target.DataField.FieldType = System.Data.DbType.Int32;
            target.CaseSensitive = true;
            target.TrimPosition = Positions.Both;
            target.Val = new Value();
            target.Val.Val = "   00000018	";
            target.Val.Type = System.Data.DbType.Int32;
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;structureCriteriaItem id=XX fieldid=19 modifier='' tableid=3&gt;
            	&lt;numericalCriteria operator='NOTEQUAL' trim='BOTH'&gt;   00000018	
            	&lt;/numericalCriteria&gt;
            &lt;/structureCriteriaItem&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following where clause statement:
            </para>
            <para>
            [AND] (MolWeigth &lt;&gt; :0)
            </para>
            <para>
            And will add the following parameters to the query parameter list:
            </para>
            <list type="bullet">
            <item>Value(18, DataFieldtype.Numerical)</item>
            </list>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Encapsulates different sintaxis for the underlying RDBMS. If the equal will be case insensitive,
            then a lower is applied to the field and the value is lowered too.
            </summary>
            <exception cref="T:System.Exception">Thrown when the data type is not Text</exception>
            <returns>A string for the underlying RDBMS, in the form of: FieldName = FieldValue</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual.CaseSensitive">
            <summary>
            Determines if the comparation is case sensitive.
            <remarks>If the field type is not Text this property is discarded.</remarks>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual.TrimPosition">
            <summary>
            Determines if the value must be triimed, and where.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseNotEqual.NormalizeChemicalName">
            <summary>
            Gets or sets if it is necessary to normalize the name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes">
            <summary>
            Class to define common Constans for all GUIShell Type Apps.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.ViewStateEntries">
            <summary>
            View State Vars
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.RequestVars">
            <summary>
            Request Vars
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.SupportedControlTypes">
            <summary>
            Suppported control types.
            Remember that all control types implements ICOENavigationPaneControl
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.TableDisplayStates">
            <summary>
            Table disply states, allowed values are:
            <list type="bullet">
              <item>Collapsed</item>
              <item>Expanded</item>
            </list>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.WebTreeActions">
            <summary>
            WebTree Events to Respond
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.PoliciesNames">
            <summary>
            Policies Names for Exceptions handling
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.MessagesCode">
            <summary>
            Codes for Messages Page
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.LogsCategories">
            <summary>
            Logs message Level/Category
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.LogMessageType">
            <summary>
            Log Message Type
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.AppSettings">
            <summary>
            Application settings enumeration
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.Operators">
            <summary>
            Logical Operators availables for handling to show or not the current page according privs
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.Applications">
            <summary>
            Applications supported to Log.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.COEPageControlsSettings">
            <summary>
            This class reads a COEPageSettings xml and load all this values to properties.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.COEPageControlsSettings.SetUserControlsPrivileges">
            <summary>
            Method to read the controls configuration settings.
            </summary>
            <remarks>We loop into every page, privelege and Control.Of course, this must be saved in some session var to avoid this many times</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.COEPageControlsSettings.GetControlsToDisableByPage(System.String)">
            <summary>
            Method to return the list of controls to disable.
            </summary>
            <param name="pageName">the name of the currentPage</param>
            <returns>All the controls to disable</returns>
            <remarks>This is just a wraper method</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.COEPageControlsSettings.HasPrivilegesToBrowsePage(System.String)">
            <summary>
            Method to check if the current page is available for the current logged user.
            </summary>
            <param name="pageName">The name of the page to check</param>
            <returns>A boolean indicating if is available or not</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.GUIShell.COEPageControlsSettings.ID">
            <summary>
            The identifier of the object
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.GUIShell.COEPageControlsSettings.Controls">
            <summary>
            This var will hold a list of controls to disable by page.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.COEEventArgs">
            <summary>
            This is a Custom EventArgs to handle our custom information 
            about the control wich implement COEEventArgs
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.ICOEFooterUC">
            <summary>
            Summary description for ICOEFooterUC
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.ICOEHeaderUC">
            <summary>
            Summary description for ICOEHeaderUC
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.ICOELeftPanelUC">
            <summary>
            Summary description for ICOEHeaderUC
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Types.Exceptions.UnsupportedDataTypeException">
            <summary>
            Exception raised when trying to use an unsupported data type. Used in several contexts.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DALManager">
            <summary>
            The DALManager object controls all aspects of connectiong to a database.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.#ctor(CambridgeSoft.COE.Framework.Common.DatabaseData,CambridgeSoft.COE.Framework.Common.ServiceData,CambridgeSoft.COE.Framework.Common.ConnStringType)">
            <summary>
            Creates DALManager object through which all request to the Database are made
            </summary>
            <param name="connStringType">Connection string type</param>
            <param name="databaseData">Database configuration information</param>
            <param name="serviceData">Service configuration information</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.AssociateSession">
            <summary>
            Associatest the current request with an existing session or creates a new session. User for
            single sign on only. Configuraiton driven
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.BeginTransaction">
            <summary>
            Begin a transcation
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.GetConnection">
            <summary>
            Gets the connection for the current DAL request
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.CommitTransaction">
            <summary>
            Commit current transaction
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.RollbackTransaction">
            <summary>
             Rollback current tranction
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.BuildSqlStringParameterName(System.String)">
            <summary>
            Build the sql parameter with the approparite token for the DBMS type 
            </summary>
            <param name="Name">The parameter name</param>
            <returns>A sql parameter name with its proper token</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.SetTracing">
            <summary>
            Start tracing depending on configuration setting in coeConfiguration
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CambridgeSoft.COE.Framework.Common.DALManager.ExecuteNonQuery(System.Data.Common.DbCommand)" -->
        <!-- Badly formed XML comment ignored for member "M:CambridgeSoft.COE.Framework.Common.DALManager.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String)" -->
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="dbCommand">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>      
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="dbCommand"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="dbCommand">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DALManager.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="dbCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para></param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="dbCommand"/>.</returns>        
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALManager.Database">
            <summary>
            Create the database object that reflects the database type
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALManager.DbTransaction">
            <summary>
            Creates a transaction object for the current dal operation
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALManager.DbConnection">
            <summary>
            Get or set DbConnection object
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALManager.ServiceData">
            <summary>
            Get or set the ServiceData object containing information about the targeted service
            </summary>
            <value>The ServiceData object containing the serice data</value>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DALManager.DatabaseData">
            <summary>
            Get or set the DatabaseData object containing information about the database making the current DALManager call
            </summary>
            <value>The DatabaseData object containing the database data</value>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Types.EventHandlers.COEEventsHandler">
            <summary>
            Our custom Exception Handler Error Reporting.
            This class writes to the Trace.axd file in the root folder of a GUIShell Application.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Types.EventHandlers.COEEventsHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            Method that is raised when a COEEventsHandler (Custom Handler) is defined for a particular exception
            </summary>
            <param name="exception">A particular exception raised by the App</param>
            <param name="handlingInstanceId"></param>
            <returns>The same exception that the one received by parameter</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Types.EventHandlers.COEEventsHandler.ReadExceptionProperties(System.String,System.String)">
            <summary>
            This method read the XML excepetion definition. This XML doc says the Category of each exception
            (Customized or System exceptions)
            </summary>
            <param name="xmlFilePath">Where to find the XML</param>
            <param name="exceptionName">The Name of the exception (exception.GetType().Name)</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Types.EventHandlers.COEEventsHandler.WriteToLog(System.String)">
            <summary>
            This method writes to the trace.axd file a warn message.
            </summary>
            <param name="exceptionMessage">The message exception to log </param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ApplicationData">
            <summary>
            Configuration data defining an Applicaton using a core service. 
            </summary>    	
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ApplicationData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.ApplicationData"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ApplicationData.Name">
            <summary>
            Name of application
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ApplicationData.Database">
            <summary>
            Name of database
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ApplicationData.TableEditor">
            <summary>
            Gets the collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.ApplicationData.TableEditor"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.ApplicationData.TableEditor"/> objects.
            </value>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.BLLUtils">
            <summary>
            Commong Business Logic Layer utils.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.BLLUtils.ResetNotifications(CambridgeSoft.COE.Framework.Common.BLLBase)">
            <summary>
            Clear out old notifications since the Manager may be stored as a reference on the client
            </summary>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly">
            <summary>
            <para>
            This is the read only version of <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextArea"/>.
            </para>
            <para>
            The COETextArea class accepts every TextBox property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default text of the text area?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;label&gt;Comments&lt;/label&gt;
                &lt;bindingExpression&gt;PropertyList[@Name='COMMENTS' | Value]&lt;/bindingExpression&gt;
                &lt;validationRuleList&gt;
                  &lt;validationRule validationRuleName="textLength" errorMessage="The length must be between 0 and 60"&gt;
                    &lt;params&gt;
                      &lt;param name="min" value="0"/&gt;
                      &lt;param name="max" value="60"/&gt;
                    &lt;/params&gt;
                  &lt;/validationRule&gt;
                &lt;/validationRuleList&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COETextAreaLongView&lt;/CSSClass&gt;
                  &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
                  &lt;ID&gt;CommentsTextArea&lt;/ID&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;height&gt;50px&lt;/height&gt;
                  &lt;width&gt;653px&lt;/width&gt;
                  &lt;top&gt;125px&lt;/top&gt;
                  &lt;left&gt;15px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the Text property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly.GetData">
            <summary>
            <para>Gets the Text of the control.</para>
            </summary>
            <returns>A string with the control's text.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly.PutData(System.Object)">
            <summary>
            Sets the control's text.
            </summary>
            <param name="data">A string with the desired text of the control.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COETextAreaLongView&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COELabel&lt;/CSSLabelClass&gt;
              &lt;ID&gt;CommentsTextArea&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly.DefaultValue">
            <summary>
            Allows to set the default text.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextAreaReadOnly.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel">
            <summary>
            <para>
            This class implements a Label control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COELabel class accepts every Label property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default text of the label?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Columns, column's datafield and headertext...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;defaultValue&gt;Compound Information&lt;/defaultValue&gt;
                &lt;bindingExpression/&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COELabelTitle&lt;/CSSClass&gt;
                  &lt;ID&gt;CompoundTitleLabel&lt;/ID&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;top&gt;-20px&lt;/top&gt;
                  &lt;left&gt;0px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the "Text" of the Label.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel.GetData">
            <summary>
            <para>Gets the Text of the control.</para>
            </summary>
            <returns>A string with the control's text.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel.PutData(System.Object)">
            <summary>
            Sets the control's text.
            </summary>
            <param name="data">A string with the desired text of the control.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COELabelTitle&lt;/CSSClass&gt;
              &lt;ID&gt;CompoundTitleLabel&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel.DefaultValue">
            <summary>
            <para>Allows to set the default Text for the control.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.ApplicationName">
            <summary>
              Looks up a localized string similar to Core.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.AppNameNotSetInCSLA">
            <summary>
              Looks up a localized string similar to AppName must be set in Csla.ApplicationContext.GlobalContext[&quot;AppName&quot;].
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.CannotCompare">
            <summary>
              Looks up a localized string similar to Cannot compare two objects..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.CannotReplaceParamInLiteral">
            <summary>
              Looks up a localized string similar to Couldn&apos;t replace parameter in literal: &amp;currentVal - does the number of holders and parameters match?.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.ClassNotFound">
            <summary>
              Looks up a localized string similar to Could not load class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COEDataViewTableName">
            <summary>
              Looks up a localized string similar to COEDATAVIEW.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COEFormTableName">
            <summary>
              Looks up a localized string similar to COEFORM.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COEGenericObjectStorageTableName">
            <summary>
              Looks up a localized string similar to COEGENERICOBJECT.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COEProjectTableName">
            <summary>
              Looks up a localized string similar to COEPROJECT.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COESavedHitListIDTableName">
            <summary>
              Looks up a localized string similar to COESAVEDHITLISTID.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COESavedHitListTableName">
            <summary>
              Looks up a localized string similar to COESAVEDHITLIST.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COESearchCriteriaTableName">
            <summary>
              Looks up a localized string similar to COESEARCHCRITERIA.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COETempHitListIDTableName">
            <summary>
              Looks up a localized string similar to COETEMPHITLISTID.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.COETempHitListTableName">
            <summary>
              Looks up a localized string similar to COETEMPHITLIST.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.ControlNotFound">
            <summary>
              Looks up a localized string similar to Control not Found.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.DatabaseErrorMessage">
            <summary>
              Looks up a localized string similar to base is currently unavailable, pease try again later..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.DoesNotExistsBLL">
            <summary>
              Looks up a localized string similar to Unable to load BLL class .
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.DoesNotExtendBLL">
            <summary>
              Looks up a localized string similar to The BLL specified does not extend the DAL for the Service:  .
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.DoesNotExtendDAL">
            <summary>
              Looks up a localized string similar to The DAL specified does not extend the DAL for the Service:  .
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.EmptyDataSet">
            <summary>
              Looks up a localized string similar to The dataset is empty.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.FieldWithoutParentTable">
            <summary>
              Looks up a localized string similar to The Field does not have a parent Table. (Bad formatted xml?).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.InvalidFieldIndex">
            <summary>
              Looks up a localized string similar to Invalid field index..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.InvalidPositionsCast">
            <summary>
              Looks up a localized string similar to Cannot cast to SearchCriteria.Positions..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.InvalidSource">
            <summary>
              Looks up a localized string similar to Source is invalid SQLGeneratorVertex..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.InvalidTableIndex">
            <summary>
              Looks up a localized string similar to Invalid table index..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.InvalidTarget">
            <summary>
              Looks up a localized string similar to Target is invalid SQLGeneratorVertex.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.InvalidTypeInLike">
            <summary>
              Looks up a localized string similar to This data type can&apos;t be used in a like clause item..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.MainTableNotSet">
            <summary>
              Looks up a localized string similar to You should specify mainTable.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.MissingDefaultConstructor">
            <summary>
              Looks up a localized string similar to Missing Default Constructor.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.MolServerErrorMessage">
            <summary>
              Looks up a localized string similar to MolServer is currently unavailable, please try again later..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.MSTFileNotFound">
            <summary>
              Looks up a localized string similar to Cannot find required mst file..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.NameAlreadyExists">
            <summary>
              Looks up a localized string similar to The name you have chosen already exists. Please choose another one..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.ParserNotImplemented">
            <summary>
              Looks up a localized string similar to Be sure to implemet ISelectClauseParser in your select clause item (&amp;clauseName), and define it properly in SelectClauseClassMappings.xml.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.ReflectionErrors">
            <summary>
              Looks up a localized string similar to Couldn&apos;t instanciate Select Clause Item &amp;clauseName  class - &amp;className.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.Required">
            <summary>
              Looks up a localized string similar to Required.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.SecurityDatabaseName">
            <summary>
              Looks up a localized string similar to CS_SECURITY.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.SelectClauseNotFound">
            <summary>
              Looks up a localized string similar to Select Clause Item not found in SelectClauseClassMappings..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.SelectClauseNotSupported">
            <summary>
              Looks up a localized string similar to Select Clause Item not supported.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.SelectClauseWithoutDefaultConstructor">
            <summary>
              Looks up a localized string similar to Select Clause Item &amp;className doesn&apos;t have default constructor!.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.ServicesBaseTypeName">
            <summary>
              Looks up a localized string similar to CambridgeSoft.COE.Framework.Services.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.SortOrderField">
            <summary>
              Looks up a localized string similar to SORTORDER.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.SQLGeneratorErrorMessage">
            <summary>
              Looks up a localized string similar to The query that you wanted to do, could not be done..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.String1">
            <summary>
              Looks up a localized string similar to CS_SECURITY.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.SwitchColumnNotSpecified">
            <summary>
              Looks up a localized string similar to You must specify on wich column to perform the switch.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UnableToFindApplicationsInstance">
            <summary>
              Looks up a localized string similar to The Application {0} was not found in the config file.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UnableToFindConfigurationSection">
            <summary>
              Looks up a localized string similar to Configuration Section {0} not found.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UnableToFindDAlProviderInstance">
            <summary>
              Looks up a localized string similar to The DAL Provider was not found in the config file.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UnableToFindSearchServiceDataInstance">
            <summary>
              Looks up a localized string similar to The SearchServiceData key was not foundin the config file.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UnableToFindServicesInstance">
            <summary>
              Looks up a localized string similar to The Service {0} was not found in the config file.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UnableToLoadControl">
            <summary>
              Looks up a localized string similar to Unable to Load Control.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UnimplementedCriteria">
            <summary>
              Looks up a localized string similar to Unimplemented Criteria..
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UnsupportedDataType">
            <summary>
              Looks up a localized string similar to Unsupported data type.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UserNotAuthorizedForAddObject">
            <summary>
              Looks up a localized string similar to User not authorized to add a.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UserNotAuthorizedForDeleteObject">
            <summary>
              Looks up a localized string similar to User not authorized to delete a.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UserNotAuthorizedForEditObject">
            <summary>
              Looks up a localized string similar to User not authorized to edit a.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.UserNotAuthorizedForViewObject">
            <summary>
              Looks up a localized string similar to User not authorized to view a.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.Version">
            <summary>
              Looks up a localized string similar to 11.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Properties.Resources.VertexNotFound">
            <summary>
              Looks up a localized string similar to SQLGeneratorVertex &amp;id not found.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDataViewService.SystemDataOledbClientDAL.GetNewID">
            <summary>
            will get the new id by selecting max id from teh table DB_DATAVIEW_SEQ
            if the max id is 0 then will return the new id as 1 else will update the max id by 1 and wil
            return that id and also will update the DB_DATAVIEW_SEQ by the same value.
            </summary>
            <returns>the new id retrived</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.Utilities">
            <summary>
            Common utilities class.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utilities.GetProjectBasePath(System.String)">
            <summary>
            Returns the path to the specified project. It exctracts this information from the corresponding assembly.
            </summary>
            <param name="projectName">The name of the project whose path must be retrieved. It must match the assembly name</param>
            <returns>The project base path.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utilities.Left(System.String,System.Int32)">
            <summary>
            Returs the left part of a string with a length of <paramref name="iLen"/>.
            </summary>
            <param name="strParam">The base string.</param>
            <param name="iLen">The length</param>
            <returns>The left part of a string</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utilities.GZipCompress(System.String)">
            <summary>
            Compress a plain text using GZip method.
            </summary>
            <param name="plainText">Text to compress</param>
            <returns>GZip compressed byte array</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utilities.GZipDecompress(System.Byte[])">
            <summary>
            Decompress a text using the GZip method.
            </summary>
            <param name="encodedText">GZip compressed byte array</param>
            <returns>Plain text</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value">
            <summary>
            This class stores values of fields.
            The app values can have a different type than the field they are related to.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.value">
            <summary>
            Value of the field.
            Can be ignored if the field is used for storing a column name only.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.type">
            <summary>
            Type of the field. Used for producing the string representation of the value.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes its members to the given parameter values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.Equals(System.Object)">
            <summary>
            Two values are equals if all of its members has the same values.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if they are equals false if not.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.op_Equality(CambridgeSoft.COE.Framework.Common.SqlGenerator.Value,CambridgeSoft.COE.Framework.Common.SqlGenerator.Value)">
            <summary>
            Determines if two values are equal or not.
            </summary>
            <param name="left">Left member of the operation.</param>
            <param name="right">Right member of the operation.</param>
            <returns>True if equals, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.op_Inequality(CambridgeSoft.COE.Framework.Common.SqlGenerator.Value,CambridgeSoft.COE.Framework.Common.SqlGenerator.Value)">
            <summary>
            Determines if two values are different or not.
            </summary>
            <param name="left">Left member of the operation.</param>
            <param name="right">Right member of the operation.</param>
            <returns>True if defferents, false otherwise.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.ToString">
            <summary>
            Returns its string representation. Which is its the value itself, but if needed, the value is simple quotted.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.Val">
            <summary>
            Value of the field.
            Can be ignored if the field is used for storing a column name only.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Value.Type">
            <summary>
            Type of the value. Used for producing the string representation of the value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.Insert">
            <summary>
            Insert non query statement.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.Insert.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.Insert.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            Returns the INSERT itself as a string, and the list of parameters.
            </summary>
            <param name="databaseType">The DBMSType.</param>
            <returns>The string of the insert statement.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries.Insert.SelectStatement">
            <summary>
            If the values to be inserted are to be extracted from a subquery, the query is specified in this property.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ServiceData">
            <summary>
            Configuration data defining an COE Service
            </summary>    	
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.ServiceData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.ServiceData"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ServiceData.Name">
            <summary>
            Name of service
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ServiceData.DALProviderAssemblyNameShort">
            <summary>
            Name of service assembly to use short form
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ServiceData.DALProviderAssemblyNameFull">
            <summary>
            Name of service assbembly to use full form
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ServiceData.DALProviders">
            <summary>
            Gets the collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.DALProviderData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:CambridgeSoft.COE.Framework.Common.DALProviderData"/> objects.
            </value>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ServiceData.SearchServiceData">
            <summary>
            Gets the collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.ServiceData.SearchServiceData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.ServiceData.SearchServiceData"/> objects.
            </value>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SearchServiceData">
            <summary>
            This class serve to define any configuration data needed by the search service. 
            Properties can be added as needed. Each peopery will be added to the add element in the searchserviceData parent element
            <code lang="Xml">
              &lt;searchServiceData&gt;
                &lt;add name="aName" usefulNamedItem="example"  usefulValueFromNamedItem=""  possiblyAnotherUsefulValueFromNamedItem=""/&gt;
              &lt;/searchServiceData&gt;
            </code>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SearchServiceData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.SearchServiceData"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchServiceData.SomeNamedItem">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchServiceData.UsefulValueFromNamedItem">
            <summary>
            here is the propery for one of the values of this useful named item
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SearchServiceData.PossiblyAnotherUsefulValueFromNamedItem">
            <summary>
            If you want, you can add as many other value that are relevant to this named item.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView">
            <summary>
            <para>
            This class implements a GridView control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COEGridView class accepts every GridView property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default caption of the grid?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Columns, column's datafield and headertext...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;bindingExpression&gt;PercentageList&lt;/bindingExpression&gt;
                &lt;dataSource&gt;PercentageList&lt;/dataSource&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;ID&gt;PercentageGridView&lt;/ID&gt;
                  &lt;ReadOnly&gt;false&lt;/ReadOnly&gt;
                  &lt;CSSClass&gt;COEGridView&lt;/CSSClass&gt;
                  &lt;Style&gt;margin-left:5px;margin-top:5px;margin-bottom:5px;&lt;/Style&gt;
                  &lt;Columns&gt;
                  &lt;Column headerText='Compound #' dataField='DisplayKey' primaryKey='true' /&gt;
                  &lt;Column headerText='Percentage' dataField='Value' primaryKey='false' /&gt;
                  &lt;/Columns&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;position&gt;relative&lt;/position&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
              &lt;/formElements&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value" reffers to the "Caption", GetData and PutData Methods reffer to the whole gridview's values.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView.GetData">
            <summary>
            <para>Builds a DataTable with the data of the gridview.</para>
            </summary>
            <returns>A DataTable with the gridview's data.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView.PutData(System.Object)" -->
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;ID&gt;PercentageGridView&lt;/ID&gt;
              &lt;ReadOnly&gt;false&lt;/ReadOnly&gt;
              &lt;CSSClass&gt;COEGridView&lt;/CSSClass&gt;
              &lt;Style&gt;margin-left:5px;margin-top:5px;margin-bottom:5px;&lt;/Style&gt;
              &lt;Columns&gt;
              &lt;Column headerText='Compound #' dataField='DisplayKey' primaryKey='true' /&gt;
              &lt;Column headerText='Percentage' dataField='Value' primaryKey='false' /&gt;
              &lt;/Columns&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView.CreateMissedColumns(System.Collections.ArrayList)">
            <summary>
            Add those columns that were not added because have a different name from the public property in the object.
            </summary>
            <param name="columns">already created columns list</param>
            <returns>Same array of columns, but added the ones missed in previous steps</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView.IsPropertyList(System.String)">
            <summary>
            Method to check if the current binding expresion is related with a Property List property
            </summary>
            <param name="bindingExp">Text to inspect</param>
            <returns>Boolean indicating if this binding exp is related with a PropertyList</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView.SetCosmeticSettings(System.Web.UI.WebControls.GridViewRow)">
            <summary>
            Method to set all the cosmetic settings as CSSClass, width, etc
            </summary>
            <param name="currentRow">The row to apply cosmetic settings</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEGridView.DefaultValue">
            <summary>
            <para>Sets or gets the default caption for the GridView.</para>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList">
            <summary>
            <para>
            This class implements a DropDownList control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COEDropDownList class accepts every DropDownList property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What value would be selected by default?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
                &lt;formElement&gt;
                  &lt;label&gt;Chemist&lt;/label&gt;
                  &lt;bindingExpression&gt;PropertyList[@Name='CHEMIST' | Value]&lt;/bindingExpression&gt;
                  &lt;validationRuleList&gt;
                    &lt;validationRule validationRuleName="positiveInteger" errorMessage="The value must be a positive integer"/&gt;
                    &lt;validationRule validationRuleName="requiredField" errorMessage="You must select a chemist" /&gt;
                  &lt;/validationRuleList&gt;
                  &lt;dataSourceID&gt;ChemistsCslaDataSource&lt;/dataSourceID&gt;
                  &lt;configInfo&gt;
                    &lt;fieldConfig&gt;
                    &lt;CSSClass&gt;COEDropDownListNew&lt;/CSSClass&gt;
                    &lt;CSSLabelClass&gt;COERequiredField&lt;/CSSLabelClass&gt;
                    &lt;ID&gt;ChemistDropDownList&lt;/ID&gt;
                    &lt;dataTextField&gt;Value&lt;/dataTextField&gt;
                    &lt;dataValueField&gt;Key&lt;/dataValueField&gt;
                    &lt;/fieldConfig&gt;
                  &lt;/configInfo&gt;
                  &lt;displayInfo&gt;
                    &lt;height&gt;15px&lt;/height&gt;
                    &lt;width&gt;170px&lt;/width&gt;
                    &lt;top&gt;5px&lt;/top&gt;
                    &lt;left&gt;110px&lt;/left&gt;
                    &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList&lt;/type&gt;
                  &lt;/displayInfo&gt;
                &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the SelectedItem's value.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList.GetData">
            <summary>
            Gets the selected value as string.
            </summary>
            <returns>A string with the selected value.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList.PutData(System.Object)">
            <summary>
            Sets the selected value.
            </summary>
            <param name="data">A string with the desired selected value.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COEDropDownListNew&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COERequiredField&lt;/CSSLabelClass&gt;
              &lt;ID&gt;ChemistDropDownList&lt;/ID&gt;
              &lt;dataTextField&gt;Value&lt;/dataTextField&gt;
              &lt;dataValueField&gt;Key&lt;/dataValueField&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList.DefaultValue">
            <summary>
            Allows to set the default selected value.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDropDownList.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic">
            <summary>
            <para>
            This class implements an infragistics' UltraWebGrid that gets the doc manager (v9) documents associated to a registration record 
            and may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COEDocManager class accepts every UltraWebGrid property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What value would be the default reg number?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;label&gt;Doc Manager associated documents:&lt;/label&gt;
                &lt;bindingExpression&gt;RegNumber.RegNum&lt;/bindingExpression&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
                  &lt;CSSLabelClass&gt;COELabelTitle&lt;/CSSLabelClass&gt;
                  &lt;CSSLinkClass&gt;COELabelTitle&lt;/CSSLinkClass&gt;
                  &lt;Protocol&gt;http&lt;/Protocol&gt;
                  &lt;TargetURL&gt;%2Fdocmanager%2Fdocmanager%2Fexternallinks%2FgetDocumentsNoGUI.asp&lt;/TargetURL&gt;
                  &lt;AddDocsURL&gt;%2Fdocmanager%2Fdefault.asp%3Fdataaction%3Ddb%26formgroup%3Dbase_form_group%26dbname%3Ddocmanager%26extAppName%3DChem_Reg%26LinkType%3DCHEMREGREGNUMBER%26linkfieldname%3DROOT_NUMBER%26showselect%3Dtrue%26extlinkid%3D&lt;/AddDocsURL&gt;
                  &lt;ReturnType&gt;xml&lt;/ReturnType&gt;
                  &lt;LinkType&gt;CHEMREGREGNUMBER&lt;/LinkType&gt;
                  &lt;LinkTarget&gt;_blank&lt;/LinkTarget&gt;
                  &lt;DeleteItemText&gt;Delete&lt;/DeleteItemText&gt;
                  &lt;ShowLogo&gt;false&lt;/ShowLogo&gt;
                  &lt;EmptyGridMessage&gt;No documents links currently exists.&lt;/EmptyGridMessage&gt;
                  &lt;ShowSubmitDate&gt;true&lt;/ShowSubmitDate&gt;
                  &lt;Columns&gt;
                  &lt;Column key='Name' width='80px'/&gt;
                  &lt;Column key='Link' width='0px'/&gt;
                  &lt;Column key='DocName' width='250px'/&gt;
                  &lt;Column key='Owner' width='80px'/&gt;
                  &lt;Column key='Date' type='Button' width='200px'/&gt;
                  &lt;Column key='Delete' width='100px'/&gt;
                  &lt;/Columns&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                  &lt;top&gt;325px&lt;/top&gt;
                  &lt;left&gt;5px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", and PutData Methods reffer to the registry number, and GetData reffers to the documents
            associated to that registration number.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.GetData">
            <summary>
            Gets the documents associated to the previously set registry number.
            </summary>
            <returns>A DataTable with the associated links to the documents found.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.PutData(System.Object)">
            <summary>
            Sets the registry number that we are looking documents for.
            </summary>
            <param name="data">A string with the registry number</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.SetDataTableColumnsText">
            <summary>
            Method to read from the url response and set the columns title text
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.OnDataBinding(System.EventArgs)">
            <summary>
            Here we try to get the info from a source Url.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.HandleError(CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.ErrorStatus)">
            <summary>
            In case of error, display the correct error message.
            </summary>
            <param name="currentStatus">Status error to inspect</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.SetURL">
            <summary>
            Method to form the DocManagerDocument URL
            </summary>
            <returns> A url to the specific related docs</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.PopulateDataTableFromXML(System.Xml.XmlDocument)">
            <summary>
            Fill the Dt with the information of the XMLdoc
            </summary>
            <param name="currentXmlDoc">Source of info</param>
            <remarks>I(Ulises) didn't find a better way to do this, but I think it must be possible to do this with just one call, like ReadXml...</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.GetResponseFromURL(System.String)">
            <summary>
            Request a URL for an XML response object
            </summary>
            <param name="url">The server address</param>
            <returns>An xmlDoc with the response</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
              &lt;CSSLabelClass&gt;COELabelTitle&lt;/CSSLabelClass&gt;
              &lt;CSSLinkClass&gt;COELabelTitle&lt;/CSSLinkClass&gt;
              &lt;Protocol&gt;http&lt;/Protocol&gt;
              &lt;TargetURL&gt;%2Fdocmanager%2Fdocmanager%2Fexternallinks%2FgetDocumentsNoGUI.asp&lt;/TargetURL&gt;
              &lt;AddDocsURL&gt;%2Fdocmanager%2Fdefault.asp%3Fdataaction%3Ddb%26formgroup%3Dbase_form_group%26dbname%3Ddocmanager%26extAppName%3DChem_Reg%26LinkType%3DCHEMREGREGNUMBER%26linkfieldname%3DROOT_NUMBER%26showselect%3Dtrue%26extlinkid%3D&lt;/AddDocsURL&gt;
              &lt;ReturnType&gt;xml&lt;/ReturnType&gt;
              &lt;LinkType&gt;CHEMREGREGNUMBER&lt;/LinkType&gt;
              &lt;LinkTarget&gt;_blank&lt;/LinkTarget&gt;
              &lt;DeleteItemText&gt;Delete&lt;/DeleteItemText&gt;
              &lt;ShowLogo&gt;false&lt;/ShowLogo&gt;
              &lt;EmptyGridMessage&gt;No documents links currently exists.&lt;/EmptyGridMessage&gt;
              &lt;ShowSubmitDate&gt;true&lt;/ShowSubmitDate&gt;
              &lt;Columns&gt;
              &lt;Column key='Name' width='80px'/&gt;
              &lt;Column key='Link' width='0px'/&gt;
              &lt;Column key='DocName' width='250px'/&gt;
              &lt;Column key='Owner' width='80px'/&gt;
              &lt;Column key='Date' type='Button' width='200px'/&gt;
              &lt;Column key='Delete' width='100px'/&gt;
              &lt;/Columns&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.CosmeticSetUp">
            <summary>
            Cosmetic Setup (Set column properties... width, etc)
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.UserHasPrivileges(CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.Privileges)">
            <summary>
            Check in the COEPageControlSettings var if the user has privileges to do the current action.
            </summary>
            <param name="userPrivileges">Current privilege to check</param>
            <returns>A boolean value indicating if the user has the asked privilege</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.RemoveColumn(System.String)">
            <summary>
            Method to remove a column from the grid Control (if exists)
            </summary>
            <param name="columnKey">The column key ID</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.LinkType">
            <summary>
            The LinkType, currently Chem registry number is the only allowed.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.ReturnType">
            <summary>
            The return type, that may be xml or string.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.ServerURL">
            <summary>
            Full Server URL (for using inside the code)
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.Ticket">
            <summary>
            Ticket text to add to some URL for requests
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.ShowLogo">
            <summary>
            Would the logo be shown?
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.ShowSubmitDate">
            <summary>
            Would the submission date be shown?
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.DefaultValue">
            <summary>
            Gets or sets the default registry number.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.ReturnTypes">
            <summary>
            Types of returned info from server.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.LinkTypes">
            <summary>
            Link Types for DocManagerClassic
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.ErrorStatus">
            <summary>
            Supported Error Status from Server Response.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEDocManagerClassic.Privileges">
            <summary>
            Supported privileges for the current user.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.Utility.COEConvert">
            <summary>
            This class manages conversions from Framework Messaging Types Enums to strings and vice-versa. This is required for serialization.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToPositions(System.String)">
            <summary>
            Converts a given string to a SearchCriteria.Positions. Doesn't take into account casing.
            </summary>
            <param name="value">The string to be converted. Posible values: left, right, both, none</param>
            <returns>The corresponding position</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.SearchCriteria.Positions)">
            <summary>
            Converts the given SearchCriteria.Positions to string (uppercase)
            </summary>
            <param name="value">The SearchCriteria.Positions to be converted to string</param>
            <returns>The String representation of the value. Possible values: LEFT, RIGHT, BOTH, NONE</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToTetrahedralStereoMatching(System.String)">
            <summary>
             Converts a given string to a SearchCriteria.TetrahedralStereoMatching. Doesn't take into account casing.
            </summary>
            <param name="value">The string to be converted. Possible values: yes, no, any, either, same</param>
            <returns>The corresponding SearchCriteria.TetrahedralStereoMatching</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.SearchCriteria.TetrahedralStereoMatching)">
            <summary>
            Converts the given SearchCriteria.TetrahedralStereoMatching to string (uppercase)
            </summary>
            <param name="value">The SearchCriteria.TetrahedralStereoMatching to be converted to string</param>
            <returns>The string representation of the value. Possible values: YES, NO, ANY, EITHER, SAME</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToCOEBoolean(System.String)">
            <summary>
             Converts a given string to a SearchCriteria.COEBoolean. Doesn't take into account casing.
            </summary>
            <param name="value">the string to be converted. Possible values: yes, no</param>
            <returns>The corresponding SearchCriteria.COEBoolean</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.SearchCriteria.COEBoolean)">
            <summary>
            Converts the given SearchCriteria.COEBoolean to string (uppercase)
            </summary>
            <param name="value">The SearchCriteria.COEBoolean to be converted to string</param>
            <returns>The string representation of the value. Possible values: YES, NO</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToCOEOperator(System.String)">
            <summary>
             Converts a given string to a SearchCriteria.COEOperators. Doesn't take into account casing.
            </summary>
            <param name="value">The string to be converted. Possible values: GT, GTE, LT, LTE, EQUAL, NOTEQUAL, IN, LIKE</param>
            <returns>The corresponding SearchCriteria.COEOperators</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.SearchCriteria.COEOperators)">
            <summary>
            Converts the given SearchCriteria.COEOperators to string (uppercase)
            </summary>
            <param name="value">The SearchCriteria.COEOperators to be converted to string</param>
            <returns>The string representation of the value. Possible values: GT, GTE, LT, LTE, EQUAL, NOTEQUAL, IN</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToAbstractType(System.String)">
            <summary>
             Converts a given string to a COEDataView.AbstractTypes. Doesn't take into account casing.
            </summary>
            <param name="value">the string to be converted. Possible values: Text, Integer, Real, Date, Boolean</param>
            <returns>The Corresponding COEDataView.AbstractTypes</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.COEDataView.AbstractTypes)">
            <summary>
            Converts the given COEDataView.AbstractTypes to string (uppercase)
            </summary>
            <param name="value">The COEDataView.AbstractTypes to be converted to string</param>
            <returns>The string representation of the value. Possible values: TEXT, INTEGER, REAL, DATE, BOOLEAN</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToJoinType(System.String)">
            <summary>
             Converts a given string to a COEDataView.JoinTypes. Doesn't take into account casing.
            </summary>
            <param name="value">the string to be converted. Possible values: INNER, OUTER</param>
            <returns>The Corresponding COEDataView.JoinTypes</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.COEDataView.JoinTypes)">
            <summary>
            Converts the given COEDataView.JoinTypes to string (uppercase)
            </summary>
            <param name="value">The COEDataView.JoinTypes to be converted to string</param>
            <returns>The string representation of the value. Possible values: INNER, OUTER</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToSortDirection(System.String)">
            <summary>
             Converts a given string to a ResultsCriteria.SortDirection. Doesn't take into account casing.
            </summary>
            <param name="value">the string to be converted. Possible values: ASC, DESC</param>
            <returns>The Corresponding ResultsCriteria.SortDirection</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.ResultsCriteria.SortDirection)">
            <summary>
            Converts the given ResultsCriteria.SortDirection to string (uppercase)
            </summary>
            <param name="value">The ResultsCriteria.SortDirection to be converted to string</param>
            <returns>The string representation of the value. Possible values: asc, desc</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToIndexType(System.String)">
            <summary>
             Converts a given string to a COEDataView.IndexTypes. Doesn't take into account casing.
            </summary>
            <param name="value">the string to be converted. </param>
            <returns>The Corresponding COEDataView.IndexTypes</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.COEDataView.IndexTypes)">
            <summary>
            Converts the given COEDataView.IndexTypes to string (uppercase)
            </summary>
            <param name="value">The COEDataView.IndexTypes to be converted to string</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToMimeType(System.String)">
            <summary>
             Converts a given string to a COEDataView.MimeTypes. Doesn't take into account casing.
            </summary>
            <param name="value">the string to be converted. </param>
            <returns>The Corresponding COEDataView.MimeTypes</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.Utility.COEConvert.ToString(CambridgeSoft.COE.Framework.Common.COEDataView.MimeTypes)">
            <summary>
            Converts the given COEDataView.MimeTypes to string (uppercase)
            </summary>
            <param name="value">The COEDataView.MimeTypes to be converted to string</param>
            <returns>The string representation of the value. </returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.PagingInfo">
            <summary>
            Class that tell the framework how to page the results.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.PagingInfo.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.PagingInfo.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="doc">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.PagingInfo.GetFromXML(System.Xml.XmlDocument)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="xmlRequest">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.PagingInfo.GetFromXML(System.String)">
            <summary>
            Initializes its members from its xml representation.
            </summary>
            <param name="xmlRequest">The xml representation as string.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.PagingInfo.ToString">
            <summary>
            Builds its xml representation as string .
            </summary>
            <returns>The xml representation as string.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.PagingInfo.PagingInfoID">
            <summary>
            Unique identifier of the PagingInfo.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.PagingInfo.HitListID">
            <summary>
            Gets or sets the hitlist that is supposed to be get paged.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.PagingInfo.KeepAlive">
            <summary>
            Determines if results must be kept alive and how. Allowed values are:
            <para>NONE: The results won't be maintained alive at all.</para>
            <para>TRANSIENT: The results will be maintained as long as the same search manager is maintained.</para>
            <para>PERSISTENT: The results will be maintained no matter what.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.PagingInfo.RecordCount">
            <summary>
            Gets or sets the amount of records expected per page.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.PagingInfo.Start">
            <summary>
            Gets or sets the starting position of the page.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.PagingInfo.End">
            <summary>
            Gets or sets the position of the last record in page. RecordCount has precedence over End.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.PagingInfo.TransactionId">
            <summary>
            Unique identifier of a transaction.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.KeepAliveModes">
            <summary>
            Keep alive modes determines how results shall be maintained in server.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.KeepAliveModes.NONE">
            <summary>
            No keep alive.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.KeepAliveModes.TRANSIENT">
            <summary>
            Keep alive per search manager.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.Common.KeepAliveModes.PERSISTENT">
            <summary>
            Force keep alive.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.MolSrvWrapper.CSField">
            <summary>
            Summary description for CSField.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DatabaseData">
            <summary>
            Configuration data defining an Applicaton using a core service. 
            </summary>    	
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.DatabaseData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:CambridgeSoft.COE.Framework.Common.DatabaseData"/> class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.Name">
            <summary>
            Name of application
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.DBMSType">
            <summary>
            dbms type for application 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.DataSource">
            <summary>
            data source override
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.Owner">
            <summary>
            owner name of schema or catalog 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.Password">
            <summary>
            password for building connecton string for dbms
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.ProviderName">
            <summary>
            provider name used for connecting
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.ProviderOptions">
            <summary>
            provider options used for connecting
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.OracleTracing">
            <summary>
            dbms type for application 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.Tracing">
            <summary>
            dbms type for application 
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DatabaseData.SQLGeneratorData">
            <summary>
            Gets the collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.DatabaseData.SQLGeneratorData"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="P:CambridgeSoft.COE.Framework.Common.DatabaseData.SQLGeneratorData"/> objects.
            </value>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEPickListPickerService.OracleDataAccessClientDAL">
            <summary>
            Class for accessing Oracle's PickList and PickListDomain tables in order to serve to COEPickListPickerService.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishing.GetDatabase">
            <summary>
            Get a list of Owners presnet in a database
            </summary>
            <returns>a list of owners for the database </returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishing.PublishDatabase(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Validate Credentials, Add database to COE registered database, and create COE tables in exposed database
            </summary>
            <param name="OwnerName">Database Owner</param>
            <param name="Password">Password</param>
            <returns>DataView in Prredefined Xml format of the database</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishing.GetUserList(System.String)">
            <summary>
            Get a list of User presnet in CS_Security
            </summary>
            <returns>a DataTable of User in CS_Security</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishing.Username">
            <summary>
            Username for Saving Dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishing.Name">
            <summary>
            Name of Dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishing.Description">
            <summary>
            Description of Dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishing.Ispublic">
            <summary>
            true,if public Dataview
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEDatabasePublishingService.COEDatabasePublishing.COEDataViewID">
            <summary>
            ID of Dataview Created for the current Schema
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCDXToMolFile">
            <summary>
            <para>
            This class allows the user to perform a CsCartridge.CDXToMolFile SQL Statement. Which is implemented only in Oracle by now.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The SelectClauseCDXToMolFile class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field DataField:</b> The field where is located the molecule structure.</item>
            <item><b>string CartridgeSchema:</b> The name of the cartridge schema.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            This class supports only Oracle cartridge implementation.
            SelectClauses are implemented in two differentiable parts: The SelectClause itself, in charge of generating the string and a Parser whose responsibility is to extract the information needed for building the clause from an xmlnode.
            All SelectClause are mapped in mappings.xml, wich indicates given a SelectClause name, wich class to use for parsing and obtaining the generated string. There is a set of predefined SelectClauseItems, but the user can expand with his own. By implementing SelectClauseItem and ISelectClauseParser and adding the corresponding entry in this file.
            Along with SelectClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            CDXToMolFile molfile = new CDXToMolFile();
            molfile.DataField.FieldId = 20;
            molfile.DataField.FieldName = "base64_cdx";
            molfile.DataField.FieldType = System.Data.SqlDbType.VarBinary;
            molfile.DataField.Table.TableName = "inv_compounds";
            molfile.CartridgeSchema = "CSCARTRIDGE";
            query.AddSelectItem(molfile);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;CsCartridgeCDXToMolFile fieldId="20" CartridgeSchema="CSCARTRIDGE" /&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following select clause statement:
            </para>
            <para>
            CSCARTRIDGE.CDXToMolFile(inv_compounds.base64_cdx, '')
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCDXToMolFile.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCDXToMolFile.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method does the actual job.
            In this case returns the cscartridge formula sintaxys.
            </summary>
            <param name="dataBaseType">The database type.</param>
            <returns>A string containing the select part corresponding to this clause (i.e. the CsCartridge.Molweight(fieldName))</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCDXToMolFile.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Implementation of ISelectClauseParser. Returns an Instance of SelectClauseCDXToMolFile according to the desired xml snippet.
            </summary>
            <param name="fieldNode">The CsCartridge MolWeight node of the search results xml definition.</param>
            <param name="dvnLookup">The INamesLookup interface from wich the parser can obtain the names corresponding to ids in dataview.xml</param>
            <returns>An instance of SelectClauseCDXToMolFile.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCDXToMolFile.DataField">
            <summary>
            The field that contains the structure in the database.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseCDXToMolFile.CartridgeSchema">
            <summary>
            The cartridge name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorManager">
            <summary>
            <para>A manager for a collection of <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>. This manager is capable of holding and displaying several
            dynamic forms, which are defined by <see cref="T:CambridgeSoft.COE.Framework.Common.COEFormHolder"/>.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorManager.BindControl(CambridgeSoft.COE.Framework.Controls.COEFormGenerator.ICOEContainer)">
            <summary>
            Triggers the databinding process for a single Container control.
            </summary>
            <param name="control">The container to be bound.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorManager.Update">
            <summary>
            <para>Triggers the update process for each Generator held.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorManager.FindForm(System.String)">
            <summary>
            <para>Locates a form from its id.</para>
            </summary>
            <param name="Id">The form's id.</param>
            <returns>The form.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorManager.FormsDescription">
            <summary>
            <para>A collection of COEForm.</para>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGeneratorManager.DisplayMode">
            <summary>
            <para>The display mode that will be set for each COEFormGenerator.</para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.DAL.GetUserRoleIds(System.String,System.String)">
            <summary>
            Get a list of Roleids for a user<br/><br/>
            
            </summary>
            <param name="connString">full connection string to create connection</param>
            <param name="username">oracle user name</param>
            <param name="privtablename">cs_security privilege table name</param>
            <returns>Filled DataSet with resultset(s) of stored procedure</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.DAL.GetPrivsByRoleId(System.String,System.String)">
            <summary> Get privileges for a set of roles  </summary>
             <param name="roleidlist">Input parameter of stored procedure</param>
             <param name="privtablename">Input parameter of stored procedure</param>
             <param name="adapter">The DataAccessAdapter object to use for the call</param>
             <returns>Filled DataSet with resultset(s) of stored procedure</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.DAL.GetPrivTablesName">
            <summary>
            Method to read all the Privileges Tables associated with the current application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.DAL.ExecuteSqlQuery(System.String)">
            <summary>
            Method to execute a SQL query
            </summary>
            <param name="sql">The statment to run</param>
            <returns>The SQL response of the query</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.OracleDataAccessClientDAL.GetPersonIDProc(System.String)">
            <summary>
            Calls stored procedure 'LOGIN.GETPERSONID'. Can't have any cursors.<br/><br/>
            </summary>
            <param name="pusername">Input parameter of stored procedure</param>
            <param name="adapter">The DataAccessAdapter object to use for the call</param>
            <returns>person ID for the logged in user</returns>
            <remarks>This method does two things. One it makes a connection with the username and password. This checks that the acocunt exists
            Next, it checks that the is in the people table, which indicates they are registered with cs_secutiry schema. </remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.OracleDataAccessClientDAL.GetAllUsers">
            <summary>
            Calls stored procedure 'MANAGE_USERS.GETALLUSERS'.<br/><br/>
            </summary>
            <param name="connString">full connection string to create connection</param>
            <returns>Filled DataSet with resultset(s) of stored procedure</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CambridgeSoft.COE.Framework.COESecurityService.OracleDataAccessClientDAL.GetUsers(System.String)" -->
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.OracleDataAccessClientDAL.GetUser(System.String)">
            <summary>
            Calls stored procedure 'MANAGE_USERS.GETUSER'.<br/><br/>
            </summary>
            <param name="connString">full connection string to create connection</param>
            <param name="pusername">oracle user name</param>
            <returns>Filled DataSet with resultset(s) of stored procedure</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.OracleDataAccessClientDAL.GetPrivs(System.String)">
            <summary>
            Calls stored procedure 'LOGIN.GETPRIVS'.<br/><br/>
            
            </summary>
            <param name="privtablename">Input parameter of stored procedure</param>
            <param name="adapter">The DataAccessAdapter object to use for the call</param>
            <returns>Filled DataSet with resultset(s) of stored procedure</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESecurityService.OracleDataAccessClientDAL.GetRolePrivs(System.String)">
            <summary>
            Calls stored procedure 'MANAGE_ROLES.GETROLEPRIVS'.<br/><br/>
            </summary>
            <param name="rolename">Input parameter of stored procedure</param>
            <param name="adapter">The DataAccessAdapter object to use for the call</param>
            <returns>Filled DataSet with resultset(s) of stored procedure</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO">
            <summary>
            This class provides the ability to save a generic object by receiving a string representation of it.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.New(System.String)">
            <summary>
            Instantiates a <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO"/> to perform actions against the given database.
            </summary>
            <param name="databaseName">The database name</param>
            <returns>The <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.Get(System.String,System.Int32)">
            <summary>
            Instantiates a <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO"/> to perform actions against the given database and a given record id.
            </summary>
            <param name="databaseName">The database name</param>
            <param name="id">The record id</param>
            <returns>The <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.Delete(System.String,System.Int32)">
            <summary>
            Permanently removes the record with the given <paramref name="id"/> from the database named <paramref name="databaseName"/>.
            </summary>
            <param name="databaseName">The database name</param>
            <param name="id">The record id</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.Save">
            <summary>
            Based on the object state decides if an insertion, deletion or update is needed.
            </summary>
            <returns>The modified <see cref="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO"/></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.CanAddObject">
            <summary>
            Determines if the object can be added.
            </summary>
            <returns>True if the object can be added, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.CanGetObject">
            <summary>
            Determines if the object can be retrieved.
            </summary>
            <returns>True if the object can be retrieved, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.CanEditObject">
            <summary>
            Determines if the object can be edited.
            </summary>
            <returns>True if the object can be edited, false otherwise</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.CanDeleteObject">
            <summary>
            Determines if the object can be deleted.
            </summary>
            <returns>True if the object can be deleted, false otherwise</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.DatabaseName">
            <summary>
            The database name where the data will be stored.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.ID">
            <summary>
            Unique identifier.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.Name">
            <summary>
            A name for the generic object being stored.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.DateCreated">
            <summary>
            The date when the data was originally stored.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.Description">
            <summary>
            A description for the generic object.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.IsPublic">
            <summary>
            Indicates if only the creator can access this record or if everyone can.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.UserName">
            <summary>
            The user name storing/accessing the data.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.FormGroup">
            <summary>
            Form group id of the current data.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.COEGenericObject">
            <summary>
            The string representation of the object being saved/accessed.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBO.Criteria">
            <summary>
            Simple criteria that has only one parameter: The record id.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.OracleDataAccessClientDAL.CreateCOEFormTable">
            <summary>
            Create COEForm table
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.OracleDataAccessClientDAL.GetNewID">
            <summary>
            to return the next id
            </summary>
            <param name="dataView"></param>
            <returns></returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula">
            <summary>
            <para>
            This class allows the user to perform a CsCartridge.Formula SQL Statement. Which is implemented only in Oracle by now.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The SelectClauseFormula class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field DataField:</b> The field where is located the molecule structure.</item>
            <item><b>string CartridgeSchema:</b> The name of the cartridge schema.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            This class supports only Oracle cartridge implementation.
            SelectClauses are implemented in two differentiable parts: The SelectClause itself, in charge of generating the string and a Parser whose responsibility is to extract the information needed for building the clause from an xmlnode.
            All SelectClause are mapped in mappings.xml, wich indicates given a SelectClause name, wich class to use for parsing and obtaining the generated string. There is a set of predefined SelectClauseItems, but the user can expand with his own. By implementing SelectClauseItem and ISelectClauseParser and adding the corresponding entry in this file.
            Along with SelectClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            SelectClauseFormula formula = new SelectClauseFormula();
            formula.DataField.FieldId = 20;
            formula.DataField.FieldName = "base64_cdx";
            formula.DataField.FieldType = System.Data.SqlDbType.VarBinary;
            formula.DataField.Table.TableName = "inv_compounds";
            formula.CartridgeSchema = "CSCARTRIDGE";
            query.AddSelectItem(itemConcatenation);query.AddSelectItem(formula);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;CsCartridgeFormula fieldId="20" CartridgeSchema="CSCARTRIDGE" /&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following select clause statement:
            </para>
            <para>
            CSCARTRIDGE.Formula(inv_compounds.base64_cdx, '')
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType)">
            <summary>
            This method does the actual job.
            In this case returns the cscartridge formula sintaxys.
            </summary>
            <param name="dataBaseType">The database type.</param>
            <returns>A string containing the select part corresponding to this clause (i.e. the CsCartridge.Formula(fieldName,''))</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula.CreateInstance(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Implementation of ISelectClauseParser. Returns an Instance of SelectClauseFormula according to the desired xml snippet.
            </summary>
            <param name="fieldNode">The CsCartridge Formula node of the search results xml definition.</param>
            <param name="dvnLookup">The INamesLookup interface from wich the parser can obtain the names corresponding to ids in dataview.xml</param>
            <returns>An instance of SelectClauseFormula.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula.Alias">
            <summary>
            The field that contains the alias for the formula field.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula.DataField">
            <summary>
            The field that contains the structure in the database.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFormula.CartridgeSchema">
            <summary>
            The cartridge name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.Notification">
            <summary>
            
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.Notification.Notifications">
            <summary>
            
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.Notification.HasMessages">
            <summary>
            
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.HitListType">
            <summary>
            Contains information representing a hitlist operation. Allowed values are:
            <list type="bullet">
              <item>Temp: Temporary hitlist.</item>
              <item>Saved: Hitlist saved by an user.</item>
              <item>Marked: Marked hitlist.</item>
              <item>All: All above.</item>
            </list>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:CambridgeSoft.COE.Framework.HitListType.TEMP" -->
        <member name="F:CambridgeSoft.COE.Framework.HitListType.SAVED">
            <remarks> represents a saved hitlist </remarks>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.HitListType.MARKED">
            <remarks> represents a marked hitlist</remarks>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.HitListType.ALL">
            <remarks> represents all hitlist types</remarks>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.HitListInfo">
            <summary>
            Hit List related information
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.HitListInfo.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.HitListInfo.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes the messaging type from its xml representation.
            </summary>
            <param name="hitlistXml">Its xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.HitListInfo.GetFromXml(System.Xml.XmlDocument)">
            <summary>
            Loads itself from an xml representation of the object.
            </summary>
            <param name="hitlistXml">The xml representation.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.HitListInfo.GetFromXml(System.String)">
            <summary>
            Fills the HitListInfo object from it's xml representation contained in a string.
            </summary>
            <param name="hitlistXml">The string containing the HitListInfo xml representation</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.HitListInfo.ToString">
            <summary>
            Builds its xml representation as string .
            </summary>
            <returns>The xml representation as string.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.HitListInfo.HitListID">
            <summary>
            Unique identifier of a hitlist.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.HitListInfo.RecordCount">
            <summary>
            Quantity of records in the hitlist.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.HitListInfo.Database">
            <summary>
            datbase that hitlist refers to
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.HitListInfo.IsExactRecordCount">
            <summary>
            boolean indicated if record count is exact or approximate
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEFormHolder">
            <summary>
            <para>Messaging type that represents a collection of <see cref="T:CambridgeSoft.COE.Framework.Common.COEFormContainer"/> to be dynamically rendered. 
            This class is serializable to xml.</para>
            
            <code lang="xml">
              &lt;COEFormHolder xmlns="COE.COEForm"&gt;
                &lt;coeForm id="MixtureDrawingCOEFormGenerator" dataSourceID="mixtureCslaDataSource" displayCulture="fr-CH"&gt;...&lt;/coeForm&gt;
                &lt;coeForm id="ComponentCOEFormGenerator" dataSourceID="ComponentListCslaDataSource" displayCulture="fr-CH"&gt;...&lt;/coeForm&gt;
                ...
              &lt;/COEFormHolder&gt;
            </code>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEFormHolder.CreateCOEFormHolder(System.String)">
            <summary>
            Instantiates a COEFormHolder from its string xml representation.
            </summary>
            <param name="xmlString">The string xml representation.</param>
            <returns>The COEFormHolder messaging type.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEFormHolder.ToString">
            <summary>
            Overriden. Returns the string xml representation of the messaging type.
            </summary>
            <returns>Its string xml representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEFormHolder.COEForms">
            <summary>
            The list of <see cref="T:CambridgeSoft.COE.Framework.Common.COEFormContainer"/>. 
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEFormContainer">
            <summary>
            Base abstract class for those classes thay me be holded by a <see cref="T:CambridgeSoft.COE.Framework.Common.COEFormHolder"/>.
            
            <seealso cref="T:CambridgeSoft.COE.Framework.Common.COEForm"/>
            <seealso cref="T:CambridgeSoft.COE.Framework.Common.COEFormRepeater"/>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEFormContainer.ID">
            <summary>
            Unique identifier.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEFormContainer.DataSource">
            <summary>
            The datasource binding expression.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEFormContainer.DataSourceID">
            <summary>
            The datasource id
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEFormContainer.DisplayMode">
            <summary>
            The default display mode.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEFormRepeater">
            <summary>
            This class represents a repeater of a <see cref="P:CambridgeSoft.COE.Framework.Common.COEFormRepeater.COEForm"/>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEFormRepeater.COEForm">
            <summary>
            The COEForm that will be repeated.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEFormTemplate">
            <summary>
            The COEFormTemplate is the entire definition for a display mode for a <see cref="T:CambridgeSoft.COE.Framework.Common.COEForm"/>.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEFormTemplate.ContainerInfo">
            <summary>
            Global layout definition. Determines how wide and tall would be the area of the form in this mode.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEFormTemplate.ControlsInfo">
            <summary>
            A collection of form elements to be rendered in the form. Each element may be implemented by a .net control.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEForm">
            <summary>
            The COEForm is a complete form definition, that includes several <see cref="T:CambridgeSoft.COE.Framework.Common.COEFormTemplate"/>. Each template for each mode (Edit, View,
            Add and Query modes). It provides a page index for allowing paged datasources and also a display culture for allowing some elements to
            behave in different manners based on the display culture (Very usuful for calendars)
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEForm.CreateCOEForm(System.String)">
            <summary>
            Instantiates a COEForm from its string xml representation.
            </summary>
            <param name="xmlString">The string xml representation.</param>
            <returns>The COEForm messaging type.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.COEForm.ToString">
            <summary>
            Overriden. Returns the string xml representation of the messaging type.
            </summary>
            <returns>Its string xml representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEForm.PageIndex">
            <summary>
            Page Index, useful when the <see cref="T:CambridgeSoft.COE.Framework.Common.COEFormHolder"/>'s datasource is a paged datasource.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEForm.DisplayCulture">
            <summary>
            Here you can set how the control will look according the Culture.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEForm.EditTemplate">
            <summary>
            The form definition when the form is in Edit mode.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEForm.AddTemplate">
            <summary>
            The form definition when the form is in Add mode.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEForm.ViewTemplate">
            <summary>
            The form definition when the form is in View mode.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEForm.QueryTemplate">
            <summary>
            The form definition when the form is in Query mode.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.DisplayInfo">
            <summary>
            Class used for setting layout information at several levels
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DisplayInfo.Height">
            <summary>
            Sets or gets the height of the containing type (A form or an element).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DisplayInfo.Width">
            <summary>
            Sets or gets the width of the containing type (A form or an element).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DisplayInfo.Style">
            <summary>
            Sets or gets the style of the containing type (A form or an element).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DisplayInfo.Top">
            <summary>
            Sets or gets the top location of the containing type (A form or an element).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DisplayInfo.Left">
            <summary>
            Sets or gets the left location of the containing type (A form or an element).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DisplayInfo.Assembly">
            <summary>
            Sets or gets the assemble where the containing type is located (A form or an element).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DisplayInfo.Type">
            <summary>
            Sets or gets the class name that implements the containing type (A form or an element).
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.DisplayInfo.Position">
            <summary>
            Sets or gets the position (absolute or relative) of the containing type (A form or an element).
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.ControlInfo">
            <summary>
            Messaging type used to pass specify an element.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.Label">
            <summary>
            The label of the element.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.ServerEvents">
            <summary>
            Server events' subscriptions.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.ClientEvents">
            <summary>
            Client events' subscriptions.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.ValidationRuleList">
            <summary>
            List of client validations to be performed.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.DataSourceID">
            <summary>
            Datasource id of the control.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.DataSource">
            <summary>
            Datasource of the control.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.DefaultValue">
            <summary>
            Control's default value.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.BindingExpression">
            <summary>
            Control's binding expression.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.XmlData">
            <summary>
            Specific information to be passed down to the class that implements the element.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.ControlInfo.HolderInfo">
            <summary>
            Layout information of the element.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEEventInfo">
            <summary>
            Messaging type for passing the information needed to subscribe to controls events.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEEventInfo.EventHandlerName">
            <summary>
            The name of the method that will handle the event.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEEventInfo.EventName">
            <summary>
            The event to subscribe to.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEEventInfo.EventHandlerScript">
            <summary>
            If a script will handle the event, it may be passed through this property.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEValidationRuleInfo">
            <summary>
            List of client validation to be performed over an element.
            <b>Example:</b>
            <code lang="xml">
              &lt;validationRule validationRuleName="textLength" errorMessage="The length must be between 0 and 120"&gt;
                &lt;params&gt;
                  &lt;param name="min" value="0"/&gt;
                  &lt;param name="max" value="120"/&gt;
                &lt;/params&gt;
              &lt;/validationRule&gt;
            </code>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEValidationRuleInfo.ValidationRuleName">
            <summary>
            The rule Name. For a detailed list of allowed values see <see cref="T:CambridgeSoft.COE.Framework.Common.COEValidationRuleEnum"/>.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEValidationRuleInfo.ErrorMessage">
            <summary>
            The the validation fail, what would be the error massage for the user?
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEValidationRuleInfo.Params">
            <summary>
            A list of params for the validation rule. A common example is:
            <code lang="xml">
                &lt;params&gt;
                  &lt;param name="min" value="0"/&gt;
                  &lt;param name="max" value="120"/&gt;
                &lt;/params&gt;
            </code>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEParameter">
            <summary>
            Messaging type used for specifying parameters for validation rules.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEParameter.Name">
            <summary>
            The param name.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.COEParameter.Value">
            <summary>
            The param value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEValidationRuleEnum">
            <summary>
            Validation rules enumeration. Specify allowed values for validation rules' names:
            <list type="bullet">
              <item>requiredField</item>
              <item>numericRange</item>
              <item>positiveInteger</item>
              <item>integer</item>
              <item>double</item>
              <item>date</item>
              <item>textLength</item>
              <item>onlyChemicalContentAllowed</item>
              <item>wordListEnumeration</item>
            </list>
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.COEDisplayMode">
            <summary>
            Enumeration for allowed templates modes:
            <list type="bullet">
              <item>add</item>
              <item>edit</item>
              <item>query</item>
              <item>view</item>
            </list>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COELoggingService.COELogWriter.WriteLogEntry(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Write a log entry to a file with an message template specifed in code
            </summary>
            <param name="message">Error message to log</param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl">
            <summary>
            <para>
            This class implements an HyperLink control that may be used inside a <see cref="T:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator"/>.
            </para>
            <para>
            The COETextEdit class accepts every Infragistics' WebTextEdit property to be set, but as ICOEGenerable control it also provides
            GetData(), PutData(), DefaultValue and LoadFromXml() Methods.
            </para>
            <para>
            <b>Input XML</b>
            </para>
            <para>
                <list type="bullet">
                    <item>defalutValue: What is the default value of the text edit?</item>
                    <item>bindingExpression: What is the binding Attribute, relative to the datasource, of the formgenerator.</item>
                    <item>label: What is its label?</item>
                    <item>configInfo: Additional attributes like CSSClass, Style, Width, Height, ID...</item>
                </list>
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>With XML:</b>
            <code lang="XML">
              &lt;formElement&gt;
                &lt;defaultValue&gt;Resolve This Compound&lt;/defaultValue&gt;
                &lt;bindingExpression/&gt;
                &lt;configInfo&gt;
                  &lt;fieldConfig&gt;
                  &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
                  &lt;ID&gt;ResolveUrlControl&lt;/ID&gt;
                  &lt;/fieldConfig&gt;
                &lt;/configInfo&gt;
                &lt;displayInfo&gt;
                 &lt;top&gt;325px&lt;/top&gt;
                  &lt;left&gt;100px&lt;/left&gt;
                  &lt;type&gt;CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl&lt;/type&gt;
                &lt;/displayInfo&gt;
              &lt;/formElement&gt;
            </code>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            In this implementation "Default Value", GetData and PutData Methods reffer to the NavigateUrl property.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl.GetData">
            <summary>
            <para>Gets the NavigateUrl of the control.</para>
            </summary>
            <returns>A string with the control's NavigateUrl.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl.PutData(System.Object)">
            <summary>
            Sets the control's NavigateUrl and checks that the string format is an URL.
            </summary>
            <param name="data">A string with the desired value of the control.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl.LoadFromXml(System.String)">
            <summary>Loads its specific configuration from an xml in the form:
            <code lang="Xml">
              &lt;fieldConfig&gt;
              &lt;CSSClass&gt;COELabelView&lt;/CSSClass&gt;
              &lt;ID&gt;ResolveUrlControl&lt;/ID&gt;
              &lt;/fieldConfig&gt;
            </code>
            </summary>
            <param name="xmlDataAsString">The configInfo xml snippet</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl.DefaultValue">
            <summary>
            Allows to set the default NavigateUrl.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl.Label">
            <summary>
            Gets or sets the Control's label.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl.LabelCSSClass">
            <summary>
            Gets or sets the label's css class.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEUrlControl.Required">
            <summary>
            Gets or sets if the control is required to have a value.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataBinder">
            <summary>
            <para>
            Utilitarian class that allows to retrieve and set property values using COEFramework's binding expressions and using Reflection.
            </para>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataBinder.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the property specified by the binding expression.
            </summary>
            <param name="rootObject">The object that contains the property at some depth level</param>
            <param name="bindingExpression">The expression that specifies the property to look for, relative to root object</param>
            <param name="value">The new value of the property</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataBinder.RetrieveProperty(System.Object,System.String)">
            <summary>
            Resolves the binding Expression and retrieves the corresponding property.
            </summary>
            <param name="parent">The object on wich the search for the property will be performed.</param>
            <param name="bindingExpression">The expression that describes the location of the property relative to the parent object</param>
            <returns>The value of the property</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor">
            <summary>
            This class is responsible for handling Structure like queries. This class follows the template pattern along with search service GetHitList Method
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates a new instance of Structure Processor with a given SearchCriteria Item xml representation
            </summary>
            <param name="item">The SearchCriteriaItem xml represntation that is to be handled by this Processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor.#ctor(CambridgeSoft.COE.Framework.Common.SearchCriteria.SearchCriteriaItem)">
            <summary>
            Creates a new instance of Structure Processor with a given SearchCriteria Item
            </summary>
            <param name="item">The SearchCriteriaItem that is to be handled by this Processor</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor.PreProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template method Preprocess - performs the required setup steps for executing this processor.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor.Process">
            <summary>
            Template Method Process - returns the modified xml to be inserted in searchCriteria.xml
            </summary>
            <returns>a new searchCriteriaItem that is used to rebuild the searchCriteria xml</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor.PostProcess(CambridgeSoft.COE.Framework.COESearchService.DAL)">
            <summary>
            Template Method PostProcess - Performs the required steps for cleaning up the command execution.
            </summary>
            <param name="searchDAL">Search service DAL to be used if required.</param>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.COESearchService.Processors.StructureProcessor.TempTableName">
            <summary>
            Temporary table name to be used for inserting molecules in the preprocess step, in the case of using CSCartridge.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.ChemImplementations">
            <summary>
            Chemical search implementations.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.COESearchService.ChemImplementations.CsCartridge">
            <summary>
            Search used with Oracle.
            </summary>
        </member>
        <member name="F:CambridgeSoft.COE.Framework.COESearchService.ChemImplementations.MolServer">
            <summary>
            Mol server search approach.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchService.COESearch">
            <summary>
            COESearch is the class used for perfoming searches through the COEFramework.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.COESearch.DoSearch(CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            <para>General purpose search method, that based on the input parameters performs differents searches.</para>
            <para>Four parameters are needed:</para>
            <list type="bullet">
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.SearchCriteria"/>: This parameter defines the restrictions of the search.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria"/>: This parameter defines the desired result fields.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.PagingInfo"/>: This parameter defines the paging to be done.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.COEDataView"/>: This parameter defines a particular view of the database and the search will be performed
              over that view.</item>
            </list>
            </summary>
            <param name="searchCriteria">Search restrictions.</param>
            <param name="resultsCriteria">Desired resulting fields and tables.</param>
            <param name="pagingInfo">Desired paging.</param>
            <param name="dataView">A database view.</param>
            <returns>A <see cref="T:CambridgeSoft.COE.Framework.Common.SearchResponse"/> containing the resulting dataset and the modified <see cref="T:CambridgeSoft.COE.Framework.Common.HitListInfo"/> and <see cref="T:CambridgeSoft.COE.Framework.Common.PagingInfo"/>.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.COESearch.GetData(CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            <para>Search method that will get the data for an existing HitList.</para>
            <para>Three parameters are needed:</para>
            <list type="bullet">
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria"/>: This parameter defines the desired result fields.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.PagingInfo"/>: This parameter defines the paging to be done and <b>the existing hitlistid</b>.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.COEDataView"/>: This parameter defines a particular view of the database and the search will be performed
              over that view.</item>
            </list>
            </summary>
            <param name="resultsCriteria">Desired resulting fields and tables.</param>
            <param name="pagingInfo">Desired paging and <b>the hitlistid</b>.</param>
            <param name="dataView">A database view.</param>
            <returns>The resulting dataset.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.COESearch.DoGlobalSearch(CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo,CambridgeSoft.COE.Framework.Common.COEDataView[])">
            <summary>
            <para>Performs the same general purpose search on several dataviews.</para>
            <para>Four parameters are needed:</para>
            <list type="bullet">
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.SearchCriteria"/>: This parameter defines the restrictions of the search.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria"/>: This parameter defines the desired result fields.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.PagingInfo"/>: This parameter defines the paging to be done.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.COEDataView"/>[]: This parameter defines a list of particular views of the database and the search will be performed
              over those views.</item>
            </list>
            </summary>
            <param name="searchCriteria">Search restrictions.</param>
            <param name="resultsCriteria">Desired resulting fields and tables.</param>
            <param name="pagingInfo">Desired paging.</param>
            <param name="dataView">Several database views.</param>
            <returns>An array of <see cref="T:CambridgeSoft.COE.Framework.Common.SearchResponse"/> containing the resulting dataset and the modified <see cref="T:CambridgeSoft.COE.Framework.Common.HitListInfo"/> and <see cref="T:CambridgeSoft.COE.Framework.Common.PagingInfo"/>.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.COESearch.GetGlobalSearchData(CambridgeSoft.COE.Framework.Common.ResultsCriteria,CambridgeSoft.COE.Framework.Common.PagingInfo[],CambridgeSoft.COE.Framework.Common.COEDataView[])">
            <summary>
            <para>Retrieves a dataset on several dataviews based on several hitlist, one per dataview.</para>
            <para>Three parameters are needed:</para>
            <list type="bullet">
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.ResultsCriteria"/>: This parameter defines the desired result fields.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.PagingInfo"/>[]: This parameter defines the paging to be done and <b>the existing hitlistid</b> for each dataview.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.COEDataView"/>[]: This parameter defines a list of particular view of the database and the search will be performed
              over those views.</item>
            </list>
            </summary>
            <param name="resultsCriteria">Desired resulting fields and tables.</param>
            <param name="pagingInfo">Desired paging and <b>the hitlistid</b> for each dataview.</param>
            <param name="dataView">Several database views.</param>
            <returns>An array with the resulting datasets.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.COESearch.GetHitList(CambridgeSoft.COE.Framework.Common.SearchCriteria,CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            <para>Performs a general purpose search and retrieves the associated <see cref="T:CambridgeSoft.COE.Framework.Common.HitListInfo"/>.</para>
            <para>Two parameters are needed:</para>
            <list type="bullet">
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.SearchCriteria"/>: This parameter defines the restrictions of the search.</item>
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.COEDataView"/>: This parameter defines a particular view of the database and the search will be performed
              over that view.</item>
            </list>
            </summary>
            <param name="searchCriteria">Search restrictions.</param>
            <param name="dataView">A database view.</param>
            <returns>The associeted <see cref="T:CambridgeSoft.COE.Framework.Common.HitListInfo"/>.</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchService.COESearch.GetExactRecordCount(CambridgeSoft.COE.Framework.Common.COEDataView)">
            <summary>
            <para>Retrieves the total row count for the base table of the given dataview.</para>
            <para>One parameter is needed:</para>
            <list type="bullet">
              <item><see cref="T:CambridgeSoft.COE.Framework.Common.COEDataView"/>: This parameter defines a particular view of the database and the search will be performed
              over that view.</item>
            </list>
            </summary>
            <param name="dataView">A database view.</param>
            <returns>The exact row count.</returns>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.COESearchCriteriaService.SystemDataSqlClientDAL">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COESearchCriteriaService.SystemDataSqlClientDAL.GetNewID">
            <summary>
            
            </summary>
            <param name="dataView"></param>
            <returns></returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.COEFormService.COEFormBOList.LoadDAL(System.String)">
            <summary>
            Overloaded method of the LoadDAL, 
            </summary>
            <param name="appName">Name of the Application, It should be one from the provided in the Configuration.</param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight">
            <summary>
            <para>
            This class implements a MolWeightContains operator, which is an Oracle depandant query. The query is of type "CartridgeSchema.MolWeightContains(fld, massMin, massMax, options)=1”.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The WhereClauseMolWeight class required the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item>Field dataField: Represents the field of the database that is being compared. Its name and type are required.</item>
            <item>Value Val: This value is currently discarded. There is no use in filling it.</item>
            <item>double MinMass: The lower mass to compare to.</item>
            <item>double MaxMass: The higher mass to compare to.</item>
            <item>String  CartridgeSchema: This should be the name of the schema for the Cs Cartridge. By default it is set to CsCartridge.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            This implementation will work on Oracle database only and will throw an exception if other database is used.
            The Val property is discarded.
            </para>
            <para>
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            WhereClauseMolWeight clause = new WhereClauseMolWeight();
            clause.DataField.FieldId = 20;
            clause.DataField.FieldName = "Base64_cdx";
            clause.DataField.FieldType = System.Data.SqlDbType.VarBinary;
            clause.MinMass = 100.5;
            clause.MaxMass = 200;
            clause.CartridgeSchema = "CSCARTRIDGE";
            Query.AddWhereClauseItem(clause);
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;searchCriteriaItem id=XX fieldid=20 modifier=’’ tableid=3&gt;
            	&lt;MolWeightCriteria&gt;
            		&lt;CsCartridgeMolWeightCriteria min=’100.5’ max=’200’ /&gt;
            	&lt;/MolWeightCriteria>
            &lt;searchCriteriaItem&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following where clause statement:
            </para>
            <para>
            [AND] (CSCARTRIDGE.MolWeightContains(:1, :2, :3, :4)=1);
            </para>
            <para>
            And will add the following parameters to the query parameter list:
            </para>
            <list type="bullet">
            	<item>Value(Base64_cdx, DataFieldtype.Text),</item>
            	<item>Value(100.5, DataFieldtype.Real),</item>
            	<item>Value(200, DataFieldtype.Real),</item>
            	<item>Value(‘’, DataFieldtype.Text)</item>
            </list>
            <para>
            <b>To Be Done:</b> There is no way to define the CartridgeSchema in the xml. We should extend the xml to allow for it.
            </para>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight.#ctor">
            <summary>
            Initializes its values to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Gets the string representation of the molweight clause for the underlying database, and adds
            its param values to the already existing list of values of a query.
            </summary>
            <param name="databaseType">The database.</param>
            <param name="values">The already existing param values of a query.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight.CartridgeSchema">
            <summary>
            Gets or sets the cartridge schema name.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight.MinMass">
            <summary>
            Gets or sets the min mass.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseMolWeight.MaxMass">
            <summary>
            Gets or sets the max mass.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual">
            <summary>
            <para>
            This class implements an equal comparison operator, "=", in a  SQL where clause.
            </para>
            <para>
            <b>Input</b>
            </para>
            <para>
            The WhereClauseEqual class requires the following members to be initialized to the desired value:
            </para>
            <list type="bullet">
            <item><b>Field dataField:</b> Represents the field of the database that is being compared. Its name and type are required.</item>
            <item><b>Value Val:</b> represents the value against wich the dataField is being compared. Its value and type are required. The type of the field can differ from the type of the value.</item>
            <item><b>bool CaseSensitive:</b> flag that indicates whether take into account casing or not.</item>
            <item><b>Position TrimPosition:</b> flag that indicates how to perform the trim of value. Posible Values: Left, Right, Both, None.</item>
            </list>
            <para>
            <b>Notes:</b>
            </para>
            <para>
            The WhereClause decides whether it’s TextCriteria, NumericalCriteria, etc. based upon the Val Value field.
            This WhereClause can take into account casing and can perform trim of the input value. 
            In the special case of a numericalCriteria that is applied into a text database field, the trim operation trims leading and or trailing zeroes (instead of just spaces).
            In the case of a TextCriteria, this implementation compares the ascii codes of the strings.
            </para>
            <para>
            The SQL generation aims prepared statements rather than simple queries: parameters are not hardcoded into the query text, but marked with a parameter holder character. Parameters are returned in a separate list, ordered by position as they appear in the query.
            Along with WhereClause component of Query class, this class follows the command pattern, having the GetDependantString(DataBaseType, Values array) method as the “Execute Method”
            </para>
            <para>
            <b>Example:</b>
            </para>
            <b>Programatically:</b>
            <code lang="C#">
            WhereClauseEqual clause = new WhereClauseEqual();
            clause.TrimPosition = Positions.Both;
            clause.DataField = new Field();
            clause.DataField.FieldName = "MolWeight";
            clause.DataField.FieldType = System.Data.DbType.String;
            clause.Val.Type = System.Data.DbType.Decimal;
            clause.Val.Val = "	00018.00000	";
            </code>
            
            <b>With XML:</b>
            <code lang="XML">
            &lt;structureCriteriaItem id=XX fieldid=19 modifier='' tableid=3&gt;
            	&lt;numericalCriteria operator='EQUAL' trim='BOTH'&gt;	00018.00000	
            	&lt;/numericalCriteria&gt;
            &lt;/structureCriteriaItem&gt;
            </code>
            <para>
            <b>Output</b>
            </para>
            <para>
            This code will produce the following where clause statement:
            </para>
            <para>
            [AND] (MolWeight = :0)
            </para>
            <para>
            And will add the following parameters to the query parameter list:
            </para>
            <list type="bullet">
            <item>Value(18, DataFieldtype.Text)</item>
            </list>
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual.#ctor">
            <summary>
            Initializes its members to its default values.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual.GetDependantString(CambridgeSoft.COE.Framework.Common.DBMSType,System.Collections.Generic.List{CambridgeSoft.COE.Framework.Common.SqlGenerator.Value}@)">
            <summary>
            Encapsulates different sintaxis for the underlying RDBMS. If the equal will be case insensitive,
            then a lower is applied to the field and the value is lowered too.
            </summary>
            <exception cref="T:System.Exception">Thrown when the data type is not Text</exception>
            <returns>A string for the underlying RDBMS, in the form of: FieldName = FieldValue</returns>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual.CaseSensitive">
            <summary>
            Determines if the comparation is case sensitive.
            <remarks>If the field type is not Text this property is discarded.</remarks>
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual.TrimPosition">
            <summary>
            Determines if the value must be triimed, and where.
            </summary>
        </member>
        <member name="P:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseEqual.NormalizeChemicalName">
            <summary>
            Gets or sets if it is necessary to normalize the name.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFactory">
            <summary>
            Creates the right subclass of a SelectClauseItem, based upon input parameters.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems.SelectClauseFactory.CreateSelectClauseItem(System.Xml.XmlNode,CambridgeSoft.COE.Framework.Common.SqlGenerator.MetaData.INamesLookup)">
            <summary>
            Creates a SelectClause item, based on the results xml and the data view xml definitions.
            </summary>
            <param name="resultsXmlNode">The node from the search results xml that we are trying to instanciate.</param>
            <param name="dvnLookup">The data view object, needed in case of lookups of names.</param>
            <returns>A select clause item, instanced with the proper subclass.</returns>
            <remarks>It is necessary to determine how to load the items if they live in another assembly.</remarks>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.NotificationUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.NotificationUtility.AddNotification(CambridgeSoft.COE.Framework.Common.Notification@,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="notification"></param>
            <param name="messageID"></param>
            <param name="message"></param>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.GUIShell.GUIShellUtilities">
            <summary>
            Class that will provide all common functionalities to all the GUIShell Type Applications.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellUtilities.Encode(System.String)">
            <summary>
            Method to encode a string. 
            </summary>
            <param name="str">String to encode</param>
            <returns>Encoded String</returns>
            <remarks>This can be user when you don't what to display a string to the client side in plain text</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellUtilities.Decode(System.String)">
            <summary>
            Method to decode a string to see it in plain text
            </summary>
            <param name="str">String to decode</param>
            <returns>Plain string</returns>
            <remarks>Note that the string must be already encoded to get a plain string</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellUtilities.WriteToLog(CambridgeSoft.COE.Framework.GUIShell.GUIShellTypes.LogsCategories,System.String,System.String)">
            <summary>
            Method to write messages into the log file (trace.axd)
            </summary>
            <param name="logCategory">Category of the message</param>
            <param name="message">Text to write</param>
            <param name="appName">The name of the app trying to write the Log file</param>
            <remarks>For different GUIShell based apps, we can write to different log files</remarks>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellUtilities.CleanString(System.String)">
            <summary>
            Here we can clean the string from malicous characters as SQL Inyection, etc...
            </summary>
            <param name="stringToClean">Dirty string</param>
            <returns>Clean string</returns>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.GUIShell.GUIShellUtilities.DoLogout">
            <summary>
            Clean all session vars and then call to clean the CSLA identity object.
            </summary>
        </member>
        <member name="T:CambridgeSoft.COE.Framework.Common.FrameworkUtils">
            <summary>
            COEFramework utilitarian class.
            </summary>
        </member>
        <member name="M:CambridgeSoft.COE.Framework.Common.FrameworkUtils.BuildAndThrowSoapException(CambridgeSoft.COE.Framework.Common.Notification)">
            <summary>
            Builds a soap exception based on the notifications.
            </summary>
            <param name="notifications">The <see cref="T:CambridgeSoft.COE.Framework.Common.Notification"/> parameter</param>
            <exception cref="T:System.Web.Services.Protocols.SoapException">Throws a soap exception wrapping the notivications.</exception>
        </member>
    </members>
</doc>
