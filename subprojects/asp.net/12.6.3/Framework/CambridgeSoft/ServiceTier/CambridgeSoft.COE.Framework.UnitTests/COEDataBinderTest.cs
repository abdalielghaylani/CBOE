// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Controls.COEDataMapper;
using System.Data;
namespace CambridgeSoft.COE.Framework.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataBinder and is intended
    ///to contain all CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataBinder Unit Tests
    ///</summary>
    [TestClass()]
    public class COEDataBinderTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for RetrieveProperty (string)
        ///</summary>
        [TestMethod()]
        public void RetrievePropertyTest()
        {
            object parentObject = new Framework.Common.SecurityInfo("123", "username", "password");

            COEDataBinder target = new COEDataBinder(parentObject);

            string bindingExpression = "IdentityToken";

            object expected = "123";
            object actual;

            actual = target.RetrieveProperty(bindingExpression);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataBinder.RetrieveProperty" +
                    " did not return the expected value.");

        }

        /// <summary>
        ///A test for SetProperty (string, object)
        ///</summary>
        [TestMethod()]
        public void SetPropertyTest()
        {
            object parentObject = new Framework.Common.SecurityInfo("123", "username", "password");

            COEDataBinder target = new COEDataBinder(parentObject);

            string bindingExpression = "UserName";

            object value = "NewName"; // TODO: Initialize to an appropriate value

            target.SetProperty(bindingExpression, value);

            Assert.AreEqual("NewName", ((Framework.Common.SecurityInfo) parentObject).UserName, "CambridgeSoft.COE.Framework.Controls.COEDataMapper.COEDataBinder.SetProperty" +
                    " did not set the expected value.");
        }

        private class TestClass
        {
            #region Variables
            private string _stringValue;
            private int _intValue;
            private float _floatValue;
            TestInnerClass _innerObject;

            #endregion

            #region Properties
            public string StringValue
            {
                get {
                    return _stringValue;
                }
                set {
                    _stringValue = value;
                }
            }

            public int IntValue
            {
                get
                {
                    return _intValue;
                }
                set
                {
                    _intValue = value;
                }
            }

            public float FloatValue
            {
                get
                {
                    return _floatValue;
                }
                set
                {
                    _floatValue = value;
                }
            }
            #endregion

            #region Constructors
            public TestClass()
            {
                _innerObject = new TestInnerClass();
            }
            #endregion
        }

        private class TestInnerClass
        {
            #region Constructors
            public TestInnerClass()
            {
                _dataSet = new DataSet();
            }
            #endregion

            #region Variables
            private string _stringValue;
            private int _intValue;
            private float _floatValue;
            private DataSet _dataSet;
            #endregion

            #region Properties
            public string StringValue
            {
                get
                {
                    return _stringValue;
                }
                set
                {
                    _stringValue = value;
                }
            }

            public int IntValue
            {
                get
                {
                    return _intValue;
                }
                set
                {
                    _intValue = value;
                }
            }

            public float FloatValue
            {
                get
                {
                    return _floatValue;
                }
                set
                {
                    _floatValue = value;
                }
            }
            #endregion
        }

    }


}
