// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.Messaging;
using CambridgeSoft.COE.Framework.Controls.COEFormGenerator;
using System.Xml;
using CambridgeSoft.COE.Framework.Common;
using System.Data;
using CambridgeSoft.COE.Framework.Controls.COEDataMapper;
namespace CambridgeSoft.COE.Framework.Controls.COEFormGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator and is intended
    ///to contain all CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COEFormGenerator Unit Tests
    ///</summary>
    [TestFixture]
    public class COEFormGeneratorTest
    {


        private TestContext testContextInstance;
        private string _pathToXmls = AppDomain.CurrentDomain.BaseDirectory.Substring(0, AppDomain.CurrentDomain.BaseDirectory.IndexOf("CambridgeSoft.COE.Framework.NUnitTests")) + @"CambridgeSoft.COE.Framework.NUnitTests" + @"\FormGenerator XML";


        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[TestFixtureSetUp]
        //public static void MyClassInitialize()
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[TestFixtureTearDown]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[SetUp]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TearDown]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetCOEGenerableControl (FormGroup.FormElement, out string)
        ///</summary>
        [Test]
        public void GetCOEGenerableControlTest()
        {
            try
            {
                XmlDocument document = new XmlDocument();
                document.Load(_pathToXmls + "\\FormElements.xml");

                string errorMessage;
                List<ICOEGenerableControl> actualGenerableControls = new List<ICOEGenerableControl>();
                foreach(XmlNode currentNode in document.DocumentElement.ChildNodes)
                {
                    FormGroup.FormElement formElement = FormGroup.FormElement.GetFormElement(currentNode.OuterXml);

                    actualGenerableControls.Add(COEFormGenerator.GetCOEGenerableControl(formElement, out errorMessage));

                    if(!string.IsNullOrEmpty(errorMessage))
                        Assert.Fail(errorMessage);

                    if(currentNode.SelectSingleNode("configInfo") != null && currentNode.SelectSingleNode("configInfo").ChildNodes.Count > 0)
                        if(formElement.ConfigInfo == null)
                            Assert.Fail("'configInfo' node not loaded");
                }

                document.Load(_pathToXmls + "\\FormGroup.xml");
                FormGroup formGroup = FormGroup.GetFormGroup(document.OuterXml);

                foreach(FormGroup.FormElement currentFormElement in formGroup.ListForms.Displays[0].Forms[0].LayoutInfo)
                {
                    actualGenerableControls.Add(COEFormGenerator.GetCOEGenerableControl(currentFormElement.ToString(), out errorMessage));
                    if(!string.IsNullOrEmpty(errorMessage))
                        Assert.Fail(errorMessage);
                }
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for GetCOEGenerableControl (FormGroup.FormElement, out string)
        ///</summary>
        [Test]
        public void COEDataBinderTest()
        {
            try
            {
                ParentClass parentObject = new ParentClass();

                string nombre_expected = "lalala";
                int id_expected = int.MinValue;
                DateTime fecha_expected = DateTime.Today;
                float value_expected = float.MaxValue;

                COEDataBinder dataBinder = new COEDataBinder(parentObject);


                parentObject = (ParentClass) dataBinder.RetrieveProperty("this");
                dataBinder.SetProperty("Id", id_expected);
                dataBinder.SetProperty("Nombre", nombre_expected);
                dataBinder.SetProperty("Fecha", fecha_expected);
                dataBinder.SetProperty("Value", value_expected);
                dataBinder.SetProperty("ChildObject.Id", id_expected);
                //TODO: Next line is not working any more...
                //dataBinder.SetProperty("ChildObject.IntegerArray[1]", 1);

                parentObject.ChildObject.StringList.Add("0");
                parentObject.ChildObject.StringList.Add("1");
                parentObject.ChildObject.StringList.Add("2");
                parentObject.ChildObject.StringDictionary.Add("key", "value");
                parentObject.ChildObject.StringDictionary.Add("key1", "value1");

                dataBinder.RetrieveProperty("Id");
                dataBinder.RetrieveProperty("this.Id");
                dataBinder.RetrieveProperty("this.ChildObject.Id");
                dataBinder.RetrieveProperty("this.ChildObject.IntegerArray");
                dataBinder.RetrieveProperty("this.ChildObject.IntegerArray[0]");

                try
                {
                    dataBinder.RetrieveProperty("this.ChildObject.IntegerArray[0");
                    Assert.Fail("Invalid BindingExpression was parsed without errors");
                }
                catch
                {

                }

                dataBinder.RetrieveProperty("this.ChildObject.StringList[1]");
                dataBinder.RetrieveProperty("this.ChildObject.StringDictionary['key']");
                try
                {
                    dataBinder.RetrieveProperty("this.ChildObject.StringDictionary['key]");
                    Assert.Fail("Invalid BindingExpression was parsed without errors");
                }
                catch { }


                string nombre = (string) dataBinder.RetrieveProperty("Nombre");
                int id = (int) dataBinder.RetrieveProperty("Id");
                id = (int) dataBinder.RetrieveProperty("this.Id");
                DateTime fecha = (DateTime) dataBinder.RetrieveProperty("Fecha");
                float value = (float) dataBinder.RetrieveProperty("Value");
                DataSet dataset = (DataSet) dataBinder.RetrieveProperty("Dataset");

                DataRow[] parentRows = (DataRow[]) dataBinder.RetrieveProperty("Tables[0]");
                DataRow[] childrenRows = (DataRow[]) dataBinder.RetrieveProperty("Tables[1]");

                DataTable parentTable = (DataTable) dataBinder.RetrieveProperty("Dataset.Tables['ParentTable']");
                DataTable childTable = (DataTable) dataBinder.RetrieveProperty("Dataset.Tables['ChildTable']");

                DataRow parentTableRow = (DataRow) dataBinder.RetrieveProperty("Dataset.Tables['ParentTable'].Rows[0]");
                DataRow childTableRow = (DataRow) dataBinder.RetrieveProperty("Dataset.Tables['ChildTable'].Rows[0]");

                string parentTableRowName = (string) dataBinder.RetrieveProperty("Dataset.Tables['ParentTable'].Rows[0]['Name']");
                string childTableRowName = (string) dataBinder.RetrieveProperty("Dataset.Tables['ChildTable'].Rows[0]['Name']");

                childTableRowName = (string) dataBinder.RetrieveProperty("Dataset.Tables[this.ChildObject.IntegerArray[1]].Rows[this.ChildObject.IntegerArray[1]]['Name']");
                childTableRowName = (string) dataBinder.RetrieveProperty("Dataset.Tables[ChildObject.IntegerArray[1]].Rows[ChildObject.IntegerArray[1]]['Name']");

                dataBinder.SetProperty("Dataset.Tables['ParentTable'].Rows[0]['Name']", "ParentTableRow0Name");

                Assert.AreEqual(nombre, nombre_expected, "Actual and expected parameter don't match");
                Assert.AreEqual(id, id_expected, "Actual and expected parameter don't match");
                Assert.AreEqual(value, value_expected, "Actual and expected parameter don't match");
                Assert.AreEqual(fecha, fecha_expected, "Actual and expected parameter don't match");
                Assert.AreEqual(parentObject.Dataset.Tables["ParentTable"].Rows[0]["Name"], "ParentTableRow0Name", "Actual and expected parameter don't match");

                dataBinder = new COEDataBinder(parentObject.Dataset.Tables[0].Rows[0]);
                parentTableRowName = (string) dataBinder.RetrieveProperty("this['Name']");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        private class ParentClass
        {
            #region Variables
            private string _nombre;
            private int _id;
            private DateTime _fecha;
            private float _value;
            private DataSet _dataset;
            private ChildClass _childObject;
            #endregion

            #region Properties
            public ChildClass ChildObject
            {
                get
                {
                    if(_childObject == null)
                        _childObject = new ChildClass();

                    return _childObject;
                }
                set
                {
                    _childObject = value;
                }
            }
            public string Nombre
            {
                get
                {
                    return _nombre;
                }
                set
                {
                    _nombre = value;
                }
            }

            public int Id
            {
                get
                {
                    return _id;
                }
                set
                {
                    _id = value;
                }
            }
            public DateTime Fecha
            {
                get
                {
                    return _fecha;
                }
                set
                {
                    _fecha = value;
                }
            }
            public float Value
            {
                get
                {
                    return _value;
                }
                set
                {
                    _value = value;
                }
            }

            public DataSet Dataset
            {
                get
                {
                    return _dataset;
                }
                set
                {
                    _dataset = value;
                }
            }
            #endregion

            #region Constructors
            public ParentClass()
            {
                _dataset = this.GetSampleDataSet();

                PopulateTables();
            }
            #endregion

            #region Methods
            private void PopulateTables()
            {
                this._tables = new List<DataRow[]>();

                DataRow[] parentTableRows = new DataRow[_dataset.Tables[0].Rows.Count];
                this._dataset.Tables[0].Rows.CopyTo(parentTableRows, 0);

                this._tables.Add(parentTableRows);

                for(int index = 1; index < _dataset.Tables.Count; index++)
                    _tables.Add(GetChildTableRows(index));
            }

            private List<DataRow[]> _tables;

            public List<DataRow[]> Tables
            {
                get
                {
                    return this._tables;
                }
            }

            private DataRow[] GetChildTableRows(int index)
            {
                foreach(DataRelation currentRelation in this._dataset.Relations)
                    if(currentRelation.ChildTable.TableName == _dataset.Tables[index].TableName)
                    {
                        if(index < currentRelation.ParentTable.Rows.Count)
                        {
                            DataRow parentRow = currentRelation.ParentTable.Rows[index];
                            DataRow[] rows = parentRow.GetChildRows(currentRelation);
                            return rows;
                        }
                    }

                return null;
            }

            private DataSet GetSampleDataSet()
            {
                DataSet dataset = new DataSet();

                DataTable parentTable = dataset.Tables.Add("ParentTable");
                DataColumn parentColumn = parentTable.Columns.Add("Id", typeof(int));
                parentTable.Columns.Add("Name", typeof(string));
                parentTable.Columns.Add("Formula", typeof(string));

                int index = 1;
                parentTable.Rows.Add(index++, "Ciclohexane", "C1CCCCC1");
                parentTable.Rows.Add(index++, "Ciclopentane", "C1CCCC1");
                parentTable.Rows.Add(index++, "Ciclobutano", "C1CCC1");
                parentTable.Rows.Add(index++, "Ciclopropano", "C1CCC1");

                DataTable childTable = dataset.Tables.Add("ChildTable");
                childTable.Columns.Add("Id", typeof(int));
                childTable.Columns.Add("Name", typeof(string));
                DataColumn childColumn = childTable.Columns.Add("ParentId", typeof(int));

                index = 1;
                childTable.Rows.Add(index++, "Chiclohexane child 1", 1);
                childTable.Rows.Add(index++, "Chiclohexane child 2", 1);
                childTable.Rows.Add(index++, "Chiclohexane child 3", 1);

                childTable.Rows.Add(index++, "Chiclopentane child 1", 2);
                childTable.Rows.Add(index++, "Chiclopentane child 2", 2);
                childTable.Rows.Add(index++, "Chiclopentane child 3", 2);

                childTable.Rows.Add(index++, "Ciclopropano child 1", 4);
                childTable.Rows.Add(index++, "Ciclopropano child 2", 4);
                childTable.Rows.Add(index++, "Ciclopropano child 3", 4);

                dataset.Relations.Add(parentColumn, childColumn);

                return dataset;
            }
            #endregion
        }

        private class ChildClass
        {
            #region Variables
            private int _id;
            private int[] _integerArray;
            private List<string> _stringList;
            private IDictionary<string, string> _stringDictionary;
            #endregion

            #region Properties
            public int Id
            {
                get
                {
                    return _id;
                }
                set
                {
                    _id = value;
                }
            }

            public int[] IntegerArray
            {
                get
                {
                    if(_integerArray == null)
                        _integerArray = new int[10];

                    return _integerArray;
                }
                set
                {
                    _integerArray = value;
                }
            }

            public List<string> StringList
            {
                get
                {
                    if(_stringList == null)
                        _stringList = new List<string>();

                    return _stringList;
                }
                set
                {
                    _stringList = value;
                }
            }

            public IDictionary<string, string> StringDictionary
            {
                get
                {
                    if(_stringDictionary == null)
                        _stringDictionary = new Dictionary<string, string>();

                    return _stringDictionary;
                }
                set
                {
                    _stringDictionary = value;
                }
            }
            #endregion
        }
    }
}
