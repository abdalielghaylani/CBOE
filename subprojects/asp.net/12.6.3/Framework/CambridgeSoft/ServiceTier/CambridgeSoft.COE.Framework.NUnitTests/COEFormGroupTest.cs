// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.Messaging;
using System.Xml;
namespace CambridgeSoft.COE.Framework.Common.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.Messaging.COEFormGroup and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.Messaging.COEFormGroup Unit Tests
    ///</summary>
    [TestFixture]
    public class COEFormGroupTest
    {
        private string pathToXmls = AppDomain.CurrentDomain.BaseDirectory.Substring(0, AppDomain.CurrentDomain.BaseDirectory.IndexOf("CambridgeSoft.COE.Framework.NUnitTests")) + @"CambridgeSoft.COE.Framework.NUnitTests\COEFormGroup XML\";
        //AppDomain.CurrentDomain.BaseDirectory.Substring(0, AppDomain.CurrentDomain.BaseDirectory.IndexOf("CambridgeSoft.COE.Framework.NUnitTests")) + @"CambridgeSoft.COE.Framework.NUnitTests" + @"\COEFormGroup XML\";
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[TestFixtureSetUp]
        //public static void MyClassInitialize()
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[TestFixtureTearDown]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[SetUp]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TearDown]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetCOEFormGroup (string)
        ///</summary>
        [Test]
        [Explicit("Fix it later")]
        public void GetCOEFormGroupSerializationTest()
        {
            try
            {
                XmlDocument document = new XmlDocument();
                document.Load(this.pathToXmls + "FormGroup.xml");
                string xml = document.OuterXml;

                FormGroup actual = FormGroup.GetFormGroup(xml);

                XmlDocument expectedXmlDocument = new XmlDocument();
                expectedXmlDocument.Load(this.pathToXmls + "ExpectedFormGroup.xml");

                XmlDocument actualXmlDocument = new XmlDocument();
                actualXmlDocument.LoadXml(actual.ToString());

                Assert.AreEqual(expectedXmlDocument.OuterXml, actualXmlDocument.OuterXml, 
                                            "CambridgeSoft.COE.Framework.Common.Messaging.COEFormGroup.GetCOEFormGroup did not" +
                                            " return the expected value.");
            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }
        
        /// <summary>
        ///A test for GetCOEFormGroup (string)
        ///</summary>
        [Test]
        public void GetCOEFormCodeUsageTest()
        {
            try
            {
                FormGroup actual = new FormGroup();
                
                actual.QueryForms.Add(new FormGroup.Display());
                actual.QueryForms[0].Forms.Add(new FormGroup.Form());
                actual.QueryForms[0].Forms[0].LayoutInfo.Add(new FormGroup.FormElement());
                actual.QueryForms[0].Forms[0].LayoutInfo[0].Id = "SmileyLabel";
                actual.QueryForms[0].Forms[0].LayoutInfo[0].Label = "Formula";
                actual.QueryForms[0].Forms[0].LayoutInfo[0].DefaultValue = "Formula";
                actual.QueryForms[0].Forms[0].LayoutInfo[0].DisplayInfo.Assembly = "CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COELabel";
                actual.QueryForms[0].Forms[0].LayoutInfo[0].DisplayInfo.Top = "7px";
                actual.QueryForms[0].Forms[0].LayoutInfo[0].DisplayInfo.Left = "7px";

                actual.QueryForms[0].Forms[0].LayoutInfo.Add(new FormGroup.FormElement());
                actual.QueryForms[0].Forms[0].LayoutInfo[1].Id = "SmileyTextBox";
                actual.QueryForms[0].Forms[0].LayoutInfo[1].Label = "Formula";
                actual.QueryForms[0].Forms[0].LayoutInfo[1].DisplayInfo.Assembly = "CambridgeSoft.COE.Framework.Controls.COEFormGenerator.COETextBox";
                actual.QueryForms[0].Forms[0].LayoutInfo[1].DisplayInfo.Top = "7px";
                actual.QueryForms[0].Forms[0].LayoutInfo[1].DisplayInfo.Left = "177px";

                actual.DetailsForms.Add(new FormGroup.Display());
                actual.DetailsForms[0].Forms.Add(new FormGroup.Form());
                actual.DetailsForms[0].Forms[0].LayoutInfo.Add(new FormGroup.FormElement());
                actual.DetailsForms[0].Forms[0].LayoutInfo[0].Id = "LalalaTextBox";
                actual.DetailsForms[0].Forms[0].LayoutInfo[0].Label = "Lalala";
                actual.DetailsForms[0].Forms[0].AddMode.Add(new FormGroup.FormElement());
                actual.DetailsForms[0].Forms[0].AddMode[0].Id = "LalalaTextBox";

            }
            catch (Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

    }


}
