// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using System.Xml;
using CambridgeSoft.COE.Framework.COEGenericObjectStorageService;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.COESecurityService;
using CambridgeSoft.COE.Framework.NUnitTests.Helpers;
using System.Configuration;

namespace CambridgeSoft.COE.Framework.COEGenericObjectStorageService.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageListBO and is intended
    ///to contain all CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageListBO Unit Tests
    ///</summary>
    [TestFixture]
    public class COEGenericObjectStorageListBOTest
    {
        #region Variables
        private string pathToXmls = SearchHelper.GetExecutingTestResultsBasePath(@"\TestXML");
        private string databaseName = "SAMPLE";
        private string USERNAME = ConfigurationManager.AppSettings["LogonUserName"];
        private string PASSWORD = ConfigurationManager.AppSettings["LogonPassword"];
        private DALFactory _dalFactory = new DALFactory();
        private TestContext testContextInstance;
        static List<int> newIds = new List<int>();
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the test context which provides information about and functionality for the current test run.
        /// </summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #endregion

        #region Test Methods
        [TearDown]
        public void TestCleanup()
        {
            foreach (int id in newIds)
            {
                COEGenericObjectStorageBO.Delete(id);
            }
        }

        [SetUp]
        public void MyTestInitialize()
        {
            COEPrincipal.Logout();
            System.Security.Principal.IPrincipal user = Csla.ApplicationContext.User;
            bool result = COEPrincipal.Login(USERNAME, PASSWORD);
            StoreManyObjectsTest();
        }

        private void StoreManyObjectsTest()
        {
            try
            {
                //this should create a new object
                newIds.Add(StoreGenericObject(USERNAME, true, -1).ID);
                newIds.Add(StoreGenericObject(USERNAME, false, -1).ID);
                newIds.Add(StoreGenericObject(USERNAME, true, -1).ID);
                newIds.Add(StoreGenericObject(USERNAME, false, -1).ID);
                newIds.Add(StoreGenericObject(USERNAME, true, -1).ID);
                newIds.Add(StoreGenericObject(USERNAME, false, -1).ID);
                newIds.Add(StoreGenericObject(USERNAME, true, -1).ID);
                newIds.Add(StoreGenericObject(USERNAME, false, -1).ID);
            }
            catch (Exception) { }

            Assert.IsTrue(1 == 1, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                    "eBO.New did not return the expected value.");
        }

        /// <summary>
        ///A test for GetList ()
        ///</summary>
        [Test]
        public void GetListTest()
        {
            COEGenericObjectStorageBOList expected = null;
            COEGenericObjectStorageBOList actual;

            actual = CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(databaseName);

            Assert.AreNotEqual(expected, actual, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                    "eBOList.GetList did not return the expected value.");
        }

        /// <summary>
        ///A test for GetList (bool, string)
        ///</summary>
        [Test]
        public void GetListTest1()
        {
            bool isPublic = false;
            COEGenericObjectStorageBOList actual = null;
            try
            {
                actual = CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(isPublic, USERNAME);
                Assert.IsNotNull(actual, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                   "eBOList.GetList did not return the expected value.");
            }
            catch
            {
                Assert.Fail("GetList(ispublic,excludeUsername) fails due to invalid SQL Command created in DAL.GetAll(ispublic,excludeUsername) method.");
            }
        }

        /// <summary>
        ///A test for GetList (string)
        ///</summary>
        [Test]
        public void GetListTest2()
        {
            COEGenericObjectStorageBOList expected = null;
            COEGenericObjectStorageBOList actual;

            actual = CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(USERNAME);

            Assert.AreNotEqual(expected, actual, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                    "eBOList.GetList did not return the expected value.");
        }

        /// <summary>
        ///A test for GetList (string, bool)
        ///</summary>
        [Test]
        public void GetListTest3()
        {
            bool isPublic = false;

            COEGenericObjectStorageBOList actual;
            try
            {
                actual = CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(USERNAME, isPublic);
                Assert.IsNotNull(actual, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                        "eBOList.GetList did not return the expected value.");
            }
            catch
            {
                Assert.Fail("GetList(USERNAME,ispublic) fails due to invalid SQL Command created in DAL.GetAll(USERNAME,ispublic) method.");

            }

        }

        /// <summary>
        ///A test for GetList (string, bool, int)
        ///</summary>
        [Test]
        public void GetListTest4()
        {
            bool isPublic = false;
            int formGroup = 0;

            COEGenericObjectStorageBOList expected = null;
            COEGenericObjectStorageBOList actual;

            actual = CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList(USERNAME, isPublic, formGroup);

            Assert.AreNotEqual(expected, actual, "CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorag" +
                    "eBOList.GetList did not return the expected value.");
        }

        [Test]
        public void RemoveAnElementFromTheList()
        {
            COEGenericObjectStorageBOList actual;

            actual = CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList();
            int expectedCount = actual.Count - 1;
            actual.Remove(actual[0]);
            actual.Save();
            Assert.IsTrue(actual.Count == expectedCount, "The item wasn't removed");
        }

        [Test]
        public void UpdateAnElementFromTheList()
        {
            COEGenericObjectStorageBOList actual;

            actual = CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList();
            COEGenericObjectStorageBO boToModify = actual[0];
            boToModify.Description = "Modified by UnitTest named UpdateAnElementFromTheList";
            boToModify.COEGenericObject = "EMPTY";
            actual.Save();
            Assert.IsTrue(actual[0].Description == "Modified by UnitTest named UpdateAnElementFromTheList", "The item wasn't modified in the list");
        }

        [Test]
        public void CreateAnElementFromTheList()
        {
            COEGenericObjectStorageBOList actual;

            actual = CambridgeSoft.COE.Framework.COEGenericObjectStorageService.COEGenericObjectStorageBOList.GetList();
            int expectedCount = actual.Count + 1;
            COEGenericObjectStorageBO boToAdd = COEGenericObjectStorageBO.New(databaseName);
            boToAdd.Name = "CreateAnElementFromTheList" + GenerateRandomNumber();
            boToAdd.Description = "Created by UnitTest named UpdateAnElementFromTheList";
            boToAdd.COEGenericObject = "<CreateAnElementFromTheList>dfa</CreateAnElementFromTheList>";
            actual.Add(boToAdd);
            actual.Save();
            newIds.Add(actual[actual.Count - 1].ID);
            Assert.IsTrue(actual.Count == expectedCount, "The item wasn't added to the list");
        }
        #endregion

        #region Private Methods
        private COEGenericObjectStorageBO StoreGenericObject(string userName, bool isPublic, int id)
        {
            //this should create a new object
            COEGenericObjectStorageBO genericStorageObject = COEGenericObjectStorageBO.New(databaseName);
            genericStorageObject.Name = "temp" + userName + isPublic.ToString() + GenerateRandomNumber();
            genericStorageObject.Description = "temp" + userName + isPublic.ToString();
            genericStorageObject.FormGroup = 1;
            genericStorageObject.IsPublic = isPublic;
            genericStorageObject.ID = id;
            genericStorageObject.DatabaseName = databaseName;
            //this really should come from the logged in user..
            genericStorageObject.UserName = userName;
            genericStorageObject.COEGenericObject = GetFormXMLStringForStoring();
            //this is where it get's persisted
            genericStorageObject = genericStorageObject.Save();

            return genericStorageObject;
        }

        public string GetFormXMLStringForStoring()
        {
            //this is not implemented yet, so we will use an alternate route
            XmlDocument doc = new XmlDocument();
            doc.Load(pathToXmls + "\\COEFormForTests.xml");
            return doc.OuterXml;
        }

        private string GenerateRandomNumber()
        {
            string miliseconds = DateTime.Now.Millisecond.ToString();
            int length = miliseconds.Length;
            while (length < 3)
            {
                miliseconds = miliseconds.Insert(0, "0");
                length++;
            }
            return miliseconds.Substring(length - 3, 3);
        }
        #endregion
    }
}
