PROMPT Starting AdditionalTriggers.sql
-- Create triggers to populate COEPRINCIPAL automatically

CREATE OR REPLACE TRIGGER COEGROUP_AI_TRG
AFTER INSERT ON COEGROUP
FOR EACH ROW
BEGIN
   INSERT INTO COEPRINCIPAL
       (PRINCIPAL_ID,GROUP_ID)
     SELECT COEPRINCIPAL_ID_SEQ.NEXTVAL,
      :NEW.GROUP_ID
      FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER PEOPLE_AI_TRG
AFTER INSERT ON PEOPLE
FOR EACH ROW
BEGIN
   INSERT INTO COEPRINCIPAL
       (PRINCIPAL_ID,PERSON_ID,ACTIVE)
     SELECT COEPRINCIPAL_ID_SEQ.NEXTVAL,
       :NEW.PERSON_ID,:NEW.ACTIVE
       FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER PEOPLE_AFTER_UPDATE
        AFTER UPDATE
            ON PEOPLE
            FOR EACH ROW  
        BEGIN
 
          UPDATE COEPRINCIPAL
          SET ACTIVE= :NEW.ACTIVE; 
       END;
 /  

-- Triggers for ReconcileGrants
-- Triggers on COEGROUPROLE

CREATE OR REPLACE TRIGGER RECONC_REVOKE_GROUPROLE_TRG
AFTER DELETE ON COEGROUPROLE
FOR EACH ROW
BEGIN   
   COEDB.ReconcileGrants(:OLD.GROUP_ID,NULL,:OLD.ROLE_ID,0);  
END;
/

CREATE OR REPLACE TRIGGER RECONC_GRANT_GROUPROLE_TRG
AFTER INSERT ON COEGROUPROLE
FOR EACH ROW
BEGIN   
   COEDB.ReconcileGrants(:NEW.GROUP_ID,NULL,:NEW.ROLE_ID,1);   
END;

/
-- Triggers on COEGROUPPEOPLE
CREATE OR REPLACE TRIGGER RECONC_GRANT_GROUPPEOPLE_TRG
AFTER INSERT ON COEGROUPPEOPLE
FOR EACH ROW
BEGIN   
   COEDB.ReconcileGrants(:NEW.GROUP_ID,:NEW.PERSON_ID,NULL,1);   
END;
/

CREATE OR REPLACE TRIGGER RECONC_REVOKE_GROUPPEOPLE_TRG
AFTER DELETE ON COEGROUPPEOPLE
FOR EACH ROW
BEGIN   
   COEDB.ReconcileGrants(:OLD.GROUP_ID,:OLD.PERSON_ID,NULL,0);  
END;
/

show error
   