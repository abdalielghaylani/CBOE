<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationName" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="ComponentCount" xml:space="preserve">
    <value>Registry must have at least 1 component.</value>
  </data>
  <data name="DoesNotExtendBLL" xml:space="preserve">
    <value>The BLL specified does not extend the DAL for the Service:  </value>
  </data>
  <data name="DoesNotExtendDAL" xml:space="preserve">
    <value>The DAL specified does not extend the DAL for the Service:  </value>
  </data>
  <data name="EmptyDataSet" xml:space="preserve">
    <value>Dataset is empty</value>
  </data>
  <data name="NotNull" xml:space="preserve">
    <value>cannot be null.</value>
  </data>
  <data name="PercentagesInvalidSum" xml:space="preserve">
    <value>Percentages must sum 100</value>
  </data>
  <data name="PercentagesInvalidValue" xml:space="preserve">
    <value>Percentages values must be numeric and cannot be empties.</value>
  </data>
  <data name="RepeatedComponent_ErrorMessage" xml:space="preserve">
    <value>The same component can't be present twice in a mixture</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>is  required.</value>
  </data>
  <data name="UpdateAffectOtherRecords" xml:space="preserve">
    <value>This update causes other registrations to be updated as well.</value>
  </data>
  <data name="PercentageInvalidNumericValue" xml:space="preserve">
    <value>Invalid Percentage: It must be between 0 - 100</value>
  </data>
  <data name="NotAuthorizedViewRegistryRecord" xml:space="preserve">
    <value>User not authorized to view a RegistryRecord</value>
  </data>
  <data name="RegistryNotFoudMessage" xml:space="preserve">
    <value>"The Registry {0} doesn't exist."</value>
  </data>
  <data name="PropertyNameAndTypeRequired" xml:space="preserve">
    <value>You must insert Property Name and Type</value>
  </data>
  <data name="CreateBatchComponentFragment" xml:space="preserve">
    <value>creating new BatchComponentFragment</value>
  </data>
  <data name="CreateNewComponent" xml:space="preserve">
    <value>creating new component</value>
  </data>
  <data name="GetComponent" xml:space="preserve">
    <value>trying to get a component</value>
  </data>
  <data name="GetComponentBrokenRules" xml:space="preserve">
    <value>trying to get broken rules of the component</value>
  </data>
  <data name="SaveBatchComponentFragment" xml:space="preserve">
    <value>saving a batch component fragment</value>
  </data>
  <data name="SaveComponent" xml:space="preserve">
    <value>saving a component</value>
  </data>
  <data name="CreateBatchComponentFragmentList" xml:space="preserve">
    <value>creating a list of batch component fragment</value>
  </data>
  <data name="GetBaseFragmentBrokenRules" xml:space="preserve">
    <value>trying to get get broken rules of the basefragment</value>
  </data>
  <data name="GetBatchComponentFragmentListIndex" xml:space="preserve">
    <value>trying to get the index of a batch component fragment in a list</value>
  </data>
  <data name="GetBatchComponentIndex" xml:space="preserve">
    <value>trying to get the index of a batch component in a list</value>
  </data>
  <data name="GetFromBatchComponentFragmentList" xml:space="preserve">
    <value>trying to get a batch component fragment from a list</value>
  </data>
  <data name="SaveBaseFragment" xml:space="preserve">
    <value>saving the basefragment</value>
  </data>
  <data name="AddBatchComponentToRegistryRecord" xml:space="preserve">
    <value>adding a batch component to the RegistryRecord</value>
  </data>
  <data name="AddBatchToRegistryRecord" xml:space="preserve">
    <value>adding a batch to the RegistryRecord</value>
  </data>
  <data name="AddComponentToRegistryRecord" xml:space="preserve">
    <value>adding a component a the RegistryRecord</value>
  </data>
  <data name="AddGroupOfBatches" xml:space="preserve">
    <value>adding a group of batches into a  RegistryRecord from another one</value>
  </data>
  <data name="AddProperty" xml:space="preserve">
    <value>adding property to a list</value>
  </data>
  <data name="AddValidationRulesForProperty" xml:space="preserve">
    <value>adding validation rules for a property</value>
  </data>
  <data name="CreateBatchComponentList" xml:space="preserve">
    <value>creating a batch component list</value>
  </data>
  <data name="CreateBatchList" xml:space="preserve">
    <value>creating a list of batches</value>
  </data>
  <data name="CreateComponentList" xml:space="preserve">
    <value>creating a component list</value>
  </data>
  <data name="CreateCompound" xml:space="preserve">
    <value>creating a compound</value>
  </data>
  <data name="CreateCompoundList" xml:space="preserve">
    <value>creating a compound list</value>
  </data>
  <data name="CreateDocument" xml:space="preserve">
    <value>creating a DocMgr document</value>
  </data>
  <data name="CreateDocumentList" xml:space="preserve">
    <value>creating a DocMgr document list</value>
  </data>
  <data name="CreateFragmentList" xml:space="preserve">
    <value>creating a fragment list</value>
  </data>
  <data name="CreateIdentifier" xml:space="preserve">
    <value>creating an identifier</value>
  </data>
  <data name="CreateIdentifierList" xml:space="preserve">
    <value>creating  a list identifier</value>
  </data>
  <data name="CreateMixtureFromCompoundList" xml:space="preserve">
    <value>creating new mixture from registered compound list</value>
  </data>
  <data name="CreateNoteBook" xml:space="preserve">
    <value>creating new NoteBook</value>
  </data>
  <data name="CreateParameter" xml:space="preserve">
    <value>creating a new Parameter</value>
  </data>
  <data name="CreateParameterList" xml:space="preserve">
    <value>creating a list of Parameters</value>
  </data>
  <data name="CreatePercentageList" xml:space="preserve">
    <value>creating a Percentage object list</value>
  </data>
  <data name="CreatePerson" xml:space="preserve">
    <value>creating a Person object</value>
  </data>
  <data name="CreatePersonList" xml:space="preserve">
    <value>creating a Person object list</value>
  </data>
  <data name="CreateProject" xml:space="preserve">
    <value>creating a new project</value>
  </data>
  <data name="CreateProjectList" xml:space="preserve">
    <value>creating a project list</value>
  </data>
  <data name="CreateProperty" xml:space="preserve">
    <value>creating a new Property</value>
  </data>
  <data name="CreatePropertyList" xml:space="preserve">
    <value>creating a Property list</value>
  </data>
  <data name="CreateRegistrationLoadList" xml:space="preserve">
    <value>creating RegistrationLoadList object</value>
  </data>
  <data name="CreateRegistryRecord" xml:space="preserve">
    <value>creating a new RegistryRecord</value>
  </data>
  <data name="CreateRegistryRecordList" xml:space="preserve">
    <value>creating a new RegistryRecord list</value>
  </data>
  <data name="CreateRegNumber" xml:space="preserve">
    <value>creating a new RegNumber</value>
  </data>
  <data name="CreateSequence" xml:space="preserve">
    <value>creating a new Sequence</value>
  </data>
  <data name="CreateStructure" xml:space="preserve">
    <value>creating a new structure</value>
  </data>
  <data name="CreateUtilization" xml:space="preserve">
    <value>creating an new utilization</value>
  </data>
  <data name="CreateUtilizationList" xml:space="preserve">
    <value>creating a utilization list</value>
  </data>
  <data name="CreateValidationRule" xml:space="preserve">
    <value>creating a new ValidationRule</value>
  </data>
  <data name="DeleteCompoundInRegistryRecord" xml:space="preserve">
    <value>deleting a compound from a RegistryRecord</value>
  </data>
  <data name="DeleteRegistryRecord" xml:space="preserve">
    <value>deleting a RegistryRecord</value>
  </data>
  <data name="DeleteSequence" xml:space="preserve">
    <value>deleting a Sequence</value>
  </data>
  <data name="DeserializeRegistryRecord" xml:space="preserve">
    <value>deserializing the RegistryRecord instance into an xml string</value>
  </data>
  <data name="ExtractDalResponse" xml:space="preserve">
    <value>extracting XML or message responsed by DAL methods</value>
  </data>
  <data name="FilterBatchList" xml:space="preserve">
    <value>filtering a batch list</value>
  </data>
  <data name="FixBatchFragmentsInRegistryRecord" xml:space="preserve">
    <value>fixing batch fragments in the RegistryRecord</value>
  </data>
  <data name="GetActiveChemistList" xml:space="preserve">
    <value>trying to get a list of active chemist</value>
  </data>
  <data name="GetActiveProjectList" xml:space="preserve">
    <value>trying to get a list of active project</value>
  </data>
  <data name="GetBatchComponentListBrokenRules" xml:space="preserve">
    <value>trying to get broken rules of the batch component list</value>
  </data>
  <data name="GetBatchFromList" xml:space="preserve">
    <value>trying to get a batch from list</value>
  </data>
  <data name="GetBatchIndex" xml:space="preserve">
    <value>trying to get the index of the batch in a list</value>
  </data>
  <data name="GetBatchListBrokenRules" xml:space="preserve">
    <value>trying to get broken rules of the batch list</value>
  </data>
  <data name="GetChemistList" xml:space="preserve">
    <value>trying to get a list of chemist</value>
  </data>
  <data name="GetChemVizUrl" xml:space="preserve">
    <value>trying to get the url of ChemViz through a given linkname</value>
  </data>
  <data name="GetComponentFromList" xml:space="preserve">
    <value>trying to get component from a list by RegNumber</value>
  </data>
  <data name="GetComponentListBrokenRules" xml:space="preserve">
    <value>trying to get the broken rules of a component list</value>
  </data>
  <data name="GetCompound" xml:space="preserve">
    <value>trying to get a compound</value>
  </data>
  <data name="GetCompoundBrokenRules" xml:space="preserve">
    <value>trying to get the broken rules of a compound</value>
  </data>
  <data name="GetCompoundIndex" xml:space="preserve">
    <value>trying to get the index of a compound in a list</value>
  </data>
  <data name="GetCompoundList" xml:space="preserve">
    <value>trying to get a compound list</value>
  </data>
  <data name="GetFragmentFromList" xml:space="preserve">
    <value>trying to get fragment from a list</value>
  </data>
  <data name="GetFragmentList" xml:space="preserve">
    <value>trying to get a fragment list</value>
  </data>
  <data name="GetFragmentNameValueList" xml:space="preserve">
    <value>trying to get a list of data pair of a fragment</value>
  </data>
  <data name="GetFragmentTypesList" xml:space="preserve">
    <value>trying to get a list of fragment types</value>
  </data>
  <data name="GetIdentifierIndex" xml:space="preserve">
    <value>get the index of an identifier in a list</value>
  </data>
  <data name="GetIdentifierList" xml:space="preserve">
    <value>trying to get a list of identifiers</value>
  </data>
  <data name="GetIdentifierNameValueList" xml:space="preserve">
    <value>trying to get a list of data pair of identifiers</value>
  </data>
  <data name="GetListFromSharableComponent" xml:space="preserve">
    <value>generating a RegistryRecordList using a (potentially) shared component</value>
  </data>
  <data name="GetNotebookNameValueList" xml:space="preserve">
    <value>trying to get a list of data pairs of NoteBook</value>
  </data>
  <data name="GetPercentage" xml:space="preserve">
    <value>trying to get a Percentage object</value>
  </data>
  <data name="GetPercentageBrokenRules" xml:space="preserve">
    <value>trying to get broken rules of Percentage object</value>
  </data>
  <data name="GetPercentageList" xml:space="preserve">
    <value>trying to get a Percentage object list</value>
  </data>
  <data name="GetPercentageListBrokenRules" xml:space="preserve">
    <value>trying to get the broken rules of a Percentage object list</value>
  </data>
  <data name="GetPicklist" xml:space="preserve">
    <value>trying to get a picklist</value>
  </data>
  <data name="GetPicklistDomain" xml:space="preserve">
    <value>trying to get the picklist domain</value>
  </data>
  <data name="GetPrefixList" xml:space="preserve">
    <value>trying to get a list of Prefix</value>
  </data>
  <data name="GetProjectDataPairList" xml:space="preserve">
    <value>trying to get a list of project id and project name pairs</value>
  </data>
  <data name="GetProjectIndex" xml:space="preserve">
    <value>trying to get the index of a project in a list</value>
  </data>
  <data name="GetProjectList" xml:space="preserve">
    <value>trying to get the project list</value>
  </data>
  <data name="GetProjectNameValueList" xml:space="preserve">
    <value>trying to get a list of data pair of projects</value>
  </data>
  <data name="GetPropertyBrokenRules" xml:space="preserve">
    <value>trying to get the broken rules of a Property</value>
  </data>
  <data name="GetPropertyListBrokenRules" xml:space="preserve">
    <value>trying to get the broken rules of a Property list</value>
  </data>
  <data name="GetPrototypeRegistryXml" xml:space="preserve">
    <value>retrieving prototype Registration object XML</value>
  </data>
  <data name="GetRegisteredInfoFromTempBatchID" xml:space="preserve">
    <value>trying to get the registered infomation from a given TempBatchID</value>
  </data>
  <data name="GetRegisterLogInfo" xml:space="preserve">
    <value>getting the register Log info</value>
  </data>
  <data name="GetRegistryRecord" xml:space="preserve">
    <value>trying to get a RegistryRecord</value>
  </data>
  <data name="GetRegistryRecordBrokenRules" xml:space="preserve">
    <value>trying to get the broken rules of the RegistryRecord</value>
  </data>
  <data name="GetRegistryRecordList" xml:space="preserve">
    <value>trying to get a RegistryRecord list</value>
  </data>
  <data name="GetRegistryRecordListFromLinkedStructure" xml:space="preserve">
    <value>generating a RegistryRecordList using the structure ID of a (potentially) linked structureId</value>
  </data>
  <data name="GetRegistryRecordXmlWithAddIns" xml:space="preserve">
    <value>trying to get a xml of RegistryRecord along with its AddIns</value>
  </data>
  <data name="GetRegNumber" xml:space="preserve">
    <value>trying to get a RegNumber</value>
  </data>
  <data name="GetRegNumberByBatchId" xml:space="preserve">
    <value>trying to get the RegNumber from a given BatchID</value>
  </data>
  <data name="GetRegNumberListFromHitlistID" xml:space="preserve">
    <value>trying to get a list of RegNumber using HitListID</value>
  </data>
  <data name="GetSequence" xml:space="preserve">
    <value>trying to get a Sequence object</value>
  </data>
  <data name="GetSequenceList" xml:space="preserve">
    <value>trying to get a Sequence list</value>
  </data>
  <data name="GetSortedPropertyList" xml:space="preserve">
    <value>trying to get a sorted Property list</value>
  </data>
  <data name="GetStructureBrokenRules" xml:space="preserve">
    <value>trying to get the broken rules of the structure</value>
  </data>
  <data name="GetStructureXml" xml:space="preserve">
    <value>trying to get the xml representation of s structure</value>
  </data>
  <data name="GetStruture" xml:space="preserve">
    <value>trying to get a structure</value>
  </data>
  <data name="GetTempID" xml:space="preserve">
    <value>trying to get the Temperal ID</value>
  </data>
  <data name="GetTempRecordCountInRegistryRecordList" xml:space="preserve">
    <value>calculating the count of temperal record in a RegistryRecord list</value>
  </data>
  <data name="GetTempRegistryRecordList" xml:space="preserve">
    <value>trying to get a list of temperal RegistryRecord</value>
  </data>
  <data name="GetUserList" xml:space="preserve">
    <value>trying to get a uer list</value>
  </data>
  <data name="GetUtilization" xml:space="preserve">
    <value>trying to get a utilization</value>
  </data>
  <data name="GetUtilizationList" xml:space="preserve">
    <value>trying to get a utilization list</value>
  </data>
  <data name="LoadRegistryRecords" xml:space="preserve">
    <value>loading RegistryRecords</value>
  </data>
  <data name="RegistrationLoadList_Register" xml:space="preserve">
    <value>registering all of the Records</value>
  </data>
  <data name="RegisteringRegiserRecord" xml:space="preserve">
    <value>registering a RegisterRecord</value>
  </data>
  <data name="ReorderPropertyList" xml:space="preserve">
    <value>reordering the Property list</value>
  </data>
  <data name="ReplaceCompoundInRegistryRecord" xml:space="preserve">
    <value>replacing a compound in the RegistryRecord</value>
  </data>
  <data name="SaveCompound" xml:space="preserve">
    <value>saving the compound</value>
  </data>
  <data name="SavePercentage" xml:space="preserve">
    <value>saving a Percentage object</value>
  </data>
  <data name="SavePerson" xml:space="preserve">
    <value>saving a Person object</value>
  </data>
  <data name="SaveProperty" xml:space="preserve">
    <value>saving a Property</value>
  </data>
  <data name="SaveRegistryRecord" xml:space="preserve">
    <value>saving a RegistryRecord</value>
  </data>
  <data name="SaveRegNumber" xml:space="preserve">
    <value>saving a RegNumber</value>
  </data>
  <data name="SaveSequence" xml:space="preserve">
    <value>saving a Sequence</value>
  </data>
  <data name="SaveStructure" xml:space="preserve">
    <value>saving a structure</value>
  </data>
  <data name="SaveUtilization" xml:space="preserve">
    <value>saving a utilization</value>
  </data>
  <data name="SerializeRegistryRecord" xml:space="preserve">
    <value>serializing the RegistryRecord instance into an xml string</value>
  </data>
  <data name="RegistrationLoadList_Submit" xml:space="preserve">
    <value>submitting all of the Records</value>
  </data>
  <data name="UpdateEditedComponents" xml:space="preserve">
    <value>updating the edited components to reflect new structure</value>
  </data>
  <data name="UpdateRegisterLogInfo" xml:space="preserve">
    <value>updating the register Log info</value>
  </data>
  <data name="UpdateRegistryRecordFragments" xml:space="preserve">
    <value>updating fragments in the RegistryRecord</value>
  </data>
  <data name="ValidateBatchComponentList" xml:space="preserve">
    <value>validating the batch component list</value>
  </data>
  <data name="ValidatePercentage" xml:space="preserve">
    <value>validating the Percentage object</value>
  </data>
  <data name="ValidateRegistryRecord" xml:space="preserve">
    <value>validating a RegistryRecord</value>
  </data>
  <data name="CreateValidatioinRuleList" xml:space="preserve">
    <value>creating a new ValidationRule list</value>
  </data>
  <data name="GetValidationRule" xml:space="preserve">
    <value>trying to get a ValidationRule</value>
  </data>
  <data name="GetValidationRuleList" xml:space="preserve">
    <value>trying to get a ValidationRule list</value>
  </data>
  <data name="GetValidationRuleListXml" xml:space="preserve">
    <value>trying to get the xml representation of a ValidationRule list</value>
  </data>
  <data name="GetValidationRuleXml" xml:space="preserve">
    <value>trying to get the Xml representation of the ValidationRule</value>
  </data>
  <data name="SaveValidationRule" xml:space="preserve">
    <value>saving a ValidationRule</value>
  </data>
  <data name="AddConfigurationPropertyDefaultRule" xml:space="preserve">
    <value>adding default rules to configuration property</value>
  </data>
  <data name="ConvertPrecision" xml:space="preserve">
    <value>converting precision</value>
  </data>
  <data name="UpdateAffectOtherComponents" xml:space="preserve">
    <value>This update causes other components to be updated as well.</value>
  </data>
  <data name="RegistrationLoadList_CheckDuplicates" xml:space="preserve">
    <value>checking for duplicates among permanent registrations</value>
  </data>
  <data name="RLS_BatchLevelProjects_ErrorMessage" xml:space="preserve">
    <value>Please add one Project at Batch level at least.</value>
  </data>
  <data name="RLS_RegistryLevelProjects_ErrorMessage" xml:space="preserve">
    <value>Please add one Project at Registry level at least.</value>
  </data>
  <data name="RegistrationFindDuplicates" xml:space="preserve">
    <value>checking for duplicates among permanent registrations</value>
  </data>
  <data name="NewPicklist" xml:space="preserve">
    <value>creating a new Picklist</value>
  </data>
  <data name="NotAuthorizedToRegisterTempRecords" xml:space="preserve">
    <value>You are not authorized to register this Temporary Registry.</value>
  </data>
  <data name="NotApprovedCannotRegister" xml:space="preserve">
    <value>This record was not approved and thus cannot be registered</value>
  </data>
  <data name="kParseCarbonTooManyBondsOrRadicals" xml:space="preserve">
    <value>There are too many bonds to this unlabeled Carbon.</value>
  </data>
  <data name="kParseChargeErr" xml:space="preserve">
    <value>This label has conflicting or unassignable charges.</value>
  </data>
  <data name="kParseChiralContradictsEnhanced" xml:space="preserve">
    <value>Chiral flag contradicts Enhanced Stereochemistry.</value>
  </data>
  <data name="kParseComponentsOutsideMixture" xml:space="preserve">
    <value>Components must be included within mixture brackets.</value>
  </data>
  <data name="kParseCopolymerTooFewUnits" xml:space="preserve">
    <value>Copolymer brackets must contain 2 or more polymer units.</value>
  </data>
  <data name="kParseDoublyBondedAtomPair" xml:space="preserve">
    <value>There are two separate bonds that connect this pair of atoms.</value>
  </data>
  <data name="kParseHDotTooFewBonds" xml:space="preserve">
    <value>H-Dot and H-Dash indicators are meaningful only on atoms with exactly three bonds.</value>
  </data>
  <data name="kParseInternalErr" xml:space="preserve">
    <value>An unknown error occurred in the label interpreter.</value>
  </data>
  <data name="kParseInvalidIsotope" xml:space="preserve">
    <value>This label has an unrecognized isotopic mass.</value>
  </data>
  <data name="kParseIsolatedAtom" xml:space="preserve">
    <value>This unlabeled atom is connected to no bonds, and may appear to be invisible.</value>
  </data>
  <data name="kParseIsolatedSymbol" xml:space="preserve">
    <value>This chemical symbol is not associated with an atom.</value>
  </data>
  <data name="kParseLinearAtom" xml:space="preserve">
    <value>This unlabeled atom is connected to two identical colinear bonds, and may appear to be invisible.</value>
  </data>
  <data name="kParseLonePairs" xml:space="preserve">
    <value>This atom has an unusual number of lone pairs.</value>
  </data>
  <data name="kParseMixturesTooFewComponents" xml:space="preserve">
    <value>Ordered and unordered mixtures must contain at least 2 components.</value>
  </data>
  <data name="kParseMonomerCrossingBonds" xml:space="preserve">
    <value>Monomer (mon) brackets cannot have crossing bonds.</value>
  </data>
  <data name="kParseMulticenterIntendedVariable" xml:space="preserve">
    <value>This Multi-Center Attachment may have been intended to be a Variable 
Attachment.</value>
  </data>
  <data name="kParseNonsenseErr" xml:space="preserve">
    <value>ChemDraw can't interpret this label.</value>
  </data>
  <data name="kParseOddSystem" xml:space="preserve">
    <value>There is a valence or charge error somewhere in this aromatic system.</value>
  </data>
  <data name="kParseOrderedMixtureNotOrderedComponents" xml:space="preserve">
    <value>Components within an ordered mixture are not ordered correctly.</value>
  </data>
  <data name="kParseOverlappingBond" xml:space="preserve">
    <value>This bond is overlapping another bond.</value>
  </data>
  <data name="kParseOverlappingSymbol" xml:space="preserve">
    <value>This chemical symbol overlaps another.</value>
  </data>
  <data name="kParseParenErr" xml:space="preserve">
    <value>Parentheses don't match.</value>
  </data>
  <data name="kParseQueriesNotPermitted" xml:space="preserve">
    <value>Formula cannot be computed for queries.</value>
  </data>
  <data name="kParseRepeatPatternBondTypeMismatch" xml:space="preserve">
    <value>Bond type mismatch on head-to-tail (ht) or either/unknown (eu) repeat pattern.</value>
  </data>
  <data name="kParseRepeatPatternTooManyCrossingBonds" xml:space="preserve">
    <value>Head-to-tail and head-to-head repeat patterns not allowed with 3, 5, or more crossing bonds.</value>
  </data>
  <data name="kParseStereoAmbig" xml:space="preserve">
    <value>This stereocenter has conflicting or ambiguous stereobonds specified.</value>
  </data>
  <data name="kParseStereoBondBtwAtoms" xml:space="preserve">
    <value>This stereobond connects two stereocenters.</value>
  </data>
  <data name="kParseStereochemistry" xml:space="preserve">
    <value>This stereocenter has no stereobonds specified.</value>
  </data>
  <data name="kParseStrayAtom" xml:space="preserve">
    <value>This atom is very close to another atom or bond.</value>
  </data>
  <data name="kParseStrayBond" xml:space="preserve">
    <value>This isolated bond is probably not intended to have chemical significance.</value>
  </data>
  <data name="kParseUnorderedMixturesUnorderedComponents" xml:space="preserve">
    <value>Unordered mixtures can contain only unordered components.</value>
  </data>
  <data name="kParseValenceErr" xml:space="preserve">
    <value>An atom in this label has an invalid valence.</value>
  </data>
  <data name="RedBoxWarningMessage" xml:space="preserve">
    <value>Please change the drawing(s) to resolve chemical warning(s)  and {0} again. Warnings are: {1}</value>
  </data>
  <data name="RedBoxWarningMessage_FromRegistration" xml:space="preserve">
    <value>There are chemical warning(s) based on admin preferences, you cannot {0} the compound/mixture.</value>
  </data>
  <data name="RedBoxWarningMessage_NotFromRegistration" xml:space="preserve">
    <value>Record is submitted in Temporary as it has chemical warning(s) based on admin preferences.</value>
  </data>
  <data name="RedBoxWarningMessage_BulkReg" xml:space="preserve">
    <value>Chemical warning(s) found</value>
  </data>
</root>