//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 
#pragma warning disable 1591

namespace RegistrationWebserviceTest.SingleSignOn {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SingleSignOnSoap", Namespace="http://cambridgesoft.com/")]
    public partial class SingleSignOn : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAuthenticationTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCSSecurityPwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenewTicketIfOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenewTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserFromTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDataFromTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketExpirationDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketIssueDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback EchoStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCookieNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoAsStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsExemptUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultAuthenticationProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddExemptUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SingleSignOn() {
            this.Url = global::RegistrationWebserviceTest.Properties.Settings.Default.RegistrationWebserviceTest_SingleSignOn_SingleSignOn;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAuthenticationTicketCompletedEventHandler GetAuthenticationTicketCompleted;
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        public event GetCSSecurityPwdCompletedEventHandler GetCSSecurityPwdCompleted;
        
        /// <remarks/>
        public event ValidateTicketCompletedEventHandler ValidateTicketCompleted;
        
        /// <remarks/>
        public event RenewTicketIfOldCompletedEventHandler RenewTicketIfOldCompleted;
        
        /// <remarks/>
        public event RenewTicketCompletedEventHandler RenewTicketCompleted;
        
        /// <remarks/>
        public event GetUserFromTicketCompletedEventHandler GetUserFromTicketCompleted;
        
        /// <remarks/>
        public event GetUserDataFromTicketCompletedEventHandler GetUserDataFromTicketCompleted;
        
        /// <remarks/>
        public event GetTicketExpirationDateCompletedEventHandler GetTicketExpirationDateCompleted;
        
        /// <remarks/>
        public event GetTicketIssueDateCompletedEventHandler GetTicketIssueDateCompleted;
        
        /// <remarks/>
        public event EchoStringCompletedEventHandler EchoStringCompleted;
        
        /// <remarks/>
        public event GetCookieNameCompletedEventHandler GetCookieNameCompleted;
        
        /// <remarks/>
        public event UserExistsCompletedEventHandler UserExistsCompleted;
        
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
        
        /// <remarks/>
        public event GetUserInfoAsStringCompletedEventHandler GetUserInfoAsStringCompleted;
        
        /// <remarks/>
        public event IsExemptUserCompletedEventHandler IsExemptUserCompleted;
        
        /// <remarks/>
        public event GetDefaultAuthenticationProviderCompletedEventHandler GetDefaultAuthenticationProviderCompleted;
        
        /// <remarks/>
        public event AddExemptUserCompletedEventHandler AddExemptUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetAuthenticationTicket", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAuthenticationTicket(string userName, string password) {
            object[] results = this.Invoke("GetAuthenticationTicket", new object[] {
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthenticationTicketAsync(string userName, string password) {
            this.GetAuthenticationTicketAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void GetAuthenticationTicketAsync(string userName, string password, object userState) {
            if ((this.GetAuthenticationTicketOperationCompleted == null)) {
                this.GetAuthenticationTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthenticationTicketOperationCompleted);
            }
            this.InvokeAsync("GetAuthenticationTicket", new object[] {
                        userName,
                        password}, this.GetAuthenticationTicketOperationCompleted, userState);
        }
        
        private void OnGetAuthenticationTicketOperationCompleted(object arg) {
            if ((this.GetAuthenticationTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthenticationTicketCompleted(this, new GetAuthenticationTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/Authenticate", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Authenticate(string userName, string password) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        userName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password) {
            this.AuthenticateAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        userName,
                        password}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetCSSecurityPwd", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCSSecurityPwd(string encryptedTicket) {
            object[] results = this.Invoke("GetCSSecurityPwd", new object[] {
                        encryptedTicket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCSSecurityPwdAsync(string encryptedTicket) {
            this.GetCSSecurityPwdAsync(encryptedTicket, null);
        }
        
        /// <remarks/>
        public void GetCSSecurityPwdAsync(string encryptedTicket, object userState) {
            if ((this.GetCSSecurityPwdOperationCompleted == null)) {
                this.GetCSSecurityPwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCSSecurityPwdOperationCompleted);
            }
            this.InvokeAsync("GetCSSecurityPwd", new object[] {
                        encryptedTicket}, this.GetCSSecurityPwdOperationCompleted, userState);
        }
        
        private void OnGetCSSecurityPwdOperationCompleted(object arg) {
            if ((this.GetCSSecurityPwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCSSecurityPwdCompleted(this, new GetCSSecurityPwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/ValidateTicket", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateTicket(string encryptedTicket) {
            object[] results = this.Invoke("ValidateTicket", new object[] {
                        encryptedTicket});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateTicketAsync(string encryptedTicket) {
            this.ValidateTicketAsync(encryptedTicket, null);
        }
        
        /// <remarks/>
        public void ValidateTicketAsync(string encryptedTicket, object userState) {
            if ((this.ValidateTicketOperationCompleted == null)) {
                this.ValidateTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateTicketOperationCompleted);
            }
            this.InvokeAsync("ValidateTicket", new object[] {
                        encryptedTicket}, this.ValidateTicketOperationCompleted, userState);
        }
        
        private void OnValidateTicketOperationCompleted(object arg) {
            if ((this.ValidateTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateTicketCompleted(this, new ValidateTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/RenewTicketIfOld", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RenewTicketIfOld(string encryptedTicket) {
            object[] results = this.Invoke("RenewTicketIfOld", new object[] {
                        encryptedTicket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RenewTicketIfOldAsync(string encryptedTicket) {
            this.RenewTicketIfOldAsync(encryptedTicket, null);
        }
        
        /// <remarks/>
        public void RenewTicketIfOldAsync(string encryptedTicket, object userState) {
            if ((this.RenewTicketIfOldOperationCompleted == null)) {
                this.RenewTicketIfOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenewTicketIfOldOperationCompleted);
            }
            this.InvokeAsync("RenewTicketIfOld", new object[] {
                        encryptedTicket}, this.RenewTicketIfOldOperationCompleted, userState);
        }
        
        private void OnRenewTicketIfOldOperationCompleted(object arg) {
            if ((this.RenewTicketIfOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenewTicketIfOldCompleted(this, new RenewTicketIfOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/RenewTicket", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RenewTicket(string encryptedTicket) {
            object[] results = this.Invoke("RenewTicket", new object[] {
                        encryptedTicket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RenewTicketAsync(string encryptedTicket) {
            this.RenewTicketAsync(encryptedTicket, null);
        }
        
        /// <remarks/>
        public void RenewTicketAsync(string encryptedTicket, object userState) {
            if ((this.RenewTicketOperationCompleted == null)) {
                this.RenewTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenewTicketOperationCompleted);
            }
            this.InvokeAsync("RenewTicket", new object[] {
                        encryptedTicket}, this.RenewTicketOperationCompleted, userState);
        }
        
        private void OnRenewTicketOperationCompleted(object arg) {
            if ((this.RenewTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenewTicketCompleted(this, new RenewTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetUserFromTicket", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserFromTicket(string encryptedTicket) {
            object[] results = this.Invoke("GetUserFromTicket", new object[] {
                        encryptedTicket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserFromTicketAsync(string encryptedTicket) {
            this.GetUserFromTicketAsync(encryptedTicket, null);
        }
        
        /// <remarks/>
        public void GetUserFromTicketAsync(string encryptedTicket, object userState) {
            if ((this.GetUserFromTicketOperationCompleted == null)) {
                this.GetUserFromTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserFromTicketOperationCompleted);
            }
            this.InvokeAsync("GetUserFromTicket", new object[] {
                        encryptedTicket}, this.GetUserFromTicketOperationCompleted, userState);
        }
        
        private void OnGetUserFromTicketOperationCompleted(object arg) {
            if ((this.GetUserFromTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserFromTicketCompleted(this, new GetUserFromTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetUserDataFromTicket", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserDataFromTicket(string encryptedTicket) {
            object[] results = this.Invoke("GetUserDataFromTicket", new object[] {
                        encryptedTicket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDataFromTicketAsync(string encryptedTicket) {
            this.GetUserDataFromTicketAsync(encryptedTicket, null);
        }
        
        /// <remarks/>
        public void GetUserDataFromTicketAsync(string encryptedTicket, object userState) {
            if ((this.GetUserDataFromTicketOperationCompleted == null)) {
                this.GetUserDataFromTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDataFromTicketOperationCompleted);
            }
            this.InvokeAsync("GetUserDataFromTicket", new object[] {
                        encryptedTicket}, this.GetUserDataFromTicketOperationCompleted, userState);
        }
        
        private void OnGetUserDataFromTicketOperationCompleted(object arg) {
            if ((this.GetUserDataFromTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDataFromTicketCompleted(this, new GetUserDataFromTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetTicketExpirationDate", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetTicketExpirationDate(string encryptedTicket) {
            object[] results = this.Invoke("GetTicketExpirationDate", new object[] {
                        encryptedTicket});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketExpirationDateAsync(string encryptedTicket) {
            this.GetTicketExpirationDateAsync(encryptedTicket, null);
        }
        
        /// <remarks/>
        public void GetTicketExpirationDateAsync(string encryptedTicket, object userState) {
            if ((this.GetTicketExpirationDateOperationCompleted == null)) {
                this.GetTicketExpirationDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketExpirationDateOperationCompleted);
            }
            this.InvokeAsync("GetTicketExpirationDate", new object[] {
                        encryptedTicket}, this.GetTicketExpirationDateOperationCompleted, userState);
        }
        
        private void OnGetTicketExpirationDateOperationCompleted(object arg) {
            if ((this.GetTicketExpirationDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketExpirationDateCompleted(this, new GetTicketExpirationDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetTicketIssueDate", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetTicketIssueDate(string encryptedTicket) {
            object[] results = this.Invoke("GetTicketIssueDate", new object[] {
                        encryptedTicket});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketIssueDateAsync(string encryptedTicket) {
            this.GetTicketIssueDateAsync(encryptedTicket, null);
        }
        
        /// <remarks/>
        public void GetTicketIssueDateAsync(string encryptedTicket, object userState) {
            if ((this.GetTicketIssueDateOperationCompleted == null)) {
                this.GetTicketIssueDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketIssueDateOperationCompleted);
            }
            this.InvokeAsync("GetTicketIssueDate", new object[] {
                        encryptedTicket}, this.GetTicketIssueDateOperationCompleted, userState);
        }
        
        private void OnGetTicketIssueDateOperationCompleted(object arg) {
            if ((this.GetTicketIssueDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketIssueDateCompleted(this, new GetTicketIssueDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/EchoString", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EchoString(string s) {
            object[] results = this.Invoke("EchoString", new object[] {
                        s});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EchoStringAsync(string s) {
            this.EchoStringAsync(s, null);
        }
        
        /// <remarks/>
        public void EchoStringAsync(string s, object userState) {
            if ((this.EchoStringOperationCompleted == null)) {
                this.EchoStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEchoStringOperationCompleted);
            }
            this.InvokeAsync("EchoString", new object[] {
                        s}, this.EchoStringOperationCompleted, userState);
        }
        
        private void OnEchoStringOperationCompleted(object arg) {
            if ((this.EchoStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EchoStringCompleted(this, new EchoStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetCookieName", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCookieName() {
            object[] results = this.Invoke("GetCookieName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCookieNameAsync() {
            this.GetCookieNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCookieNameAsync(object userState) {
            if ((this.GetCookieNameOperationCompleted == null)) {
                this.GetCookieNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCookieNameOperationCompleted);
            }
            this.InvokeAsync("GetCookieName", new object[0], this.GetCookieNameOperationCompleted, userState);
        }
        
        private void OnGetCookieNameOperationCompleted(object arg) {
            if ((this.GetCookieNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCookieNameCompleted(this, new GetCookieNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/UserExists", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserExists(string userName) {
            object[] results = this.Invoke("UserExists", new object[] {
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserExistsAsync(string userName) {
            this.UserExistsAsync(userName, null);
        }
        
        /// <remarks/>
        public void UserExistsAsync(string userName, object userState) {
            if ((this.UserExistsOperationCompleted == null)) {
                this.UserExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserExistsOperationCompleted);
            }
            this.InvokeAsync("UserExists", new object[] {
                        userName}, this.UserExistsOperationCompleted, userState);
        }
        
        private void OnUserExistsOperationCompleted(object arg) {
            if ((this.UserExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserExistsCompleted(this, new UserExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetUserInfo", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetUserInfo(string userName) {
            object[] results = this.Invoke("GetUserInfo", new object[] {
                        userName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string userName) {
            this.GetUserInfoAsync(userName, null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string userName, object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[] {
                        userName}, this.GetUserInfoOperationCompleted, userState);
        }
        
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetUserInfoAsString", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserInfoAsString(string userName) {
            object[] results = this.Invoke("GetUserInfoAsString", new object[] {
                        userName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsStringAsync(string userName) {
            this.GetUserInfoAsStringAsync(userName, null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsStringAsync(string userName, object userState) {
            if ((this.GetUserInfoAsStringOperationCompleted == null)) {
                this.GetUserInfoAsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoAsStringOperationCompleted);
            }
            this.InvokeAsync("GetUserInfoAsString", new object[] {
                        userName}, this.GetUserInfoAsStringOperationCompleted, userState);
        }
        
        private void OnGetUserInfoAsStringOperationCompleted(object arg) {
            if ((this.GetUserInfoAsStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoAsStringCompleted(this, new GetUserInfoAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/IsExemptUser", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsExemptUser(string userName) {
            object[] results = this.Invoke("IsExemptUser", new object[] {
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsExemptUserAsync(string userName) {
            this.IsExemptUserAsync(userName, null);
        }
        
        /// <remarks/>
        public void IsExemptUserAsync(string userName, object userState) {
            if ((this.IsExemptUserOperationCompleted == null)) {
                this.IsExemptUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsExemptUserOperationCompleted);
            }
            this.InvokeAsync("IsExemptUser", new object[] {
                        userName}, this.IsExemptUserOperationCompleted, userState);
        }
        
        private void OnIsExemptUserOperationCompleted(object arg) {
            if ((this.IsExemptUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsExemptUserCompleted(this, new IsExemptUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/GetDefaultAuthenticationProvider", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDefaultAuthenticationProvider() {
            object[] results = this.Invoke("GetDefaultAuthenticationProvider", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultAuthenticationProviderAsync() {
            this.GetDefaultAuthenticationProviderAsync(null);
        }
        
        /// <remarks/>
        public void GetDefaultAuthenticationProviderAsync(object userState) {
            if ((this.GetDefaultAuthenticationProviderOperationCompleted == null)) {
                this.GetDefaultAuthenticationProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultAuthenticationProviderOperationCompleted);
            }
            this.InvokeAsync("GetDefaultAuthenticationProvider", new object[0], this.GetDefaultAuthenticationProviderOperationCompleted, userState);
        }
        
        private void OnGetDefaultAuthenticationProviderOperationCompleted(object arg) {
            if ((this.GetDefaultAuthenticationProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultAuthenticationProviderCompleted(this, new GetDefaultAuthenticationProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cambridgesoft.com/AddExemptUser", RequestNamespace="http://cambridgesoft.com/", ResponseNamespace="http://cambridgesoft.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddExemptUser(string userName, string password, string provider) {
            object[] results = this.Invoke("AddExemptUser", new object[] {
                        userName,
                        password,
                        provider});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddExemptUserAsync(string userName, string password, string provider) {
            this.AddExemptUserAsync(userName, password, provider, null);
        }
        
        /// <remarks/>
        public void AddExemptUserAsync(string userName, string password, string provider, object userState) {
            if ((this.AddExemptUserOperationCompleted == null)) {
                this.AddExemptUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddExemptUserOperationCompleted);
            }
            this.InvokeAsync("AddExemptUser", new object[] {
                        userName,
                        password,
                        provider}, this.AddExemptUserOperationCompleted, userState);
        }
        
        private void OnAddExemptUserOperationCompleted(object arg) {
            if ((this.AddExemptUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddExemptUserCompleted(this, new AddExemptUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetAuthenticationTicketCompletedEventHandler(object sender, GetAuthenticationTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthenticationTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthenticationTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetCSSecurityPwdCompletedEventHandler(object sender, GetCSSecurityPwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCSSecurityPwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCSSecurityPwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ValidateTicketCompletedEventHandler(object sender, ValidateTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RenewTicketIfOldCompletedEventHandler(object sender, RenewTicketIfOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenewTicketIfOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenewTicketIfOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RenewTicketCompletedEventHandler(object sender, RenewTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenewTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenewTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetUserFromTicketCompletedEventHandler(object sender, GetUserFromTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserFromTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserFromTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetUserDataFromTicketCompletedEventHandler(object sender, GetUserDataFromTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDataFromTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDataFromTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetTicketExpirationDateCompletedEventHandler(object sender, GetTicketExpirationDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketExpirationDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketExpirationDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetTicketIssueDateCompletedEventHandler(object sender, GetTicketIssueDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketIssueDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketIssueDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void EchoStringCompletedEventHandler(object sender, EchoStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EchoStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EchoStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetCookieNameCompletedEventHandler(object sender, GetCookieNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCookieNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCookieNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void UserExistsCompletedEventHandler(object sender, UserExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetUserInfoAsStringCompletedEventHandler(object sender, GetUserInfoAsStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoAsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoAsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void IsExemptUserCompletedEventHandler(object sender, IsExemptUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsExemptUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsExemptUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetDefaultAuthenticationProviderCompletedEventHandler(object sender, GetDefaultAuthenticationProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultAuthenticationProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultAuthenticationProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddExemptUserCompletedEventHandler(object sender, AddExemptUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddExemptUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddExemptUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591