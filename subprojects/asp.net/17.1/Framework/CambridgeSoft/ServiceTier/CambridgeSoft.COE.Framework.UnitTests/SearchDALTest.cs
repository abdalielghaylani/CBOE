// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.COESearchService;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries;
using System.Data;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.SelectItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.NonQueries;
using System.Data.Common;
using System.Xml;
using CambridgeSoft.COE.Framework.COESecurityService;
using System.Configuration;
using System.Reflection;

namespace CambridgeSoft.COE.Framework.Services.Search.DAL.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Services.Search.SearchDAL and is intended
    ///to contain all CambridgeSoft.COE.Framework.Services.Search.SearchDAL Unit Tests
    ///</summary>
    [TestClass()]
    public class SearchDALTest
    {
        CambridgeSoft.COE.Framework.COESearchService.DAL target;
        private string pathToXmls = Utilities.GetProjectBasePath("CambridgeSoft.COE.Framework.UnitTests");

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use Classm to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        // Use TestInitialize to run code before running each test

        [TestInitialize()]
        public void MyTestInitialize()
        {
            try
            {
                string userName = ConfigurationManager.AppSettings.Get("LogonUserName");
                string password = ConfigurationManager.AppSettings.Get("LogonPassword");
                ;

                if(!COEPrincipal.Login(userName, password))
                    Assert.Fail(MethodBase.GetCurrentMethod().Name + " - Invalid username/password");

                DALFactory dalFactory = new DALFactory();
                SecurityInfo secInfo = new SecurityInfo("IdentityToken", "system", "manager");
                //Modified by : Sumeet
                //Original: dalFactory.GetDAL<SearchDAL>(ref target, "Search", "SAMPLE", secInfo);

                dalFactory.GetDAL<CambridgeSoft.COE.Framework.COESearchService.DAL>(ref target, "COESearch", "SAMPLE", (secInfo == null));

                this.ExecuteNonQuery("DELETE FROM CHEMINVDB2.INV_COUNTRY WHERE COUNTRY_ID = 6000");

            }
            catch(Exception exception)
            {
                Assert.Fail(MethodBase.GetCurrentMethod().Name + exception.Message);
            }
        }

        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ExecuteDataSet (Query)
        ///</summary>
        [TestMethod()]
        public void SearchDALExecuteDataSetTest()
        {
            Query query = new Query();
            CambridgeSoft.COE.Framework.Common.SqlGenerator.Table table = new CambridgeSoft.COE.Framework.Common.SqlGenerator.Table();
            table.TableName = "inv_compounds";

            SelectClauseField field = new SelectClauseField();
            Field dataField = new Field(20, "BASE64_CDX", DbType.Binary);
            dataField.Table = new Table("inv_compounds");
            field.DataField = dataField;

            WhereClauseFormula formula = new WhereClauseFormula();
            formula.CartridgeSchema = "CsCartridge";
            formula.Full = false;
            formula.DataField.FieldName = "BASE64_CDX";
            formula.Val.Val = "c1cccccc1";
            query.SetMainTable(table);

            query.AddWhereItem(formula);
            query.AddSelectItem(field);

            query.Top = 20;
            DataSet actual;

            actual = target.ExecuteDataSet(query);

            Assert.IsTrue(actual.Tables.Count > 0, "SearchDAL.ExecuteDataSet did not return the expected value.");
            Assert.IsTrue(actual.Tables[0].Rows.Count > 0, "SearchDAL.ExecuteDataSet did not return the expected value.");
            Assert.IsTrue(actual.Tables[0].Rows.Count == 20, "SearchDAL.ExecuteDataSet did not return the expected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ExecuteDataTable (Query)
        ///</summary>
        [TestMethod()]
        public void SearchDALExecuteDataTableTest()
        {

            Query query = new Query();

            Table inv_containers = new Table();
            inv_containers.TableName = "inv_containers";
            inv_containers.Alias = "cont";

            Table inv_compounds = new Table();
            inv_compounds.TableName = "inv_compounds";
            inv_compounds.Alias = "comp";

            query.SetMainTable(inv_containers);

            SelectClauseLiteral item = new SelectClauseLiteral();
            item.Literal = "22";

            SelectClauseField itemFld = new SelectClauseField();
            Field dataField = new Field("CONTAINER_ID", DbType.String, inv_containers);
            itemFld.DataField = dataField;

            WhereClauseBinaryOperation where = new WhereClauseGreaterThan();
            where.DataField.Table = inv_compounds;
            where.DataField.FieldName = "COMPOUND_ID";
            where.DataField.FieldType = DbType.Int32;
            where.Val = new Value("900", DbType.Int32);
            /*
            WhereClauseLike like = new WhereClauseLike();
            like.DataField.Table = inv_compounds;
            like.DataField.FieldName = "Address";
            like.DataField.FieldType = DbType.String;
            like.Val = new Value("Saenz", DbType.String);
            like.WildCardPosition = SearchCriteria.Positions.Both;
            */
            Relation rel = new Relation();
            rel.Child.Table = inv_compounds;
            rel.Child.FieldName = "COMPOUND_ID";

            rel.Parent.Table = inv_containers;
            rel.Parent.FieldName = "COMPOUND_ID_FK";

            query.AddSelectItem(item);
            query.AddSelectItem(itemFld);
            query.AddWhereItem(where);
            //query.AddWhereItem(like);
            query.AddJoinRelation(rel);


            //DataTable expected = null;
            DataTable actual;

            actual = target.ExecuteDataTable(query);

            int expectedCount = this.ExecuteScalar("SELECT COUNT(*) FROM inv_containers cont, inv_compounds comp WHERE cont.compound_id_fk = comp.compound_id AND comp.compound_id > 900");

            Assert.IsTrue(actual.Rows.Count == expectedCount, "SearchDAL.ExecuteDataTable did not return the expected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");
        }

        private void SearchDALWhereClauseLikeSetup()
        {
            DbCommand insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (1, 'abc', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (2, 'abcx', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (3, 'xabc', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (4, 'xabcx', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (5, 'abc x', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (6, 'x abc', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (7, 'x abc x', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (8, 'x xabc x', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (9, 'x abcx x', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

            insertCommand = target.DALManager.Database.GetSqlStringCommand(
                    "INSERT INTO CSCARTRIDGE.TEMPQUERIES (ID, NOTE, QUERY) VALUES (10, 'x xabcx x', '')");
            target.DALManager.ExecuteNonQuery(insertCommand);

        }

        /// <summary>
        /// Test for fullwordsearch against database.
        /// </summary>
        [TestMethod()]
        public void SearchDALWhereClauseLike()
        {

            target.DALManager.BeginTransaction();
            try
            {
                this.SearchDALWhereClauseLikeSetup();
                /*
                    1.   abc 
                    2.   abcx 
                    3.   xabc 
                    4.   xabcx 
                    5.   abc x 
                    6.   x abc 
                    7.   x abc x 
                    8.   x xabc x 
                    9.   x abcx x 
                   10.   x xabcx x
                 */
                #region Testing with value abc*
                Query query = new Query();
                Table fullwordtest = new Table();
                fullwordtest.TableName = "cscartridge.tempqueries";
                fullwordtest.Alias = "fwt";
                query.SetMainTable(fullwordtest);
                SelectClauseField itemFld = new SelectClauseField();
                Field dataField = new Field("id", DbType.String);
                dataField.Table = fullwordtest;
                itemFld.DataField = dataField;
                SelectClauseField item = new SelectClauseField();
                dataField = new Field("note", DbType.String, fullwordtest);
                item.DataField = dataField;
                WhereClauseLike where = new WhereClauseLike();
                where.DataField.Table = fullwordtest;
                where.DataField.FieldName = "note";
                where.DataField.FieldType = DbType.String;
                where.Val = new Value("abc*", DbType.String);
                where.TrimPosition = SearchCriteria.Positions.Both;
                where.CaseSensitive = false;
                where.FullWordSearch = true;
                query.AddSelectItem(itemFld);
                query.AddSelectItem(item);
                query.AddWhereItem(where);
                DataTable expected = null;
                DataTable actual;
                actual = target.ExecuteDataTable(query, "Results");
                /* Expected values
                    abc*    text      off        1,2,5
                    abc*    text      on         1,2,5
                    abc*    memo      off        1,2,5,6,7,9
                    abc*    memo      on         1,2,5,6,7,9
                 */
                expected = actual.Clone();
                expected.Rows.Add(1, "abc");
                expected.Rows.Add(2, "abcx");
                expected.Rows.Add(5, "abc x");
                expected.Rows.Add(6, "x abc");
                expected.Rows.Add(7, "x abc x");
                expected.Rows.Add(9, "x abcx x");
                Assert.IsTrue(CheckIds(actual, expected), "SearchDAL.ExecuteDataTable did not return the expected value.");
                #endregion
                #region Testing with value abc
                where.Val.Val = "abc";
                WhereClause whereClause = new WhereClause();
                whereClause.AddItem(where);
                query.SetWhereClause(whereClause);
                actual = target.ExecuteDataTable(query, "Results");
                /* Expected values
                    abc     text      off        1,2,5
                    abc     text      on         1,5
                    abc     memo      off        1,5,6,7
                    abc     memo      on         1,5,6,7
                 */
                expected = new DataTable();
                expected = actual.Clone();
                expected.Rows.Add(1, "abc");
                expected.Rows.Add(5, "abc x");
                expected.Rows.Add(6, "x abc");
                expected.Rows.Add(7, "x abc x");
                Assert.IsTrue(CheckIds(actual, expected), "SearchDAL.ExecuteDataTable did not return the expected value.");
                #endregion
                #region Testing with value *abc
                where.Val.Val = "*abc";
                whereClause = new WhereClause();
                whereClause.AddItem(where);
                query.SetWhereClause(whereClause);
                actual = target.ExecuteDataTable(query, "Results");
                /* Expected values
                    *abc    text      off        1,3,6
                    *abc    text      on         1,3,5,6,7,8 
                    *abc    memo      off        1,3,5,6,7,8
                    *abc    memo      on         1,3,5,6,7,8
                 */
                expected = new DataTable();
                expected = actual.Clone();
                expected.Rows.Add(1, "abc");
                expected.Rows.Add(3, "xabc");
                expected.Rows.Add(5, "abc x");
                expected.Rows.Add(6, "x abc");
                expected.Rows.Add(7, "x abc x");
                expected.Rows.Add(8, "x xabc x");
                Assert.IsTrue(CheckIds(actual, expected), "SearchDAL.ExecuteDataTable did not return the expected value.");
                #endregion
                #region Testing with value *abc*
                where.Val.Val = "*abc*";
                whereClause = new WhereClause();
                whereClause.AddItem(where);
                query.SetWhereClause(whereClause);
                actual = target.ExecuteDataTable(query, "Results");
                Assert.AreEqual(10, actual.Rows.Count, "SearchDAL.ExecuteDataTable did not return the expected value.");
                #endregion
                /*
                QUERY   TYPE    FULLWORD     HITS
                *abc*   text      off        1-10
                *abc*   text      on         1-10
                *abc*   memo      off        1-10
                *abc*   memo      on         1-10
*/
                target.DALManager.CommitTransaction();
            }
            catch(Exception) { target.DALManager.RollbackTransaction(); }
        }

        private bool CheckIds(DataTable actual, DataTable expected)
        {
            if(actual.Rows.Count != expected.Rows.Count)
                return false;

            for(int i = 0; i < actual.Rows.Count; i++)
            {
                if(actual.Rows[i][0].ToString() != expected.Rows[i][0].ToString())
                    return false;
                else if(actual.Rows[i][1].ToString() != expected.Rows[i][1].ToString())
                    return false;
            }
            return true;
        }

        /// <summary>
        ///A test for ExecuteDataTable (Query, string)
        ///</summary>
        [TestMethod()]
        public void SearchDALExecuteDataTableTest1()
        {
            string tableName = "Results";
            Query query = new Query();
            CambridgeSoft.COE.Framework.Common.SqlGenerator.Table table = new CambridgeSoft.COE.Framework.Common.SqlGenerator.Table();
            table.TableName = "inv_compounds";

            SelectClauseField field = new SelectClauseField();
            Field dataField = new Field("BASE64_CDX", DbType.Binary, new Table("inv_compounds"));
            dataField.FieldId = 20;
            field.DataField = dataField;

            WhereClauseFormula formula = new WhereClauseFormula();
            formula.CartridgeSchema = "CsCartridge";
            formula.Full = false;
            formula.DataField.FieldName = "BASE64_CDX";
            formula.Val.Val = "H6NO4P";
            query.SetMainTable(table);

            query.AddWhereItem(formula);
            query.AddSelectItem(field);


            //DataTable expected = null;
            DataTable actual;

            actual = target.ExecuteDataTable(query, tableName);

            int expectedCount = 1;

            //TODO: test this, as I can't execute cscartridge.formula on my machine
            //int expectedCount = this.ExecuteScalar("SELECT COUNT(*) FROM INV_COMPOUNDS comp WHERE CSCartridge.Formulacontains(BASE64_CDX, 'H6NO4P', '') = 1");

            Assert.IsTrue(actual.Rows.Count == expectedCount, "CambridgeSoft.COE.Framework.Services.Search.SearchDAL.ExecuteDataTable did not re" +
                    "turn the expected value.");
        }

        /// <summary>
        ///A test for ExecuteNonQuery (Query)
        ///</summary>
        [TestMethod()]
        public void SearchDALExecuteNonQueryTest()
        {
            Insert insert = new Insert();

            // insert into inv_country(country_id, country_name) values(6000, 'argentina')
            Table countryTable = new Table("inv_country");
            insert.Fields.Add(new Field("COUNTRY_ID", DbType.Int32, countryTable));
            insert.Fields.Add(new Field("COUNTRY_NAME", DbType.Int32, countryTable));

            insert.ParamValues = new List<Value>();
            insert.ParamValues.Add(new Value("6000", DbType.Int32));
            insert.ParamValues.Add(new Value("Argentina", DbType.String));

            insert.MainTable = countryTable;

            int actual = target.ExecuteNonQuery(insert);

            //Assert.Inconclusive("Verify the correctness of this test method.");
            Assert.IsTrue(actual == 1, "SearchDAL.ExecuteNonQuery did not return the expected value.");
        }

        private int ExecuteNonQuery(string commandString)
        {
            DbCommand command = target.DALManager.Database.GetSqlStringCommand(commandString);
            return target.DALManager.Database.ExecuteNonQuery(command);
        }

        private int ExecuteScalar(string commandString)
        {
            DbCommand command = target.DALManager.Database.GetSqlStringCommand(commandString);
            return int.Parse(target.DALManager.Database.ExecuteScalar(command).ToString());
        }

        /// <summary>
        ///A test for MolWeightCommand (SecurityInfo, string, SearchCriteria)
        ///</summary>
        [TestMethod()]
        public void NestedQueryGetHitListTest()
        {
            /*
             * Query:
             * (select CSCARTRIDGE.MolWeight(base64_cdx)
             * from (   
             *      select inv_compounds.base64_cdx
             *      from inv_compounds
             *      where compound_id < :0) inner) outer;
             * 
             * Values:
             * Value0 = 100, 
             */

            try
            {
                Query innerQuery = new Query();
                SelectClauseField structure = new SelectClauseField();
                Field dataField = new Field("BASE64_CDX", DbType.Binary);
                structure.DataField = dataField;
                innerQuery.Alias = "inner";
                innerQuery.AddSelectItem(structure);
                WhereClauseLessThan lT = new WhereClauseLessThan();
                lT.DataField.FieldName = "COMPOUND_ID";
                lT.Val = new Value("100", DbType.Int32);
                innerQuery.AddWhereItem(lT);
                innerQuery.SetMainTable(new Table("inv_compounds"));

                Query query = new Query();
                SelectClauseLiteral literal = new SelectClauseLiteral();
                literal.Literal = "*";
                query.AddSelectItem(literal);
                query.SetMainTable(innerQuery);

                int actual = target.ExecuteDataTable(query).Rows.Count;

                int expectedCount = this.ExecuteScalar(@"select count(*) from (select CSCARTRIDGE.MolWeight(inner.base64_cdx) structure
                                                            from (  select inv_compounds.base64_cdx
		                                                            from inv_compounds
		                                                            where compound_id < 100) inner)");

                Assert.AreEqual(expectedCount, actual);
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for DoSearch (SecurityInfo, string, SearchCriteria, ResultsCriteria, PagingInfo)
        ///</summary>
        [TestMethod()]
        public void LookupDoSearchTest()
        {

            try
            {
                XmlDocument searchCriteriaXml = new XmlDocument();
                searchCriteriaXml.Load(pathToXmls + @"\LookupTest XML\SearchCriteria.xml");

                XmlDocument resultsCriteriaXml = new XmlDocument();
                resultsCriteriaXml.Load(pathToXmls + @"\LookupTest XML\ResultCriteria.xml");

                XmlDocument dataViewXml = new XmlDocument();
                dataViewXml.Load(pathToXmls + @"\LookupTest XML\DataView.xml");

                PagingInfo pagingInfo = new PagingInfo();
                QueryBuilder builder = new QueryBuilder(dataViewXml, searchCriteriaXml, resultsCriteriaXml);
                Query query = builder.BuildQuery(DBMSType.ORACLE)[0];
                DataTable actual = target.ExecuteDataTable(query, "Inv_Containers");

                int expectedCount = this.ExecuteScalar(@"SELECT COUNT(*) FROM 
                                                            (SELECT C.CONTAINER_ID, C.BARCODE, 
                                                            (SELECT UNIT_ABREVIATION FROM INV_UNITS WHERE INV_UNITS.UNIT_ID=C.UNIT_OF_MEAS_ID_FK)
                                                            FROM INV_CONTAINERS C
                                                            )");

                string queryExpected = "(SELECT DISTINCT 'LookupTest', C.\"CONTAINER_ID\" AS \"ID\", C.\"BARCODE\" AS \"code\", (select UNIT_ABREVIATION from CHEMINVDB2.INV_UNITS where UNIT_ID=C.\"UNIT_OF_MEAS_ID_FK\" AND ROWNUM<2 ) AS \"UNITS\" FROM (CHEMINVDB2.INV_CONTAINERS C))";
                Assert.AreEqual(query.ToString(), queryExpected);
                Assert.AreEqual(expectedCount, actual.Rows.Count);

            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        /// A test for ExecuteDataSetKeepAlive (Qeury query, string tablename, PagingInfo paginginfo)
        /// </summary>
        [TestMethod()]
        public void SearchDALExecuteDataSetKeepAliveTest()
        {
            Query query = new Query();
            CambridgeSoft.COE.Framework.Common.SqlGenerator.Table table = new CambridgeSoft.COE.Framework.Common.SqlGenerator.Table();
            table.TableName = "inv_compounds";

            SelectClauseField field = new SelectClauseField();
            Field dataField = new Field(20, "BASE64_CDX", DbType.Binary);
            dataField.Table = new Table("INV_COMPOUNDS");
            field.DataField = dataField;

            WhereClauseFormula formula = new WhereClauseFormula();
            formula.CartridgeSchema = "CsCartridge";
            formula.Full = false;
            formula.DataField.FieldName = "BASE64_CDX";
            formula.Val.Val = "c1cccccc1";
            query.SetMainTable(table);

            query.AddWhereItem(formula);
            query.AddSelectItem(field);
            query.EncloseInParenthesis = false;

            DataSet actual;
            PagingInfo pagingInfo = new PagingInfo();
            pagingInfo.Start = 1;
            pagingInfo.RecordCount = 50;
            KeepAliveHolder holder = target.CreateKeepAliveHolder(query, false, "sarasa");
            actual = target.ExecuteDataSetKeepAlive("testresults", pagingInfo, holder);

            Assert.IsTrue(actual.Tables.Count > 0, "SearchDAL.ExecuteDataSet did not return the expected value.");
            Assert.IsTrue(actual.Tables[0].Rows.Count > 0, "SearchDAL.ExecuteDataSet did not return the expected value.");
            Assert.IsTrue(actual.Tables[0].Rows.Count == 50, "SearchDAL.ExecuteDataSet did not return the expected value.");
            //Assert.Inconclusive("Verify the correctness of this test method.");

            pagingInfo.Start = 51;
            pagingInfo.RecordCount = 10;

            actual = target.ExecuteDataSetKeepAlive("testresults", pagingInfo, holder);

            Assert.IsTrue(actual.Tables.Count > 0, "SearchDAL.ExecuteDataSet did not return the expected value.");
            Assert.IsTrue(actual.Tables[0].Rows.Count > 0, "SearchDAL.ExecuteDataSet did not return the expected value.");
            Assert.IsTrue(actual.Tables[0].Rows.Count == 10, "SearchDAL.ExecuteDataSet did not return the expected value.");
        }
    }
}
