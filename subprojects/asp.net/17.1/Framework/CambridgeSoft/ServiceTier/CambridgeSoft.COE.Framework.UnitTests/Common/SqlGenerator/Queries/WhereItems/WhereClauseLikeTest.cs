// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using System.Data;
using CambridgeSoft.COE.Framework.Common;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests {
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLike Unit Tests
    ///</summary>
    [TestClass()]
    public class WhereClauseLikeTest {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext {
            get {
                return testContextInstance;
            }
            set {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        /// <summary>
        ///A test for GetDependantString (DBMSType, ref List&lt;Value&gt;)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetDependantStringWhereClauseLikeTest() {
            WhereClauseLike target = new WhereClauseLike();
            target.DataField = new Field();
            target.DataField.FieldName = "Structure";
            target.DataField.FieldType = DbType.String;

            target.Val = new Value("	C1CCCCC1  ", DbType.String);

            target.CaseSensitive = false;
            target.TrimPosition = SearchCriteria.Positions.Both;
            //target.FullWordSearch = false;
            target.WildCardPosition = SearchCriteria.Positions.None;
            List<Value> values = new List<Value>(); // TODO: Initialize to an appropriate value
            List<Value> values_expected = new List<Value>(); // TODO: Initialize to an appropriate value
            values_expected.Add(new Value("c1ccccc1", target.DataField.FieldType));

            string expected = "(LOWER(TRIM(\"STRUCTURE\")) LIKE :0)";
            string actual = target.Execute(DBMSType.ORACLE, values).Trim().ToUpper();

            Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetDependantString did not return the expected value.");
        }

        [TestMethod()]
        public void GetDependantStringWhereClauseLike_FullWordTest()
        {
            WhereClauseLike target = new WhereClauseLike();
            target.DataField = new Field();
            target.DataField.FieldName = "Structure";
            target.DataField.FieldType = DbType.String;

            target.Val = new Value("	C1CCCCC1  ", DbType.String);

            target.CaseSensitive = false;
            target.TrimPosition = SearchCriteria.Positions.Both;
            target.FullWordSearch = true;
            target.WildCardPosition = SearchCriteria.Positions.Both;
            List<Value> values = new List<Value>(); // TODO: Initialize to an appropriate value
            List<Value> values_expected = new List<Value>(); // TODO: Initialize to an appropriate value
            values_expected.Add(new Value("c1ccccc1", target.DataField.FieldType));

            string expected = "(LOWER(TRIM(\"STRUCTURE\")) LIKE '% ' || :0 OR LOWER(TRIM(\"STRUCTURE\")) LIKE :1 || ' %' OR LOWER(TRIM(\"STRUCTURE\")) LIKE :2 || '.%' OR LOWER(TRIM(\"STRUCTURE\")) LIKE '% ' || :3 || ' %' OR LOWER(TRIM(\"STRUCTURE\")) LIKE '% ' || :4 || '.%' OR LOWER(TRIM(\"STRUCTURE\")) LIKE :5)";
            string actual = target.Execute(DBMSType.ORACLE, values).Trim().ToUpper();
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetDependantString did not return the expected value.");
        }

        [TestMethod()]
        public void GetDependantStringWhereClauseLike_FullWordNormalizeChemicalNameTest()
        {
            WhereClauseLike target = new WhereClauseLike();
            target.DataField = new Field();
            target.DataField.FieldName = "Structure";
            target.DataField.FieldType = DbType.String;
            target.NormalizeChemicalName = true;
            target.Val = new Value("	C1CCCCC1  ", DbType.String);

            target.CaseSensitive = false;
            target.TrimPosition = SearchCriteria.Positions.Both;
            target.FullWordSearch = true;
            target.WildCardPosition = SearchCriteria.Positions.Both;
            List<Value> values = new List<Value>(); // TODO: Initialize to an appropriate value
            List<Value> values_expected = new List<Value>(); // TODO: Initialize to an appropriate value
            values_expected.Add(new Value("c1ccccc1", target.DataField.FieldType));

            string expected = "(LOWER(TRIM(\"STRUCTURE\")) LIKE '% ' || COEDB.NORMALIZE(:0) OR LOWER(TRIM(\"STRUCTURE\")) LIKE COEDB.NORMALIZE(:1) || ' %' OR LOWER(TRIM(\"STRUCTURE\")) LIKE COEDB.NORMALIZE(:2) || '.%' OR LOWER(TRIM(\"STRUCTURE\")) LIKE '% ' || COEDB.NORMALIZE(:3) || ' %' OR LOWER(TRIM(\"STRUCTURE\")) LIKE '% ' || COEDB.NORMALIZE(:4) || '.%' OR LOWER(TRIM(\"STRUCTURE\")) LIKE COEDB.NORMALIZE(:5))";
            string actual = target.Execute(DBMSType.ORACLE, values).Trim().ToUpper();
            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetDependantString did not return the expected value.");
        }


      

        private bool CompareElements(List<Value> values_expected, List<Value> values) {
            if(values_expected.Count != values.Count)
                return false;
            for(int i = 0; i < values.Count; i++) {

                if(values_expected[i] != values[i])
                    return false;
            }
            return true;
        }

        /// <summary>
        ///A test for GetMultiWildCardDependantString (string)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetMultiWildCardDependantStringTest() {
            WhereClauseLike target = new WhereClauseLike();

            CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor accessor = new CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor(target);

            string value = "John*Smith";
            string expected = "John*Smith"; //multi wildcards are not allowed at the middle of the string, only in the boundary of the criteria
            string actual = accessor.GetMultiWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetMultiWildCardDependantString did not return the expected value.");

            value = @"\*Digest&Comment\*";
            expected = "*Digest&Comment*";
            actual = accessor.GetMultiWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetMultiWildCardDependantString did not return the expected value.");

            value = @"John*Smith eat in \*Digest&Comment\*";
            expected = "John*Smith eat in *Digest&Comment*";
            actual = accessor.GetMultiWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetMultiWildCardDependantString did not return the expected value.");
        }

        /// <summary>
        ///A test for GetSingleWildCardDependantString (string)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetSingleWildCardDependantStringTest() {
            WhereClauseLike target = new WhereClauseLike();

            CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor accessor = new CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor(target);

            string value = "Monica ?. Geller";
            string expected = "Monica _. Geller";
            string actual = accessor.GetSingleWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetSingleWildCardDependantString did not return the expected value.");

            value = @"Is she right here right now\?";
            expected = "Is she right here right now?";
            actual = accessor.GetSingleWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetSingleWildCardDependantString did not return the expected value.");

            value = @"Is Monica ?. Geller right here right now\?";
            expected = "Is Monica _. Geller right here right now?";
            actual = accessor.GetSingleWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetSingleWildCardDependantString did not return the expected value.");            
        }

        /// <summary>
        ///A test for GetWildCardDependantString (string)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetWildCardDependantStringTest() {
            WhereClauseLike target = new WhereClauseLike();

            CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor accessor = new CambridgeSoft.COE.Framework.UnitTests.CambridgeSoft_COE_Framework_Common_SqlGenerator_Queries_WhereItems_WhereClauseLikeAccessor(target);
            accessor.trimPosition = SearchCriteria.Positions.None;
            accessor.wildCardPosition = SearchCriteria.Positions.None;
            string value = "I find a guy John*Smith, I think your middle name initial is ?.";
            string expected = "I find a guy John*Smith, I think your middle name initial is _.";
            string actual = accessor.GetWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetWildCardDependantString did not return the expected value.");

            value = @"I eat in \*Digest&Comment\*, are you taste your food\?";
            expected = @"I eat in *Digest&Comment*, are you taste your food?";
            actual = accessor.GetWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetWildCardDependantString did not return the expected value.");

            value = "Use ?etUserName for ?et the User Name in the * class.";
            expected = "Use _etUserName for _et the User Name in the * class.";
            actual = accessor.GetWildCardDependantString(value);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseLik" +
                    "e.GetWildCardDependantString did not return the expected value.");
        }

    }
}