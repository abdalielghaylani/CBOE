// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems;
using CambridgeSoft.COE.Framework.Common.SqlGenerator;
using System.Data;
using CambridgeSoft.COE.Framework.Common;
namespace CambridgeSoft.COE.Framework.Common.SqlGenerator.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan and is intended
    ///to contain all CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGreaterThan Unit Tests
    ///</summary>
    [TestClass()]
    public class WhereClauseGreaterThanTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetDependantString (DBMSType, ref List&lt;Value&gt;)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Framework.dll")]
        [TestMethod()]
        public void GetDependantStringWhereClauseGreaterThanTest()
        {
            try
            {
                WhereClauseGreaterThan target = new WhereClauseGreaterThan();
                target.DataField = new Field();
                target.DataField.FieldName = "MolWeight";
                target.DataField.FieldType = DbType.Decimal;
                target.Val.Val = "0012.120";
                target.Val.Type = DbType.Decimal;
                target.GreaterEqual = true;
                target.TrimPosition = SearchCriteria.Positions.Both;
                List<Value> values = new List<Value>();
                List<Value> values_expected = new List<Value>();
                values_expected.Add(new Value("12.12", target.DataField.FieldType));
                string expected = "(\"MolWeight\" >= :0)";
                string actual = target.Execute(DBMSType.ORACLE, values);
                Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGre" +
                        "aterThan.GetDependantString did not return the expected value.");
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }

        /// <summary>
        /// Unit Test For WhereClauseGreaterThan :String 
        /// </summary>
        [TestMethod()]
        public void GetDependantStringWhereClauseNameGreaterThanTest()
        {
            try
            {
                WhereClauseGreaterThan target = new WhereClauseGreaterThan();
                target.DataField = new Field();
                target.DataField.FieldName = "NAME";
                target.DataField.FieldType = DbType.String;
                target.Val.Val = "CBOE";
                target.Val.Type = DbType.String;
                target.GreaterEqual = true;
                target.TrimPosition = SearchCriteria.Positions.Both;
                List<Value> values = new List<Value>();
                List<Value> values_expected = new List<Value>();
                values_expected.Add(new Value("CBOE", target.DataField.FieldType));
                string expected = "(TRIM(\"NAME\") >= :0)";
                string actual = target.Execute(DBMSType.ORACLE, values);
                Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGre" +
                        "aterThan.GetDependantString did not return the expected value.");
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }

        /// <summary>
        /// Unit Test For WhereClauseGreaterThan :String
        /// </summary>
        [TestMethod()]
        public void GetDependantStringWhereClauseName_NormalizeChemicalNameTest()
        {
            try
            {
                WhereClauseGreaterThan target = new WhereClauseGreaterThan();
                target.DataField = new Field();
                target.DataField.FieldName = "NAME";
                target.DataField.FieldType = DbType.String;
                target.Val.Val = "CBOE";
                target.Val.Type = DbType.String;
                target.GreaterEqual = true;
                target.NormalizeChemicalName = true;
                target.TrimPosition = SearchCriteria.Positions.Left;
                List<Value> values = new List<Value>();
                List<Value> values_expected = new List<Value>();
                values_expected.Add(new Value("CBOE", target.DataField.FieldType));
                string expected = "(LTRIM(\"NAME\") >= COEDB.Normalize(:0))";
                string actual = target.Execute(DBMSType.ORACLE, values);
                Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGre" +
                        "aterThan.GetDependantString did not return the expected value.");
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }

        /// <summary>
        /// Unit Test For WhereClauseGreaterThan :Date ,DB:ORACLE
        /// </summary>
        [TestMethod()]
        public void GetDependantStringWhereClauseNameDate_OracleTest()
        {
            try
            {
                WhereClauseGreaterThan target = new WhereClauseGreaterThan();
                target.DataField = new Field();
                target.DataField.FieldName = "DATE_CREATED";
                target.DataField.FieldType = DbType.Date;
               // target.Val.Val = "CBOE";
                target.Val.Type = DbType.Date;
                target.GreaterEqual = true;
                target.NormalizeChemicalName = true;
                List<Value> values = new List<Value>();
                List<Value> values_expected = new List<Value>();
                values_expected.Add(new Value("DATE_CREATED", target.DataField.FieldType));
                string expected ="(\"DATE_CREATED\" >= TO_DATE(:0,'yyyy/MM/dd hh24:mi:ss'))";
                string actual = target.Execute(DBMSType.ORACLE, values);
                Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGre" +
                        "aterThan.GetDependantString did not return the expected value.");
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }

        /// <summary>
        /// Unit Test For WhereClauseGreaterThan :Date ,DB:SQLSERVER
        /// </summary>
        [TestMethod()]
        public void GetDependantStringWhereClauseNameDate_SqlTest()
        {
            try
            {
                WhereClauseGreaterThan target = new WhereClauseGreaterThan();
                target.DataField = new Field();
                target.DataField.FieldName = "DATE_CREATED";
                target.DataField.FieldType = DbType.Date;
                // target.Val.Val = "CBOE";
                target.Val.Type = DbType.Date;
                target.GreaterEqual = true;
                target.NormalizeChemicalName = true;
                List<Value> values = new List<Value>();
                List<Value> values_expected = new List<Value>();
                values_expected.Add(new Value("DATE_CREATED", target.DataField.FieldType));
                string expected ="(\"DATE_CREATED\" >= CONVERT(DATETIME,:0,101))";
                string actual = target.Execute(DBMSType.SQLSERVER, values);
                Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGre" +
                        "aterThan.GetDependantString did not return the expected value.");
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }

        /// <summary>
        /// Unit Test For WhereClauseGreaterThan :Date ,DB:MSACCESS
        /// </summary>
        [TestMethod()]
        public void GetDependantStringWhereClauseNameDate_AccessTest()
        {
            try
            {
                WhereClauseGreaterThan target = new WhereClauseGreaterThan();
                target.DataField = new Field();
                target.DataField.FieldName = "DATE_CREATED";
                target.DataField.FieldType = DbType.Date;
                // target.Val.Val = "CBOE";
                target.Val.Type = DbType.Date;
                target.GreaterEqual = true;
                target.NormalizeChemicalName = true;
                List<Value> values = new List<Value>();
                List<Value> values_expected = new List<Value>();
                values_expected.Add(new Value("DATE_CREATED", target.DataField.FieldType));
                string expected = "(\"DATE_CREATED\" >= FORMAT(:0,'yyyy/MM/dd HH:mm:ss'))";
                string actual = target.Execute(DBMSType.MSACCESS, values);
                Assert.IsTrue(CompareElements(values_expected, values), "values_GetDependantString_expected was not set correctly.");
                Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.SqlGenerator.Queries.WhereItems.WhereClauseGre" +
                        "aterThan.GetDependantString did not return the expected value.");
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }



        private bool CompareElements(List<Value> values_expected, List<Value> values)
        {
            if (values_expected.Count != values.Count)
                return false;
            for (int i = 0; i < values.Count; i++)
            {

                if (values_expected[i] != values[i])
                    return false;
            }
            return true;
        }

    }
}
