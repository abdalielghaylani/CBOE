// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using NUnit.Framework;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Framework.COEConfigurationService;
using System.Configuration;
using CambridgeSoft.COE.Framework.Common;
using Csla.Security;
namespace CambridgeSoft.COE.Framework.COEConfigurationService.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager and is intended
    ///to contain all CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager Unit Tests
    ///</summary>
    [TestFixture]
    public class COEConfigurationManagerTest
    {

        private string applicationName;
        private CambridgeSoft.COE.Framework.COEConfigurationService.COEConfigurationManager target;
        private TestContext testContextInstance;
        private SecurityInfo securityInfo = null;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[TestFixtureSetUp]
        //public static void MyClassInitialize()
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[TestFixtureTearDown]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        [SetUp]
        public void MyTestInitialize()
        {
            try
            {
                CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal.Logout();
                System.Security.Principal.IPrincipal user = Csla.ApplicationContext.User;

                string userName = "cssadmin";
                string password = "cssadmin";
                bool result = CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal.Login(userName, password);
                applicationName = "cambridgesoft.coe.framework";

                target = new COEConfigurationManager(securityInfo);


            }
            catch(Exception exception)
            {
                Assert.Fail("Initialization Failed - " + exception.Message);
            }
        }
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TearDown]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetSection (string, string)
        ///</summary>
        [Test]
        public void GetSectionFromDefaultConfigFileTest()
        {
            try
            {
                //Read from default configuration file
                ConfigurationSection actual = target.GetSection(null, "CambridgeSoft.COE.Framework", "coeConfiguration");
                Assert.AreNotEqual(null, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");

            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }
        [Test]
        public void GetSectionFromDataBaseTest()
        {
            try
            {
                //Read from database for a given application
                ConfigurationSection actual = target.GetSection(securityInfo, applicationName, "appSettings");
                Assert.AreNotEqual(null, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");

                //Read from cache
                actual = target.GetSection(securityInfo, applicationName, "appSettings");
                Assert.AreNotEqual(null, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");

            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }
        [Test]
        public void GetSectionFromDataBaseAndFallbackTest()
        {
            try
            {
                //Read from database for a given application, then fallback on the default configuration file
                ConfigurationSection actual = target.GetSection(this.securityInfo, applicationName, "coeConfiguration");
                Assert.AreNotEqual(null, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }
        [Test]
        public void GetNonExistentSectionTest()
        {
            try
            {
                //Request non existant configuration section (just to see it doesn't crash)
                ConfigurationSection actual = target.GetSection(this.securityInfo, applicationName, "coeConfigurationInexistantSection");
                Assert.AreEqual(null, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        [Test]
        public void GetMappingsSectionTest()
        {
            try
            {
                //Read Mappings Section for a given application.
                ConfigurationSection actual = target.GetSection(securityInfo, applicationName, "mappings");
                Assert.AreNotEqual(null, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");

                string actualString = target.GetSectionXml(securityInfo, applicationName, "mappings");
                Assert.AreNotEqual(null, actualString, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }


        [Test]
        public void GetSectionXmlTest()
        {
            try
            {
                string actual = target.GetSectionXml(null, "CambridgeSoft.COE.Framework", "coeConfiguration");
                Assert.AreNotEqual(null, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");

                actual = target.GetSectionXml(securityInfo, applicationName, "appSettings");
                Assert.AreNotEqual(null, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");

                actual = target.GetSectionXml(securityInfo, applicationName, "NonExistentConfigurationSection");
                Assert.AreEqual(string.Empty, actual, "CambridgeSoft.COE.Framework.Services.Configuration.ConfigurationManager.GetSectio" +
                        "n did not return the expected value.");
            }
            catch(Exception exception)
            {
                Assert.Fail(exception.Message);
            }
        }

        /// <summary>
        ///A test for AddSection (string, string, ConfigurationSection)
        ///</summary>
        [Test]
        public void AddSectionTest()
        {
            //dal.ExecuteNonQuery("DELETE FROM CONFIGURATION WHERE SECTIONNAME LIKE 'appSettings'");

            //AppSettingsSection configurationSection = new AppSettingsSection();
            //configurationSection.Settings.Add(new KeyValueConfigurationElement("MySettingKey", "MySettingValue"));

            //target.AddSection(securityInfo, applicationName, "appSettings", configurationSection);
        }
    }
}
