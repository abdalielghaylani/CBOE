// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.Registration.Services.Types;
using Csla.Data;
using Oracle.DataAccess.Client;
namespace CambridgeSoft.COE.Registration.Services.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Registration.Services.Types.Project and is intended
    ///to contain all CambridgeSoft.COE.Registration.Services.Types.Project Unit Tests
    ///</summary>
    [TestClass()]
    public class ProjectTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddAuthorizationRules ()
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void AddAuthorizationRulesTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            accessor.AddAuthorizationRules();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for AddBusinessRules ()
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void AddBusinessRulesTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            accessor.AddBusinessRules();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for CanAddObject ()
        ///</summary>
        [TestMethod()]
        public void CanAddObjectTest()
        {
            bool expected = false;
            bool actual;

            actual = CambridgeSoft.COE.Registration.Services.Types.Project.CanAddObject();

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.CanAddObject did not return" +
                    " the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CanDeleteObject ()
        ///</summary>
        [TestMethod()]
        public void CanDeleteObjectTest()
        {
            bool expected = false;
            bool actual;

            actual = CambridgeSoft.COE.Registration.Services.Types.Project.CanDeleteObject();

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.CanDeleteObject did not ret" +
                    "urn the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CanEditObject ()
        ///</summary>
        [TestMethod()]
        public void CanEditObjectTest()
        {
            bool expected = false;
            bool actual;

            actual = CambridgeSoft.COE.Registration.Services.Types.Project.CanEditObject();

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.CanEditObject did not retur" +
                    "n the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CanGetObject ()
        ///</summary>
        [TestMethod()]
        public void CanGetObjectTest()
        {
            bool expected = false;
            bool actual;

            actual = CambridgeSoft.COE.Registration.Services.Types.Project.CanGetObject();

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.CanGetObject did not return" +
                    " the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for DataPortal_Create (Criteria)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void DataPortal_CreateTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_Project_CriteriaAccessor criteria = null; // TODO: Initialize to an appropriate value

            accessor.DataPortal_Create(criteria);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for DataPortal_Delete (Criteria)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void DataPortal_DeleteTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_Project_CriteriaAccessor criteria = null; // TODO: Initialize to an appropriate value

            accessor.DataPortal_Delete(criteria);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for DataPortal_DeleteSelf ()
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void DataPortal_DeleteSelfTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            accessor.DataPortal_DeleteSelf();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for DataPortal_Fetch (Criteria)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void DataPortal_FetchTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_Project_CriteriaAccessor criteria = null; // TODO: Initialize to an appropriate value

            accessor.DataPortal_Fetch(criteria);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for DataPortal_Insert ()
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void DataPortal_InsertTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            accessor.DataPortal_Insert();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for DataPortal_Update ()
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void DataPortal_UpdateTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            accessor.DataPortal_Update();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for DeleteProject (int)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void DeleteProjectTest()
        {
            int id = 0; // TODO: Initialize to an appropriate value

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.DeleteProject(id);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for Description
        ///</summary>
        [TestMethod()]
        public void DescriptionTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Description = val;


            Assert.AreEqual(val, target.Description, "CambridgeSoft.COE.Registration.Services.Types.Project.Description was not set cor" +
                    "rectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Fetch (SafeDataReader)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void FetchTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            SafeDataReader reader = null; // TODO: Initialize to an appropriate value

            accessor.Fetch(reader);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for GetIdValue ()
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void GetIdValueTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            object expected = null;
            object actual;

            actual = accessor.GetIdValue();

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.GetIdValue did not return t" +
                    "he expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetProject (int)
        ///</summary>
        [TestMethod()]
        public void GetProjectTest()
        {
            int id = 0; // TODO: Initialize to an appropriate value

            Project expected = null;
            Project actual;

            actual = CambridgeSoft.COE.Registration.Services.Types.Project.GetProject(id);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.GetProject did not return t" +
                    "he expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ID
        ///</summary>
        [TestMethod()]
        public void IDTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            int val = 0; // TODO: Assign to an appropriate value for the property

            target.ID = val;


            Assert.AreEqual(val, target.ID, "CambridgeSoft.COE.Registration.Services.Types.Project.ID was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Insert (OracleCommand)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void InsertTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            OracleCommand cmd = null; // TODO: Initialize to an appropriate value

            accessor.Insert(cmd);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for IsDirty
        ///</summary>
        [TestMethod()]
        public void IsDirtyTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            bool val = false; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.IsDirty, "CambridgeSoft.COE.Registration.Services.Types.Project.IsDirty was not set correct" +
                    "ly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsValid
        ///</summary>
        [TestMethod()]
        public void IsValidTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            bool val = false; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.IsValid, "CambridgeSoft.COE.Registration.Services.Types.Project.IsValid was not set correct" +
                    "ly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for NewProject ()
        ///</summary>
        [TestMethod()]
        public void NewProjectTest()
        {
            Project expected = null;
            Project actual;

            actual = CambridgeSoft.COE.Registration.Services.Types.Project.NewProject();

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.NewProject did not return t" +
                    "he expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for NewProject (string)
        ///</summary>
        [TestMethod()]
        public void NewProjectTest1()
        {
            string xml = null; // TODO: Initialize to an appropriate value

            Project expected = null;
            Project actual;

            actual = CambridgeSoft.COE.Registration.Services.Types.Project.NewProject(xml, true);

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.NewProject did not return t" +
                    "he expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Project ()
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void ConstructorTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for Save ()
        ///</summary>
        [TestMethod()]
        public void SaveTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            Project expected = null;
            Project actual;

            actual = target.Save();

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.Save did not return the exp" +
                    "ected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Update (OracleCommand)
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void UpdateTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            OracleCommand cmd = null; // TODO: Initialize to an appropriate value

            accessor.Update(cmd);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for UpdateSelf ()
        ///</summary>
        [DeploymentItem("CambridgeSoft.COE.Registration.Services.dll")]
        [TestMethod()]
        public void UpdateSelfTest()
        {
            Project target = CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor.CreatePrivate();

            CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor accessor = new CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(target);

            string expected = null;
            string actual;

            actual = accessor.UpdateSelf();

            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Registration.Services.Types.Project.UpdateSelf did not return t" +
                    "he expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
