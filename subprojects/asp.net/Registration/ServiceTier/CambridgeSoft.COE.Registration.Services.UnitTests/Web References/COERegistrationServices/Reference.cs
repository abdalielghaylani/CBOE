//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 
#pragma warning disable 1591

namespace CambridgeSoft.COE.Registration.Services.UnitTests.COERegistrationServices {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="COERegistrationServicesSoap", Namespace="CambridgeSoft.COE.Registration.Services.Web")]
    public partial class COERegistrationServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private COECredentials cOECredentialsValueField;
        
        private System.Threading.SendOrPostCallback GetTempIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRegistryRecordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public COERegistrationServices() {
            this.Url = "http://localhost/COERegistration/WebServices/COERegistrationServices.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public COECredentials COECredentialsValue {
            get {
                return this.cOECredentialsValueField;
            }
            set {
                this.cOECredentialsValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTempIDCompletedEventHandler GetTempIDCompleted;
        
        /// <remarks/>
        public event SaveRegistryRecordCompletedEventHandler SaveRegistryRecordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Registration.Services.Web/GetTempID", RequestNamespace="CambridgeSoft.COE.Registration.Services.Web", ResponseNamespace="CambridgeSoft.COE.Registration.Services.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTempID() {
            object[] results = this.Invoke("GetTempID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTempIDAsync() {
            this.GetTempIDAsync(null);
        }
        
        /// <remarks/>
        public void GetTempIDAsync(object userState) {
            if ((this.GetTempIDOperationCompleted == null)) {
                this.GetTempIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTempIDOperationCompleted);
            }
            this.InvokeAsync("GetTempID", new object[0], this.GetTempIDOperationCompleted, userState);
        }
        
        private void OnGetTempIDOperationCompleted(object arg) {
            if ((this.GetTempIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTempIDCompleted(this, new GetTempIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("COECredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CambridgeSoft.COE.Registration.Services.Web/SaveRegistryRecord", RequestNamespace="CambridgeSoft.COE.Registration.Services.Web", ResponseNamespace="CambridgeSoft.COE.Registration.Services.Web", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveRegistryRecord(string registryRecordXml) {
            object[] results = this.Invoke("SaveRegistryRecord", new object[] {
                        registryRecordXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveRegistryRecordAsync(string registryRecordXml) {
            this.SaveRegistryRecordAsync(registryRecordXml, null);
        }
        
        /// <remarks/>
        public void SaveRegistryRecordAsync(string registryRecordXml, object userState) {
            if ((this.SaveRegistryRecordOperationCompleted == null)) {
                this.SaveRegistryRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRegistryRecordOperationCompleted);
            }
            this.InvokeAsync("SaveRegistryRecord", new object[] {
                        registryRecordXml}, this.SaveRegistryRecordOperationCompleted, userState);
        }
        
        private void OnSaveRegistryRecordOperationCompleted(object arg) {
            if ((this.SaveRegistryRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRegistryRecordCompleted(this, new SaveRegistryRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CambridgeSoft.COE.Registration.Services.Web")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="CambridgeSoft.COE.Registration.Services.Web", IsNullable=false)]
    public partial class COECredentials : System.Web.Services.Protocols.SoapHeader {
        
        private string authenticationTicketField;
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string AuthenticationTicket {
            get {
                return this.authenticationTicketField;
            }
            set {
                this.authenticationTicketField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetTempIDCompletedEventHandler(object sender, GetTempIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTempIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTempIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SaveRegistryRecordCompletedEventHandler(object sender, SaveRegistryRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveRegistryRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveRegistryRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591