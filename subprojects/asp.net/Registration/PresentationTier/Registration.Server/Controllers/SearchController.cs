/*
 * PerkinElmer COE Registration API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Swashbuckle.Swagger.Annotations;
using PerkinElmer.COE.Registration.Server.Models;
using CambridgeSoft.COE.Framework.COEHitListService;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.ChemBioViz.Services.COEChemBioVizService;
using CambridgeSoft.COE.Framework.GUIShell;
using CambridgeSoft.COE.RegistrationAdmin.Services;
using CambridgeSoft.COE.Framework;
using CambridgeSoft.COE.Framework.COESearchCriteriaService;
using Newtonsoft.Json.Linq;
using System.Data;
using CambridgeSoft.COE.Framework.Controls.COEFormGenerator;
using CambridgeSoft.COE.Framework.COESearchService;

namespace PerkinElmer.COE.Registration.Server.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class SearchApiController : RegControllerBase
    {
        GenericBO objGenericBO;
        int HitlistID, HitlistType, RestoreType;
        int resultHitListID, hitListID1, hitListID2;
        HitListType hitListID1Type, hitListID2Type;

        /// <summary>
        /// Returns all hitlists.
        /// </summary>
        /// <remarks>This call may be used to retrieve all hitlists</remarks>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("api/search/hitlists")]
        [SwaggerOperation("SearchHitlistsGet")]
        [SwaggerResponse(200, type: typeof(List<Hitlist>))]
        public List<Hitlist> SearchHitlistsGet()
        {
            CheckAuthentication();
            var result = new List<Hitlist>();
            var configRegRecord = ConfigurationRegistryRecord.NewConfigurationRegistryRecord();
            configRegRecord.COEFormHelper.Load(COEFormHelper.COEFormGroups.SearchPermanent);
            var formGroup = configRegRecord.FormGroup;
            const string dbName = "REGDB";
            var tempHitLists = COEHitListBOList.GetRecentHitLists(dbName, COEUser.Name, formGroup.Id, 10);
            var savedHitLists = COEHitListBOList.GetSavedHitListList(dbName, COEUser.Name, formGroup.Id);
            foreach (var h in tempHitLists)
            {
                result.Add(new Hitlist(h.ID, h.HitListID, h.HitListType, h.NumHits, h.IsPublic, h.SearchCriteriaID, h.SearchCriteriaType, h.Name, h.Description, h.MarkedHitListIDs, h.DateCreated));
            }
            foreach (var h in savedHitLists)
            {
                result.Add(new Hitlist(h.ID, h.HitListID, h.HitListType, h.NumHits, h.IsPublic, h.SearchCriteriaID, h.SearchCriteriaType, h.Name, h.Description, h.MarkedHitListIDs, h.DateCreated));
            }
            return result;
        }

        /// <summary>
        /// Deletes a hitlist by its and ID
        /// </summary>
        /// <remarks>Deletes a hitlist by its ID</remarks>
        /// <param name="id">Id of the hitlist that needs to be deleted</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID</response>
        /// <response code="404">Hitlist not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("api/search/hitlists/{id}/{HitlistType}")]
        [SwaggerOperation("SearchHitlistsIdDelete")]
        public void SearchHitlistsIdDelete(int id, int HitlistType)
        {
            CheckAuthentication();
            var hitlistData = Request.Content.ReadAsAsync<JObject>().Result;
            switch (HitlistType)
            {
                case 0:
                    COEHitListBO.Delete(HitListType.TEMP, id);
                    break;
                case 1:
                    COEHitListBO.Delete(HitListType.SAVED, id);
                    break;
            }
        }

        /// <summary>
        /// Edit a query
        /// </summary>
        /// <remarks>Edit a query</remarks>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID</response>
        /// <response code="404">Hitlist not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("api/search/hitlists")]
        [SwaggerOperation("EditQuery")]
        public void EditQuery()
        {
            CheckAuthentication();
            var hitlistData = Request.Content.ReadAsAsync<JObject>().Result;
            HitListType hitlistType = new HitListType();
            switch ((int)hitlistData["HitlistType"])
            {
                case 0:
                    hitlistType = HitListType.TEMP;
                    break;
                case 1:
                    hitlistType = HitListType.SAVED;
                    break;
            }
            COEHitListBO hitlistBO = COEHitListBO.Get(hitlistType, (int)hitlistData["hitlistID"]);
            hitlistBO.Name = hitlistData["Name"].ToString();
            hitlistBO.Description = hitlistData["Description"].ToString();
            hitlistBO.IsPublic = (bool)hitlistData["IsPublic"];
            hitlistBO.Update();

            if (hitlistBO.SearchCriteriaID > 0)
            {
                COESearchCriteriaBO searchCriteria = COESearchCriteriaBO.Get(hitlistBO.SearchCriteriaType, hitlistBO.SearchCriteriaID);
                searchCriteria.Name = hitlistBO.Name;
                searchCriteria.Description = hitlistBO.Description;
                searchCriteria.IsPublic = hitlistBO.IsPublic;
                searchCriteria.Update();
            }
        }


        /// <summary>
        /// Save a hitlist
        /// </summary>
        /// <remarks>Save a hitlist</remarks>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID</response>
        /// <response code="404">Hitlist not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("api/search/hitlists")]
        [SwaggerOperation("SearchHitlistsSave")]
        public void SearchHitlistsSave()
        {
            CheckAuthentication();
            var hitlistData = Request.Content.ReadAsAsync<JObject>().Result;
            HitListType hitlistType = new HitListType();
            switch ((int)hitlistData["HitlistType"])
            {
                case 0:
                    hitlistType = HitListType.TEMP;
                    break;
                case 1:
                    hitlistType = HitListType.SAVED;
                    break;
            }
            COEHitListBO hl = COEHitListBO.Get(hitlistType, (int)hitlistData["hitlistID"]);
            if (hl != null && hl.HitListID > 0)
            {
                COESearchCriteriaBO sc = null;
                if (hl.SearchCriteriaID > 0)
                {
                    sc = COESearchCriteriaBO.Get(hl.SearchCriteriaType, hl.SearchCriteriaID);
                    sc.Name = hitlistData["Name"].ToString();
                    sc.Description = hitlistData["Description"].ToString();
                    sc.IsPublic = (bool)hitlistData["IsPublic"];
                    sc = sc.Save();
                }

                hl.Name = hitlistData["Name"].ToString();
                hl.Description = hitlistData["Description"].ToString();
                hl.IsPublic = (bool)hitlistData["IsPublic"];
                if (sc != null)
                {
                    hl.SearchCriteriaID = sc.ID;
                    hl.SearchCriteriaType = sc.SearchCriteriaType;
                }
                hl = hl.Save();
            }
        }


        /// <summary>
        /// Returns a hitlist by its ID
        /// </summary>
        /// <remarks>Returns a hitlist by its ID</remarks>
        /// <param name="id">Id of the hitlist that needs to be fetched</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID</response>
        /// <response code="404">Hitlist not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("api/search/restorehitlists/{hitlistID}/{hitlistType}")]
        [SwaggerOperation("SearchHitlistsRestore")]
        public JArray SearchHitlistsRestore(string hitlistID, string hitlistType)
        {
            CheckAuthentication();
            HitlistID = Convert.ToInt32(hitlistID);
            HitlistType = Convert.ToInt32(hitlistType);
            return RestoreHitlists(HitlistID, HitlistType);
        }

        /// <summary>
        /// Returns a hitlist by its ID
        /// </summary>
        /// <remarks>Returns a hitlist by its ID</remarks>
        /// <param name="id">Id of the hitlist that needs to be fetched</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID</response>
        /// <response code="404">Hitlist not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("api/search/restorehitlistsactions")]
        public JArray HitlistsRestoreActions()
        {
            CheckAuthentication();
            JArray objJArray = new JArray();
            CambridgeSoft.COE.Framework.COEHitListService.DAL objDAL = new CambridgeSoft.COE.Framework.COEHitListService.DAL();
            var hitlistData = Request.Content.ReadAsAsync<JObject>().Result;
            if (hitlistData != null)
            {
                hitListID1 = Convert.ToInt32(hitlistData["HitlistID1"].ToString());
                hitListID2 = Convert.ToInt32(hitlistData["HitlistID2"].ToString());
                RestoreType = Convert.ToInt32(hitlistData["RestoreType"].ToString());

                switch ((int)hitlistData["HitlistType1"])
                {
                    case 0:
                        hitListID1Type = HitListType.TEMP;
                        break;
                    case 1:
                        hitListID1Type = HitListType.SAVED;
                        break;
                }
                switch ((int)hitlistData["HitlistType2"])
                {
                    case 0:
                        hitListID2Type = HitListType.TEMP;
                        break;
                    case 1:
                        hitListID2Type = HitListType.SAVED;
                        break;
                }
            }
            var configRegRecord = ConfigurationRegistryRecord.NewConfigurationRegistryRecord();
            configRegRecord.COEFormHelper.Load(COEFormHelper.COEFormGroups.SearchPermanent);
            var formGroup = configRegRecord.FormGroup;
            int dataViewID = formGroup.Id;
            const string databaseName = "COEDB";

            switch (RestoreType)
            {
                case 0: //restore
                    RestoreHitlists(HitlistID, HitlistType);
                    break;
                case 1: //intersect      
                    resultHitListID = objDAL.IntersectHitLists(hitListID1, hitListID1Type, hitListID2, hitListID2Type, databaseName, dataViewID);
                    objJArray = ExtractData("select vw_mixture_regnumber.regid as id, vw_mixture_regnumber.name," +
                   "vw_mixture_regnumber.created, vw_mixture_regnumber.modified, vw_mixture_regnumber.personcreated as creator, 'record/' || vw_mixture_regnumber.regid || '?' || to_char(vw_mixture_regnumber.modified, 'YYYYMMDDHH24MISS') as structure, vw_mixture_regnumber.regnumber, vw_mixture_regnumber.statusid as status, vw_mixture_regnumber.approved FROM regdb.vw_mixture_regnumber,regdb.vw_batch vw_batch " +
                   "where vw_mixture_regnumber.mixtureid in (select id from coedb.coetemphitlist s where s.hitlistid=" + resultHitListID + ") and vw_batch.regid = vw_mixture_regnumber.regid");
                    break;
                case 2: //subtract
                    resultHitListID = objDAL.SubtractHitLists(hitListID1, hitListID1Type, hitListID2, hitListID2Type, databaseName, dataViewID);
                    objJArray = ExtractData("select vw_mixture_regnumber.regid as id, vw_mixture_regnumber.name," +
                   "vw_mixture_regnumber.created, vw_mixture_regnumber.modified, vw_mixture_regnumber.personcreated as creator, 'record/' || vw_mixture_regnumber.regid || '?' || to_char(vw_mixture_regnumber.modified, 'YYYYMMDDHH24MISS') as structure, vw_mixture_regnumber.regnumber, vw_mixture_regnumber.statusid as status, vw_mixture_regnumber.approved FROM regdb.vw_mixture_regnumber,regdb.vw_batch vw_batch " +
                   "where vw_mixture_regnumber.mixtureid in (select id from coedb.coetemphitlist s where s.hitlistid=" + resultHitListID + ") and vw_batch.regid = vw_mixture_regnumber.regid");
                    break;
                case 3: //union
                    resultHitListID = objDAL.SubtractHitLists(hitListID1, hitListID1Type, hitListID2, hitListID2Type, databaseName, dataViewID);
                    objJArray = ExtractData("select vw_mixture_regnumber.regid as id, vw_mixture_regnumber.name," +
                   "vw_mixture_regnumber.created, vw_mixture_regnumber.modified, vw_mixture_regnumber.personcreated as creator, 'record/' || vw_mixture_regnumber.regid || '?' || to_char(vw_mixture_regnumber.modified, 'YYYYMMDDHH24MISS') as structure, vw_mixture_regnumber.regnumber, vw_mixture_regnumber.statusid as status, vw_mixture_regnumber.approved FROM regdb.vw_mixture_regnumber,regdb.vw_batch vw_batch " +
                   "where vw_mixture_regnumber.mixtureid in (select id from coedb.coetemphitlist s where s.hitlistid=" + resultHitListID + ") and vw_batch.regid = vw_mixture_regnumber.regid");
                    break;
            }
            return objJArray;
        }

        /// <summary>
        /// Save a hitlist
        /// </summary>
        /// <remarks>Save a hitlist</remarks>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID</response>
        /// <response code="404">Hitlist not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("api/search/markedhits")]
        [SwaggerOperation("MarkedHitsSave")]
        public int MarkedHitsSave()
        {
            CheckAuthentication();
            var hitlistData = Request.Content.ReadAsAsync<JObject>().Result;
            var configRegRecord = ConfigurationRegistryRecord.NewConfigurationRegistryRecord();
            configRegRecord.COEFormHelper.Load(COEFormHelper.COEFormGroups.SearchPermanent);
            var formGroup = configRegRecord.FormGroup;
            objGenericBO = GenericBO.GetGenericBO("Registration", formGroup.Id);
            COEHitListBO bo = objGenericBO.MarkedHitList;
            bo.Name = hitlistData["Name"].ToString();
            bo.Description = hitlistData["Description"].ToString();
            bo.HitListType = HitListType.SAVED;
            bo.Save();
            int markedCount = this.objGenericBO.GetMarkedCount();
            return markedCount;
        }


        /// <summary>
        /// Returns a hitlist by its ID
        /// </summary>
        /// <remarks>Returns a hitlist by its ID</remarks>
        /// <param name="id">Id of the hitlist that needs to be fetched</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID</response>
        /// <response code="404">Hitlist not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("api/search/hitlists/{id}")]
        [SwaggerOperation("SearchHitlistsIdGet")]
        [SwaggerResponse(200, type: typeof(Hitlist))]
        public virtual Hitlist SearchHitlistsIdGet(int? id)
        {
            string exampleJson = null;

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Hitlist>(exampleJson)
            : default(Hitlist);
            return example;
        }


        /// <summary>
        /// Updates a hitlist by its ID
        /// </summary>
        /// <remarks>Updates a hitlist by its ID</remarks>
        /// <param name="body">The hitlist data</param>
        /// <param name="id">Id of the hitlist that needs to be updated</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID</response>
        /// <response code="404">Hitlist not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("api/search/hitlists/{id}")]
        [SwaggerOperation("SearchHitlistsIdPut")]
        [SwaggerResponse(200, type: typeof(Hitlist))]
        public virtual Hitlist SearchHitlistsIdPut([FromBody]Hitlist body, int? id)
        {
            string exampleJson = null;

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Hitlist>(exampleJson)
            : default(Hitlist);
            return example;
        }

        public JArray RestoreHitlists(int HitlistID, int HitlistType)
        {
            JArray objJArray = new JArray();
            if (HitlistID != null)
            {
                switch (HitlistType)
                {
                    case 0: //TempHitlist
                        objJArray = ExtractData("select vw_mixture_regnumber.regid as id, vw_mixture_regnumber.name," +
                   "vw_mixture_regnumber.created, vw_mixture_regnumber.modified, vw_mixture_regnumber.personcreated as creator, 'record/' || vw_mixture_regnumber.regid || '?' || to_char(vw_mixture_regnumber.modified, 'YYYYMMDDHH24MISS') as structure, vw_mixture_regnumber.regnumber, vw_mixture_regnumber.statusid as status, vw_mixture_regnumber.approved FROM regdb.vw_mixture_regnumber,regdb.vw_batch vw_batch " +
                   "where vw_mixture_regnumber.mixtureid in (select id from coedb.coetemphitlist s where s.hitlistid=" + HitlistID + ") and vw_batch.regid = vw_mixture_regnumber.regid");
                        break;
                    case 1: //SavedHitlist
                        objJArray = ExtractData("select vw_mixture_regnumber.regid as id, vw_mixture_regnumber.name," +
                   "vw_mixture_regnumber.created, vw_mixture_regnumber.modified, vw_mixture_regnumber.personcreated as creator, 'record/' || vw_mixture_regnumber.regid || '?' || to_char(vw_mixture_regnumber.modified, 'YYYYMMDDHH24MISS') as structure, vw_mixture_regnumber.regnumber, vw_mixture_regnumber.statusid as status, vw_mixture_regnumber.approved FROM regdb.vw_mixture_regnumber,regdb.vw_batch vw_batch " +
                   "where vw_mixture_regnumber.mixtureid in (select id from coedb.coesavedhitlist s where s.hitlistid=" + HitlistID + ") and vw_batch.regid = vw_mixture_regnumber.regid");
                        break;
                }
                return objJArray;
            }
            return null;
        }
    }
}
