/*
 * PerkinElmer COE Registration API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using System.Xml;
using Newtonsoft.Json;
using CambridgeSoft.COE.Framework;
using CambridgeSoft.COE.Framework.Common;
using Csla;
using CambridgeSoft.COE.Framework.COEHitListService;

namespace PerkinElmer.COE.Registration.Server.Models
{
    /// <summary>
    /// The class for hit-list information
    /// </summary>
    [DataContract]
    public partial class Hitlist : IEquatable<Hitlist>
    {
        #region Operators

        public static bool operator ==(Hitlist left, Hitlist right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Hitlist left, Hitlist right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

        /// <summary>
        /// Initializes a new instance of the <see cref="Hitlist" /> class.
        /// </summary>
        /// <param name="id">ID</param>
        /// <param name="hitlistID">Hit-list ID</param>
        /// <param name="hitlistType">Hit-list type</param>
        /// <param name="numberOfHits">Number of hits</param>
        /// <param name="isPublic">Is public</param>
        /// <param name="searchCriteriaID">Search criteria ID</param>
        /// <param name="searchCriteriaType">Search criteria type</param>
        /// <param name="name">Name of this hit-list object</param>
        /// <param name="description">Description of this hit-list object</param>
        /// <param name="markedHitIDs">IDs of all marked hits</param>
        public Hitlist(int? id = null, int? hitlistID = null, HitListType hitlistType = HitListType.ALL, int? numberOfHits = null, bool? isPublic = null, int? searchCriteriaID = null, SearchCriteriaType searchCriteriaType = SearchCriteriaType.TEMP, string name = null, string description = null, List<int> markedHitIDs = null, SmartDate? dateCreated = null)
        {
            ID = id;
            HitlistID = hitlistID;
            HistlistType = hitlistType;
            NumberOfHits = numberOfHits;
            IsPublic = isPublic;
            SearchCriteriaID = searchCriteriaID;
            SearchCriteriaType = searchCriteriaType;
            Name = name;
            Description = description;
            MarkedHitIDs = markedHitIDs;
            DateCreated = (SmartDate)dateCreated;
        }

        /// <summary>
        /// Gets or sets ID
        /// </summary>
        [DataMember(Name = "ID")]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or sets the hit-list ID
        /// </summary>
        [DataMember(Name = "HitlistID")]
        public int? HitlistID { get; set; }

        /// <summary>
        /// Gets or sets the hit-list type
        /// </summary>
        [DataMember(Name = "HistlistType")]
        public HitListType HistlistType { get; set; }

        /// <summary>
        /// Gets or sets the number of hits
        /// </summary>
        [DataMember(Name = "NumberOfHits")]
        public int? NumberOfHits { get; set; }

        /// <summary>
        /// Gets or sets the indictor that it is public
        /// </summary>
        [DataMember(Name = "IsPublic")]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Gets or sets the search criteria ID
        /// </summary>
        [DataMember(Name = "SearchCriteriaID")]
        public int? SearchCriteriaID { get; set; }

        /// <summary>
        /// Gets or sets the search criteria type
        /// </summary>
        [DataMember(Name = "SearchCriteriaType")]
        public SearchCriteriaType SearchCriteriaType { get; set; }

        /// <summary>
        /// Gets or sets Name of this hit-list object
        /// </summary>
        /// <value>Name of this hit-list object</value>
        [DataMember(Name = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets Description of this hit-list object
        /// </summary>
        /// <value>Description of this hit-list object</value>
        [DataMember(Name = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets IDs of all marked hits
        /// </summary>
        /// <value>IDs of all marked hits</value>
        [DataMember(Name = "MarkedHitIDs")]
        public List<int> MarkedHitIDs { get; set; }

        /// <summary>
        /// Gets or sets DateCreated
        /// </summary>
        [DataMember(Name = "DateCreated")]
        public SmartDate DateCreated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Hitlist {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  HitlistID: ").Append(HitlistID).Append("\n");
            sb.Append("  HistlistType: ").Append(HistlistType).Append("\n");
            sb.Append("  NumberOfHits: ").Append(NumberOfHits).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  SearchCriteriaID: ").Append(SearchCriteriaID).Append("\n");
            sb.Append("  SearchCriteriaType: ").Append(SearchCriteriaType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MarkedHitIDs: ").Append(MarkedHitIDs).Append("\n");
            sb.Append("  DateCreated: ").Append("test").Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Hitlist)obj);
        }

        /// <summary>
        /// Returns true if <see cref="Hitlist"/> instances are equal
        /// </summary>
        /// <param name="other">Instance of <see cref="Hitlist"/> to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Hitlist other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                ID == other.ID ||
                (ID != null && ID.Equals(other.ID))
            ) && (
                HitlistID == other.HitlistID ||
                (HitlistID != null && HitlistID.Equals(other.HitlistID))
            ) && (
                HistlistType == other.HistlistType ||
                HistlistType.Equals(other.HistlistType)
            ) && (
                NumberOfHits == other.NumberOfHits ||
                (NumberOfHits != null && NumberOfHits.Equals(other.NumberOfHits))
            ) && (
                IsPublic == other.IsPublic || (IsPublic != null && IsPublic.Equals(other.IsPublic))
            ) && (
                SearchCriteriaID == other.SearchCriteriaID ||
                (SearchCriteriaID != null && SearchCriteriaID.Equals(other.SearchCriteriaID))
            ) && (
                SearchCriteriaType == other.SearchCriteriaType ||
                SearchCriteriaType.Equals(other.SearchCriteriaType)
            ) && (
                Name == other.Name ||
                (Name != null && Name.Equals(other.Name))
            ) && (
                Description == other.Description ||
                (Description != null && Description.Equals(other.Description))
            ) && (
                MarkedHitIDs == other.MarkedHitIDs ||
                (MarkedHitIDs != null && MarkedHitIDs.SequenceEqual(other.MarkedHitIDs))
            ) && (
                DateCreated.Date == other.DateCreated.Date ||
                (DateCreated.Date != null && DateCreated.Equals(other.DateCreated.Date))
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            // Overflow is fine, just wrap
            unchecked
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (ID != null)
                    hash = (hash * 59) + ID.GetHashCode();
                if (HitlistID != null)
                    hash = (hash * 59) + HitlistID.GetHashCode();
                hash = (hash * 59) + HistlistType.GetHashCode();
                if (NumberOfHits != null)
                    hash = (hash * 59) + NumberOfHits.GetHashCode();
                if (IsPublic != null)
                    hash = (hash * 59) + IsPublic.GetHashCode();
                if (SearchCriteriaID != null)
                    hash = (hash * 59) + SearchCriteriaID.GetHashCode();
                hash = (hash * 59) + SearchCriteriaType.GetHashCode();
                if (Name != null)
                    hash = (hash * 59) + Name.GetHashCode();
                if (Description != null)
                    hash = (hash * 59) + Description.GetHashCode();
                if (MarkedHitIDs != null)
                    hash = (hash * 59) + MarkedHitIDs.GetHashCode();
                if (DateCreated != null)
                    hash = (hash * 59) + DateCreated.GetHashCode();
                return hash;
            }
        }
    }
}
