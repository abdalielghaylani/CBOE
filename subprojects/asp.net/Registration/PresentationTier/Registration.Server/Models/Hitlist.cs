/*
 * PerkinElmer COE Registration API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using System.Xml;
using Newtonsoft.Json;
using CambridgeSoft.COE.Framework;
using CambridgeSoft.COE.Framework.Common;
using Csla;
using CambridgeSoft.COE.Framework.COEHitListService;

namespace PerkinElmer.COE.Registration.Server.Models
{
    /// <summary>
    /// The class for hitlist information
    /// </summary>
    [DataContract()]
    public partial class Hitlist : IEquatable<Hitlist>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Hitlist" /> class.
        /// </summary>
        /// <param name="id">ID.</param>
        /// <param name="hitlistID">HitlistID.</param>
        /// <param name="histlistType">HistlistType.</param>
        /// <param name="numberOfHits">NumberOfHits.</param>
        /// <param name="isPublic">IsPublic.</param>
        /// <param name="searchCriteriaID">SearchCriteriaID.</param>
        /// <param name="searchCriteriaType">SearchCriteriaType.</param>
        /// <param name="name">Name of this hit-list object.</param>
        /// <param name="description">Description of this hit-list object.</param>
        /// <param name="markedHitIDs">IDs of all marked hits.</param>
        public Hitlist(int? id = null, int? hitlistID = null, HitListType histlistType = HitListType.ALL, int? numberOfHits = null, bool? isPublic = null, int? searchCriteriaID = null, SearchCriteriaType searchCriteriaType = SearchCriteriaType.TEMP, string name = null, string description = null, List<int> markedHitIDs = null, SmartDate? dateCreated = null)
        {
            this.ID = id;
            this.HitlistID = hitlistID;
            this.HistlistType = histlistType;
            this.NumberOfHits = numberOfHits;
            this.IsPublic = isPublic;
            this.SearchCriteriaID = searchCriteriaID;
            this.SearchCriteriaType = searchCriteriaType;
            this.Name = name;
            this.Description = description;
            this.MarkedHitIDs = markedHitIDs;
            this.DateCreated = (SmartDate)dateCreated;
        }

        /// <summary>
        /// Gets or sets ID
        /// </summary>
        [DataMember(Name = "ID")]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or sets HitlistID
        /// </summary>
        [DataMember(Name = "HitlistID")]
        public int? HitlistID { get; set; }

        /// <summary>
        /// Gets or sets HistlistType
        /// </summary>
        [DataMember(Name = "HistlistType")]
        public HitListType HistlistType { get; set; }

        /// <summary>
        /// Gets or sets NumberOfHits
        /// </summary>
        [DataMember(Name = "NumberOfHits")]
        public int? NumberOfHits { get; set; }

        /// <summary>
        /// Gets or sets IsPublic
        /// </summary>
        [DataMember(Name = "IsPublic")]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Gets or sets SearchCriteriaID
        /// </summary>
        [DataMember(Name = "SearchCriteriaID")]
        public int? SearchCriteriaID { get; set; }

        /// <summary>
        /// Gets or sets SearchCriteriaType
        /// </summary>
        [DataMember(Name = "SearchCriteriaType")]
        public SearchCriteriaType SearchCriteriaType { get; set; }

        /// <summary>
        /// Gets or sets Name of this hit-list object
        /// </summary>
        /// <value>Name of this hit-list object</value>
        [DataMember(Name = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets Description of this hit-list object
        /// </summary>
        /// <value>Description of this hit-list object</value>
        [DataMember(Name = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets IDs of all marked hits
        /// </summary>
        /// <value>IDs of all marked hits</value>
        [DataMember(Name = "MarkedHitIDs")]
        public List<int> MarkedHitIDs { get; set; }

        /// <summary>
        /// Gets or sets DateCreated
        /// </summary>
        [DataMember(Name = "DateCreated")]
        public SmartDate DateCreated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Hitlist {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  HitlistID: ").Append(HitlistID).Append("\n");
            sb.Append("  HistlistType: ").Append(HistlistType).Append("\n");
            sb.Append("  NumberOfHits: ").Append(NumberOfHits).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  SearchCriteriaID: ").Append(SearchCriteriaID).Append("\n");
            sb.Append("  SearchCriteriaType: ").Append(SearchCriteriaType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MarkedHitIDs: ").Append(MarkedHitIDs).Append("\n");
            sb.Append("  DateCreated: ").Append("test").Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Hitlist)obj);
        }

        /// <summary>
        /// Returns true if Hitlist instances are equal
        /// </summary>
        /// <param name="other">Instance of Hitlist to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Hitlist other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) &&
                (
                    this.HitlistID == other.HitlistID ||
                    this.HitlistID != null &&
                    this.HitlistID.Equals(other.HitlistID)
                ) &&
                (
                    this.HistlistType == other.HistlistType ||
                    this.HistlistType != null &&
                    this.HistlistType.Equals(other.HistlistType)
                ) &&
                (
                    this.NumberOfHits == other.NumberOfHits ||
                    this.NumberOfHits != null &&
                    this.NumberOfHits.Equals(other.NumberOfHits)
                ) &&
                (
                    this.IsPublic == other.IsPublic ||
                    this.IsPublic != null &&
                    this.IsPublic.Equals(other.IsPublic)
                ) &&
                (
                    this.SearchCriteriaID == other.SearchCriteriaID ||
                    this.SearchCriteriaID != null &&
                    this.SearchCriteriaID.Equals(other.SearchCriteriaID)
                ) &&
                (
                    this.SearchCriteriaType == other.SearchCriteriaType ||
                    this.SearchCriteriaType != null &&
                    this.SearchCriteriaType.Equals(other.SearchCriteriaType)
                ) &&
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) &&
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) &&
                (
                    this.MarkedHitIDs == other.MarkedHitIDs ||
                    this.MarkedHitIDs != null &&
                    this.MarkedHitIDs.SequenceEqual(other.MarkedHitIDs)
                ) &&
                 (
                    this.DateCreated.Date == other.DateCreated.Date ||
                    this.DateCreated.Date != null &&
                    this.DateCreated.Equals(other.DateCreated.Date)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            // Overflow is fine, just wrap
            unchecked
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.HitlistID != null)
                    hash = hash * 59 + this.HitlistID.GetHashCode();
                if (this.HistlistType != null)
                    hash = hash * 59 + this.HistlistType.GetHashCode();
                if (this.NumberOfHits != null)
                    hash = hash * 59 + this.NumberOfHits.GetHashCode();
                if (this.IsPublic != null)
                    hash = hash * 59 + this.IsPublic.GetHashCode();
                if (this.SearchCriteriaID != null)
                    hash = hash * 59 + this.SearchCriteriaID.GetHashCode();
                if (this.SearchCriteriaType != null)
                    hash = hash * 59 + this.SearchCriteriaType.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.MarkedHitIDs != null)
                    hash = hash * 59 + this.MarkedHitIDs.GetHashCode();
                if (this.DateCreated != null)
                    hash = hash * 59 + this.DateCreated.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Hitlist left, Hitlist right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Hitlist left, Hitlist right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
