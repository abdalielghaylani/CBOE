<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->

  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GetSequenceSql" xml:space="preserve">
    <value>
SELECT
  s.sequenceid as ID
  , s.prefix
  , s.prefixdelimiter
  , s.regnumberlength
  , s.suffixdelimiter
  , s.saltsuffixtype
  , s.batchnumlength
  , s.nextinsequence
  , s.example
  , s.autoselcompdupchk
  , to_char(s.active) as active
  , to_char(s.type) as type
FROM regdb.vw_sequence s
</value>
    <comment>The caller is expected to supply the where clause as necessary</comment>
  </data>
  <data name="GetStructureSql" xml:space="preserve">
    <value>
SELECT ID, TYPE, VALUE, MOLWEIGHT, FORMULA FROM (
  SELECT
    s.structureid as ID
    , s.structureformat as TYPE
    , s.structure as VALUE
    , CSCartridge.MolWeight(s.structure) as MOLWEIGHT
    , CSCartridge.Formula(s.structure, '') as FORMULA
  FROM regdb.vw_structure s
  UNION ALL
  SELECT
    -1 * d.id as ID
    , d.structureformat as TYPE
    , d.default_drawing as VALUE
    , 0 as MOLWEIGHT
    , NULL as FORMULA
  FROM drawing_type d
) T
</value>
    <comment>The caller is expected to supply the where clause as necessary</comment>
  </data>
  <data name="GetLogHeaderSql" xml:space="preserve">
    <value>
SELECT
  t.LOG_ID
  , t.DUPLICATE_ACTION
  , t.Description
  , t.USER_ID
  , t.DATETIME_STAMP
FROM regdb.log_bulkregistration_id t
</value>
    <comment>The caller is expected to supply the where clause as necessary</comment>
  </data>
  <data name="GetRegNumberByBatchIdSql" xml:space="preserve">
    <value>
SELECT
  regnumber
FROM regdb.vw_mixture_regnumber vmixr
  JOIN regdb.vw_batch vb on vb.regid = vmixr.regid
</value>
    <comment>The caller is expected to supply the where clause as necessary</comment>
  </data>
  <data name="GetTempRecordCount" xml:space="preserve">
    <value>
SELECT
  count(*)
FROM regdb.vw_temporarybatch vtb
  INNER JOIN coedb.coesavedhitlist hl on hl.id = vtb.tempbatchid
</value>
    <comment>The caller is expected to supply the where clause as necessary</comment>
  </data>
	<data name="GetPickListDomainLockSql" xml:space="preserve">
    <value>
UPDATE 
   regdb.VW_PICKLISTDOMAIN set LOCKED = :locked where ID = :id
</value>
    <comment>The caller is expected to supply  lock status and domain id, ParameterTokens used [locked,id]</comment>
  </data>
  <data name="GetRecordsThatContainsStructure" xml:space="preserve">
    <value>
SELECT
  rn.regnumber
FROM vw_registrynumber rn
  inner join vw_mixture m on m.regid = rn.regid
  inner join vw_mixture_component mc on mc.mixtureid = m.mixtureid
  inner join vw_compound c on c.compoundid = mc.compoundid
</value>
    <comment>The caller is expected to supply the where clause as necessary</comment>
  </data>
  <data name="GetRegNumberSequencerSql" xml:space="preserve">
    <value>
SELECT
  s.sequence_id as "ID"
  , s.prefix
  , s.prefix_delimiter
  , s.next_in_sequence
  , s.regnumber_length
  , to_char(s.active) as active
  , s.batchdelimeter
  --, dup_check_local
  --, suffix
  , s.suffixdelimiter
  , s.saltsuffixtype
  --, objecttype
  --, example
  --, siteid -- too limiting! one site per Prefix?
  , to_char(s.type) as type
  , batchnumber_length
FROM sequence s
</value>
    <comment>The caller is expected to supply the where clause as necessary</comment>
  </data>
  <data name="Seq_Temporary_Batch" xml:space="preserve">
    <value>SEQ_TEMPORARY_BATCH</value>
  </data>
  <data name="Picklist_InvalidXmlInput" xml:space="preserve">
    <value>Error occurs when trying to create Picklist from xml, please check the format of the xml.</value>
  </data>
  <data name="RegistrationDatabaseName" xml:space="preserve">
    <value>REGDB</value>
  </data>
</root>