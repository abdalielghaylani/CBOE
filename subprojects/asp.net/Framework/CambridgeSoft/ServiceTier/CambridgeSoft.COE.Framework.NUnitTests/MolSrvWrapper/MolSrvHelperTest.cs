//// The following code was generated by Microsoft Visual Studio 2005.
//// The test owner should check each test for validity.
//using NUnit.Framework;
//using System;
//using System.Text;
//using System.Collections.Generic;
//using System.Collections;
//namespace CambridgeSoft.COE.Framework.Common.MolSrvWrapper.UnitTests
//{
//    /// <summary>
//    ///This is a test class for CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper and is intended
//    ///to contain all CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper Unit Tests
//    ///</summary>
//    [TestFixture]
//    public class MolSrvHelperTest
//    {


//        private TestContext testContextInstance;

//        /// <summary>
//        ///Gets or sets the test context which provides
//        ///information about and functionality for the current test run.
//        ///</summary>
//        public TestContext TestContext {
//            get {
//                return testContextInstance;
//            }
//            set {
//                testContextInstance = value;
//            }
//        }
//        #region Additional test attributes
//        // 
//        //You can use the following additional attributes as you write your tests:
//        //
//        //Use ClassInitialize to run code before running the first test in the class
//        //
//        //[TestFixtureSetUp]
//        //public static void MyClassInitialize()
//        //{
//        //}
//        //
//        //Use ClassCleanup to run code after all tests in a class have run
//        //
//        //[TestFixtureTearDown]
//        //public static void MyClassCleanup()
//        //{
//        //}
//        //
//        //Use TestInitialize to run code before running each test
//        //
//        //[SetUp]
//        //public void MyTestInitialize()
//        //{
//        //}
//        //
//        //Use TestCleanup to run code after each test has run
//        //
//        //[TearDown]
//        //public void MyTestCleanup()
//        //{
//        //}
//        //
//        #endregion


//        /// <summary>
//        ///A test for AddStructure (string, string, string, string, string)
//        ///</summary>
//        [Test]
//        public void AddStructureTest() {
//            string molConnStr = null; // TODO: Initialize to an appropriate value

//            string mstFile = null; // TODO: Initialize to an appropriate value

//            string molUser = null; // TODO: Initialize to an appropriate value

//            string molPassword = null; // TODO: Initialize to an appropriate value

//            string strucFile = null; // TODO: Initialize to an appropriate value

//            int expected = 0;
//            int actual;

//            actual = CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper.AddStructure(molConnStr, mstFile, molUser, molPassword, strucFile);

//            Assert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper.AddStructure did no" +
//                    "t return the expected value.");
//            Assert.Inconclusive("Verify the correctness of this test method.");
//        }

//        /// <summary>
//        ///A test for DeleteStructure (string, string, string, string, int)
//        ///</summary>
//        //[Test]
//        //public void DeleteStructureTest() {
//        //    string molConnStr = null; // TODO: Initialize to an appropriate value

//        //    string mstFile = null; // TODO: Initialize to an appropriate value

//        //    string molUser = null; // TODO: Initialize to an appropriate value

//        //    string molPassword = null; // TODO: Initialize to an appropriate value

//        //    int molID = 0; // TODO: Initialize to an appropriate value

//        //    CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper.DeleteStructure(molConnStr, mstFile, molUser, molPassword, molID);

//        //    Assert.Inconclusive("A method that does not return a value cannot be verified.");
//        //}

//        /// <summary>
//        ///A test for ExecuteChemSearch (string, bool, string, string, string, string, string, int, IList, int, Hashtable)
//        ///</summary>
//        [Test]
//        public void ExecuteChemSearchTest() {
//            string molConnStr = null; // TODO: Initialize to an appropriate value

//            bool identity = false; // TODO: Initialize to an appropriate value

//            string relTable = null; // TODO: Initialize to an appropriate value

//            string relField = null; // TODO: Initialize to an appropriate value

//            string mstFile = null; // TODO: Initialize to an appropriate value

//            string molUser = null; // TODO: Initialize to an appropriate value

//            string molPassword = null; // TODO: Initialize to an appropriate value

//            int molOpenMode = 0; // TODO: Initialize to an appropriate value

//            IList chemFields = null; // TODO: Initialize to an appropriate value

//            int maxHits = 0; // TODO: Initialize to an appropriate value

//            Hashtable searchOptionsMap = null; // TODO: Initialize to an appropriate value

//            IList expected = null;
//            IList actual;

//            actual = CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper.ExecuteChemSearch(molConnStr, identity, relTable, relField, mstFile, molUser, molPassword, molOpenMode, chemFields, maxHits, searchOptionsMap);

//            CollectionAssert.AreEqual(expected, actual, "CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper.ExecuteChemSearch d" +
//                    "id not return the expected value.");
//            Assert.Inconclusive("Verify the correctness of this test method.");
//        }

//        /// <summary>
//        ///A test for GetMoleculeInfo (string, string, string, string, int, ref string, ref double)
//        ///</summary>
//        [Test]
//        public void GetMoleculeInfoTest() {
//            string molConnStr = null; // TODO: Initialize to an appropriate value

//            string mstFile = null; // TODO: Initialize to an appropriate value

//            string molUser = null; // TODO: Initialize to an appropriate value

//            string molPassword = null; // TODO: Initialize to an appropriate value

//            int molID = 0; // TODO: Initialize to an appropriate value

//            string formula = null; // TODO: Initialize to an appropriate value
//            string formula_expected = null; // TODO: Initialize to an appropriate value

//            double molWt = 0; // TODO: Initialize to an appropriate value
//            double molWt_expected = 0; // TODO: Initialize to an appropriate value

//            CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper.GetMoleculeInfo(molConnStr, mstFile, molUser, molPassword, molID, ref formula, ref molWt);

//            Assert.AreEqual(formula_expected, formula, "formula_GetMoleculeInfo_expected was not set correctly.");
//            Assert.AreEqual(molWt_expected, molWt, "molWt_GetMoleculeInfo_expected was not set correctly.");
//            Assert.Inconclusive("A method that does not return a value cannot be verified.");
//        }

//        /// <summary>
//        ///A test for SaveStructureToRecord (string, string, string, string, string, int)
//        ///</summary>
//        [Test]
//        public void SaveStructureToRecordTest() {
//            string molConnStr = null; // TODO: Initialize to an appropriate value

//            string mstFile = null; // TODO: Initialize to an appropriate value

//            string molUser = null; // TODO: Initialize to an appropriate value

//            string molPassword = null; // TODO: Initialize to an appropriate value

//            string strucFile = null; // TODO: Initialize to an appropriate value

//            int molID = 0; // TODO: Initialize to an appropriate value

//            CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper.SaveStructureToRecord(molConnStr, mstFile, molUser, molPassword, strucFile, molID);

//            Assert.Inconclusive("A method that does not return a value cannot be verified.");
//        }

//        /// <summary>
//        ///A test for WriteMoleculeToFile (string, string, string, string, int, string)
//        ///</summary>
//        [Test]
//        public void WriteMoleculeToFileTest() {
//            string molConnStr = null; // TODO: Initialize to an appropriate value

//            string mstFile = null; // TODO: Initialize to an appropriate value

//            string molUser = null; // TODO: Initialize to an appropriate value

//            string molPassword = null; // TODO: Initialize to an appropriate value

//            int molID = 0; // TODO: Initialize to an appropriate value

//            string path = null; // TODO: Initialize to an appropriate value

//            CambridgeSoft.COE.Framework.Common.MolSrvWrapper.MolSrvHelper.WriteMoleculeToFile(molConnStr, mstFile, molUser, molPassword, molID, path);

//            Assert.Inconclusive("A method that does not return a value cannot be verified.");
//        }

//    }


//}
