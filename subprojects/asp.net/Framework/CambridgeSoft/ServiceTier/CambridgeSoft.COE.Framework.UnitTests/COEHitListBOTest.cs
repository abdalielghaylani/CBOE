// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using CambridgeSoft.COE.Framework;
using CambridgeSoft.COE.Framework.COEHitListService;
using CambridgeSoft.COE.Framework.Common;
using CambridgeSoft.COE.Framework.COESecurityService;

namespace CambridgeSoft.COE.Framework.COEHitListService.UnitTests
{
    /// <summary>
    ///This is a test class for CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO and is intended
    ///to contain all CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO Unit Tests
    ///</summary>
    [TestClass()]
    public class COEHitListBOTest
    {
        //variables data access
        private DALFactory _dalFactory = new DALFactory();
        private List<int> _tempHitListList = new List<int>();
        private List<int> _savedHitListList = new List<int>();
        private List<int> _markedHitListList = new List<int>();
        private string databaseName = "SAMPLE";

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }


        public void PopulateTables()
        {
            ////create 2 temp hitlists
            COEHitListBO hitList = null;


            hitList = COEHitListBO.New(databaseName, HitListType.TEMP);
            hitList.Hits = new List<COEHitListBO.Hit>();
            hitList.Hits.Add(new COEHitListBO.Hit(1));
            hitList.Hits.Add(new COEHitListBO.Hit(2));
            hitList.Hits.Add(new COEHitListBO.Hit(3));
            hitList.Hits.Add(new COEHitListBO.Hit(4));
            hitList.Hits.Add(new COEHitListBO.Hit(5));
            hitList.Description = "temp 1";
            hitList = hitList.Update();
            _tempHitListList.Add(hitList.ID);


            hitList = COEHitListBO.New(databaseName, HitListType.TEMP);
            hitList.Hits = new List<COEHitListBO.Hit>();
            hitList.Hits.Add(new COEHitListBO.Hit(4));
            hitList.Hits.Add(new COEHitListBO.Hit(5));
            hitList.Hits.Add(new COEHitListBO.Hit(6));
            hitList.Hits.Add(new COEHitListBO.Hit(7));
            hitList.Hits.Add(new COEHitListBO.Hit(8));
            hitList.Hits.Add(new COEHitListBO.Hit(9));
            hitList.Hits.Add(new COEHitListBO.Hit(10));
            hitList.Hits.Add(new COEHitListBO.Hit(11));
            hitList.Hits.Add(new COEHitListBO.Hit(12));
            hitList.Description = "temp 2";
            hitList = hitList.Update();
            _tempHitListList.Add(hitList.ID);


            hitList = COEHitListBO.New(databaseName, HitListType.TEMP);
            hitList.Hits = new List<COEHitListBO.Hit>();
            hitList.Hits.Add(new COEHitListBO.Hit(8));
            hitList.Hits.Add(new COEHitListBO.Hit(9));
            hitList.Hits.Add(new COEHitListBO.Hit(10));
            hitList.Hits.Add(new COEHitListBO.Hit(11));
            hitList.Hits.Add(new COEHitListBO.Hit(12));
            hitList.Hits.Add(new COEHitListBO.Hit(13));
            hitList.Hits.Add(new COEHitListBO.Hit(14));
            hitList.Description = "temp 3";
            hitList = hitList.Update();
            _tempHitListList.Add(hitList.ID);


            //create 3 saved hitlists
            hitList = COEHitListBO.New(databaseName, HitListType.SAVED);
            hitList.Hits = new List<COEHitListBO.Hit>();
            hitList.Hits.Add(new COEHitListBO.Hit(1));
            hitList.Hits.Add(new COEHitListBO.Hit(2));
            hitList.Hits.Add(new COEHitListBO.Hit(3));
            hitList.Hits.Add(new COEHitListBO.Hit(4));
            hitList.Hits.Add(new COEHitListBO.Hit(5));
            hitList.Description = "saved 1";
            hitList = hitList.Update();
            _tempHitListList.Add(hitList.ID);

            hitList = COEHitListBO.New(databaseName, HitListType.SAVED);
            hitList.Hits = new List<COEHitListBO.Hit>();
            hitList.Hits.Add(new COEHitListBO.Hit(4));
            hitList.Hits.Add(new COEHitListBO.Hit(5));
            hitList.Hits.Add(new COEHitListBO.Hit(6));
            hitList.Hits.Add(new COEHitListBO.Hit(7));
            hitList.Hits.Add(new COEHitListBO.Hit(8));
            hitList.Hits.Add(new COEHitListBO.Hit(9));
            hitList.Hits.Add(new COEHitListBO.Hit(10));
            hitList.Hits.Add(new COEHitListBO.Hit(11));
            hitList.Hits.Add(new COEHitListBO.Hit(12));
            hitList.Description = "saved 2";
            hitList = hitList.Update();
            _tempHitListList.Add(hitList.ID);


            hitList = COEHitListBO.New(databaseName, HitListType.SAVED);
            hitList.Hits = new List<COEHitListBO.Hit>();
            hitList.Hits.Add(new COEHitListBO.Hit(8));
            hitList.Hits.Add(new COEHitListBO.Hit(9));
            hitList.Hits.Add(new COEHitListBO.Hit(10));
            hitList.Hits.Add(new COEHitListBO.Hit(11));
            hitList.Hits.Add(new COEHitListBO.Hit(12));
            hitList.Hits.Add(new COEHitListBO.Hit(13));
            hitList.Hits.Add(new COEHitListBO.Hit(14));
            hitList.Description = "saved 3";
            hitList = hitList.Update();
            _tempHitListList.Add(hitList.ID);

            hitList = COEHitListBO.New(databaseName, HitListType.MARKED);
            hitList.Hits = new List<COEHitListBO.Hit>();
            hitList.Hits.Add(new COEHitListBO.Hit(1));
            hitList.Hits.Add(new COEHitListBO.Hit(2));
            hitList.Hits.Add(new COEHitListBO.Hit(3));
            hitList.Hits.Add(new COEHitListBO.Hit(4));
            hitList.Hits.Add(new COEHitListBO.Hit(5));
            hitList.Hits.Add(new COEHitListBO.Hit(6));
            hitList.Hits.Add(new COEHitListBO.Hit(7));
            hitList.Hits.Add(new COEHitListBO.Hit(8));
            hitList.Hits.Add(new COEHitListBO.Hit(9));
            hitList.Hits.Add(new COEHitListBO.Hit(10));
            hitList.Hits.Add(new COEHitListBO.Hit(11));
            hitList.Hits.Add(new COEHitListBO.Hit(12));
            hitList.Description = "marked  1";
            hitList.Name = "USERMARKED";
            hitList = hitList.Update();
            _markedHitListList.Add(hitList.ID);

        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            COEPrincipal.Logout();
            System.Security.Principal.IPrincipal user = Csla.ApplicationContext.User;

            string userName = "cssadmin";
            string password = "cssadmin";
            bool result = COEPrincipal.Login(userName, password);
            PopulateTables();

        }

        /// <summary>
        ///A test for Delete (HitListType, int)
        ///</summary>
        [TestMethod()]
        public void DeleteTempTest()
        {
            //create a list
            COEHitListBO tempList = CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.New(databaseName, HitListType.TEMP);
            tempList.Hits = new List<COEHitListBO.Hit>();
            tempList.Hits.Add(new COEHitListBO.Hit(1));
            tempList.Hits.Add(new COEHitListBO.Hit(2));

            tempList = tempList.Update();

            int id = tempList.ID;

            //delete it
            CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.Delete(HitListType.TEMP, id);
            COEHitListBO tempList2 = COEHitListBO.Get(HitListType.TEMP, id);
            Assert.IsTrue(tempList2.ID == 0, "DeleteTempTest did not return expected value.");
        }

        /// <summary>
        ///A test for Get (HitListType, int)
        ///</summary>
        [TestMethod()]
        public void GetTempTest()
        {
            int tempListID = _tempHitListList[0]; //TODO: Initialize to an appropriate value
            COEHitListBO tempList = CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.Get(HitListType.TEMP, tempListID);

            Assert.IsTrue(tempList.ID == _tempHitListList[0], "CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.Get did not return the" +
                    " expected value.");
        }

        /// <summary>
        ///A test for New (HitListType)
        ///</summary>
        [TestMethod()]
        public void CreateNewTempHitList()
        {

            COEHitListBO actual = CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.New(databaseName, HitListType.TEMP);
            actual.Hits = new List<COEHitListBO.Hit>();
            actual.Hits.Add(new COEHitListBO.Hit(1));
            actual.Hits.Add(new COEHitListBO.Hit(2));
            actual = actual.Update();

            Assert.IsTrue(actual.NumHits == 2, "CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.New did not return the" +
                    " expected value.");
        }



        /// <summary>
        ///A test for NewSavedFromTempHitList (int)
        ///</summary>
        [TestMethod()]
        public void CreateNewSavedFromTempHitListTest()
        {

            COEHitListBO tempList = CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.New(databaseName, HitListType.TEMP);
            tempList.Hits = new List<COEHitListBO.Hit>();
            tempList.Hits.Add(new COEHitListBO.Hit(1));
            tempList.Hits.Add(new COEHitListBO.Hit(2));
            tempList = tempList.Update();

            //take the id and save it from temp to perm
            int tempHitListID = tempList.ID;
            COEHitListBO savedList = tempList.Save();
            savedList.Name = "Saved";
            savedList.Description = "My Saved from Temp";
            savedList = savedList.Update();

            Assert.IsTrue(savedList.HitListType == HitListType.SAVED, "CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.NewSavedFromTempHitLis" +
                    "t did not return the expected value.");
        }

        /// <summary>
        ///A test for NewTempFromIntersection (int, HitListType, int, HitListType)
        ///</summary>
        [TestMethod()]
        public void NewTempFromIntersectionTest()
        {
            //this test will subract items 0 and 1 in the _tempHitListList set up in the intializaton routine
            //this is an instesetion between 1,2,3,4,5 and 4, 5, 6, 7, 8, 9, 10, 11, 12
            //the results should be a hitlist with 4,5. we will check by the numHits being 4, since at this time we are not pulling hits back
            //into the object
            int hitListID1 = _tempHitListList[0]; // TODO: Initialize to an appropriate value

            //HitListType hitListID1Type = HitListType.TEMP; // TODO: Initialize to an appropriate value

            int hitListID2 = _tempHitListList[1]; // TODO: Initialize to an appropriate value

            //HitListType hitListID2Type = HitListType.TEMP; // TODO: Initialize to an appropriate value

            //create hitlistInfo objects for each of the hitListIDs
            HitListInfo hitListInfo1 = new HitListInfo();
            hitListInfo1.Database = "SAMPLE";
            hitListInfo1.HitListID = hitListID1;
            hitListInfo1.HitListType = HitListType.TEMP;

            HitListInfo hitListInfo2 = new HitListInfo();
            hitListInfo2.Database = "SAMPLE";
            hitListInfo2.HitListID = hitListID2;
            hitListInfo2.HitListType = HitListType.TEMP;

            COEHitListBO actual = COEHitListOperationManager.IntersectHitList(hitListInfo1, hitListInfo2);

            Assert.IsTrue(actual.NumHits == 2, "CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.NewTempFromIntersectio" +
                    "n did not return the expected value.");

        }

        /// <summary>
        ///A test for NewTempFromSubtraction (int, HitListType, int, HitListType)
        ///</summary>
        [TestMethod()]
        public void NewTempFromSubtractionTest()
        {
            //this test will subract items 0 and 1 in the _tempHitListList set up in the intializaton routine
            //this is an instesetion between 1,2,3,4,5 and 4,5,8, 9, 10, 11, 12, 13, 14 
            //the results should be a hitlist with 1,2,3,8,9,10,11,12,13,14. we will check by the numHits being 14, since at this time we are not pulling hits back
            //into the object
            int hitListID1 = _tempHitListList[0]; // TODO: Initialize to an appropriate value

            //HitListType hitListID1Type = HitListType.TEMP; // TODO: Initialize to an appropriate value

            int hitListID2 = _tempHitListList[1]; // TODO: Initialize to an appropriate value

            //HitListType hitListID2Type = HitListType.TEMP; // TODO: Initialize to an appropriate value

            //create hitlistInfo objects for each of the hitListIDs
            HitListInfo hitListInfo1 = new HitListInfo();
            hitListInfo1.Database = "SAMPLE";
            hitListInfo1.HitListID = hitListID1;
            hitListInfo1.HitListType = HitListType.TEMP;

            HitListInfo hitListInfo2 = new HitListInfo();
            hitListInfo2.Database = "SAMPLE";
            hitListInfo2.HitListID = hitListID2;
            hitListInfo2.HitListType = HitListType.TEMP;

            COEHitListBO actual = COEHitListOperationManager.SubtractHitLists(hitListInfo1, hitListInfo2);

            Assert.IsTrue(actual.NumHits == 3, "CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.NewTempFromSubtraction" +
                    " did not return the expected value.");
        }

        /// <summary>
        ///A test for NewTempFromUnion (int, HitListType, int, HitListType)
        ///</summary>
        [TestMethod()]
        public void NewTempFromUnionTest()
        {

            //this test will subract items 0 and 1 in the _tempHitListList set up in the intializaton routine
            //this is an instesetion between 1,2,3,4,5 and 4, 5, 6, 7, 8, 9, 10, 11, 12
            //the results should be a hitlist with 1,2,3,4,5,6,7,8,9,10,11,12. we will check by the numHits being 8, since at this time we are not pulling hits back
            //into the object
            int hitListID1 = _tempHitListList[0]; // TODO: Initialize to an appropriate value

            //HitListType hitListID1Type = HitListType.TEMP; // TODO: Initialize to an appropriate value

            int hitListID2 = _tempHitListList[2]; // TODO: Initialize to an appropriate value

            //HitListType hitListID2Type = HitListType.TEMP; // TODO: Initialize to an appropriate value

            //create hitlistInfo objects for each of the hitListIDs
            HitListInfo hitListInfo1 = new HitListInfo();
            hitListInfo1.Database = "SAMPLE";
            hitListInfo1.HitListID = hitListID1;
            hitListInfo1.HitListType = HitListType.TEMP;
            ;

            HitListInfo hitListInfo2 = new HitListInfo();
            hitListInfo2.Database = "SAMPLE";
            hitListInfo2.HitListID = hitListID2;
            hitListInfo2.HitListType = HitListType.TEMP;

            COEHitListBO actual = COEHitListOperationManager.UnionHitLists(hitListInfo1, hitListInfo2);

            Assert.IsTrue(actual.NumHits == 12, "CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.NewTempFromUnion did n" +
                    "ot return the expected value.");
        }

        [TestMethod()]
        public void ReorderHits()
        {
            //get a hitlist to operate on 1,2,3,4,5
            int tempListID = _tempHitListList[0]; //we knw this is the hitlist we want
            COEHitListBO hitList = CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.Get(HitListType.TEMP, tempListID);

            //now add a hit list with new ordering

            hitList.Hits = new List<COEHitListBO.Hit>();
            hitList.Hits.Add(new COEHitListBO.Hit(1, 0.624));
            hitList.Hits.Add(new COEHitListBO.Hit(2, 0.100));
            hitList.Hits.Add(new COEHitListBO.Hit(3, 0.233));
            hitList.Hits.Add(new COEHitListBO.Hit(4, 0.011));
            hitList.Hits.Add(new COEHitListBO.Hit(5, 0.123));

            hitList = hitList.Update();

            Assert.IsTrue(hitList.NumHits == 5, "CambridgeSoft.COE.Framework.COEHitListService.COEHitListBO.CopyHitListExcluding" +
                   " did not return the expected value.");
        }
    }


}
