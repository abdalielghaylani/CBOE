////////////////////////////////////////////////////////////////////////////////
//                                                                            
//  IIIIIII SSSSSS                                                            
//    II    SS                          InstallShield (R)                     
//    II    SSSSSS      (c) 1996-2002, InstallShield Software Corporation     
//    II        SS                     All rights reserved.             
//  IIIIIII SSSSSS                  
//                                                                            
//                                                                            
//  This template script provides the code necessary to build an entry-point 
//  function to be called in an InstallScript custom action. 
//                                                                            
//                                                                            
//    File Name:  Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                        
//
////////////////////////////////////////////////////////////////////////////////

// Include Ifx.h for built-in InstallScript function prototypes, for Windows 
// Installer API function prototypes and constants, and to declare code for 
// the OnBegin and OnEnd events.
#include "ifx.h"  
#define EXAMPLE1 "cfserver"    
#define EXAMPLE2 "docmanager"  
#define EXAMPLE1_INI INSTALLDIR^"DocManager\\Config\\" + EXAMPLE1 + ".ini" 
#define EXAMPLE2_INI INSTALLDIR^"DocManager\\Config\\" + EXAMPLE2 + ".ini"
#define RegisteryKey "SOFTWARE\\CambridgeSoft\\Chemoffice\\10.0\\DocManager10.0"
#define RegisteryKeyValue "VIRTUAL_DIRECTORY"  
#define RegistryKeySN "SITENUMBER" 


    // The keyword export identifies MyFunction() as an entry-point function.
    // The argument it accepts must be a handle to the Installer database.
    export prototype MyFunction(HWND);  
    export prototype ValidateUser(HWND); 
    export prototype SetDIR(HWND); 
    export prototype RemoveVirtualDir(HWND);
    export prototype CheckVirtDirExists(string);     
    export prototype CheckWebSite(HWND);   
    export prototype ReadRegValues(HWND); 
    export prototype EditUDL(HWND);    
    export prototype DeleteFolder(HWND);
    // To Do:  Declare global variables, define constants, and prototype user-
    //         defined and DLL functions here.
 

// To Do:  Create a custom action for this entry-point function:
// 1.  Right-click on "Custom Actions" in the Sequences/Actions view.
// 2.  Select "Custom Action Wizard" from the context menu.
// 3.  Proceed through the wizard and give the custom action a unique name.
// 4.  Select "Run InstallScript code" for the custom action type, and in
//     the next panel select "MyFunction" (or the new name of the entry-
//     point function) for the source. 
// 5.  Click Next, accepting the default selections until the wizard 
//     creates the custom action.
//
// Once you have made a custom action, you must execute it in your setup by 
// inserting it into a sequence or making it the result of a dialog's 
// control event.

///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  MyFunction
//                                                                           
//  Purpose:  This function will be called by the script engine when 
//            Windows(TM) Installer executes your custom action (see the "To 
//            Do," above).
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function MyFunction(hMSI)   
       // To Do:  Declare local variables.
begin   
if (ConfigFileLoad (EXAMPLE1_INI) < 0) then

        MessageBox ("Unable to load " + EXAMPLE1_INI + ".", SEVERE);

        abort;

 endif;        
    
    if (ConfigFileSave ("cfserver_ini_Pre_90SR3_back" + ".*") < 0) then

       MessageBox ("Unable to backup " + EXAMPLE1_INI + ".", SEVERE);

       // abort;

   // else
   //    MessageBox (EXAMPLE1_INI + " backed up.",INFORMATION);
    endif;   
    
    if (ConfigFileLoad (EXAMPLE2_INI) < 0) then

        MessageBox ("Unable to load " + EXAMPLE2_INI + ".", SEVERE);

       // abort;

    endif;        
    
    if (ConfigFileSave ("DocManager_ini_Pre_90SR3_back" + ".*") < 0) then

       MessageBox ("Unable to backup " + EXAMPLE2_INI + ".", SEVERE);

        //abort;

    //else
    //  MessageBox (EXAMPLE2_INI + " backed up.",INFORMATION);

    endif;        

    // To Do:  Write script that will be executed when MyFunction is called.
 
end;       

function ValidateUser(hMSI)   
    // To Do:  Declare local variables. 
STRING sNewUser, szKey, sDomUser, szName, svValue, szSspLogonExe, szSupportDir, uStatus, svReturnLine, svTemp, szSspLogonLog, sDomainName, sUserName, sPassword, sCmdLine; 
NUMBER nvSize, nvType, nvResult, nvLineNumber, nBuff;
begin             

    // To Do:  Write script that will be executed when MyFunction is called.
  //  SdShowMsg("Validating Windows Domain Account Credentials.....", TRUE);
szKey = "System\\CurrentControlSet\\Control\\ComputerName\\ComputerName";
szName = "ComputerName";
RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE); 

     // Set the default root
RegDBGetKeyValueEx(szKey, szName, nvType, sDomainName, nvSize);
szSspLogonExe = "ssplogon.exe";
szSspLogonLog = "ssplogon.log";
nBuff=256;
MsiGetProperty(ISMSI_HANDLE, "DOMAINUSER",sDomUser,nBuff); 
nBuff=256;
MsiGetProperty(ISMSI_HANDLE, "CREATENEWUSER",sNewUser,nBuff);
if((sNewUser = "True") > 0) then
   nBuff=256;
   MsiGetProperty(ISMSI_HANDLE, "APPUSERNAME",sUserName,nBuff);
else
   nBuff=256;
   MsiGetProperty(ISMSI_HANDLE, "ADMINUSERNAME",sUserName,nBuff);
endif;
nBuff=256;
MsiGetProperty(ISMSI_HANDLE, "APPUSERPASSWORD",sPassword,nBuff);
    
nBuff=256;
MsiGetProperty(hMSI, "SUPPORTDIR", szSupportDir, nBuff);
//CopyFile(szSupportDir^szSspLogonExe, WindowsVolume^szSspLogonExe);
// Usage: ssplogon.exe <domain> <user> <password>    
if((sDomUser = "Yes") > 0) then
	nBuff=256;
    MsiGetProperty(hMSI, "USERDOMAIN", sDomainName, nBuff); 
  //  MessageBox("DomainUser", INFORMATION);
endif;	
sCmdLine = "/C " + szSspLogonExe + " " + sDomainName + " " + sUserName + " " + sPassword + " > " + WindowsVolume^szSspLogonLog;

ChangeDirectory(szSupportDir);

if( LaunchAppAndWait("CMD.EXE", sCmdLine, WAIT) < 0 ) then
 
MessageBox("Unable to launch CMD.EXE & " + szSspLogonExe, SEVERE);
abort;

else

// Find the search string in the log file.
nvResult = FileGrep(WindowsVolume^szSspLogonLog, "Succeeded", svReturnLine, nvLineNumber, RESTART);
NumToStr(svTemp, nvResult);
switch(nvResult)

case FILE_NOT_FOUND:
MessageBox(WindowsVolume^szSspLogonLog + " file not found.", SEVERE);
abort;

case FILE_LINE_LENGTH:
MessageBox(WindowsVolume^szSspLogonLog + " the lines are too long.", SEVERE);
abort;

case OTHER_FAILURE:
NumToStr(svTemp, OTHER_FAILURE);
MessageBox(FOLDER_TEMP^szSspLogonLog + " Failure " + svTemp + " when calling FileGrep().", SEVERE);
abort;

case END_OF_FILE: // Did NOT find "Succeeded" String
MessageBox("Validation of User Credentials failed. Username and/or Password are not valid.", SEVERE);
DeleteFile(WindowsVolume^szSspLogonLog);
abort;

case 0: // Found "Succeeded" String
MessageBox("Validation of User Credentials is successful.", INFORMATION);
MsiSetProperty(ISMSI_HANDLE, "USERSTATUS", "True");  
if((sDomUser = "Yes") > 0) then
    MsiSetProperty(ISMSI_HANDLE, "COMUSERNAME", sDomainName + "\\" +sUserName);
else
    MsiSetProperty(ISMSI_HANDLE, "COMUSERNAME", sUserName);
endif;        
default: // Unknown Error
NumToStr(svTemp, nvResult);
MessageBox(WindowsVolume^szSspLogonLog + " Unknown failure " + svTemp + " when calling FileGrep().", SEVERE);
DeleteFile(WindowsVolume^szSspLogonLog);
abort;

endswitch;

endif;
DeleteFile(WindowsVolume^szSspLogonLog);
//SdShowMsg("", FALSE);   
nBuff=256;
MsiGetProperty(ISMSI_HANDLE,"USERSTATUS", uStatus, nBuff);

end;
function SetDIR(hMSI)
     STRING svDir;
 begin
     GetProfString(WindowsFolder^"Cows.ini", "GLOBALS", "COWS_DIR", svDir); 
     MsiSetProperty(ISMSI_HANDLE, "COWSDIR", svDir); 
     INSTALLDIR = svDir;
     MsiSetProperty(ISMSI_HANDLE, "COWSDIRECTORY", svDir);
     //DATABASEDIR = svDir;
     //MessageBox(INSTALLDIR, INFORMATION);
 end;     
 
 function CheckWebSite(hMSI)   
    // To Do:  Declare local variables. 
  string szSrcDir, szWSName, szVirtualName, szOSName;                                    
    number nBuff, nWSName;
begin       
	MsiGetProperty(ISMSI_HANDLE, "WEBSITE", szWSName, nBuff);
	MsiGetProperty(ISMSI_HANDLE, "VIRTUALNAME", szVirtualName, nBuff);
	MsiGetProperty(ISMSI_HANDLE, "APPPOOL", szOSName, nBuff);
	/*MsiGetProperty(ISMSI_HANDLE,"SETUPEXEDIR", szSrcDir, nBuff);      
    GetProfString(szSrcDir^"cowswebservice.ini","Info", "WebSite", szWSName);
    GetProfString(szSrcDir^"cowswebservice.ini","Info", "VirtualDirectory", szVirtualName);
    GetProfString(szSrcDir^"cowswebservice.ini","Info", "PortNo", szPortNo);
    MsiSetProperty(ISMSI_HANDLE, "VIRTUALNAME", szVirtualName);
    MsiSetProperty(ISMSI_HANDLE, "WEBSITENAME", szWSName);
    MsiSetProperty(ISMSI_HANDLE, "PORTNO", szPortNo);
   */
   // MessageBox(szWSName, INFORMATION);
   if ((szWSName = "0") > 0) then
   SprintfBox(WARNING, "WebSite Name" , "WebSite Name cannot be left blank", szWSName);
   MsiSetProperty(ISMSI_HANDLE, "WEBPROPERTY", "1");
   //MessageBox("1", INFORMATION);      
   
   else
   //MsiSetProperty(ISMSI_HANDLE, "WEBSITE", szWSName);
   MsiSetProperty(ISMSI_HANDLE, "WEBPROPERTY", "0") ;
   //MessageBox("0", INFORMATION);
   endif; 
    
   
end;  

function ReadRegValues(hMSI) 
STRING sVDName, sSiteNumber;
number nvType, nvSize;
begin
RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
nvType = REGDB_STRING; 
nvSize=256;
RegDBGetKeyValueEx(RegisteryKey, RegisteryKeyValue, nvType, sVDName, nvSize);
RegDBGetKeyValueEx(RegisteryKey, RegistryKeySN, nvType, sSiteNumber, nvSize); 
//MessageBox(sVDName + sSiteNumber + "ReadRegVal" , INFORMATION);               
MsiSetProperty(ISMSI_HANDLE, "VIRTUALNAME", sVDName);
MsiSetProperty(ISMSI_HANDLE, "SITENUMBER", sSiteNumber);

end;    
function RemoveVirtualDir(hMSI)
STRING sVDName, sSiteNumber;
NUMBER nvSize, nvType, nResult, nBuff;
OBJECT objIIS_Root;
begin    
nBuff=256;
MsiGetProperty(ISMSI_HANDLE, "VIRTUALNAME", sVDName, nBuff);
MsiGetProperty(ISMSI_HANDLE, "SITENUMBER", sSiteNumber, nBuff);
//MessageBox(sVDName + sSiteNumber + "RemoveVD", INFORMATION);
set objIIS_Root = CoGetObject("IIS://localhost/W3SVC/"+sSiteNumber+"/Root", "");
nResult=CheckVirtDirExists(sVDName);
if (nResult != 0) then
objIIS_Root.Delete("IISWebVirtualDir", sVDName);                
endif;
end;  

function number CheckVirtDirExists(VDName)
number nTy,bSi,ret;
string mRet,VDir;
begin
VDir = "/" + VDName; //VDName = the value u retrieve through ur dialog
nTy=REGDB_STRING ;
bSi=MAX_PATH;
RegDBSetDefaultRoot ( HKEY_LOCAL_MACHINE );
if(RegDBGetKeyValueEx("\\SYSTEM\\CurrentControlSet\\Services\\w3svc\\parameters\\Virtual Roots\\", VDir, nTy, mRet,bSi )<0) then
ret = 0; // The VDirectory does not exists
else
ret = 1; // The Directory allready exists
endif;
return ret;
end; 

function number EditUDL(hMSI)
 	STRING OraService, svLine, svString,szNewString, svReturnLine, szMsg;
    NUMBER nvFileHandle, nvLineNumber, nvResult, nStart, nBuff, nFlag,nBuffer, ret;  
 begin  
 nBuff=256;
      // open the file in Unicode mode.   
     MsiGetProperty(ISMSI_HANDLE, "ORACLESERVICE" , OraService, nBuff);        
   //  MessageBox(szOraServiceName, INFORMATION);
    OpenFileMode (FILE_MODE_APPEND_UNICODE);
    // Open the file.
    if (OpenFile(nvFileHandle, INSTALLDIR^"DocManager\\config", "docmanager.udl") < 0) then
        MessageBox ("Unable to edit DocManager.udl. Please contact the administrator.", SEVERE);
       // abort;
    endif;     
   FileGrep(INSTALLDIR^"DocManager\\config\\docmanager.udl", "orcl",svReturnLine,nvLineNumber, RESTART);
   //MessageBox(svReturnLine, INFORMATION); 
  //MsiGetProperty(ISMSI_HANDLE, "OracleService" , szOraServiceName, nBuff);
  //MessageBox(szOraServiceName, INFORMATION);
  if(StrReplace(svReturnLine,"Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=docmgr;Data Source=orcl;Extended Properties=\"PwdChgDlg=0\"", "Provider=OraOLEDB.Oracle.1;Persist Security Info=False;User ID=docmgr;Data Source=" + OraService + ";Extended Properties=\"PwdChgDlg=0\"", 0) < 0) then
   	MessageBox(svReturnLine, INFORMATION); 
   	else  
   	//MessageBox(svReturnLine, INFORMATION); 
   	if(FileDeleteLine(INSTALLDIR^"DocManager\\config\\docmanager.udl", nvLineNumber, nvLineNumber) < 0) && ((nFlag = 2) < 0) then
  	MessageBox("Delete Line Failed", INFORMATION);
  	endif;
   	WriteLine(nvFileHandle, svReturnLine);
   	//MessageBox(svReturnLine, INFORMATION);
   	nFlag = 2  ; 
   	endif;
   // Cose the File  
   CloseFile (nvFileHandle);      
   
   
  
 end;        
 
 function DeleteFolder(hMSI)
     string svResult;
 begin
	if (FindFile (ProgramFilesFolder^"ComPlus Applications\\{BC940671-2C29-4ED6-99C2-BE2C3624A01B}", "MolParser.dll", svResult) < 0) then  
		//MessageBox(INSTALLDIR + "Find File Failed" + svResult, INFORMATION);
    	//abort; 
    else   
    	DeleteDir(ProgramFilesFolder^"ComPlus Applications\\{BC940671-2C29-4ED6-99C2-BE2C3624A01B}", ALLCONTENTS);
    endif; 
    
    if (FindFile (ProgramFilesFolder^"ComPlus Applications\\{ADB31C48-DF3B-4B0A-82C9-6BD96C95F62C}", "blob.dll", svResult) < 0) then  
		//MessageBox(INSTALLDIR + "Find File Failed" + svResult, INFORMATION);
    	//abort; 
    else   
    	DeleteDir(ProgramFilesFolder^"ComPlus Applications\\{ADB31C48-DF3B-4B0A-82C9-6BD96C95F62C}", ALLCONTENTS);
    endif;
    
    if (FindFile (ProgramFilesFolder^"ComPlus Applications\\{25B503B0-C634-407C-B910-F116D84F5925}", "taskscheduler.dll", svResult) < 0) then  
		//MessageBox(INSTALLDIR + "Find File Failed" + svResult, INFORMATION);
    	//abort; 
    else   
    	DeleteDir(ProgramFilesFolder^"ComPlus Applications\\{25B503B0-C634-407C-B910-F116D84F5925}", ALLCONTENTS);
    endif;
  end;
  
export prototype AddAppName(HWND);
export prototype RemoveAppName(HWND);

function AddAppName(hMSI)
    STRING szCowsDir,szKey;                                                
    NUMBER nBuff;
 begin           
 	 nBuff=256;
     MsiGetProperty(ISMSI_HANDLE, "COWSDIRECTORY", szCowsDir, nBuff);
     GetProfString(szCowsDir^"Config\\ChemOffice.ini", "GLOBALS", "AppName",szKey);
     ReplaceProfString(szCowsDir^"Config\\ChemOffice.ini","GLOBALS","AppName",szKey,szKey + ",DocManager");
 end;  
 
 function RemoveAppName(hMSI)
     STRING svDir, szKey, svValue;
 begin
     GetProfString(WindowsFolder^"Cows.ini", "GLOBALS", "COWS_DIR", svDir);
     GetProfString(svDir^"Config\\ChemOffice.ini", "GLOBALS", "AppName",szKey);
     svValue = szKey;
     StrReplace(szKey,",DocManager", "", 0);
     ReplaceProfString(svDir^"Config\\ChemOffice.ini", "GLOBALS", "AppName", svValue, szKey);
 end;