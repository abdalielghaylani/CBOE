<%'Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved%>
<%'DO NOT EDIT THIS FILE
'-------------------------------------------------------------------------------
' 'the action page contains the actions for searching buttons clicked in the nav bar
'-------------------------------------------------------------------------------%>
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cows_func_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/utility_func_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/global_app_vbs.asp"-->

<%
'stop
'on error resume next
Dim bDebugHitList
bDebugHitList = false
Dim bTrim
bTrim = true
Session("no_gui" & dbkey & formgroup) = False
if request("bypass_ini") <> "" then
	Session("bypass_ini" & dbkey & formgroup) =True
end if
strDataAction = LCase(Request.QueryString("dataaction"))
if not strDataAction <> "" then
	strDataAction = LCase(Request("DataAction"))
end if
dbkey = request("dbname")

formgroup = Request("formgroup")
if Not formgroup <> "" then formgroup = "base_form_group"
Session("Mac3" & dbkey & formgroup) = Request("Mac3")
Session("returnDB") = dbkey
formgroupflag= GetFormGroupVal(dbkey, formgroup, kFormGroupFlag)

if Request("KillSession")=1 then
	session.Abandon
end if


'------------------
' action handler
'------------------
Select Case strDataAction
	
	Case "restore_query"
	
		db_query_item = request("db_query_item")
		SetSessionVars dbkey, formgroup, "search" 'clears all old data
		returnVal = doRestoreQuery(dbkey, formgroup, db_query_item)
		ReturnInputForm dbkey, formgroup, "edit_query" 
	Case "delete_query"
		db_query_item = request("db_query_item")
		
		returnVal = doDeleteStoredQuery(dbkey, formgroup, db_query_item)
		if returnVal <> "" then
			showmessagedialog(returnval)
		end if
		response.redirect Application("AppPathHTTP") & "/save_query.asp?manage_query_mode=reload_Nav&dbname=" & dbkey & "&formgroup=" & formgroup

	Case "edit_stored_query"
		db_query_item = request("db_query_item")
		
		returnVal = doEditStoredQuery(dbkey, formgroup, db_query_item)
		if returnVal <> "" then
			showmessagedialog(returnval)
		end if		
		response.redirect Application("AppPathHTTP") & "/save_query.asp?manage_query_mode=manage_queries&dbname=" & dbkey & "&formgroup=" & formgroup

	Case "save_query"
		query_name = request("query_name")
		description = request("query_description")
		query_name = request("query_name")
		username = request("username")
		public_flag = request("is_public")
		if Not public_flag <> "" then
			public_flag = 0
		end if
		returnVal = doStoreQuery(dbkey, formgroup, query_name, "", username, description,public_flag)
		if returnVal <> "" then
			showmessagedialog(returnval)
		end if
		response.redirect Application("AppPathHTTP") & "/save_query.asp?manage_query_mode=reload_Nav&dbname=" & dbkey & "&formgroup=" & formgroup

	Case "rename_query"
		new_name = request("new_name")
		db_query_item = request("db_query_item")
		returnVal = doRenameQuery(dbkey, formgroup, db_query_item, new_name)
		if returnVal <> "" then
			showmessagedialog(returnval)
		end if
	Case "make_query_public"
		db_query_item = request("db_query_item")
		public_flag = request("is_public")
		if Not public_flag <> "" then
			public_flag = 0
		end if
		returnVal = doMakeQueryPublic(dbkey, formgroup, db_query_item,public_flag)
		if returnVal <> "" then
			showmessagedialog(returnval)
		end if
	Case "restore_hitlist"

	
		if Application("DISABLE_CORE_RS_LOOPING") = 1 then
			Session("LIST_RS") = ""
			Session("DETAIL_RS") = ""
			Session("dialogShown" & dbkey & formgroup)=false
			if formgroup="base_form_group" then
				formgroup = request("fg_selector")
				Session("bypass_ini" & dbkey & formgroup) = true
			end if
		end if
		restoreType = lCase(Request("restore_type"))
		listType = lCase(Request("listType"))
		currHitlistID = Session("hitlistID" & dbkey & formgroup)
		username = request("username")
		db_hitlist_item = request("db_hitlist_item")
		if db_hitlist_item <> "" then
			tempArr = split(db_hitlist_item, ":")
			hitlistID = tempArr(0)
			number_hits = tempArr(1)
		Else
			' This is the restore last hitlist case
			restoreType = "replace"
			username = getUserSettingsID(dbkey, formgroup)
			hitlistID = Session("LastHitlistID" & dbkey & formgroup)
			number_hits = Session("LastHitListRecordcount" & dbkey & formgroup)
			'remember the current hitlistID so we can restore back to it
			'This covers the undo-undo-refine case
			
		End if
		'LJB 4/12/2004 support toomanyhits enabled apps
		on error resume next
		if number_hits <> "" then
			number_hits = Clng(number_hits)
		else
			number_hits=0
		end if
		too_many_hits_value = Application("TooManyHitsMaximumRetrievable")
		test_too_many =  number_hits > Application("TooManyHitsMaximumRetrievable")
		
		Session("TooManyHitsToDisplay" & dbkey & formgroup) = test_too_many
		'jhs for overriding location
		returnLocation = request("return_location")
		
		rememberLastHitlist dbkey, formgroup
		Select Case restoreType
			Case "replace"
				'if we are restoring a saved list we may need to copy it to the CSDO table first.
				'GetCSDOHitlistIDFromUserHitlistID ensures that the requied list is in the csdo table
				
				if listType = "user" then hitlistID = GetCSDOHitlistIDFromUserHitlistID(dbkey, formgroup, hitlistID)
				Session("BaseRShitlistID" & dbkey & formgroup) = hitlistID
				Session("hitlistrecordcount" & dbkey & formgroup)= number_hits		
			Case "intersect", "subtract","union"
				'The new listType parameter in CreateNewHilist() tells us if the source list is a saved (user) or history (csdo) list
				Session("BaseRShitlistID" & dbkey & formgroup) = CreateNewHitList(currHitlistID, hitlistID, listType, restoreType, dbkey, formgroup, username)
			Case "differentform"
				Session("order_by" & dbkey & formgroup) = request("order_by")
				Session("sort_direction" & dbkey & formgroup) = request("sort_direction")
				if listType = "user" then hitlistID = GetCSDOHitlistIDFromUserHitlistID(dbkey, formgroup, hitlistID)
				Session("BaseRShitlistID" & dbkey & formgroup) = hitlistID
				Session("hitlistrecordcount" & dbkey & formgroup)= number_hits	
				returnLocation = Request("redirectpage") & "?" & "dbname=" & dbkey & "&formgroup=" & formgroup
				returnLocation = returnLocation & "&formmode=" & Request("formmode_override") & "&jumptoindex=" & request("unique_id")
				
		End Select 
		Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)
		' Make sure to reload the BaseRS from the hitlist table
		Session("reload_basers" & dbkey & formgroup)=true
		' Return as if a search had occurred
		Session("error" & dbkey & formgroup) = false
		
		ReturnData dbkey, formgroup, "SEARCH", dbkey, request("return_data"), returnLocation, request("return_fields")
		
	Case "save_hitlist"
		hitlistID = request("db_hitlist_item")
		hitlist_name = request("hitlist_name")
		description = request("description")
		username = request("username")
		public_flag = request("is_public")
		returnVal = doSaveHitlist(dbkey,  formgroup, hitlistID, hitlist_name, username, description,public_flag)
		if returnVal <> "" then
			showmessagedialog(returnval)
		end if
		response.redirect Application("AppPathHTTP") & "/save_query.asp?manage_hitlist_mode=reload_Nav&dbname=" & dbkey & "&formgroup=" & formgroup
	Case "update_hitlist"
		hitlistID = request("db_hitlist_item")
		hitlist_name = request("hitlist_name")
		description = request("description")
		username = request("username")
		public_flag = request("is_public")
		if Not public_flag <> "" then
			public_flag = 0
		end if
		returnVal = doUpdateHitlistIDTable(dbkey,  formgroup, hitlistID, hitlist_name, username, description, public_flag)
		if returnVal <> "" then
			showmessagedialog(returnval)
		end if
		response.redirect Application("AppPathHTTP") & "/save_query.asp?manage_hitlist_mode=reload_Nav&dbname=" & dbkey & "&formgroup=" & formgroup
	Case "delete_hitlist"
		db_hitlist_item = request("db_hitlist_item")
		tempArr = split(db_hitlist_item, ":")
		hitlistID = tempArr(0)
		number_hits = tempArr(1)
		username = request("username")
		returnVal = doDeleteHitlist(dbkey, formgroup, hitlistID)
		Session("HitListHistoryExists" & dbkey & formgroup) = GetUserHitlists(dbkey, formgroup, username, true)
		Session("HitListExists" & dbkey & formgroup) = GetUserHitlists(dbkey, formgroup, username, false)
		if returnVal <> "" then
			showmessagedialog(returnval)
		end if
		response.redirect Application("AppPathHTTP") & "/save_query.asp?manage_hitlist_mode=manage_hitlists&dbname=" & dbkey & "&formgroup=" & formgroup & "&formmode=list"
	Case "db" 'code invoked from default asp link 
	

		dbkey = SetDBkey(dbkey, formgroup)
		SetSessionVars dbkey, formgroup, "new_search"
	
		ReturnInputForm dbkey, formgroup, "search"
		
	Case "list_view"'Code for List View button		
		ReturnResults dbkey, formgroup, strDataAction, DBSearchNames
	
	
		
	Case "new_search"	'Code for New Search button
		if Application("DISABLE_CORE_RS_LOOPING") = 1 then
			Session("LIST_RS") = ""
			Session("DETAIL_RS") = ""
		end if
		dbkey = SetDBkey(dbkey, formgroup)
		'Session("hitlistRecordCount" & dbkey & formgroup) =""
		SetSessionVars dbkey, formgroup, "new_search"
		rememberLastHitlist dbkey, formgroup
		ReturnInputForm dbkey, formgroup, "search"
		
	Case "edit_query"	'Code for EditQuery button
		If not formgroupflag = "GLOBAL_SEARCH" then	dbkey = SetDBkey(dbkey, formgroup)
		
		'DGB added special handling for restore from refine mode
		if InStr(Request.Form("currentlocation"), "formmode=refine") > 0 then
			SetupForRefine()
			Session("RestoreQueryOnRefine") = true
			ReturnInputForm dbkey,  formgroup, "refine"
		else
			SetSessionVars dbkey, formgroup,"edit_query"
			ReturnInputForm dbkey,  formgroup, "edit_query"
		end if
	
			
	Case "export_hits" 	'Code for Export Hits button to create SDFile from current recordset
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
			FlushMessageToClient("this process may take several minutes...")
		else
			FlushMessageToClient("exporting...")
			FlushMessageToClient("this process may take several minutes...")
		end if
		Session("filepath") = ""
		ExportInfo = GetFormGroupVal(dbkey, formgroup,kSDFileFields)
		if INSTR(UCase(ExportInfo), "ALT_FORMGROUP:")> 0 then
			ExportInfo_temp=split(exportinfo, ":", -1)
			formgroup =ExportInfo_temp(1)
		end if
		'pick up export information from session variables

		ExportType = request("exporttype")
		MaxExportNumber = request("MaxExportNumber")
		fieldstoexport = session("all_export_fields")
		
		if trim(request("export_structure_data")) = "CS_OUTPUT_STRUC_DATA" then
			bStructOut = true
		else
			bStructOut = false
		end if
		OutputType = request("File_Ouput_Type")
		Select Case UCase(OutputType)
			Case "SDFILE"
				if ExportType = "VIEW" then
					Session("filepath")= DoSDFileExport(dbkey, formgroup, fieldstoexport,ExportType,MaxExportNumber,bStructOut)
				else
					Session("filepath")= exportSDFile(dbkey, formgroup, fieldstoexport,ExportType,MaxExportNumber,bStructOut)
				end if
			Case "FLAT_SDFILE"
				Session("filepath")= DoSDFileExport(dbkey, formgroup, fieldstoexport,ExportType,MaxExportNumber,bStructOut)
			Case "RDFILE"
				'Response.Write "dbkey = " & TypeName(dbkey) & "<br>"
				'Response.Write "formgroup = " & TypeName(formgroup) & "<br>"
				'Response.Write "fieldstoexport = " & TypeName(fieldstoexport) & "<br>"
				'Response.Write "ExportType = " & TypeName(ExportType) & "<br>"
				'Response.Write "MaxExportNumber = " & TypeName(MaxExportNumber) & "<br>"
				'Response.Write "bStructOut = " & TypeName(bStructOut) & "<br>"
				'Response.Write "session = " & TypeName(Session("filepath")) & "<br>"
				'Response.end
				
				Session("filepath")= ExportRDFile(dbkey, formgroup, fieldstoexport, ExportType, MaxExportNumber, bStructOut)
		End Select
		
		'fieldstoexport = Split(SDFileFields, ",", -1) ' go through all fields and see which ones are checked for output
		redirectpath = "/" & Application("AppKey") & "/export_hits.asp?formmode=" & formmode & "&dbname=" & dbkey & "&formgroup=" & formgroup & "&export=complete"
		%>
		<script language = "javascript">
		document.location.href = "<%=redirectpath%>"
		</script>
		<%
	Case "query_string"
	'?action =query_string&dbname = ddd&formgroup = """& full_field_name = LLL & fieldvalue = *** & field_type = III & field_criteria =KKK"
		if not formgroup <>"" then formgroup = "base_form_group"
		DBSearchNames = dbkey
		SetSessionVars dbkey, formgroup, "search"
		strWhere=DoQueryStringSearch(dbkey, formgroup)
		if request("alt_table_name") <> "" then
			recsetflag="rel_alt_table"
			stype="rel_alt_table"
		else
			recsetflag = "rel"
			stype = "rel"
		end if
		'!DGB! 04/18/01 hitlist setup
		'LJB 4/22 add to retrieve all to make that work too!!
		
			basetable = GetBaseTable(dbkey, formgroup, "basetable")
			baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
			strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
			
		 'clear this so if a refine is done, it will indicate that is is the first and that the base values should be stored.
		Session("Refine" & dbkey & formgroup)=""
		Session("SearchDomain" & dbkey & formgroup) = 0
		'this makes sure you reuse hit lists instead of generating a new one after each search
		'!DGB! 02/03 hitlistmangement
		if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
			Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
		else
			rememberLastHitlist dbkey, formgroup
			Session("hitlistID" & dbkey & formgroup) = 0 
		End if
		Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
		'Session("TranslateTable" & dbkey & formgroup) = basetable
		'Session("TranlateStrucKey" & dbkey & formgroup) = strucid
		'Session("TranslateRelKey" & dbkey & formgroup) = baseid

		GetResults dbkey, formgroup, stype, recsetflag, strWhere
		UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
		err.clear()
		
		ReturnResults dbkey, formgroup, strDataAction, DBSearchNames
	
	Case "get_sql_string"
		SetSessionVars dbkey, formgroup, "new_search"
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Searching...")
		end if
		if not formgroup <>"" then formgroup = "base_form_group"
		DBSearchNames = dbkey
		SetSessionVars dbkey, formgroup, "search"
		Session("Base_RS" & dbkey & formgroup)= ""
		fieldname = Request("sql_source")
		
		if fieldname = "session_sql_string" then
			sql = Session("sql_string") 
		else
			sql = Request(fieldname)
		end if
		
		Session("SearchData" & "SearchStrategy" & dbkey & formgroup) = "rel"
		Session("SearchData" & "RelPortion" & dbkey & formgroup)=sql
		recsetflag="rel"
		stype="full_sql_w_max"

			
		
		'clear this so if a refine is done, it will indicate that is is the first and that the base values should be stored.
		Session("Refine" & dbkey & formgroup)=""
		Session("SearchDomain" & dbkey & formgroup) = 0
		'!DGB! 02/03 hitlistmangement
		if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
			Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
		else
			rememberLastHitlist dbkey, formgroup
			Session("hitlistID" & dbkey & formgroup) = 0 
		End if
		basetable = request("table_name")
		if basetable <> "" then
			baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
			'strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
			Session("ContentsField" & dbkey & formgroup)=basetable & "." & baseid
			'Session("TranslateTable" & dbkey & formgroup) = basetable
			'Session("TranlateStrucKey" & dbkey & formgroup) = strucid
			'Session("TranslateRelKey" & dbkey & formgroup) = baseid
		end if
		'strwhere = dorelsearch(dbkey, formgroup, "rel", "new")
		
		GetResults dbkey, formgroup, stype, recsetflag, sql
		UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
		Session("reload_basers" & dbkey & formgroup)=request("reload_basers")
		StoreRequestObj dbkey, formgroup,request("store_request")
		
		
		ReturnData dbkey, formgroup, strDataAction, DBSearchNames, request("return_data"), request("return_location"), request("return_fields")
	
	'Code for retrieve_all button
	Case "retrieve_all"
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Searching...")
		end if
		tempDBSearchNames = ""
		DBSearchNames = ""
		if formgroupflag = "GLOBAL_SEARCH" then
			DBSearchNames = Application("GlobalSearchDBs")
		else
			DBSearchNames = dbkey
		end if
		Session("SearchData" & "SearchDBNames")= DBSearchNames
		DBSearchNamesArray = split(DBSearchNames, ",", -1)
		thedbkey = 0
		Session("count") = UBound(DBSearchNamesArray)
		dbkeyset = false
		For thedbkey = 0 to CLng(Session("count"))
			dbkey = DBSearchNamesArray(thedbkey)
			
			SetSessionVars dbkey, formgroup, "search"
			SetGetDataMethod dbkey, formgroup,Request("metadata_directive")
			Session("SearchData" & "SearchStrategy" & dbkey & formgroup) = "retrieve_all"
			strWhere=DoRetrieveAllSearch(dbkey, formgroup)
			recsetflag = "rel"
			stype = "rel"
			'!DGB! 04/18/01 hitlist setup
			'LJB 4/22 add to retrieve all to make that work too!!
		
				basetable = GetBaseTable(dbkey, formgroup, "basetable")
				baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
				strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
			
			 'clear this so if a refine is done, it will indicate that is is the first and that the base values should be stored.
		    Session("Refine" & dbkey & formgroup)=""
			Session("SearchDomain" & dbkey & formgroup) = 0
			'!DGB! 02/03 hitlistmangement
			if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
				Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
			else
				rememberLastHitlist dbkey, formgroup
				Session("hitlistID" & dbkey & formgroup) = 0 
			End if
			Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
			if bDebugHitList = true then
				logaction(UCase(strDataAction) & " HitList to_be_used_for Results" & Session("hitListID" & dbkey & formgroup))
				logaction(UCase(strDataAction) & " HitList To Be Searched (Domain)" & Session("SearchDomain" & dbkey & formgroup))
			end if	
			
			GetResults dbkey, formgroup, stype, "rel", strWhere
			UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
			err.clear()
			if Session("hitlistrecordcount" & dbkey & formgroup) > 0 and dbkeyset = false then 
				dbreturn = dbkey
				dbkeyset  = true
			end if
		next
		
		Session("reload_basers" & dbkey & formgroup)=request("reload_basers")
		StoreRequestObj dbkey, formgroup,request("store_request")
		
		ReturnData dbkey, formgroup, strDataAction, DBSearchNames, request("return_data"), request("return_location"), request("return_fields")
		
	case "build_rs"
	
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Searching...")
		end if
		the_ids = request("id_list")
		buildRS dbkey, formgorup, the_ids	
		ReturnData dbkey, formgroup, "search", dbkey, request("return_data"), request("return_location"), request("return_fields")
	
	Case "limited_search"

		Select Case request("limitType")
			Case "1"
				Session("displayLimit") = Application("TooManyHitsWarningThreshHold")
			Case "2"
				Session("displayLimit") = Application("TooManyHitsMaximumRetrievable")
		End select
		Session("limited_search")=true
		Session("error" & dbkey & formgroup) = false
		Session("fEmptyRecordset" & dbkey & formgroup)=false
			basetable = GetBaseTable(dbkey, formgroup, "basetable")
			baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
			strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
			
		    'clear this so that the undo refine button will not be shown in case it had been previously set, but not cleared.
		    Session("Refine" & dbkey & formgroup)=""
		    'Indicate that this search is over the entire database
			Session("SearchDomain" & dbkey & formgroup) = 0
			'!DGB! 02/03 hitlistmangement
			if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
				Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
			else
				rememberLastHitlist dbkey, formgroup
				Session("hitlistID" & dbkey & formgroup) = 0 
			End if
			Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
			GetResults dbkey, formgroup, stype, "rel", Session("SearchData" & "FullStrWhere" & dbkey & formgroup)
			'store the query if application variables indicate to do so
			if CBool(Application("ALLOW_QUERY_MANAGEMENT")) = True then 'this is for databrowser support only at this time
				theReturnVal = doStoreQuery(dbkey, formgroup, "HISTORY", Session.SessionID, Session("UserName" & dbkey), "", "0")
				
			end if
			UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
			err.clear()
			'!DGB 05/13/02 Clear before next db
			StrWhere =""
			if Session("hitlistrecordcount" & dbkey & formgroup) > 0 and dbkeyset = false then 
				dbreturn = dbkey
				dbkeyset  = true
			end if
		
	
		dbkey = dbreturn
		Session("reload_basers" & dbkey & formgroup)=request("reload_basers")
		StoreRequestObj dbkey, formgroup,request("store_request")

		ReturnData dbkey, formgroup, strDataAction, DBSearchNames, request("return_data"), request("return_location"), request("return_fields")

		
	Case "search"
		'stop
		Session("result_display_type") = Request("result_display_type")
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Searching...")
		end if
		
		tempDBSearchNames = ""
		DBSearchNames = ""
	
		if formgroupflag = "GLOBAL_SEARCH" then
			DBSearchNames = GetDBSearchNames()
		else
			DBSearchNames = dbkey
		end if
		Session("SearchData" & "SearchDBNames")= DBSearchNames
	
		DBSearchNamesArray = split(DBSearchNames, ",", -1)
		Dim thedbkey
		thedbkey = 0
		dbkeyset = false
		Session("count") = UBound(DBSearchNamesArray)
		' !DGB! 11/21/02
		' remember the list of global search dbs to use the same on the next search
		Session("selectedGlobalSearchDBs") = DBSearchNames
		For thedbkey = 0 to CLng(Session("count"))
			dbkey = DBSearchNamesArray(thedbkey)
			
			SetSessionVars dbkey, formgroup, "search"
			SetGetDataMethod dbkey, formgroup,Request("metadata_directive")

			if thedbkey = 0 then 
				dbreturn = dbkey
			end if
			
			strwhere = dorelsearch(dbkey, formgroup, "rel", "new")
			strwhere = CSDOCreateCombinedSqlSelectString(strwhere, dbkey, formgroup)	
			
			basetable = GetBaseTable(dbkey, formgroup, "basetable")
			baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
			strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
			
			'TSM 5/21/2008: Horrible hack to get around CSBR-96385, hopefully without affecting other COE apps
			if lcase(basetable) = lcase("inv_containers_subsearch_alias") then
				basetable = GetTableVal(dbkey, basetable, kTableRealName)
			end if
			
		    'clear this so that the undo refine button will not be shown in case it had been previously set, but not cleared.
		    Session("Refine" & dbkey & formgroup)=""
		    'Indicate that this search is over the entire database
			Session("SearchDomain" & dbkey & formgroup) = 0
			'!DGB! 02/03 hitlistmangement
			if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
				Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
			else
				rememberLastHitlist dbkey, formgroup
				Session("hitlistID" & dbkey & formgroup) = 0 
			End if
			Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
			if bDebugHitList = true then
				
				logaction(UCase(strDataAction) & " HitList to_be_used_for Results" & Session("hitListID" & dbkey & formgroup))
				logaction(UCase(strDataAction) & " HitList To Be Searched (Domain)" & Session("SearchDomain" & dbkey & formgroup))
			end if	
			'do the search and get the results

			GetResults dbkey, formgroup, stype, "rel", strWhere
			
			'store the query if application variables indicate to do so
			if CBool(Application("ALLOW_QUERY_MANAGEMENT")) = True then 'this is for databrowser support only at this time
				theReturnVal = doStoreQuery(dbkey, formgroup, "HISTORY", Session.SessionID, Session("UserName" & dbkey), "", "0")
				
			end if
			UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
			err.clear()
			'!DGB 05/13/02 Clear before next db
			StrWhere =""
			if Session("hitlistrecordcount" & dbkey & formgroup) > 0 and dbkeyset = false then 
				dbreturn = dbkey
				dbkeyset  = true
			end if
		next
	
		dbkey = dbreturn
		Session("reload_basers" & dbkey & formgroup)=request("reload_basers")
		StoreRequestObj dbkey, formgroup,request("store_request")

		ReturnData dbkey, formgroup, strDataAction, DBSearchNames, request("return_data"), request("return_location"), request("return_fields")

		
	Case "search_no_gui"
		Session("result_display_type") = Request("result_display_type")
		'this makes sure that error messages are not written.  You need to check
		'Session("message & dbkey & formgroup) or SEssion("errors_returned" & dbkey & formgroup) to see if
		'errors occured.
		Session("no_gui" & dbkey & formgroup) = True
		if Not dbkey <> "" then
			message = "dbname missing"
		Else
			request_format = Request("request_format")
			if not request_format <> "" then request_format = "blind"
			return_form = Request("return_form")
			if Not return_format <> "" then return_format = "server_rs"
			'SetSessionVars will set the defaults necessary for the search
			SetSessionVars dbkey, formgroup, "search_no_gui"
			request_format = LCase(request_format)
			
			Select Case request_format
				Case "prepared"
					'post/getshould populuate the following fields with the NAMES of the fields containing data
					'if using a get request you cannot do a structure search.  If there are no fields to search
					'leave the value empty
					'SearchStrategy = Request("SearchStrategy")
					'SubSearchFields = Request("SubSearchFields")
					'MWFields = Request("MolWeightSearchFields")
					'FormulaFields = Request("FormulaSearchFields")
					'RelFields = Request("RelationalSearchFields")
					'ExactFields = Request("ExactSearchFields")
					'SimSearchFields = Request("SimSearchFields")
					'ReturnFields = Request("ReturnFields")
					'get data will get and populate all the necessary fields and determine the search strategy
					GetSearchData dbkey, formgroup
				Case "blind"
					'the default.  This will go through the searchable fields for the specified formgroup and look for information
					'in each field.
					GetSearchData_blind dbkey, formgroup
					
			End select
			'after the strategy is determined the appropriate search entry point is chosen and executed
				strategy = Session("SearchData" & "SearchStrategy" & dbkey & formgroup)
				strategy = LCase(strategy)
				sql_type = LCase(Request("sql_type"))
				strwhere = dorelsearch(dbkey, formgroup, strategy, "new")
				err.clear()
				'!DGB! 04/18/01 hitlist setup
				'LJB 4/22 add to retrieve all to make that work too!!
		
				basetable = GetBaseTable(dbkey, formgroup, "basetable")
				baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
				strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
			
				 'clear this so if a refine is done, it will indicate that is is the first and that the base values should be stored.
				Session("Refine" & dbkey & formgroup)=""
				Session("SearchDomain" & dbkey & formgroup) = 0
				'!DGB! 02/03 hitlistmangement
				if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
					Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
				else
					rememberLastHitlist dbkey, formgroup
					Session("hitlistID" & dbkey & formgroup) = 0 
				End if
				Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
					'if strWhere <> "" then
						Session ("error" & dbkey & formgroup) = false
						If sql_type = "full_sql" and strategy = "rel" then
							strwhere = CSDOCreateCombinedSqlSelectString(strwhere, dbkey, formgroup) 
							GetResults dbkey, formgroup, "full_sql", "no_gui", strWhere
							
						else
							strwhere = CSDOCreateCombinedSqlSelectString(strwhere, dbkey, formgroup) 	
							GetResults dbkey, formgroup, "cows_sql_request", "no_gui", strWhere
							
						end if
					'else
						'Session("records_found" & dbkey & formgroup) = 0
					'end if	

			return_field = request("return_fields")
			if inStr(return_field, ".")> 0 then
				temp = split(return_field, ".", -1)
				if Ubound(temp) = 2 then
					return_field = temp(2)
				else
					return_field = temp(1)
				end if 
			end if
			if Not return_field <> "" then
				basetable = GetBaseTable(dbkey, formgroup, "basetable")
				baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
				return_field= baseid
			end if
			return_location = Request("return_location")

			Select case return_format
				case "client_wddx"
						Set MyConv = Server.CreateObject("WDDX.JSConverter.1")  
							MyDynamicJSCode = MyConv.ConvertData(Session("no_gui" & dbkey & formgroup), "ReturnRS")
							MyConv = ""
						Set MyConv = Nothing
						Set MySerializedRS = Server.CreateObject("WDDX.Serialize")
					if Not return_location <> "" then 
						Response.Write MySerializedRS
					else
						redirectpath= return_location
						'Response.redirect redirectpath 
						%>
						<script language = "javascript">
						MainWindow = <%=Application("MainWindow" & dbkey)%>
						MainWindow.document.location.href = "<%=redirectpath%>"
						</script>
						<%
					end if
					UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
				case "server_rs"
					returnstr = ""
					if Not return_location <> "" then 
						if  Session("records_found" & dbkey & formgroup)>0 then
							on error resume next
							Set myrs = Session("no_gui" & dbkey & formgroup)
							
							Do while not myrs.EOF
							theVal = myrs(return_field)
								if Len(theVal) > 0 then
									if return_str <> "" then
										return_str = return_str & "," & theVal
									else
										return_str = theVal
									end if
								end if
								myrs.MoveNext
							loop
							Set myrs = Nothing
							myrs = ""
							Response.Write return_str
							DataConn.Close
						else
							return_str = "no_records_found"
							Response.Write return_str
						end if
					else
						redirectpath=return_location 
						'Response.redirect redirectpath 
						%>
						<script language = "javascript">
						MainWindow = <%=Application("MainWindow" & dbkey)%>
						MainWindow.document.location.href = "<%=redirectpath%>"
						</script>
						<%'use for post processing recordset
					end if
				end select
		End if
	case "get_info"
		if not formgroup <> "" then formgroup = "base_form_group"
		info_type =Request("info_type")
		Select Case LCase(info_type)
			Case "base_table"
				return_info=GetTableGroupVal(dbkey, formgroup, kBaseTable)
			Case "molecule_table"
				return_info=GetTableGroupVal(dbkey, formgroup, kMolTable)
			Case "structure_fields"
				return_info=GetFormGroupVal(dbkey, formgroup, kStructureFields)
			Case "formula_fields"
				return_info=GetFormGroupVal(dbkey, formgroup, kFormulaFields)
			Case "molweight_fields"
				return_info=GetFormGroupVal(dbkey, formgroup, kMWFields)
			Case "rel_fields"
				return_info=GetFormGroupVal(dbkey, formgroup, kRelFields)
		End Select
		Response.Write return_info
	Case "show_marked"
		if Application("DISABLE_CORE_RS_LOOPING") = 1 then
			Session("LIST_RS") = ""
			Session("DETAIL_RS") = ""
		end if
		'determin if there is a hitlist to return to
		if Not Session("hitlistRecordCount" & dbkey & formgroup)="" then
			if Session("hitlistRecordCount" & dbkey & formgroup) > 0 then
				'store the hitlist to return to is showlastlist is clicked
				Session("LasthitlistID" & dbkey & formgroup)=Session("hitListID" & dbkey & formgroup)
			else
				Session("LasthitlistID" & dbkey & formgroup)=""
			end if
		else
			Session("LasthitlistID" & dbkey & formgroup)=""
		end if
		
		'check to see what the currenthitlist so you don't overwrite it
		on error resume next
		if Session("hitListID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup) then
			Session("hitListID" & dbkey & formgroup)=Session("RefinehitListID" & dbkey & formgroup)
		else
			Session("hitListID" & dbkey & formgroup)=Session("BaseRShitlistID" & dbkey & formgroup)
		end if
		'always remove the refine flag so that the undo refine button goes away - once you show the
		'last list you loose all that information.
		Session("Refine" & dbkey & formgroup)=""
		'store the base_rs so you can return to it
		Session("LastBase_RS" & dbkey & formgroup) = Session("Base_RS" & dbkey & formgroup)
		'store the last hitlistcount so you can return to it.
		Session("LasthitlistRecordCount" & dbkey & formgroup) = Session("hitlistRecordCount" & dbkey & formgroup)
		
		
		
		' This is the restore last hitlist case
		restoreType = "replace"
		username = getUserSettingsID(dbkey, formgroup)
		hitlistID = GetMarkedCSDOHitlistID(dbkey, formgroup, user_id)
		number_hits = getMarkedHitsCount()
		
		'LJB 4/12/2004 support toomanyhits enabled apps
		
		on error resume next
		if number_hits <> "" then
			number_hits = Clng(number_hits)
		else
			number_hits=0
		end if
	
		too_many_hits_value = Application("TooManyHitsMaximumRetrievable")
		test_too_many =  number_hits > Application("TooManyHitsMaximumRetrievable")
		Session("TooManyHitsToDisplay" & dbkey & formgroup) = test_too_many
		
		'remember the current hitlistID so we can restore back to it
		'This covers the undo-undo-refine case
		rememberLastHitlist dbkey, formgroup
		

		
		'if we are restoring a saved list we may need to copy it to the CSDO table first.
		'GetCSDOHitlistIDFromUserHitlistID ensures that the requied list is in the csdo table
		hitlistID = GetCSDOHitlistIDFromUserHitlistID(dbkey, formgroup, hitlistID)
		Session("BaseRShitlistID" & dbkey & formgroup) = hitlistID
		Session("hitlistrecordcount" & dbkey & formgroup)= number_hits		
			
		Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)
		' Make sure to reload the BaseRS from the hitlist table
		Session("reload_basers" & dbkey & formgroup)=true
		' Return as if a search had occurred
		Session("error" & dbkey & formgroup) = false
		
		ReturnData dbkey, formgroup, "SEARCH", dbkey, request("return_data"), request("return_location"), request("return_fields")
		Session("MarkedHitsShown" & dbkey & formgroup) = "false"
	Case "show_marked_old"
		'SetSessionVars dbkey, formgroup, "search"
		if Application("DISABLE_CORE_RS_LOOPING") = 1 then
			Session("LIST_RS") = ""
			Session("DETAIL_RS") = ""
		end if
		Session("fEmptyRecordset" & dbkey & formgroup) = False
		if formgroupflag = "GLOBAL_SEARCH" then
			DBSearchNames = Session("SearchData" & "SearchDBNames")
		else
			DBSearchNames = dbkey
		end if
		
		'determin if there is a hitlist to return to
		if Not Session("hitlistRecordCount" & dbkey & formgroup)="" then
			if Session("hitlistRecordCount" & dbkey & formgroup) > 0 then
				'store the hitlist to return to is showlastlist is clicked
				Session("LasthitlistID" & dbkey & formgroup)=Session("hitListID" & dbkey & formgroup)
			else
				Session("LasthitlistID" & dbkey & formgroup)=""
			end if
		else
			Session("LasthitlistID" & dbkey & formgroup)=""
		end if
		
		'check to see what the currenthitlist so you don't overwrite it
		on error resume next
		if Session("hitListID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup) then
			Session("hitListID" & dbkey & formgroup)=Session("RefinehitListID" & dbkey & formgroup)
		else
			Session("hitListID" & dbkey & formgroup)=Session("BaseRShitlistID" & dbkey & formgroup)
		end if
			
		'always remove the refine flag so that the undo refine button goes away - once you show the
		'last list you loose all that information.
		Session("Refine" & dbkey & formgroup)=""
		'store the base_rs so you can return to it
		Session("LastBase_RS" & dbkey & formgroup) = Session("Base_RS" & dbkey & formgroup)
		'store the last hitlistcount so you can return to it.
		Session("LasthitlistRecordCount" & dbkey & formgroup) = Session("hitlistRecordCount" & dbkey & formgroup)
		
		'set the search domain to nothing so a new hit list is generated
		Session("SearchDomain" & dbkey & formgroup)=0
		'set the contensts field for the hitlist
		StoreSearchData dbkey, formgroup
		StoreChemSearchData dbkey, formgroup
		Session("LastSearchData" & "SearchDBNames")= Session("SearchData" & "SearchDBNames")
		Session("Lastshow_child_data_toggles"& dbkey & formgroup) =Session("show_child_data_toggles"& dbkey & formgroup)
		Session("Lastadd_childtable_criteria"& dbkey & formgroup)=Session("add_childtable_criteria"& dbkey & formgroup)
		Session("LastSearchData" & "Relational" & dbkey & formgroup) = Session("SearchData" & "Relational" & dbkey & formgroup)
		Session("SearchData" & "Relational" & dbkey & formgroup)=""
		Session("show_child_data_toggles"& dbkey & formgroup)=""
		Session("add_childtable_criteria"& dbkey & formgroup)=""
		Session("LastMoreMolids" & dbkey & formgroup) =Session("MoreMolids" & dbkey & formgroup)
		Session("LastLastID" & dbkey & formgroup) = Session("LastID" & dbkey & formgroup)
		if bDebugHitList = true then
			
			logaction(UCase(strDataAction) & " HitList to_be_used_for Results" & Session("hitListID" & dbkey & formgroup))
			logaction(UCase(strDataAction) & " HitList To Be Searched (Domain)" & Session("SearchDomain" & dbkey & formgroup))
		end if
		basetable = GetBaseTable(dbkey, formgroup, "basetable")
		baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
		Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
		'blank out all the search variables
		SetSessionVars dbkey, formgroup,"search"
		'get the marked hits list
		strWhere=DoIDSearch(dbkey, formgroup, "marked")
		'set the other recordset flags
		recsetflag = "marked"
		stype = "marked"
		'perform search
		Session("MarkedHitsShown" & dbkey & formgroup) = "true"
		GetResults dbkey, formgroup, stype, recsetflag, strWhere
		UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
		'return results
		ReturnResults dbkey, formgroup, strDataAction, DBSearchNames
		
	Case "show_last_list"
		if not Session("LasthitlistID" & dbkey & formgroup) <> "" then
			showmessagedialog("Sorry, there is no list available to restore.")
			ReturnInputForm dbkey, formgroup, "search"
		else
			SetSessionVars dbkey, formgroup, "undo_refine"
			RestoreLastSearchData dbkey, formgroup
			RestoreChemSearchData dbkey, formgroup
			Session("SearchData" & "FULL_SQL" & dbkey & formgroup)=Session("LastSearchData" & "FULL_SQL" & dbkey & formgroup)
			Session("show_child_data_toggles"& dbkey & formgroup) =Session("Lastshow_child_data_toggles"& dbkey & formgroup)
			Session("add_childtable_criteria"& dbkey & formgroup)=Session("Lastadd_childtable_criteria"& dbkey & formgroup)
			Session("SearchData" & "Relational" & dbkey & formgroup) = Session("LastSearchData" & "Relational" & dbkey & formgroup)
			Session("MoreMolids" & dbkey & formgroup) =Session("LastMoreMolids" & dbkey & formgroup)
			Session("LastID" & dbkey & formgroup) = Session("LastLastID" & dbkey & formgroup)
			Session("Base_RS" & dbkey & formgroup) = Session("LastBase_RS" & dbkey & formgroup)
			Session("hitlistRecordCount" & dbkey & formgroup) = Session("LasthitlistRecordCount" & dbkey & formgroup)
			Session("hitlistID" & dbkey & formgroup)=Session("LasthitlistID" & dbkey & formgroup)
			if bDebugHitList = true then
				
				logaction(UCase(strDataAction) & " HitList to_be_used_for Results" & Session("hitListID" & dbkey & formgroup))
				logaction(UCase(strDataAction) & " HitList To Be Searched (Domain)" & Session("SearchDomain" & dbkey & formgroup))
			end if	
			ReturnResults dbkey, formgroup, strDataAction, DBSearchNames
		end if
		Session("MarkedHitsShown" & dbkey & formgroup) = "false"
		UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
	Case "refine" 'Code for Refine button
	
		Dim dbreturn
		Dim dbkeyset
		
		SetupForRefine()
		ReturnInputForm dbreturn, formgroup, "refine"	
		
	Case "undo_refine"'Code for Undo Refine button
		
		Session("SearchData" & "SearchDBNames")= Session("LastSearchData" & "SearchDBNames")
		if formgroupflag = "GLOBAL_SEARCH" then
			DBSearchNames = Session("SearchData" & "SearchDBNames")
		else
			DBSearchNames = dbkey
		end if
		DBSearchNamesArray = split(DBSearchNames, ",", -1)
		thedbkey = 0
		Session("count") = UBound(DBSearchNamesArray)
		dbkeyset  = false
		For thedbkey = 0 to CLng(Session("count"))
			dbkey = DBSearchNamesArray(thedbkey)
			SetSessionVars dbkey, formgroup, "undo_refine"
			if thedbkey = 0 then 
				dbreturn = dbkey
			end if
			'repopulate variables which prior search data if any- this presents a problem if a refine was done 
			'on a refine.
			RestoreLastSearchData dbkey, formgroup
			RestoreChemSearchData dbkey, formgroup
			'Session("BaseRShitlistID" & dbkey & formgroup) = Session("LastBaseRShitlistID" & dbkey & formgroup)
			'The undo can come from multiple refines so you have to return to the proper hit list. The refine variable
			'is being treated as a toggle -when poplated it returns the basershitlist when empty it returns to the refinehitlist. 
			'This action would never be called unless a refine had been done.
			Session("hitlistID" & dbkey & formgroup) = Session("LasthitlistID" & dbkey & formgroup)
			Session("hitlistRecordCount" & dbkey & formgroup) = Session("LasthitlistRecordCount" & dbkey & formgroup) 
			Session("Base_RS" & dbkey & formgroup) = Session("LastBase_RS" & dbkey & formgroup) 
			'remember the current hitlistID so we can restore back to it
			
			'LJB 1/25/04 move remember hitlist after resetting last hitlistrecordcount otherwise it is wiped out.
			'also it needs to be inside the loop for global search apps
			'This covers the undo-undo-refine case
			rememberLastHitlist dbkey, formgroup
			'turn refine flag off so that undo refine button no longer appears
			Session("Refine" & dbkey & formgroup) = ""
			'blank out historic variables which probably don't even need to be here
			Session("FilterReturnedWhere" & dbkey & formgroup) = ""
			'restore sql session variable - possibly not needed.
			Session("SearchData" & "FULL_SQL" & dbkey & formgroup)=Session("LastSearchData" & "FULL_SQL" & dbkey & formgroup)
			Session("MoreMolids" & dbkey & formgroup) =Session("LastMoreMolids" & dbkey & formgroup)
			Session("LastID" & dbkey & formgroup) = Session("LastLastID" & dbkey & formgroup)
			if bDebugHitList = true then
				
				logaction(UCase(strDataAction) & " HitList to_be_used_for Results" & Session("hitListID" & dbkey & formgroup))
				logaction(UCase(strDataAction) & " HitList To Be Searched (Domain)" & Session("SearchDomain" & dbkey & formgroup))
			end if	
			if Session("hitlistrecordcount" & dbkey & formgroup) > 0 and dbkeyset = false then 
				dbreturn = dbkey
				dbkeyset  = true
			end if
		next
		UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
		dbkey = dbreturn
		'restore results
		ReturnResults  dbkey, formgroup, strDataAction, DBSearchNames
		
	Case "apply" 'code called by Apply button from refine query screen
		
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Searching...")
		end if
		refinetype = Request("RefineType")
		tempDBSearchNames = ""
		DBSearchNames = ""
		if formgroupflag = "GLOBAL_SEARCH" then
			tempDBSearchNames = Request.form("DBSearchNames")	
			tempDBSearchNames = replace(tempDBSearchNames, "undefined,", "")  'temp fix:need to figure out why sometimes undefined appears
			tempDBSearchNames = replace(tempDBSearchNames, "undefined", "")'temp fix:need to figure out why sometimes undefined appears
		else
			tempDBSearchNames = dbkey
		end if
		DBSearchNames=tempDBSearchNames
		Session("SearchData" & "SearchDBNames")= DBSearchNames
		DBSearchNamesArray = split(DBSearchNames, ",", -1)
		thedbkey = 0
		dbkeyset = false
		Session("count") = UBound(DBSearchNamesArray)
		For thedbkey = 0 to CLng(Session("count"))
			dbkey = DBSearchNamesArray(thedbkey)
			if thedbkey = 0 then 
				dbreturn = dbkey
			end if
			'DGB CSBR-66700 clear full sql string variable in between dbkeys
			Session("SearchData" & "RelPortion" & dbkey & formgroup)=""
			
			SetSessionVars dbkey, formgroup, "apply"
			SetGetDataMethod dbkey, formgroup,Request("metadata_directive")
			strategy = Session("SearchData" & "SearchStrategy" & dbkey & formgroup)
			Select Case refinetype
				Case "full_refine" 'not used any more, but left for historic reasons
					laststrategy = Session("LastSearchData" & "SearchStrategy" & dbkey & formgroup)
					strWhere = DoRelSearch(dbkey, formgroup, strategy,refinetype)
					recsetflag = "rel"
					stype = "rel"
				Case "partial_refine"
				    
			 		strWhere=DoRelSearch(dbkey, formgroup, strategy, refinetype)
			 		recsetflag = "rel"
			 		stype = "rel"
				Case "edit_query"	'Code for EditQuery button
					SetSessionVars dbkey, formgroup,"edit_query"
					CleanUpRecordsets dbkey
					ReturnInputForm dbkey, formgroup, "edit_query"
			End Select
			
			'get the strWhere portion of the sql statmenet based on the input from the apply/refine form	
			strwhere = CSDOCreateCombinedSqlSelectString(strwhere, dbkey, formgroup) 	
			
			basetable = GetBaseTable(dbkey, formgroup, "basetable")
			baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
			strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
			
			'TSM 5/21/2008: Horrible hack to get around CSBR-96385, hopefully without affecting other COE apps
			if lcase(basetable) = lcase("inv_containers_subsearch_alias") then
				basetable = GetTableVal(dbkey, basetable, kTableRealName)
			end if
			
			on error resume next
			'store information about the current hitlist for possible use of undo refine button
			Session("LasthitlistID" & dbkey & formgroup)=Session("hitListID" & dbkey & formgroup)
			Session("LasthitlistRecordCount" & dbkey & formgroup) = Session("hitlistRecordCount" & dbkey & formgroup)
			Session("LastBase_RS" & dbkey & formgroup)= Session("Base_RS" & dbkey & formgroup)
			'toggle so that undo refine button will appear
			Session("Refine" & dbkey & formgroup)="refine"
			
			'set contents field for csdo translation purposes
			Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
			'get the appropriate translate sql
			Session("TranslateTable" & dbkey & formgroup) = getMolIDTranslateSqlString(dbkey, formgroup,Session("hitlistID" & dbkey & formgroup))
			

			'check to see what the currenthitlist so you don't overwrite it
			'set the search domain to the current hitlist
			'!DGB! 02/03 hitlistmangement
			Session("SearchDomain" & dbkey & formgroup) = Session("hitListID" & dbkey & formgroup)
			if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
				if Session("hitListID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup) then
					Session("hitListID" & dbkey & formgroup)=Session("RefinehitListID" & dbkey & formgroup)
				else
					Session("hitListID" & dbkey & formgroup)=Session("BaseRShitlistID" & dbkey & formgroup)
				end if
			Else 
				Session("hitListID" & dbkey & formgroup)=0
			End if
			if bDebugHitList = true then
				
				logaction(UCase(strDataAction) & " HitList to_be_used_for Results" & Session("hitListID" & dbkey & formgroup))
				logaction(UCase(strDataAction) & " HitList To Be Searched (Domain)" & Session("SearchDomain" & dbkey & formgroup))
			end if				
			'log the history of this search so it can be recalled
			if CBool(Application("ALLOW_QUERY_MANAGEMENT")) = True then 'this is for databrowser support only at this time
				theReturnVal = doStoreQuery(dbkey, formgroup, "HISTORY", Session.SessionID, Session("UserName" & dbkey), "" ,"0")
				
			end if
			'run query
			
			GetResults dbkey, formgroup, stype, recsetflag, strWhere
			UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
			if Session("hitlistrecordcount" & dbkey & formgroup) > 0 and dbkeyset = false then 
				dbreturn = dbkey
				dbkeyset  = true
			end if
		next
		dbkey = dbreturn
		'check whether request requires that the hitlist be  reloaded
		Session("reload_basers" & dbkey & formgroup)=request("reload_basers")
		'check to see whetehr request requires entire request stored
		StoreRequestObj dbkey, formgroup,request("store_request")
		'return data to result form
		ReturnData dbreturn, formgroup, strDataAction, DBSearchNames, request("return_data"), request("return_location"), request("return_fields")


	Case "add_record"
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Adding Record...")
		end if
		SetSessionVars dbkey, formgroup, "add_record"
		GetSearchData dbkey, formgroup
		AddOrder = Request("Add_Order")
		table_names=Session("strWhereSubforms" & dbkey & formgroup)
		field_names=Session("SearchData" & "Relational" & dbkey & formgroup)
		showErrors = False
		showErrors = DoAddRecordMaster(dbkey, formgroup, table_names, field_names, AddOrder) 'this calls doAddRecord as before.
		
		'!DGB! 09/18/01 allow no_gui XML response
		If LCase(Request("no_gui")) = "true" then
			'!DGB! 09/24/01 replaced isOk with showErrors
			if showErrors then
				Response.Clear
				Response.ContentType = "text/xml"
				'!DGB! changed an o to a zero
				if Len(Session("duplicates_found" & dbkey & formgroup)) > 0 then
					Response.Write "<DUPLICATESTRUCTURE molid=""" & Session("duplicates_found" & dbkey & formgroup) & """></DUPLICATESTRUCTURE>"
				Else
					Response.Write "<ERROR>search_funcs_vbs.asp:DoAddRecord:Unknown Error</ERROR>"
				End if
			Else
				Response.Clear
				Response.ContentType = "text/xml"
				'!DGB! change the name of session variable
				Response.Write "<NEWSTRUCTURE key=""" & Session("Add_Record_New_ID" & dbkey & formgroup)& """></NEWSTRUCTURE>"
			End if 
		Else
			if showErrors = True then
				theReturn =Session("errors_found" & dbkey & formgroup)
			else
				theReturn ="Record added"
			end if
			if inStr(theReturn, "error")> 0 then
				showmessagedialog(theReturn)
			else
				if CBool(Application("ALWAYS_DISPLAY_ALERTS")) = TRUE then
					showmessagedialog(theReturn)
				else
					FlushMessageToClient("<br>" & theReturn)
				end if
			end if
			ReturnEditResults dbkey, formgroup, strDataAction, dbkey 
		End if
		
		Case "delete_record"
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Deleting Record...")
		end if
		'SetSessionVars dbkey, formgroup, "add_record"
		showErrors = False
		delete_order = Request("table_delete_order")
		table_names = Request("ROW_ID_TABLE_NAMES")
		showErrors = DoDeleteRecordMaster(dbkey, formgroup, table_names, delete_order) 'this calls doDeleteRecord as before
		If LCase(Request("no_gui")) = "true" then
			if showErrors then
				Response.Clear
				Response.ContentType = "text/xml"
				Response.Write "<ERROR>search_funcs_vbs.asp:DoAddRecord:" & Session("errors_found" & dbkey & formgroup) &"</ERROR>"
			Else
				Response.Clear
				Response.ContentType = "text/xml"
				Response.Write "<RECORDDELETED></RECORDDELETED>"
			End if		
		Else
			if showErrors = True then
				theReturn =Session("errors_found" & dbkey & formgroup)
			else
				theReturn ="Record deleted"
			end if
			if inStr(UCase(theReturn), "ERROR")> 0 or inStr(UCase(theReturn), "FAIL")> 0 then
				showmessagedialog(theReturn)
			else
				if CBool(Application("ALWAYS_DISPLAY_ALERTS"))=TRUE then
					showmessagedialog(theReturn)
				else
					FlushMessageToClient("<br>" & theReturn)
				end if
			end if
			ReturnEditResults dbkey, formgroup, strDataAction, dbkey 
		End if
	
	Case "update_record"
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Updating Record...")
		end if
		RelFields = Request("RelationalSearchFields")
		StrucFields= Request("ExactSearchFields")
		table_names = Request("ROW_ID_TABLE_NAMES")
		showErrors = DoUpdateRecordMaster(dbkey, formgroup, RelFields, StrucFields, table_names) 'calls code in search_func_vbs.asp that used to be here. Allows using function in full 
		
		If LCase(Request("no_gui")) = "true" then
			if showErrors then
				Response.Clear
				Response.ContentType = "text/xml"
				Response.Write "<ERROR>search_funcs_vbs.asp:DoAddRecord:" & Session("errors_found" & dbkey & formgroup) &"</ERROR>"
			Else
				Response.Clear
				Response.ContentType = "text/xml"
				Response.Write "<RECORDUPDATED></RECORDUPDATED>"
			End if		
		Else
			if Not Session("errors_found" & dbkey & formgroup) <> "" then
				showErrors = False
			end if
			if showErrors = True then
				theReturn=Session("errors_found" & dbkey & formgroup)
			else
				theReturn="Record updated"
			end if
			if inStr(theReturn, "error")> 0 then
				showmessagedialog(theReturn)
			else
				if CBool(Application("ALWAYS_DISPLAY_ALERTS")) = TRUE then
					showmessagedialog(theReturn)
				else
					FlushMessageToClient("<br>" & theReturn)
				end if
			end if
			ReturnEditResults dbkey, formgroup, strDataAction, dbkey 
		end if
		
	
	
	
	Case "commit_reg_edit"
		CommitEditToTemp dbkey, formgroup
		redirectpath= Session("ReturnLocation" & dbkey & formgroup)
		'Response.redirect redirectpath 
		DoRedirect dbkey, redirectpath
	
	Case "get_registry_number"
		getRegistryNumber dbkey, formgroup
		redirectpath=Session("ReturnLocation" & dbkey & formgroup)
		DoRedirect dbkey, redirectpath
	'called by getnext button for query returning more then max hits results
	Case "get_next" 
		If CBool(Application("USE_ANIMATED_GIF"))=true then
			FlushImageToClient(Application("ANIMATED_GIF_PATH"))
		else
			FlushMessageToClient("Searching...")
		end if
		if formgroupflag = "GLOBAL_SEARCH" then
			DBSearchNames = Session("SearchData" & "SearchDBNames")
		else
			DBSearchNames = dbkey
		end if
		SetSessionVars dbkey, formgroup, "get_next"
		strategy = Session("SearchData" & "SearchStrategy" & dbkey & formgroup)
		
		Select Case strategy
		
			Case "retrieve_all"
				stype = "get_next"
				recsetflag = "get_next_rel"
				
				strWhere = DoRetrieveAllSearch(dbkey, formgroup)
			Case else
				stype = "get_next"
				recsetflag = "get_next_rel"
				
				strWhere = DoRelSearch(dbkey, formgroup, strategy, stype)	
		End Select
		
		
		strwhere = CSDOCreateCombinedSqlSelectString(strwhere, dbkey, formgroup) 	
		
		if UseCartridge(dbkey, formgroup) then
			basetable = GetBaseTable(dbkey, formgroup, "basetable")
			baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
		    'clear this so that the undo refine button will not be shown in case it had been previously set, but not cleared.
		    Session("Refine" & dbkey & formgroup)=""
		    'Indicate that this search is over the entire database
			Session("SearchDomain" & dbkey & formgroup) = 0
			'!DGB! 02/03 hitlistmangement
			if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
				Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
			else
				rememberLastHitlist dbkey, formgroup
				Session("hitlistID" & dbkey & formgroup) = 0 
			End if
			Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
		end if
		if bDebugHitList = true then
				
				logaction(UCase(strDataAction) & " HitList to_be_used_for Results" & Session("hitListID" & dbkey & formgroup))
				logaction(UCase(strDataAction) & " HitList To Be Searched (Domain)" & Session("SearchDomain" & dbkey & formgroup))
		end if	
		GetResults dbkey, formgroup, stype, recsetflag, strWhere
		UpdateArray dbkey, formgroup, Session("GetNextCount" & dbkey & formgroup)
		ReturnResults dbkey, formgroup, strDataAction, DBSearchNames
		
	'called for restoring structures for edit_query and restore_last via plugin data url
	Case "get_encoded_string"

		fullfieldname = Request.QueryString("fullfieldname")
		filename ="recall" & Hour(Now) & Minute(Now) & Second(Now) & ".cdx"
		myPath = Application("TempFileDirectory" & dbkey & formgroup) & "Sessiondir\" & Session.sessionid & "\" & filename
		decodesuccess = Application("myDecoder").Decode(Session("baseString" & fullfieldname & dbkey & formgroup), myPath)
		myPathHTTP = Application("TempFileDirectoryHTTP" & dbkey)& "Sessiondir/" & Session.sessionid & "/" & filename
		Session("baseString" & fullfieldname & dbkey & formgroup) = ""
		'response.redirect myPathHTTP
		ServeBinaryFile myPathHTTP,"chemical/x-cdx"
	
	'DGB a new action to enumerate valid ChemDraw Mime Types
	Case "get_mimetypes"
		Set oCDAX = GetCDAX()
		Response.Clear
		
		Response.Write "<ul>"
		For each dataType in oCDAX.ExportDataTypes
			Response.Write "<li>" & dataType.mime & "&nbsp;&nbsp;(" & dataType.extension & ")</li>" 
		Next
		Response.Write "</ul>"	
		Set oCDAX = Nothing
		Response.End
	'DGB This is an leaner version of getStructure that we may use in the future
	Case "get_structure2"
		struc_id = Trim(Request.QueryString("StrucID"))
		tablename = Trim(Request.QueryString("Table"))
		fieldname = Trim(Request.QueryString("Field"))
		displaytype = Trim(Request.QueryString("DisplayType"))
		width = Trim(Request.QueryString("width"))
		height = Trim(Request.QueryString("height"))
		
		if instr(struc_id, ",")> 0 then
			struc_id_array =Split(struc_id, ",", -1)
			struc_id = struc_id_array(0)
		end if
		
		' Fetch the structure as base64CDX
		'if Session("base64cdx") <> "" then
		'	b64str = Session("base64cdx")
		'Else
			b64str = GetBase64CDX(dbkey, formgroup, tablename, fieldname, struc_id, existingConnection)		
		'End if
		
		'Map old cases to valid mimeTypes
		Select Case UCase(displaytype)
			Case "SIZEDGIF","GIF"
				displaytype = "gif"
			Case "CDXOBJ", "BASE64CDX"
				displaytype = "cdx"
			Case "RAWBASE64CDX"
				'No need to convert
				Response.Clear
				Response.Write b64str
				Response.end	
		End Select
		
		' Convert base64cdx and serve as requested mimeType
		ConvertAndServeBase64 b64str, displaytype, width, height
		
		
	'called by plugin dataurl to get a cdx file
	Case "get_structure"

		struc_id = Trim(Request.QueryString("StrucID"))
		tablename = Trim(Request.QueryString("Table"))
		fieldname = Trim(Request.QueryString("Field"))
		displaytype = Trim(Request.QueryString("DisplayType"))
		if instr(struc_id, ",")> 0 then
			struc_id_array =Split(struc_id, ",", -1)
			'count = UBound(struc_id_array)
			'struc_id = struc_id_array(count)
			struc_id = struc_id_array(0)
		end if
			Set checkFile = Server.CreateObject("Scripting.FileSystemObject")
			Select Case UCase(displaytype)
				'///////////////////////////////////////////////////////////////////
				'!DGB! combined GIF and GIFRESIZE
				
				Case "SIZEDGIF","GIF"
					
					if UCase(displaytype)= "GIF" then
						gifWidth = ""
						gifHeight = ""
					else
						gifWidth = Trim(Request.QueryString("width"))
						gifHeight = Trim(Request.QueryString("height"))
						if gifHeight = "" then 
							gifHeight = 200 
						End if
						if gifWidth = "" then 
							gifWidth = 200 
						End if
					end if	
			
					
						myDir = Application("TempFileDirectory" & dbkey)  & tablename & fieldname  & "_" & struc_id & "." & "cdx"				
						'!DGB! 7/14/01 implements cdx_caching flag set up in ini
						if Lcase(Application("CDX_CACHING")) = "true" then
							If NOT checkFile.FileExists(myDir) then
								existingConnection = ""
								CSDOGetChemData dbkey, formgroup, tablename, fieldname, struc_id, "cdx" ,existingConnection
							End If
						Else
							existingConnection = ""
							CSDOGetChemData dbkey, formgroup, tablename, fieldname, struc_id, "cdx" ,existingConnection
						End if
						'Use new function which converts and serves w/o saving a gif file
						ConvertAndServeCDXtoGIF dbkey, tablename, fieldname, struc_id, gifWidth, gifHeight		
					
				'/////////////////////////////////////////////////////////////////////
				Case "CDXOBJ", "BASE64CDX"
				
					myDir = Application("TempFileDirectory" & dbkey)  & tablename & fieldname   & "_" & struc_id & "." & "cdx"
					'!DGB! 7/14/01 Do we need to do anything here with cdx_caching??
					If NOT checkFile.FileExists(myDir) then
						redirectpathHTTP = Application("TempFileDirectoryHTTP" & dbkey) & "nostructure.cdx"
						'response.redirect redirectpathHTTP
						ServeBinaryFile redirectpathHTTP,"chemical/x-cdx"
					Else
						redirectpathHTTP = Application("TempFileDirectoryHTTP" & dbkey) & tablename & fieldname & "_" & struc_id & "."  & "cdx"
						'response.redirect redirectpathHTTP
						ServeBinaryFile redirectpathHTTP,"chemical/x-cdx"
					End if
				Case "RAWBASE64CDX"
				
					if Lcase(Application("CDX_CACHING")) = "true" then
						If NOT checkFile.FileExists(myDir) then
							existingConnection = ""
							CSDOGetChemData dbkey, formgroup, tablename, fieldname, struc_id, "cdx" ,existingConnection
						End If
					Else
							existingConnection = ""	
							CSDOGetChemData dbkey, formgroup, tablename, fieldname, struc_id, "cdx" ,existingConnection
					End if
					cdxpath = Application("TempFileDirectory" & dbkey) & tablename & fieldname & "_" &  struc_id & "." & "cdx"
					if not isObject(Application("myDecoder")) then
                        set d = Server.CreateObject("Base64Decode.Decode")
                    else
                        set d = Application("myDecoder")
                    end if
                    rawBase64cdx = d.Encode(cdxpath)
                    set d = nothing
                    response.write rawBase64cdx
				Case Else
				
					if not displaytype <> "" then displaytype = "cdx"
					'!DGB! 7/31/02  changed ".cdx" to displayType so we check for the right file type in the cache
					myDir = Application("TempFileDirectory" & dbkey)  & tablename & fieldname  & "_" & struc_id & "." & displaytype
						
						'!DGB! 7/14/01 implements cdx_caching flag set up in ini
							if Lcase(Application("CDX_CACHING")) = "true" then
								If NOT checkFile.FileExists(myDir) then
									existingConnection = ""
									CSDOGetChemData dbkey, formgroup, tablename, fieldname, struc_id, displaytype ,existingConnection
								End If
							Else
								existingConnection = ""
								
								CSDOGetChemData dbkey, formgroup, tablename, fieldname, struc_id, displaytype ,existingConnection
							End if
						
					redirectpathHTTP = Application("TempFileDirectoryHTTP" & dbkey) & tablename & fieldname & "_" &  struc_id & "." & displaytype
					ServeBinaryFile redirectpathHTTP, GetChemicalMimeTypeFromExt(displayType)
				End Select
	
			Set checkFile = Nothing
	
	'Code for Log Off button		
	Case "log_off"
	'CleanUpRecordsets dbkey
   	redirectpath = Application("AppPathHTTP") & "/logoff.asp"
	DoRedirect dbkey, redirectpath
	

		
End Select




'<!----------------------------- Error Handler --------------------------------->

'If Err Then HandleError dbkey, formgroup, "", "", err.number, err.description
%>
