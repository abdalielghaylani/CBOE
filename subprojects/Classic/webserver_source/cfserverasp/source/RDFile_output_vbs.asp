<%' Copyright 1998-2002, CambridgeSoft Corp., All Rights Reserved
'DO NOT EDIT THIS FILE

'-------------------------------------------------------------------------------
' Purpose: 'RD File export
' Assumes:
' Inputs:
'-------------------------------------------------------------------------------
customized = false 'This is a variable set for Roche

Function ExportRDFile(ByVal dbkey, ByVal formgroup, ByVal fieldstoexport_input, ByVal ExportType, ByVal MaxExportNumber, ByVal bStrucDataOut)
	'stop
	hitlistid = Session("HitListID" & dbkey & formgroup)
	test = Application("ALLOW_SORT_ALL_FIELDS")
	test2= Session("order_by" & dbkey & formgroup)
	fieldstoexport=TrimItemsInString(dbkey, formgroup, fieldstoexport_input)
	subFormsString = getTablesString(dbkey, formgroup, fieldstoexport)
	orig_fieldstoexport = fieldstoexport
	'LJB 5/1/2002 clear variable that is used to add fields from the order by clause to the select statement. They are necessary for the select
	'but should not be output to the rdf file
	Session("FieldsToHideFromDisplay")=""
	Session("FieldsToHideFromDisplayNested")=""
	basetable = GetBaseTable(dbkey, formgroup, "basetable")
	SQLSyntax = GetTableVal(dbkey, basetable,kSQLSyntax)
	formmode = request("formmode")
	'LJB 5/1/2002 Get list of field from sort statements that need to be added to the base table select clause
	if Session("allOuterSorts") <> "" then
		'Session("order_by" & dbkey & formgroup)=""
		basetableSort = GetLastWidgetBaseTableSort(basetable)
		'make sure the sort by field is in the field list
		
		fieldsToAddTemp= AddFieldToSelectList(basetableSort,fieldstoexport)
		if fieldsToAddTemp <> "" then
			if fieldstoexport <> "" then
				fieldstoexport  = fieldstoexport & ","&  fieldsToAddTemp
			else
				fieldstoexport  =fieldsToAddTemp
			end if
		end if
		order_by =" ORDER BY " & basetableSort
	else
		if Session("order_by" & dbkey & formgroup) <> "" then
			order_by_temp=" ORDER BY " & Session("order_by" & dbkey & formgroup)
			if Session("sort_direction" & dbkey & formgroup) <> "" then
				sort_direction = Session("sort_direction" & dbkey & formgroup)
			end if
			order_by =order_by_temp & " " & sort_direction
		end if 
	end if
	
	Select case UCase(ExportType)
		Case "VIEW"
			Session("error" & dbkey & formgroup)= False
			true_basetable = GetBaseTable(dbkey, formgroup, "basetable")
			basetable = true_basetable
			true_baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
			ViewInfo = GetFormGroupVal(dbkey, formgroup,kSDFileFields)
			ViewInfoArray = Split(ViewInfo,";", -1)
			ViewInfoArray2 = Split(ViewInfoArray(0), ":", -1)
			view_basetable = ViewInfoArray2(1)
			view_baseid =  true_baseid
			StrucUniqueID = "MOL_ID"
			if maxexportNumber <> "" then
				maxhits = maxexportNumber
			else
				maxhits = ""
			end if
			set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
			if Not StrucUniqueID = "NULL" then
				fieldstoexport_final = checkForMolid(dbkey, formgroup, fieldstoexport,basetable & "." & "mol_id")
			else
				fieldstoexport_final =fieldstoexport
			end if
			strGetFields = replace(fieldstoexport_final, view_basetable, UCase(true_basetable))
			dim hitlistid
			
			param_sql = BuildSelectStatement(dbkey, formgroup, true_basetable, "",strGetFields,maxhits)
		
			param_sql=replace(param_sql, UCase(true_basetable), view_basetable)
		
			'creates sql where hitlistid is the parameter
			if MaxHits <> "" then
				param_sql=AddLookups(dbkey,formgroup,param_sql, StrucUniqueID,"NESTED")
				param_sql = AddParamCSDOHitListToSelect_WithMAX(dbkey, formgroup, param_sql,"?","?" )
				param_sql = replace(param_sql, ",,", ",") & order_by

				If CBool(Application("ALLOW_SORT_ALL_FIELDS"))= true and Session("order_by" & dbkey & formgroup) <> "" then
					param_sql= removeDistinct(dbkey, formgroup, param_sql)
				end if
				param_sql=RemoveLookupKeywords(param_sql)
				Set BaseTablecmd = Server.CreateObject("ADODB.Command")
				BaseTablecmd.CommandText = param_sql
				BaseTablecmd.CommandType = adCmdText
				
				
				BaseTablecmd.parameters.append BaseTablecmd.CreateParameter("hitlistid", 5, 1,0,Session("HitListID" & dbkey & formgroup))
				BaseTablecmd.ActiveConnection = DataConn 
				
			else
		
				param_sql=AddLookups(dbkey,formgroup,param_sql,StrucUniqueID,"NESTED")
				param_sql = AddParamCSDOHitListToSelect(dbkey, formgroup, param_sql,"?")
				param_sql = replace(param_sql, ",,", ",") & order_by

				If CBool(Application("ALLOW_SORT_ALL_FIELDS"))= true and Session("order_by" & dbkey & formgroup) <> "" then
					param_sql= removeDistinct(dbkey, formgroup, param_sql)
				end if
				param_sql=RemoveLookupKeywords(param_sql)
				Set BaseTablecmd = Server.CreateObject("ADODB.Command")
				BaseTablecmd.parameters.append BaseTablecmd.CreateParameter("hitlistid", 5, 1,0,Session("HitListID" & dbkey & formgroup))
				
				BaseTablecmd.CommandText = param_sql
				BaseTablecmd.CommandType = adCmdText
				BaseTablecmd.ActiveConnection = DataConn 
				
			end if
		
		Case Else 'Tables
			'stop
			Session("error" & dbkey & formgroup)= False
			
			if UCase(formgroup) = "REG_CTRBT_COMMIT_FORM_GROUP" or UCase(formgroup)="REVIEW_REGISTER_FORM_GROUP" then
				hitlistID= Session("HitListID" & dbkey & formgroup)
				formgroup =  "REG_CTRBT_FORM_GROUP"
				Session("HitListID" & dbkey & formgroup) = hitlistID
			end if
			basetable = GetBaseTable(dbkey, formgroup, "basetable")
			
			baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
			
			StrucUniqueID = GetTableVal(dbkey, basetable,kStrucFieldID)
			
			
			if maxexportNumber <> "" then
				maxhits = maxexportNumber
			else
				maxhits = ""
			end if
			set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
			tempFields = getTableExportFields(basetable, fieldstoexport)
			
			if Not StrucUniqueID = "NULL" then
				fieldstoexport_final = checkForMolid(dbkey, formgroup, tempFields,basetable & "." & StrucUniqueID )
			else
			fieldstoexport_final =tempFields
			end if
		
			if not Instr(UCase(fieldstoexport_final), UCase(basetable) & "." & UCase(baseid) )> 0  AND not Instr(UCase(fieldstoexport_final), "[" & UCase(basetable) & "].[" & UCase(baseid)  & "]")> 0  then
				strGetFields = basetable & "." & baseid & "," & fieldstoexport_final
			else
				strGetFields = fieldstoexport_final
			end if
			'LJB don't send subforms when creating select statment when XML Widget sorting is being used
			If CBool(Application("ALLOW_SORT_ALL_FIELDS"))= true and Session("order_by" & dbkey & formgroup) <> "" then
				param_sql = BuildSelectStatement(dbkey, formgroup, basetable, Session("strWhereSubforms" & dbkey & formgroup),strGetFields,"")
			else
				param_sql = BuildSelectStatement(dbkey, formgroup, basetable,"",strGetFields,"")
			end if
			param_sql = FinalizeSQl(dbkey, formgroup, param_sql, basetable)
			
			
			'creates sql where hitlistid is the parameter
			if MaxHits <> "" then
				basetable = getBaseTable(dbkey, formgroup, "basetable")
				SQLSyntax = getTableVal(dbkey, basetable, kSQLSyntax)
				param_sql=AddLookups(dbkey,formgroup,param_sql,StrucUniqueID,"NESTED")
				if UCase(SQLSyntax) = "ORACLE" then
					param_sql = AddParamCSDOHitListToSelect_WithMAX(dbkey, formgroup, param_sql,"?","?" )
				else
					param_sql = AddParamCSDOHitListToSelect_WithMAX(dbkey, formgroup, param_sql,"?",maxhits )
				end if
				param_sql = replace(param_sql, ",,", ",") & order_by

				If CBool(Application("ALLOW_SORT_ALL_FIELDS"))= true and Session("order_by" & dbkey & formgroup) <> "" then
					param_sql= removeDistinct(dbkey, formgroup, param_sql)
				end if
				param_sql=RemoveLookupKeywords(param_sql)
				Set BaseTablecmd = Server.CreateObject("ADODB.Command")
				BaseTablecmd.CommandText = param_sql
				BaseTablecmd.CommandType = adCmdText
				
				if UCase(SQLSyntax) = "ORACLE" then
					BaseTablecmd.parameters.append BaseTablecmd.CreateParameter("hitlistid", 5, 1,0,Session("HitListID" & dbkey & formgroup))
					BaseTablecmd.parameters.append BaseTablecmd.CreateParameter("max", 5, 1,0,MaxHits)
				else
					BaseTablecmd.parameters.append BaseTablecmd.CreateParameter("hitlistid", 5, 1,0,Session("HitListID" & dbkey & formgroup))
				end if

				BaseTablecmd.ActiveConnection = DataConn 
				
			else
				
				param_sql=AddLookups(dbkey,formgroup,param_sql,StrucUniqueID,"NESTED")
				param_sql = AddParamCSDOHitListToSelect(dbkey, formgroup, param_sql,"?")
				param_sql = replace(param_sql, ",,", ",") & order_by
				If CBool(Application("ALLOW_SORT_ALL_FIELDS"))= true and Session("order_by" & dbkey & formgroup) <> "" then
					param_sql= removeDistinct(dbkey, formgroup, param_sql)
				end if
				param_sql=RemoveLookupKeywords(param_sql)
				Set BaseTablecmd = Server.CreateObject("ADODB.Command")
				BaseTablecmd.parameters.append BaseTablecmd.CreateParameter("hitlistid", 5, 1,0,Session("HitListID" & dbkey & formgroup))
				BaseTablecmd.CommandText = param_sql
				BaseTablecmd.CommandType = adCmdText
				BaseTablecmd.ActiveConnection = DataConn 
				
			end if
	End Select
	on error resume next
	Set RS = Server.CreateObject("ADODB.RECORDSET")
	RS.CursorType = 3
	RS.Open BaseTableCmd
	Trace "DoRDFExport HITLISTID:" & Session("HitListID" & dbkey & formgroup) & ":SQL= " & param_sql, 20
	recordcount = GetRecordCount(dbkey, formgroup, rs)

	
	if maxexportNumber<> "" then
		FlushMessageToClient("export is limited to a maximum of " & maxexportNumber & " records.")
		FlushMessageToClient("exporting " & recordcount & " records...")
	else
		FlushMessageToClient("exporting " & recordcount & " records...")
	end if
	
	if err.number <> 0 or Not recordcount <> "" then
		Session("fEmptyRecordset" & dbkey & formgroup) = True
		FlushMessageToClient("The recordset was not succesfully created: <br>" & param_sql)
		FlushMessageToClient("Error : <br>" &  err.number & err.description)
		Response.end
	else
			molfilepath = Application("TempFileDirectory" & dbkey) & "Sessiondir\" & Session.sessionid & "\"
			molfilepathhttp =Application("TempFileDirectoryHTTP" & dbkey) & "Sessiondir/" & Session.sessionid & "/"
	
			rdfilename=  GetTimeStamp()
	
			Set fs = Server.CreateObject("Scripting.FileSystemObject")
			Set a = fs.CreateTextFile(molfilepath & rdfilename & ".rdf")  
			storeTimeout = server.ScriptTimeout
			server.ScriptTimeout = 10000000
			
			If not (RS.EOF and RS.BOF) = true then
				if Not UseCartridge(dbkey, formgroup) then
					Set myConnection = CSDOGetCSDOConnection(dbkey, formgroup)
				end if
				RS.MoveFirst
				counter = 1
				
				if Not detectNS4() = true then
					InitializeProgressBar true, ""
				end if
			
				'DGB this block used to be inside the loop.  
				'I pulled it out since it has no depency in loop variable l
				Tablename = GetBaseTable(dbkey, formgroup, "moltable")
				if Not UCase(ExportType) = "VIEW" then
						if UseCartridge(dbkey, formgroup) then
							on error resume next
							strucFields = getFormGroupVal(dbkey, formgroup, kStructureFields)
							temp_fields_array = split(strucFields, ",", -1)
							for p = 0 to Ubound(temp_fields_array)
								temp_fields2= split(temp_fields_array(p), ".", -1)
								
								if UBound(temp_fields2) = 2 then
									struc_table_name = temp_fields2(0) & "." & temp_fields2(1)
									'struc_table_name = GetTableVal(dbkey, struc_table_name, kTableRealName)
									struc_fieldname = temp_fields2(2)
								else
									struc_table_name = temp_fields2(0)
									'struc_table_name = GetTableVal(dbkey, struc_table_name, kTableRealName)
									struc_fieldname = temp_fields2(1)
								end if
								currentTable = UCase(Trim(Tablename))
								theStrucTable = UCase( Trim(struc_table_name))
								if (theStrucTable =currentTable) or (currentTable = Ucase(basetable)) then
									if struc_fields <> "" then
										struc_fields = struc_fields & "," & struc_fieldname
									else
										struc_fields = struc_fieldname
									end if
								end if
							next
							Structure_Fieldname = "Structure"
						else
							Structure_Fieldname = "Structure"
						end if
					else
						if UseCartridge(dbkey, formgroup) then
						
							on error resume next
							strucFields = getFormGroupVal(dbkey, formgroup, kStructureFields)
							temp_fields_array = split(strucFields, ",", -1)
							for p = 0 to Ubound(temp_fields_array)
								temp_fields2= split(temp_fields_array(p), ".", -1)
								
								if UBound(temp_fields2) = 2 then
									struc_table_name = temp_fields2(0) & "." & temp_fields2(1)
									struc_fieldname = temp_fields2(2)
								else
									struc_table_name = temp_fields2(0)
									struc_fieldname = temp_fields2(1)
								end if
								
								if  UCase(ExportType) = "VIEW" then
									TableName = view_basetable
								end if
							
								currentTable = UCase(Trim(Tablename))
								theStrucTable = UCase( Trim(struc_table_name))
								if (theStrucTable =currentTable) or (currentTable = Ucase(basetable)) then
									if struc_fields <> "" then
										struc_fields = struc_fields & "," & struc_fieldname
									else
										struc_fields = struc_fieldname
									end if
								end if
							next
							Structure_Fieldname = "View_Structure"
						else
							Structure_Fieldname = "View_Structure"
						end if
					end if
				' DGB end of block pulled from loop
				'stop
				 
				a.WriteLine "$RDFILE 1"
				a.WriteLine "$DATM " & CDate(Now)
				
				For l = 1 to recordcount
					a.WriteLine "$RIREG " & l

					if Not detectNS4() = true then
						FlushMessageToClient(" ")
					end if
					
					UniqueID = RS(StrucUniqueID)
					baseid_value = RS(Baseid)
				
					if (Not UniqueID = "") AND (Not isEmpty(UniqueID)) then
						if Not UCase(ExportType) = "VIEW" then
							UniqueID = RS(StrucUniqueID)
						else
							basetable = view_basetable
							UniqueID = RS(StrucUniqueID)
						end if
					end if
					if bStrucDataOut = true then 'output structure mw and formula
						if (Not UniqueID = "") AND (Not isEmpty(UniqueID)) then
							If CLng(UniqueID) > 0 then
								myTime = Timer()
								Fieldname = Structure_Fieldname
								' return molweight
								'check to see if there is a structure
								if UseCartridge(dbkey, formgroup) then
									
									mw_table_name = struc_table_name
									CSDOGetChemData dbkey, formgroup, mw_table_name, Fieldname, UniqueID, "MOLWEIGHT", DataConn
								else ' Use CSDO to produce sdout.mol
								
									mw_table_name = TableName
									struc_table_name = mw_table_name
									CSDOGetChemData dbkey, formgroup, mw_table_name, Fieldname, UniqueID, "sdout.mol", myConnection
								end if
								If Not Session("MW" & dbkey & formgroup & struc_table_name & Fieldname & UniqueID)="" then
									if UseCartridge(dbkey, formgroup) then
										CSDOGetChemData dbkey, formgroup, struc_table_name, Fieldname, UniqueID, "FORMULA", DataConn
									
										fields_array = split(struc_fields, ",", -1)
										for q = 0 to UBound(fields_array)
											Session("molfile" & dbkey & formgroup) =""
											
											CSDOGetChemData dbkey, formgroup, struc_table_name,fields_array(q), UniqueID, "get_molfile", DataConn
											
											if customized = true then 'for Roche
												Session("molfile" & dbkey & formgroup) = ReplaceCFTag(Session("molfile" & dbkey & formgroup))
											else
												Session("molfile" & dbkey & formgroup) = Session("molfile" & dbkey & formgroup)
											end if
											
											a.WriteLine "$DTYPE STRUCTURE"
											a.WriteLine "$DATUM $MFMT"
											a.WriteLine Session("molfile" & dbkey & formgroup) 
										next
									else ' Used CSDO read sdout.mol
										myDir = molfilepath & "sdout.mol"
										Set b = fs.OpenTextFile(myDir)
										do while b.AtEndOfStream <> True
											myvar = b.ReadLine
											a.WriteLine myvar
										loop
										b.close
									end if
								end if
								'no need to output this
								'a.WriteLine ">  <" & StrucUniqueID & "> " & "(" & counter & ")"
								'a.WriteLine UniqueID
								
								a.WriteLine " "
								fieldvalue = Session("MW" & dbkey & formgroup & struc_table_name & Fieldname & UniqueID)
								output_fieldname = "MolWeight"
								'Comment out temporarily -- SYAN
								'a.WriteLine ">  <" & output_fieldname & "> " & "(" & counter & ")"
								'WriteSdfDataField a, fieldvalue
								
								output_fieldname = "Formula"
								fieldvalue = Session("Formula" & dbkey & formgroup & struc_table_name & Fieldname & UniqueID)
								'a.WriteLine ">  <" & output_fieldname & "> " & "(" & counter & ")"
								'WriteSdfDataField a, fieldvalue
								
							end if
						end if
					end if
						
					on error resume next
				
					Dim i
					
					'stop
					baseTableNameArr = Split(baseTable, ".")
					baseTableName = baseTableNameArr(0)
					
					For i = 0 to RS.Fields.Count-1
						fieldname = ""
						fieldname = RS.Fields.Item(i).Name
						display_fieldName = ""
						'stop
						if Not UCase(fieldname) = UCase(StrucUniqueID) then
							'LJB 5/1/2004 check to see if current field was added only because it is in the order by clause. it should not be displayed.
							if Not HideFieldFromDisplay(basetable & "." & fieldname) then
								if UCase(fieldname) = UCase(Baseid) AND CheckOrigRequest(basetable & "." & baseid,fieldstoexport ) then
										
										'LJB 3/2005 get display names from export specific dictionary created in export_hits_dialog.asp
										display_fieldName = getDisplayNamesForSDExport(basetable & "." & fieldname)
										display_fieldName = replace(display_fieldName, "<sup>", "")
										display_fieldName = replace(display_fieldName, "</sup>", "")
										display_fieldName = replace(display_fieldName, "<sub>", "")
										display_fieldName = replace(display_fieldName, "</sub>", "")
										display_fieldName = replace(display_fieldName, "<", "")
										display_fieldName = replace(display_fieldName, ">", "")
										if not display_fieldName <> "" then
											display_fieldName =fieldname
										end if
										fieldvalue = RS.Fields.Item(i).Value
										a.WriteLine ">  <" & display_fieldName & "> " & "(" & counter & ")"
										WriteSdfDataField a, fieldvalue
										
								else
										'display_fieldName = getLabelNameFromDict(dbkey, formgroup, formmode,basetable & "." & fieldname)
										'LJB 3/2005 get display names from export specific dictionary created in export_hits_dialog.asp
										display_fieldName = getDisplayNamesForSDExport(basetable & "." & fieldname)
										display_fieldName = replace(display_fieldName, "<sup>", "")
										display_fieldName = replace(display_fieldName, "</sup>", "")
										display_fieldName = replace(display_fieldName, "<sub>", "")
										display_fieldName = replace(display_fieldName, "</sub>", "")
										display_fieldName = replace(display_fieldName, "<", "")
										display_fieldName = replace(display_fieldName, ">", "")
										if not display_fieldName <> "" then
											display_fieldName =fieldname
										end if
										fieldvalue = RS.Fields.Item(i).Value
										'stop
										a.WriteLine "$DTYPE " & baseTableName & ":" & display_fieldName
										a.WriteLine "$DATUM " & fieldvalue
										'WriteSdfDataField a, fieldvalue
										
								end if
							end if
						end if
					Next 'i
					
					'stop
					subFormsString_array = split(subFormsString, ",", -1)
					Set RSp = Server.CreateObject("ADODB.RECORDSET")
					RSp.CursorType=3
					Set SubTablecmd = Server.CreateObject("ADODB.Command")
					Intertables=""
			
					for j = 0 to UBound(subFormsString_array)
						Set RSp = Server.CreateObject("ADODB.RECORDSET")
						RSp.CursorType=3
						Set SubTablecmd = Server.CreateObject("ADODB.Command")
						InterTables=GetTableVal(dbkey, subFormsString_array(j), kInterTables) & "," & subFormsString_array(j)
						tempFields = getTableExportFields(subFormsString_array(j), fieldstoexport)
						order_by =""
						Session("FieldsToHideFromDisplayNested")=""
						strGetFields = tempFields
					
						'LJB 5/1/2005 add support for XML Widget sorting
						if Session("allInnerSorts") <> "" then
							
							tempFields =modifySQl(tempFields)
							childTableSort = GetLastWidgetChildTableSort(subFormsString_array(j))
							'add sort by for child table
							'make sure the sort by field is in the field list
							
							fieldsToAddTemp= AddFieldToSelectListNested(childTableSort,tempFields)
							if fieldsToAddTemp <> "" then
								if strGetFields <> "" then
									strGetFields  = strGetFields & "," & fieldsToAddTemp
								else
									strGetFields  =fieldsToAddTemp
								end if
							end if
							if order_by <> "" then
								order_by = order_by & "," & childTableSort
							else
								order_by = childTableSort
							end if
						end if
						
						
						SubTablecmd.ActiveConnection = DataConn 
						SubTablecmd.CommandType = adCmdText
						strGetFields =modifySQl(strGetFields)
						
						SubFormParamSQL=GetDisplaySQL(dbkey, formgroup, strGetFields,basetable,InterTables,"?","SQL_COWS")
					
						SubFormParamSQL=AddLookups(dbkey,formgroup,SubFormParamSQL, "","FLAT")
						SubFormParamSQL=RemoveLookupKeywords(SubFormParamSQL)
						'add order by clause to support XML Widget sorting
					
						SubTablecmd.parameters.append SubTablecmd.CreateParameter("baseID", 5, 1,0,baseid_value)

						if Session("add_childtable_criteria" & dbkey & formgroup) = "LIMIT" then
							SubFormParamSQL = AddChildTableCriteria( dbkey, formgroup, subFormsString_array(j), SubFormParamSQL)
							SubFormParamSQL = modifySql(SubFormParamSQL)
						end if
						if Session("allInnerSorts") <> "" and order_by <> "" then
							SubFormParamSQL=SubFormParamSQL & " ORDER BY " & order_by
						end if
						'DGB fix ACX Size problem
						SubFormParamSQL = replace(SubFormParamSQL,"Package.Size","Package.""SIZE""")
						SubTablecmd.CommandText = SubFormParamSQL
						RSp.Open SubTablecmd
						
						
						SubTablecmd.Parameters.Delete "baseID"
						tablename_val = getTableNameFromDict(dbkey, formgroup,formmode, subFormsString_array(j))
						
						if not tablename_val <> "" then
							tablename_val = subFormsString_array(j)
						end if
						'stop

						theValue = ""
						fieldvalues=""
						fieldnames = ""
						fieldname_value=""
						
						If Not (RSp.BOF AND RSp.EOF) then
							rsprecordcount = GetRecordCount(dbkey, formgroup, rsp)
							RSp.MoveFirst
							q = 0
							Do While RSp.EOF = false
								q = q + 1
								For f = 0 to Rsp.Fields.Count-1
									fieldname_value = RSp.Fields.Item(f).Name
									'5/1/2004 check to see if current field was added only because it is in the order by clause. it should not be displayed.
									hideField = ""
									if Not HideFieldFromDisplayNested(subFormsString_array(j) & "." & fieldname_value) then
										'LJB 3/2005 get display names from export specific dictionary created in export_hits_dialog.asp
											
										display_fieldName = getDisplayNamesForSDExport(subFormsString_array(j) & "." & fieldname_value)
										display_fieldName = replace(display_fieldName, "<sup>", "")
										display_fieldName = replace(display_fieldName, "</sup>", "")
										display_fieldName = replace(display_fieldName, "<sub>", "")
										display_fieldName = replace(display_fieldName, "</sub>", "")
										display_fieldName = replace(display_fieldName, "<", "")
										display_fieldName = replace(display_fieldName, ">", "")
										if not display_fieldname <> "" then
											display_fieldname = fieldname_value
										end if
											
										a.WriteLine "$DTYPE " & basetablename & ":" & tablename_val & "(" & q & ")" & ":" & display_fieldname
										a.WriteLine "$DATUM " & RSp.Fields.Item(f).value
									 end if
								Next	
								RSp.MoveNext						
							Loop
							Rsp.Close
						else
						'LJB 3/2005 if child table has no data, there needs to be new line or ChemDraw for Excel misaligns data 
						a.WriteLine " "
						end if
					next
					'a.WriteLine " "
					'a.WriteLine " "
					'a.WriteLine "$$$$"
					RS.MoveNext
				
					if Not detectNS4() = true then
						 Progressbar counter, recordcount,5
					end if
					counter = counter + 1
					if err.number <> 0 then
						'response.write err.number
					end if
				next 'j
				
			
			Set myConnection = Nothing	
			a.close
			RS.Close
			server.ScriptTimeout = storeTimeout
		end if
		
	end if
	
	Set RS= Nothing
	ExportRDFile = molfilepathhttp & rdfilename & ".rdf"
End Function

Function ReplaceCFTag(byval inputStr)
	Dim retVal
	
	retVal = replace(inputStr, "csChFnd80/", "  -ISIS- ")
	ReplaceCFTag = retVal
End Function

%>