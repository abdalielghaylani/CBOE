
<%'Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved
'DO NOT EDIT THIS FILE
'This file contains routines for setting marked hits
'This file requires that manage_user_settings_vbs.aap, ado.inc and server_const_vbs.asp be included in the calling page%>
<%

'global connection for user settings table. set via GetUserSettingsConnection

'****************************************************************************************
'*	PURPOSE: Mark a Hit by adding it to the CSDOHITLIST table using the ID associated with 
'*	USERMARKEDHITS list name                   
'*	INPUT: dbkey and formgroup	and the hit to mark                  			
'****************************************************************************************
Sub DoMarkHit(dbkey, formgroup, marked_hit)
	
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	User_ID = getUserSettingsID(dbkey, formgroup)
	markedHitsListID = GetMarkedCSDOHitListID(dbkey, formgroup, user_id)
	If CLng(markedHitsListID) = 0 then
		markedHitsListID = GetNewHitlistID(dbkey, formgroup, Ucase(user_id), "USERMARKEDHITS", "USER")
	End if
	' value is only added if not already there
	bHitAdded = AddSingleHitToHitlist(dbkey, formgroup, markedHitsListID, marked_hit, "USER")
	if bHitAdded then markedHitsString = Session("MarkedHits" & dbkey & formgroup) & "," & marked_hit
	markedHitsString = replace(markedHitsString, "-1", "")
	if left(markedHitsString, 1) = "," then markedHitsString = Right(markedHitsString, Len(markedHitsString)-1)
	Session("MarkedHits" & dbkey & formgroup) = markedHitsString
	UpdateMarkedHitsCount dbkey, formgroup, markedHitsListID
End Sub

'****************************************************************************************
'*	PURPOSE: Get the hitlistID for the user's MakedHits list.                    
'*	INPUT: dbkey and formgroup	and user_id
'*	RETURNS: hitlistID value or zero if list does not exist                  			
'****************************************************************************************
Function GetMarkedCSDOHitlistID(dbkey, formgroup, user_id)
	Dim Cmd
	Dim sql
	Dim hitListIDTableName
	
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	if Session("markedHitsListID" & dbkey & formgroup) <> "" then
		GetMarkedCSDOHitlistID= Session("markedHitsListID" & dbkey & formgroup)
		' EXIT POINT
	Else
		hitListIDTableName = GetFullTableName(dbkey, formgroup,"USERHITLISTID")
	
		sql =	"SELECT ID FROM " & hitlistIDTableName &_
				" WHERE USER_ID = ? AND" &_
				" FORMGROUP = ? AND" &_  
				" NAME = 'USERMARKEDHITS'"
	
		GetUserSettingsConnection dbkey, formgroup, "base_connection"
		Set Cmd = Server.CreateObject("ADODB.COMMAND")
		Cmd.ActiveConnection = UserSettingConn
		Cmd.CommandType = adCmdText
		Cmd.CommandText = sql
		Cmd.Parameters.Append Cmd.CreateParameter("pUserID", 200, 1, Len(user_id)+1, Trim(Ucase(user_id))) 
		Cmd.Parameters.Append Cmd.CreateParameter("pUserID", 200, 1, Len(formgroup)+1, Trim(Ucase(formgroup))) 

		Set RS = Cmd.Execute
	
		if RS.BOF AND RS.EOF then
			GetMarkedCSDOHitlistID =  0
		Else
			markedHitsListID = RS("ID")
			Session("markedHitsListID" & dbkey & formgroup) = markedHitsListID
			GetMarkedCSDOHitlistID = markedHitsListID 
		End if
	End if	
End function

'****************************************************************************************
'*	NAME: DoClearMarked(dbkey, formgroup)
'*	PURPOSE: Remove list of all hits from CSDOhitlist table              
'*	INPUT: dbkey and formgroup          			
'****************************************************************************************
Sub DoClearMarked(dbkey, formgroup)
	Dim hitListIDTableName
	
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	User_ID = getUserSettingsID(dbkey, formgroup)
	markedHitsListID = GetMarkedCSDOHitListID(dbkey, formgroup, user_id)
	
	hitListTableName = GetFullTableName(dbkey, formgroup,"USERHITLIST")
	
	sql =	"DELETE FROM " & hitlistTableName &_
			" WHERE HITLISTID = ?"
	
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	
	Cmd.Parameters.Append Cmd.CreateParameter("phitlistID", 5, 1, 0, markedHitsListID) 
	
	Cmd.Execute
	Session("MarkedHits" & dbkey & formgroup) = ""
	UpdateMarkedHitsCount dbkey, formgroup, markedHitsListID
End Sub


'****************************************************************************************
'*	PURPOSE: Unmark hit and update UserSettings table              
'*	INPUT: dbkey and formgroup	id to unmark             			
'****************************************************************************************
Function DoUnMarkHit(dbkey, formgroup,hit_to_unmark)
	
	Dim hitListTableName

	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	User_ID = getUserSettingsID(dbkey, formgroup)
	markedHitlistID = GetMarkedCSDOHitlistID(dbkey, formgroup, user_id)
	hitListTableName = GetFullTableName(dbkey, formgroup,"USERHITLIST")
	
	sql =	"DELETE FROM " & hitlistTableName &_
			" WHERE HITLISTID = ? AND ID = ?"
	
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	
	Cmd.Parameters.Append Cmd.CreateParameter("phitlistID", 5, 1, 0, markedHitlistID) 
	Cmd.Parameters.Append Cmd.CreateParameter("pID", 5, 1, 0, hit_to_unmark)
	Cmd.Execute
	 
	Session("MarkedHits" & dbkey & formgroup) = RemoveItemFromDelimetedList(Session("MarkedHits" & dbkey & formgroup) , hit_to_unmark, ",")
	UpdateMarkedHitsCount dbkey, formgroup, markedHitlistID
End Function

'****************************************************************************************
'*	NAME: RemoveItemFromDelimetedList(Byref theList, theItem, delimiter)
'*	PURPOSE: Generic function to remove an item from a delimited list              
'*	INPUT: theList, theItem, delimeter
'*	RETURNS: returns the orginal list with the item removed if it existed          			
'****************************************************************************************
Function RemoveItemFromDelimetedList(theList, theItem, delimiter)	
	Dim str
	strList = delimiter & thelist & delimiter
	strList = Replace(strList, delimiter & theItem & delimiter, ",", 1)
	if left(strList,1) = "," then strList = Right(strList, Len(strList)-1)
	if Right(strList,1) = "," then strList = left(strList, Len(strList)-1)
	RemoveItemFromDelimetedList = strList
End Function


'****************************************************************************************
'*	NAME: AddItemToDelimitedList(theList, theItem, delimiter)
'*	PURPOSE: Generic function to add an item to a delimited list if it does not already exist              
'*	INPUT: theList, theItem, delimeter
'*	RETURNS: returns the orginal list with the item added if it did not alredy exist         			
'****************************************************************************************
Function AddItemToDelimitedList(theList, theItem, delimiter)	
	if isItemInDelimetedList(theList, theItem, delimiter) then 
		AddItemToDelimitedList = theList
		' EXIT POINT
	End if
	theList = thelist & "," & theItem 
	if left(theList,1) = "," then theList = Right(theList, Len(theList)-1)
	AddItemToDelimitedList = theList
End Function

'****************************************************************************************
'*	NAME: IsItemInDelimetedList(theList, theItem, delimiter)	
'*	PURPOSE: Generic function to check for an item in a delimited list              
'*	INPUT: theList, theItem, delimeter
'*	RETURNS: boolean          			
'****************************************************************************************
Function isItemInDelimetedList(theList, theItem, delimiter)	
	strList = delimiter & thelist & delimiter
	If InStr(strList, delimiter & theItem & delimeter)>0 then
		isItemInDelimetedList = true
	else
		isItemInDelimetedList = false
	End if
End Function


'****************************************************************************************
'*	NAME: DoMarkAllHits(dbkey, formgroup)
'*	PURPOSE: Add/Append list of all hits to CSDOHitlist table              
'*	INPUT: dbkey and formgroup.  Takes hits from current hitlist
'*	RETURN: Updates Session("MarkedHits" & dbkey & formgroup)             			
'****************************************************************************************
Sub DoMarkAllHits(dbkey, formgroup)
	Dim hitListTableName
	Dim bFlipParams
	Dim ADOProvider
	Dim baseTable
	Dim baseTablePK
	Dim maxMarkedHits
	
    maxMarkedHits = Application("MARKED_HITS_MAX")
	bFlipParams = false
	
	currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	ADOProvider = UserSettingConn.Provider
	User_ID = getUserSettingsID(dbkey, formgroup)
	basetable = GetBaseTable2(dbkey, formgroup, "basetable")
	baseTablePK = GetTableVal(dbkey, basetable, kPrimaryKey)
	hitListTableName = GetFullTableName(dbkey, formgroup,"CSDOHITLIST")
	userTableName = GetFullTableName(dbkey, formgroup,"USERHITLIST")
	markedHitlistID = GetMarkedCSDOHitlistID(dbkey, formgroup, user_id)
	If markedHitListID = "0" then
		markedHitListID = GetNewHitlistID(dbkey, formgroup, user_id, "USERMARKEDHITS", "USER")
	End if
	
	'CSBR 138998 : SJ : To assign only the REGID column to the baseTablePK variable so as to correct the oracle error 'ORA-01789'.
	'Start of change
	If lcase(basetable) = "inv_vw_reg_batches" Then
	    temp = split(baseTablePK,",")
	    baseTablePK = temp(0)
	End If
	'End of change
	' To avoid duplicates we need to insert the difference between the current
	' hitlist and the already marked hits.
	Select Case(currentRDBMS)
			Case "ORACLE"
				if UseCartridge(dbkey, formgroup) then
				'CSBR# - 119688
				'Done by - Soorya Anwar
				'Date -
				'Purpose - When maximum limit for marking records is set to 0 then no maximum limit is considered for marking records (and original query in else clause is used)
				'          Otherwise,the configured maximum limit for marking records is used to limit the record count that
				'          can be inserted into the USERHITLIST table that contains the marked records for a given user. 				
		                if 	maxMarkedHits > 0 then			
								sql = 	"INSERT INTO " & userTableName & " (hitlistID, ID) " &_
										"SELECT HITLISTID, ID FROM (SELECT tblInner.*, rownum rn_limit FROM (" &_
										"SELECT '" & markedHitlistID & "' AS hitlistID, b." & baseTablePK & " AS ID FROM " & baseTable & " b, " & hitListTableName & " L2 " &_
			                            "WHERE b.rowid = L2.ID AND L2.hitlistID = ? " &_
			                            "MINUS " &_
			                            "SELECT '" & markedHitlistID & "' AS hitlistID, L1.ID FROM " & userTableName & " L1 " &_
			                            "WHERE L1.hitlistID = ? ) tblInner " &_
			                            ") WHERE rn_limit <= " & maxMarkedHits & " - ( " &_
			                            "SELECT COUNT(*) FROM " & userTableName & " L1 " &_
			                            "WHERE L1.hitlistID = " & markedHitlistID & " )"
		                else
								sql =	"INSERT INTO " & userTableName & " (hitlistID, ID) " &_
										"SELECT '" & markedHitlistID & "' AS hitlistID, b." & baseTablePK & " AS ID FROM " & baseTable & " b, " & hitListTableName & " L2 " &_
										"WHERE b.rowid = L2.ID AND L2.hitlistID = ? " &_
										"MINUS " &_
										"SELECT '" & markedHitlistID & "' AS hitlistID, L1.ID FROM " & userTableName & " L1 " &_
										"WHERE L1.hitlistID = ? "				  
						end if   
				' End of CSBR 119688 change
				else
				' The query for UseCartridge and ACCESS cases have not been changed as fix for CSBR 119688								
						sql =	"INSERT INTO " & userTableName & " (hitlistID, ID) " &_
								"SELECT '" & markedHitlistID & "' AS hitlistID, L2.ID FROM " & hitListTableName & " L2 " &_
								"WHERE L2.hitlistID = ? " &_
								"MINUS " &_
								"SELECT '" & markedHitlistID & "' AS hitlistID, L1.ID FROM " & userTableName & " L1 " &_
								"WHERE L1.hitlistID = ? "
				end if
							 
			Case "ACCESS", "SQLSERVER"
				sql =	"INSERT INTO " & userTableName & " (hitlistID, ID) " &_
						"SELECT '" & markedHitlistID & "' AS hitlistID , L1.ID AS ID FROM " & hitListTableName & " L1 " &_
						"WHERE L1.hitlistID = ? " &_
						"AND NOT EXISTS (SELECT 1 FROM " & userTableName & " L2 WHERE L2.hitlistID =? AND L2.ID=L1.ID)"	
				
			'for some reason the JOLT provider is flipping the order of the parameters for this statement
			'we need to detect this case and fix below
			if (ADOProvider = "Microsoft.Jet.OLEDB.4.0") then bFlipParams = true
	End select			
	
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	
	if NOT bFlipParams then
		Cmd.Parameters.Append Cmd.CreateParameter(, 5, 1, 0, Session("HitlistID" & dbkey & formgroup)) 
		Cmd.Parameters.Append Cmd.CreateParameter(, 5, 1, 0, markedHitlistID)
	else
		Cmd.Parameters.Append Cmd.CreateParameter(, 5, 1, 0, markedHitlistID) 
		Cmd.Parameters.Append Cmd.CreateParameter(, 5, 1, 0, Session("HitlistID" & dbkey & formgroup))
	End if
	
	Cmd.Execute lrecsaffected
	
	UserSettingConn.close	
	markedHitListString = GetHitlistAsString(dbkey, formgroup, markedHitlistID, "USER")
	Session("MarkedHits" & dbkey & formgroup) = markedHitListString
	
	UpdateMarkedHitsCount dbkey, formgroup, markedHitlistID 
End Sub

'****************************************************************************************
'*	PURPOSE: Sets the hit count for the marked hits list            
'*	INPUT: 
'*  RETURN:  			
'****************************************************************************************
Sub UpdateMarkedHitsCount(dbkey, formgroup, hitlistID) 
	Dim sql
	
	userTableName = GetFullTableName(dbkey, formgroup,"USERHITLISTID")
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	
	
	
	sql =	"UPDATE " & userTableName & " SET number_hits=" & getMarkedHitsCount() &_ 
			" WHERE ID = ?"
	
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	Cmd.Parameters.Append Cmd.CreateParameter(, 5, 1, 0, hitlistID) 
	Cmd.execute		
End sub


Function getMarkedHitsCount()
	if Session("MarkedHits" & dbkey & formgroup) <> "" then
		temp = split(Session("MarkedHits" & dbkey & formgroup), ",", -1)
		getMarkedHitsCount = UBound(temp)+1	
	else
		getMarkedHitsCount = 0
	end if
End Function

'****************************************************************************************
'*	PURPOSE: Check if id already exists in string             
'*	INPUT: new value, currentstring
'*  RETURN: boolean. True if exists False is not 			
'****************************************************************************************
function checkExists(new_value, currentstring)
	Dim foundValue
	Dim temparray
	Dim i 
	foundvalue = false
	temparray = Split(currentsettings, ",", -1)
	for i = 0 to UBound(temparray)
		if temparray(i) = new_value then
			foundValue = true
		end if
	next
	checkExists = foundvalue
end function 


Function TruncateList(inputList)
	new_list = left(inputList,3999)
	myArray = split(new_list, ",", -1)
	For i = 0 to UBound(myArray) -1 'remove last item since it may have been truncated
		if final_list <> "" then
			final_list = final_list & "," & myArray(i)
		else
			final_list = myArray(i)
		end if
	Next
	TruncateList = final_list

End Function

'****************************************************************************************
'*	PURPOSE: DeDup a list of IDS            
'*	INPUT: dbkey and formgroup, CurrentList, newList, Max Allowed  
'*  RETURN: array containg dedupped string         			
'****************************************************************************************
function deDupString(new_string,old_string,max_allowed_count)
		
		'get rid of  duplicates but only process a number of records allowable by max_allowed_count
		Dim dedupped_string
		Dim dedupped_array
		Dim new_array 
		Dim new_array_count
		Dim old_array 
		Dim running_count
		Dim records_processed
		Dim dup_count
		Dim bAddDeDup
		
		new_array = split(new_string, ",", -1)
		new_array_count  = UBound(new_array)
		old_array = split(old_string, ",", -1)
		old_array_count = UBound(old_array)
		running_count = 0
		records_processed = 0
		dup_count = 0
		
		if old_array_count > 0 then
			
			for i = 0 to new_array_count
				
				if CLng(running_count) < CLng(max_allowed_count) then
					bAddDeDup = true
				
						for j = 0 to old_array_count
							'if after going through j loop, i is not found then start or add to dedupped list
							if new_array(i) = old_array(j) then
								bAddDeDup = false
								dup_count = dup_count + 1
							end if
						next 'next j
						if bAddDeDup =true then 'add to dedupped list
							if dedupped_string <> "" then
								dedupped_string =dedupped_string & "," & new_array(i)
							else
								dedupped_string =new_array(i)
							end if
							running_count = running_count + 1		
						end if
					
					
				end if
				records_processed=records_processed + 1
			next 'next i
		
			
			Dim dedupped_string_array
			Dim truncated_count
			Dim total_count
			dedupped_string_array = split(dedupped_string, ",", -1)
			truncated_count = CLng(new_array_count) - CLng(records_processed) - CLng(dup_count)
			total_count = new_array_count
			
		else
		
			out_array=setMaxAllowedString(new_string,max_allowed_count)
			dedupped_string = out_array(0)
			truncated_count = out_array(1)
			total_count = out_array(1)
			dup_count = out_array(1)
		end if
		
		dim final_string
		final_string = dedupped_string & ":" & truncated_count & ":" & total_count & ":" &  dup_count
		final_string_array= split(final_string, ":", -1)
		
		deDupString = final_string_array
End Function

'****************************************************************************************
'*	PURPOSE: get the the maximum number allowed from the dedupped list        
'*	INPUT: input_string,max_allowed_count
'*  RETURN: array with truncated ids set to maximum allowed         			
'****************************************************************************************
function setMaxAllowedString(input_string,max_allowed_count)
		'get the the maximum number allowed from the dedupped list
		Dim new_string
		Dim input_array
		Dim input_array_count 
		Dim records_processed 
		
		new_string = ""
		input_array = split(input_string, ",", -1)
		input_array_count = UBound(input_array)
		records_processed = 0
		
	
		for i=0 to UBound(input_array)
			if i < CLng(max_allowed_count) then
				
					if new_string <> "" then 
						new_string = new_string & "," & input_array(i)
				
					else
						new_string =  input_array(i)
					end if
				
			end if
			records_processed=records_processed + 1
		next
		
		Dim new_string_array
		Dim truncated_count
		Dim total_count
		Dim final_string
		
		new_string_array = split(new_string, ",", -1)
		truncated_count = input_array_count-records_processed
		total_count = input_array_count
		final_string = new_string & ":" &  truncated_count & ":" & total_count & ":" & "0" 
		final_string_array =split(final_string, ":", -1)
		
	setMaxAllowedString=final_string_array
End Function


Sub ShowSettingsMessageDialog(message)%>
	<script language = "javascript">
	alert("<%=message%>")
	</script>
<%
end sub
%>