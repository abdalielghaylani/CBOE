<% 'Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved
'DO NOT EDIT THIS FILE %>
<%
Dim bLogSearchPrefs
bLogSearchPrefs = false

Dim bLogSql
bLogSql = false

Dim bLogSqlNoMWFORM
bLogSqlNoMWFORM = false
 
Dim csdo_utils_DEBUG
csdo_utils_DEBUG=false

Dim LOGDebug
LOGDebug=False

'Determine how to get the mol string during sdf export
'Supported values are:  CDAX, CSCART, MOLSERVER 
Dim molStringMethod
molStringMethod = "MOLSERVER"

molStringMethod = Ucase(molStringMethod)

'Used by new get_struc to fetch base64
Function GetBase64CDX(dbkey, formgroup, tablename, fieldname, StrucUniqueID, existingConnection)		
	Dim sql
	Dim rs
	Dim strucIDField
	Dim myDir
	
	strucIDField = GetTableVal(dbkey, tablename, kStrucFieldID)
	myDir = Application("TempFileDirectory" & dbkey) & _
				tablename & fieldname  & "_" & StrucUniqueID & ".cdx"
	
	if UseCartridge(dbkey, formgroup) then
		sql =	"SELECT BASE64_CDX "  & " AS b64" & _
				" FROM " & tablename & " WHERE " & strucIDField & _
				" = " & StrucUniqueID
		Set rs = CSDODoCommand(sql, dbkey, formgroup, "0", existingConnection)		
		if not (rs.eof and rs.bof) then
			GetBase64CDX = rs("b64").value
			Exit function 
		End if
	else
		sql =	"SELECT STRUCTFILE(STRUCTURE, '" & mydir & "')" & _
				" FROM " & tablename & " WHERE " & strucIDField & _
				" = " & StrucUniqueID
		on error resume next
		Set rs = CSDODoCommand(sql, dbkey, formgroup, "0", existingConnection)
		if not (rs.eof and rs.bof) then
			GetBase64CDX = Application("myDecoder").Encode(mydir)
			Exit function
		end if
	end if
	GetBase64CDX = ""
End function

' csdo_utils.vbs - utility functions to use CSDO within COWS

Sub CSDOGetChemData(byval dbkey, byval formgroup, byval tablename, byval fieldname, byval strucuniqueid, byval cfwdatatype, byref existingConnection)
	' get data for a single structure 
	
	dim ucDataType
	dim querystring
	dim rs
	ucDataType = UCase(cfwdatatype)
	if ucDataType = "RAW" then
		ucDataType = "CDX"
	end if
	
	getFile = true
	nostruc = false	
	' determine path for structure file output,
	' and whether we need to get a file from the db at all
	If ucDataType = "SDOUT.MOL" then 'special for sdfile output
		myDir = Application("TempFileDirectory" & dbkey) & _
				"Sessiondir\" & Session.sessionid & "\" & "sdout.mol"
		getFile = true
	Else
		myDir = Application("TempFileDirectory" & dbkey) & _
				tablename & fieldname  & "_" & StrucUniqueID & "." & ucDataType	
		'!DGB! 7/14/01 Skiping the getFile process should only be allowed if cdx_caching is true
		if Ucase(Application("CDX_CACHING")) = "TRUE" then
			if doFileExists(myDir) = True then
	 			getFile = false
			end if
		End if
	End If

	' reg system options override other options
	formgroupflag = GetFormGroupVal(dbkey, formgroup, kFormGroupFlag)
	if dbkey="reg" then 
		getFile = true
	end if
	
	strucIDField = GetTableVal(dbkey, tablename, kStrucFieldID)
	
	Dim bUseCartridge
	if UseCartridge(dbkey, formgroup) = true then
		bUseCartridge = true
		
	else
		bUseCartridge = false
	end if
	Session("ContentsField" & dbkey & formgroup)=""
	select Case ucDataType
		case "FORMULA"
			' return formula
			
			if bUseCartridge = true then
				orig_fieldname = fieldname
				orig_tablename = tablename
			'-- CSBR ID:134244
			'-- Change Done by : Manoj Unnikrishnan
			'-- Purpose: To support SDF export from views; only do this in case of export from Tables
			'-- Date: 06/12/2010
				if ((UCase(fieldname) = "FORMULA" or UCase(fieldname)="STRUCTURE") and CBool(Application("ALLOW_SDF_EXPORT_FROM_VIEW"))= false)  then 
			'-- End of Change #134244#
					fieldname = "BASE64_CDX"
				end if
				fieldname = replace(UCase(fieldname), "_FORMULA", "")
			
				tablename = GetTableVal(dbkey, tablename, kTableRealName)
				if strucIDField = "NULL" then	strucIDField =tablename & "." & "MOL_ID"
				Set cmd = Server.CreateObject("adodb.command")
				Set RS = Server.CreateObject("adodb.recordset")
				if Not isObject(existingConnection) then
					Set existingConnection= getNewConnection(dbkey, formgroup, "base_connection")
				end if
				cmd.ActiveConnection =  existingConnection
				cmd.CommandType = adCmdText
				
				'DGB deprecated the use of ConvertCDX
				'sql = "SELECT CsCartridge.ConvertCDX.CDXtoFormula("  & fieldname & ",'SORTABLE=YES') formula" &_
				'			" FROM  " & tablename &_
				'			" WHERE " & strucIDField & "=?"
				'JHS 1/9/2008 - Sortable=yes messes up display
				'sql = "SELECT CsCartridge.Formula("  & fieldname & ",'SORTABLE=YES') formula" &_
				sql = "SELECT CsCartridge.Formula("  & fieldname & ",'SORTABLE=NO') formula" &_
							" FROM  " & tablename &_
							" WHERE " & strucIDField & "=?"									
				cmd.CommandText = sql
				cmd.Parameters.Append cmd.CreateParameter("pStruc_ID", 5, 1, 0, StrucUniqueID)

				on error resume next
				SetOracleSessionCursorSharingParameter existingConnection, "force"
				Trace "CSDOGetChemData:Cartridge Formula SQL: " & sql & " ?=" & StrucUniqueID, 25
				RS.Open cmd
				if not RS.eof then
					
					Session("Formula" & dbkey & formgroup & orig_tablename & orig_fieldname & StrucUniqueID)=  rs.fields("formula").value
				else
					
					Session("Formula" & dbkey & formgroup & orig_tablename & fieldname & StrucUniqueID) = ""
				end if
				RS.close
				Set RS = nothing
				SetOracleSessionCursorSharingParameter existingConnection, "exact"
			else
				querystring = "SELECT FORMULA FROM " & tablename &_
						 " WHERE " & strucIDField & " = " & StrucUniqueID
				on error resume next
				Set rs = CSDODoCommand(querystring, dbkey, formgroup, "0", existingConnection)
				if not rs.eof then
					Session("Formula" & dbkey & formgroup & tablename & fieldname & StrucUniqueID)=  rs.Fields("FORMULA")
				end if
			end if
			
		case "MW", "MOLWEIGHT", "MOLWT"
			' return molweight
			if bUseCartridge = true then
				orig_fieldname = fieldname
				orig_tablename = tablename
			'-- CSBR ID:134244
			'-- Change Done by : Manoj Unnikrishnan
			'-- Purpose: To support SDF export from views; only do this in case of export from Tables
			'-- Date: 06/12/2010
				if ((UCase(fieldname) = "MOLWEIGHT" or UCase(fieldname)="STRUCTURE") and CBool(Application("ALLOW_SDF_EXPORT_FROM_VIEW"))= false) then 
			'-- End of Change #134244#
					fieldname = "BASE64_CDX"
				end if
				tablename = GetTableVal(dbkey, tablename, kTableRealName)
				if strucIDField = "NULL" then	strucIDField =tablename & "." & "MOL_ID"
				fieldname = replace(UCase(fieldname), "_MOLWEIGHT", "")
				Set cmd = Server.CreateObject("adodb.command")
				Set RS = Server.CreateObject("adodb.recordset")
				if Not isObject(existingConnection) then
					Set existingConnection= getNewConnection(dbkey, formgroup, "base_connection")
				end if
				cmd.ActiveConnection =  existingConnection
				cmd.CommandType = adCmdText
				
				'DGB deprecated the use of ConvertCDX	
				'sql = "SELECT CsCartridge.ConvertCDX.CDXtoMolWeight(" & fieldname & ") molweight" &_
				'			" FROM  " & tablename &_
				'			" WHERE " & strucIDField & "=?"
				sql = "SELECT CsCartridge.MolWeight(" & fieldname & ") molweight" &_
							" FROM  " & tablename &_
							" WHERE " & strucIDField & "=?"			
				
				cmd.CommandText = sql
				cmd.Parameters.Append cmd.CreateParameter("pStruc_ID", 5, 1, 0, StrucUniqueID)
			
				SetOracleSessionCursorSharingParameter existingConnection, "force"
				Trace "CSDOGetChemData:Cartridge MW SQL: " & sql & " ?=" & StrucUniqueID, 25
				on error resume next
				RS.Open cmd
				if not rs.eof and not err.number <> 0 then
					theMW =   rs.Fields("MOLWEIGHT").value
					Select Case theMW
						Case "-1"
							Session("MW" & dbkey & formgroup & orig_tablename & orig_fieldname & StrucUniqueID)=""
						Case "0"
							Session("MW" & dbkey & formgroup  & orig_tablename & orig_fieldname & StrucUniqueID)=""
						Case Else
							Session("MW" & dbkey & formgroup & orig_tablename & orig_fieldname & StrucUniqueID)=theMW
					end Select
					
				end if
				RS.close
				Set RS = nothing
				SetOracleSessionCursorSharingParameter existingConnection, "exact"
			else
				querystring = "SELECT MOLWT FROM " & tablename & _
					" WHERE " & strucIDField & " = " & StrucUniqueID
				on error resume next
				
				Set rs = CSDODoCommand(querystring, dbkey, formgroup, "0", existingConnection)
				if not rs.eof then
					theMW =   rs.Fields("MOLWT") 'CFWDoc.GetDataItem("MolWeight")
					Select Case theMW
						Case "-1"
							Session("MW" & dbkey & formgroup & tablename & fieldname & StrucUniqueID)=""
						Case "0"
							Session("MW" & dbkey & formgroup  & tablename & fieldname & StrucUniqueID)=""
						Case Else
							Session("MW" & dbkey & formgroup & tablename & fieldname & StrucUniqueID)=theMW
					end Select
					
				end if
			end if
		case "GET_MOLFILE"
				if bUseCartridge = true then
					if molStringMethod <> "CSCART" then
						if Not isObject(existingConnection) then
							Set existingConnection= getNewConnection(dbkey, formgroup, "base_connection")
						end if
						orig_fieldname = fieldname
						orig_tablename = tablename
					'-- CSBR ID:134244
					'-- Change Done by : Manoj Unnikrishnan
					'-- Purpose: To support SDF export from views; only do this in case of export from Tables
					'-- Date: 06/12/2010
						if (UCase(fieldname) = "STRUCTURE" and CBool(Application("ALLOW_SDF_EXPORT_FROM_VIEW"))= false)then 
					'-- End of Change #134244#
							fieldname = "BASE64_CDX"
						end if
						tablename = GetTableVal(dbkey, tablename, kTableRealName)
						Set rs = CreateObject("ADODB.Recordset")
						Set cmd = CreateObject("ADODB.Command")
						
						Cmd.ActiveConnection = existingConnection
						cmd.CommandType=adCmdText
							
						querystring = "SELECT " & fieldname & " FROM  " & tablename &_
						" WHERE " & strucIDField & "=?"
										
						on error resume next
						cmd.Parameters.delete "pStruc_ID"
						cmd.CommandText = querystring
						cmd.Parameters.Append cmd.CreateParameter("pStruc_ID", 5, 1, 0, StrucUniqueID)
						rs.Open cmd
						if not (rs.eof and rs.BOF) then	
							field_val = rs(fieldname).value
							molfile_string = ConvertBase64toMolfile(field_val)
							rs.close
						end if
						Session("molfile" & dbkey & formgroup) = molfile_string
					else ' use cartridge for generating molfile
						if Not isObject(existingConnection) then
							Set existingConnection= getNewConnection(dbkey, formgroup, "base_connection")
						end if
						orig_fieldname = fieldname
						orig_tablename = tablename
					'-- CSBR ID:134244
					'-- Change Done by : Manoj Unnikrishnan
					'-- Purpose: To support SDF export from views; only do this in case of export from Tables
					'-- Date: 06/12/2010
						if (UCase(fieldname) = "STRUCTURE" and CBool(Application("ALLOW_SDF_EXPORT_FROM_VIEW"))= false)then 
					'-- End of Change #134244#
							fieldname = "BASE64_CDX"
						end if
						tablename = GetTableVal(dbkey, tablename, kTableRealName)
						Set rs = CreateObject("ADODB.Recordset")
						Set cmd = CreateObject("ADODB.Command")
						
						Cmd.ActiveConnection = existingConnection
						cmd.CommandType=adCmdText
						For i = 1 to 10000
							querystring = "SELECT CsCartridge.ConvertCDX.CDXtoMolfile(" & fieldname & "," & i & ") as MOLFILE FROM  " & tablename &_
							" WHERE " & strucIDField & "=?"
							on error resume next
							cmd.Parameters.delete "pStruc_ID"
							cmd.CommandText = querystring
							cmd.Parameters.Append cmd.CreateParameter("pStruc_ID", 5, 1, 0, StrucUniqueID)
							SetOracleSessionCursorSharingParameter existingConnection, "force"
							rs.Open cmd
							SetOracleSessionCursorSharingParameter existingConnection, "exact"
							if not (rs.eof and rs.BOF) then	
								field_val = rs("molfile").value
								if field_val <> "" then
									if molfile_string <> "" then
										molfile_string = molfile_string & field_val
									else
										molfile_string =field_val
									end if
								else
									exit for
								end if
							
							end if
							rs.close
						next
						Session("molfile" & dbkey & formgroup) = molfile_string
					end if 'if useractiveX = true
				end if
		
		Case "SDOUT.MOL"
			if bUseCartridge = true then
					if molStringMethod <> "CSCART" then 'use the activeX control to get the molfile
						if Not isObject(existingConnection) then
							Set existingConnection= getNewConnection(dbkey, formgroup, "base_connection")
						end if
						orig_fieldname = fieldname
						orig_tablename = tablename
					'-- CSBR ID:134244
					'-- Change Done by : Manoj Unnikrishnan
					'-- Purpose: To support SDF export from views; only do this in case of export from Tables
					'-- Date: 06/12/2010
						if (UCase(fieldname) = "STRUCTURE" and CBool(Application("ALLOW_SDF_EXPORT_FROM_VIEW"))= false)then 
					'-- End of Change #134244#
							fieldname = "BASE64_CDX"
						end if
						tablename = GetTableVal(dbkey, tablename, kTableRealName)
						Set rs = CreateObject("ADODB.Recordset")
						Set cmd = CreateObject("ADODB.Command")
						
						Cmd.ActiveConnection = existingConnection
						cmd.CommandType=adCmdText
							
						querystring = "SELECT " & fieldname & " FROM  " & tablename &_
						" WHERE " & strucIDField & "=?"
										
						on error resume next
						cmd.Parameters.delete "pStruc_ID"
						cmd.CommandText = querystring
						cmd.Parameters.Append cmd.CreateParameter("pStruc_ID", 5, 1, 0, StrucUniqueID)
						rs.Open cmd
						if not (rs.eof and rs.BOF) then	
							field_val = rs(fieldname).value
							molfile_string = ConvertBase64toMolfile(field_val)
							rs.close
						end if
						Session("molfile" & dbkey & formgroup) = molfile_string
					else ' use cartridge for generating molfile
						if Not isObject(existingConnection) then
							Set existingConnection= getNewConnection(dbkey, formgroup, "base_connection")
						end if
						orig_fieldname = fieldname
						orig_tablename = tablename
					'-- CSBR ID:134244
					'-- Change Done by : Manoj Unnikrishnan
					'-- Purpose: To support SDF export from views; only do this in case of export from Tables
					'-- Date: 06/12/2010
						if (UCase(fieldname) = "STRUCTURE" and CBool(Application("ALLOW_SDF_EXPORT_FROM_VIEW"))= false)then 
					'-- End of Change #134244#
							fieldname = "BASE64_CDX"
						end if
						tablename = GetTableVal(dbkey, tablename, kTableRealName)
						Set rs = CreateObject("ADODB.Recordset")
						Set cmd = CreateObject("ADODB.Command")
						
						Cmd.ActiveConnection = existingConnection
						cmd.CommandType=adCmdText
						For i = 1 to 10000
							querystring = "SELECT CsCartridge.ConvertCDX.CDXtoMolfile(" & fieldname & "," & i & ") as MOLFILE FROM  " & tablename &_
							" WHERE " & strucIDField & "=?"
							on error resume next
							cmd.Parameters.delete "pStruc_ID"
							cmd.CommandText = querystring
							cmd.Parameters.Append cmd.CreateParameter("pStruc_ID", 5, 1, 0, StrucUniqueID)
							SetOracleSessionCursorSharingParameter existingConnection, "force"
							rs.Open cmd
							SetOracleSessionCursorSharingParameter existingConnection, "exact"
							if not (rs.eof and rs.BOF) then	
								field_val = rs("molfile").value
								if field_val <> "" then
									if molfile_string <> "" then
										molfile_string = molfile_string & field_val
									else
										molfile_string =field_val
									end if
								else
									exit for
								end if
							
							end if
							rs.close
						next
						Session("molfile" & dbkey & formgroup) = molfile_string
					end if 'if useractiveX = true
			else
			' assumed to be a structure extension designation
			if getFile = true then
			
				querystring = "SELECT MOLWT,FORMULA,STRUCTFILE(STRUCTURE, '" & mydir & "')" & _
							  " FROM " & tablename & " WHERE " & strucIDField & _
							  " = " & StrucUniqueID
				
				on error resume next
				Set rs = CSDODoCommand(querystring, dbkey, formgroup, "0", existingConnection)
				if not rs.eof then
					theMW =   rs.Fields("MOLWT") 'CFWDoc.GetDataItem("MolWeight")
					Select Case theMW
						Case "-1"
							Session("MW" & dbkey & formgroup & tablename & fieldname & StrucUniqueID)=""
						Case "0"
							Session("MW" & dbkey & formgroup  & tablename & fieldname & StrucUniqueID)=""
						Case Else
							Session("MW" & dbkey & formgroup & tablename & fieldname & StrucUniqueID)=theMW
					end Select
					Session("StructureFile" & dbkey & tablename & fieldname & StrucUniqueID) = Application("TempFileDirectoryHTTP" & dbkey)   & "_" &  StrucUniqueID & ".cdx" 
					Session("FORMULA" & dbkey & formgroup & tablename & fieldname & StrucUniqueID)=rs.Fields("FORMULA") 
				else
					nostruc = true
				end if
			end if
			'one last check to see if the file really got to it's final location.
			if not doFileExists(myDir) = true  then
				nostruc = true
			end if
		end if
		case "VIEW_STRUCTURE"
			' assumed to be a structure extension designation
			
				querystring = "SELECT STRUCTFILE(STRUCTURE, '" & mydir & "')" & _
						  " FROM " & tablename & " WHERE " & "MOL_ID" & _
						  " = " & StrucUniqueID
				on error resume next
				Set rs = CSDODoCommand(querystring, dbkey, formgroup, "0", existingConnection)
				if not rs.eof then
					Session("StructureFile" & dbkey & tablename & fieldname & StrucUniqueID) = Application("TempFileDirectoryHTTP" & dbkey)   & "_" &  StrucUniqueID & ".cdx" 
				else
					nostruc = true
				end if

			
			'one last check to see if the file really got to it's final location.
			if not doFileExists(myDir) = true  then
				nostruc = true
			end if
			
		case Else
			' assumed to be a structure extension designation
			if getFile = true or bUseCartridge = true then
				if bUseCartridge = true then
					' DGB query string is not using bind variables, but
					' execution goes via DoCartridgeSearch() which forces cursor sharing
					querystring = "SELECT BASE64_CDX" & _
							  " FROM " & tablename & " WHERE " & strucIDField & _
							  " = " & StrucUniqueID
					on error resume next
					
					Set rs = CSDODoCommand(querystring, dbkey, formgroup, "0", existingConnection)
					
					if not rs.eof then
							'jhs
							if lcase(left(rs("base64_cdx"), 8)) = "vmpdrdax" then
								decodebase64 rs("base64_cdx"), Application("TempFileDirectory" & dbkey)  & tablename &  fieldname &   "_" &  StrucUniqueID & ".cdx" 
							else
								SaveMolToTemp rs("base64_cdx"), Application("TempFileDirectory" & dbkey)  & tablename &  fieldname &   "_" &  StrucUniqueID & ".cdx" 
							end if
							'jhs
						'DecodeBase64 rs("base64_cdx"),Application("TempFileDirectory" & dbkey)  & tablename &  fieldname &   "_" &  StrucUniqueID & ".cdx" 
						Session("StructureFile" & dbkey & tablename & fieldname & StrucUniqueID) =Application("TempFileDirectory" & dbkey)   & "_" &  StrucUniqueID & ".cdx" 
					else
						nostruc = true
					end if
				else
					//DGB 2/26/2009 refactored to support fetching structure from mdb instead of mst.
					nostruc = WriteCFWStructureToFile(mydir, dbkey, formgroup, tablename, fieldname, strucuniqueid, strucIDField, existingConnection)    
				end if
				
			end if
			'one last check to see if the file really got to it's final location.
			if not doFileExists(myDir) = true  then
				nostruc = true
			end if
			
	end select
	
	if nostruc = true then
		oldpath = Application("TempFileDirectory" & dbkey)   &   "nostructure" & "." & CFWDataType 
		newpath = Application("TempFileDirectory" & dbkey)  & tablename & fieldname & "_" & StrucUniqueID & "." &  CFWDataType 	
		Set theFile = Server.CreateObject("Scripting.FileSystemObject")
		theFile.CopyFile oldpath, newpath
		Set theFile = Nothing
		theFile = ""
		Session("StructureFile"& dbkey& tablename & fieldname &  StrucUniqueID)= Application("TempFileDirectoryHTTP" & dbkey)  & "_" &    StrucUniqueID & CFWDataType 
	end if	
	
	set rs = Nothing
	rs = ""
end Sub

// DGB 2/26/2009 Refactor the code that extracts chemical structure from ChemFinder database so that it
// supports reading the content from Structure blob stored in the mdb instead of from mst file
// A new application configuration option USE_MDB_STRUCTURE must be set to 1 in the cfserver.ini
// config file to take advantage of this new feature.
function WriteCFWStructureToFile(byval mydir, byval dbkey, byval formgroup, byval tablename, byval fieldname, byval strucuniqueid, byval strucIDField, byref existingConnection)
    Dim nostruc
    
    if Application("USE_MDB_STRUCTURE")<> "1" then
        nostruc = WriteCFWStructureFromMstToFile(mydir, dbkey, formgroup, tablename, fieldname, strucuniqueid, strucIDField, existingConnection)
    else
        nostruc = WriteCFWStructureFromMdbToFile(mydir, dbkey, formgroup, tablename, fieldname, strucuniqueid, strucIDField, existingConnection)
        if nostruc then
            nostruc = WriteCFWStructureFromMstToFile(mydir, dbkey, formgroup, tablename, fieldname, strucuniqueid, strucIDField, existingConnection)
        End if
    end if
    
    WriteCFWStructureToFile = nostruc
End function

function WriteCFWStructureFromMdbToFile(byval mydir, byval dbkey, byval formgroup, byval tablename, byval fieldname, byval strucuniqueid, byval strucIDField, byref existingConnection)
    dim querystring
    dim nostruc
    dim rs
    dim c
    dim FileSize
    
    nostruc = true
    
    querystring =   "SELECT STRUCTURE " & _
				    " FROM " & tablename & " WHERE " & strucIDField & _
					" = " & StrucUniqueID
	
	If Session("ADO_STR" & dbkey & formgroup) = "" then
			on error resume next
			basetable= GetTableGroupVal(dbkey, formgroup, kBaseTable)
			conn_name = GetConnGroupVal(dbkey, basetable, kADOConnection)
			if conn_name = "" then conn_name = "base_connection"
			Session("ADO_STR" & dbkey  & formgroup) = GetADOConnString (dbkey, formgroup, conn_name)
	end if
	Set c = server.CreateObject("ADODB.CONNECTION")
	c.Open (Session("ADO_STR" & dbkey & formgroup))
	on error resume next
	Set RS = c.Execute(querystring)
	if err then
	    If err.number = -2147217904 then
	        TraceError "Error in WriteCFWStructureFromMdbToFile: Structure Field must exist in mdb file if USE_MDB_STRUCTURE parameter in cfserver.ini is enabled", err.Source, err.number, err.Description
	    Else
	        TraceError "Error in WriteCFWStructureFromMdbToFile: Unexpected Error: ", err.Source, err.number, err.Description
	    End if
	    Set RS = Nothing
	    on error goto 0    
	Else  
	    if NOT RS.EOF then
	       if RS.fields("Structure").ActualSize > 0 then
	            FileSize = WriteBLOB(RS , "STRUCTURE", mydir)
	            if FileSize > 0 then
	                nostruc = false 
	                Session("StructureFile" & dbkey & tablename & fieldname & StrucUniqueID) = Application("TempFileDirectoryHTTP" & dbkey)   & "_" &  StrucUniqueID & ".cdx" 
	            End if    
	        end if
	    end if
	End if
    WriteCFWStructureFromMdbToFile = nostruc
End function

function WriteCFWStructureFromMstToFile(byval mydir, byval dbkey, byval formgroup, byval tablename, byval fieldname, byval strucuniqueid, byval strucIDField, byref existingConnection)
    dim querystring
    dim nostruc
    dim rs
    
    nostruc = false
    
    querystring = "SELECT STRUCTFILE(STRUCTURE, '" & mydir & "')" & _
				  " FROM " & tablename & " WHERE " & strucIDField & _
				  " = " & StrucUniqueID
	on error resume next
	Set rs = CSDODoCommand(querystring, dbkey, formgroup, "0", existingConnection)
	if not rs.eof then
		Session("StructureFile" & dbkey & tablename & fieldname & StrucUniqueID) = Application("TempFileDirectoryHTTP" & dbkey)   & "_" &  StrucUniqueID & ".cdx" 
	else
		nostruc = true
	end if

    WriteCFWStructureFromMstToFile = nostruc
End function


'**************************************************************
' FUNCTION: WriteBLOB()
'
' PURPOSE:
'   Writes BLOB information stored in the specified table and field
'   to the specified disk file.
'
' PREREQUISITES:
'   The specified table with the OLE object field containing the
'   binary data must be opened in a recordset and the correct
'   record navigated to prior to calling the WriteBLOB() function.
'
' ARGUMENTS:
'   T           - The table object containing the binary information.
'   sField      - The OLE object field in table T containing the
'                 binary information to write.
'   Destination - The path and filename to write the binary
'                 information to.
'
' RETURN:
'   The number of bytes written to the destination file.
'**************************************************************
Function WriteBLOB(Byref T , Byval sField, Byval Destination)
          Dim NumBlocks, i
          Dim FileLength, LeftOver
          Dim RetVal
          Dim abArray
          Dim obArrayBuilder
          
          
          Const BlockSize = 32768
          
          'stop
          ' Get the size of the field.
          FileLength = T.Fields(sField).ActualSize
          If FileLength = 0 Then
              WriteBLOB = 0
              Exit Function
          End If

          ' Calculate number of blocks to write and leftover bytes.
          NumBlocks = FileLength \ BlockSize
          LeftOver = FileLength Mod BlockSize
          
          'Create an instance of the class to append byteArrays as they are chuncked
          Set aBld = New ByteArrayBuilder
          
          ' Get the leftover chunk first          
          aBld.Append(T.Fields(sField).GetChunk(LeftOver))
          
          
          ' Get the remaining blocks of data.
          For i = 1 To NumBlocks
              aBld.Append(T.Fields(sField).GetChunk(BlockSize))  
          Next
          
          aBld.SaveToFile(Destination)
          
          ' Terminates function
          FileLength = aBld.Length
          Set aBld = Nothing
          WriteBLOB = FileLength
          Exit Function
End Function

' A class that uses ADO Stream to append byte Arrays.
Class ByteArrayBuilder
	Private moStream

	Sub Class_Initialize()
		Set moStream = CreateObject("ADODB.Stream")
		moStream.Open
		moStream.Type = 1
	End Sub

	Public Sub Append(rabyt)
		moStream.Write rabyt
	End Sub

	Public Property Get Length
		Length = moStream.Size
	End Property

	Public Function GetArray()
		moStream.Position = 0
		GetArray = moStream.Read(moStream.Size)
	End Function

    Public Function SaveToFile(fPath)
		moStream.Position = 0
		SaveToFile = moStream.SaveToFile(fPath)
	End Function

	Sub Class_Terminate()
		moStream.Close
	End Sub

End Class

function CSDOGetCSDOConnection(ByVal dbkey, byval formgroup)
	' returns a new CSDO connection
	if UseCartridge(dbkey, formgroup) then
		Set CSDOGetCSDOConnection = GetNewConnection(dbkey, formgroup, "base_connection")
		exit function
	end if
	dim csconn
	dim chemlinks
	dim adostring
	If Session("CSDO_ADO_STR" & dbkey & formgroup) = "" then
			on error resume next
			basetable= GetTableGroupVal(dbkey, formgroup, kBaseTable)
			conn_name = GetConnGroupVal(dbkey, basetable, kADOConnection)
			if conn_name = "" then conn_name = "base_connection"
			Session("CSDO_ADO_STR" & dbkey  & formgroup) = GetADOConnString (dbkey, formgroup, conn_name)
	end if
	'!DGB! 7/14/01 
	
	' Use a cached CSDO connection if requested and available
	If  Application("ReuseCSDOconnection") AND IsObject(Application("CSDOConnection"  & dbkey)) then
		' Use the connection from Application scope
		Set csconn = Application("CSDOConnection" & dbkey)
	Else
		on error resume next
		'Open a new CSDO connection
		'stop 
		Select Case  Application("MOLSERVER_VERSION")
			Case "7"
				Set csconn = Server.CreateObject("CSDO7.Connection")
			Case "6"
				Set csconn = Server.CreateObject("CSDO.Connection")
			Case "7.1"
				Set csconn = Server.CreateObject("CSDO71.Connection")
			Case "8"
				Set csconn = Server.CreateObject("CSDO8.Connection")
			Case "9"
				Set csconn = Server.CreateObject("CSDO9.Connection")
			Case "10"
				Set csconn = Server.CreateObject("CSDO10.Connection")
			Case "11"
				Set csconn = Server.CreateObject("CSDO11.Connection")
			Case "12"
				Set csconn = Server.CreateObject("CSDO12.Connection")						
			Case "14"
				Set csconn = Server.CreateObject("CSDO14.Connection")
			Case "15"
				Set csconn = Server.CreateObject("CSDO15.Connection")
			Case "17"
				Set csconn = Server.CreateObject("CSDO17.Connection")
			Case Else
				Set csconn = Server.CreateObject("CSDO17.Connection")
		End Select

		CSDOFillChemLinks csconn.CSChemLinks, dbkey, formgroup
		on error resume next
		csconn.OpenConn Session("CSDO_ADO_STR" & dbkey & formgroup), Session("UserName" & dbkey), Session("UserID" & dbkey), 0
		if err then
			logaction "Error while opening CSDO connection: " & err.source & " : " & err.Description
			logaction "CSDO connection string: " & csconn.ADOconnString
			logaction "CSDO connection userID: " & csconn.ADOUID
		end if
	End if
	' Cache the connection in application scope if requested and if we haven't yet done so
	If Application("ReuseCSDOconnection") AND (NOT IsObject(Application("CSDOConnection" & dbkey))) then
		Set Application("CSDOConnection" & dbkey) = csconn
	End if
	
	Set CSDOGetCSDOConnection = csconn
	
end function



function CSDOFillChemLinks(ByRef objCSChemLinks, ByVal dbkey, ByVal formgroup)
	
	CHEMconnection_str = GetChemLinksStr(dbkey, formgroup)
	
	CHEMconnection_array = Split(CHEMconnection_str, ",", -1)
	on error resume next
	for i = 0 to UBound(CHEMconnection_array)
		conn_name=CHEMconnection_array(i)
		strucEngine = GetChemConnGroupVal(dbkey, conn_name, kStrucEngine)
		if UCase(strucEngine) = "MOLSERVER" then 'don't need a chemlink unless you are using molserver to search
			strucTableName = GetChemConnGroupVal(dbkey, conn_name, kStrucTableName)
			strucDBPath = GetChemConnGroupVal(dbkey, conn_name, kStrucDBpath)
			objCSChemLinks.Add strucTableName, _
					"MOL_ID", _
					strucDBPath, _
					"", _
					CLng(0)
			if err.number <> 0 then
				exit for
			end if
		end if 'if UCase(strucEngine) = "MOLSERVER" then
	next	 
	CSDOFillChemLinks = true
	
end function

function CSDODoCommand(ByVal sqlString, ByVal dbkey, byval formgroup, byval maxHits, byref existingConnection)

' returns ADO recordset of search results
	dim req
	dim rs
	dim myConnection
	dim chemsearchoptions
	Dim bUseCartridge
	if UseCartridge(dbkey, formgroup) = true then
		'SYAN added on 2/15/2005 to fix CSBR-50932
		if InStr(UCase(Session("SearchData" & "MultipleExact" & dbkey & formgroup)), ".SDF") > 0 then
			Set CSDODoCommand = doCartridgeSDFSearch( sqlString,  dbkey,  formgroup,  maxHits,  existingConnection)
		else
			Set CSDODoCommand = doCartridgeSearch( sqlString,  dbkey,  formgroup,  maxHits,  existingConnection)
		end if
		'End of SYAN modification
	else
		
		if Not maxHits <> "" then maxHits = 0
		'if a connection already exists, use that one, else create a new one
		on error resume next
		if Not isObject(existingConnection) then
			Set myConnection = CSDOGetCSDOConnection(dbkey, formgroup)
		else
			Set myConnection = existingConnection
		end if
		'logaction(err.number & err.description)
		Session("count") = Session("count") + 1
		' fill in user-defined chemical search options
		msVersion = CInt(Application("molserver_version"))
		If msVersion >= 8 then
			CSDOFillChemSearchOptions2	 myConnection.ChemSearchOptions, dbkey, formgroup
		else
			CSDOFillChemSearchOptions myConnection.ChemSearchOptions, dbkey, formgroup
		end if
		'!DGB! 04/18/01 initialize hitlist management session variables 
		if Session("SearchDomain" & dbkey & formgroup) = "" then 
			Session("SearchDomain" & dbkey & formgroup) = 0
		End if
		if Session("hitlistID" & dbkey & formgroup) = "" then 
			Session("hitlistID" & dbkey & formgroup) = 0
		End if
		'!DGB! 04/18/01 Call to populte hitlist properties
		CSDOFillHitlistOptions myConnection.ChemSearchOptions, Session("SearchDomain" & dbkey & formgroup), Session("hitlistID" & dbkey & formgroup), Session("ContentsField" & dbkey & formgroup), Session("TranslateTable" & dbkey & formgroup), Session("TranlateStrucKey" & dbkey & formgroup), Session("TranslateRelKey" & dbkey & formgroup)
		molServerMaxHits=0 ' this is not fully implemented
	
		CSDOFillMolServerMaxHitsOptions myConnection.ChemSearchOptions, molServerMaxHits
		CSDOFillADOOptions myConnection.ADOOptions, dbkey,formgroup, maxHits
		Trace "WriteHilist sql: " & sqlString, 9
		if csdo_utils_DEBUG=True Then
			Response.Write "<P><FONT FACE=""Arial"" SIZE=""2"" COLOR=""Red"">SQL String is:<BR>" & sqlString & "</FONT></P>"
		end if
		on error resume next
	
		set req = myConnection.Execute(sqlString)
		dim t0
		t0 = timer()
		req.Start
		
		'DGB 07/20/2006 Added tracing calls		
        if err.number <> 0 then
            TraceError "While Starting CSDO Request:", err.Source, err.number, err.Description
        end if
        'DGB 07/20/2006 End change

		'Read and store the id and length of the hitlist saved by the search
		'!DGB! 04/20/01 Do this only when save hitlist is being requested
		bBaseRS = false
		bRefineRS = false
		'clear this message variable. USed only when an error do to table privileges occurs.
		Session("Message_Append" & dbkey & formgroup)  = ""
		If  NOT myConnection.ChemSearchOptions.hitlistContentsField = "" then
			if myConnection.ChemSearchOptions.SearchDomain = 0 then
				bBaseRS = true
				' Search was over the whole mst
				'only set this is it is empty
				if Not Session("BaseRShitlistID" & dbkey & formgroup)  <> "" then
					Session("BaseRShitlistID" & dbkey & formgroup) = req.hitlistID
				end if
			Else 
				bRefineRS = true
				' search was limited to a previous hitlist
				'only set this is it is empty
				if Not Session("RefineHitlistID" & dbkey & formgroup)  <> "" then
					Session("RefineHitlistID" & dbkey & formgroup) = req.hitlistID
				end if
			End if
				Session("hitlistRecordCount" & dbkey & formgroup) = req.hitlistRecordCount
				Session("hitlistID" & dbkey & formgroup) = req.hitlistID
				Session("BaseRShitlistID" & dbkey & formgroup) = req.hitlistID
				'LogAction("InCSDOCurrentHL" & Session("hitlistID" & dbkey & formgroup))
				'LogAction("InCSDOBaseRSHL" & Session("BaseRShitlistID" & dbkey & formgroup))
				'LogAction("InCSDORefineRSHL" & Session("RefineHitlistID" & dbkey & formgroup))
		End if
		set CSDODoCommand = req.Recordset
		hitlistWriteTime = timer - t0
        Trace "Time to search and write hitlist:(" & req.hitlistRecordCount & ")hits: " & hitlistWriteTime & " seconds.", 8
        Session("hitlistWriteTime") = hitlistWriteTime
		if err.number <> 0 then 
			
			if  inStr(UCase(err.description), "READ-ONLY")>0 or err.number = "-2147217911" then
				Session("Message_Append" & dbkey & formgroup) =  "\n\n" & "The database you are trying to search is read-only. Please have the administrator of this application correct the problem."
			end if 
			if  inStr(UCase(err.description), "UPDATEABLE")>0 or err.number = "-2147467259" then
				Session("Message_Append" & dbkey & formgroup) =  "\n\n" & "The database you are trying to search is read-only. Please have the administrator of this application correct the problem."
			end if 
			if  inStr(UCase(err.description), "DOES NOT EXIST")>0 or err.number = "-2147217865" then
				Session("Message_Append" & dbkey & formgroup) =  "\n\n" & "You do not have sufficient privileges on one or more of the tables specified in this search." & "\n\n" &  "\n\n" & "SQL String: " & LCase(sqlString)
			end if
			if not inStr(UCase(err.source), "MOLSERVER")>0 then
				LogAction("From CSDODOCOMMAND" & err.number & err.description & err.source & " SQL: " & sqlString)
				
			end if
		else
			if bLogSql = true then
				logAction(sqlstring)
			end if
			if bLogSqlNoMWFORM = true then	
				if not instr(sqlstring, "SELECT MOLWT")>0 and not  instr(sqlstring, "SELECT FORMULA")>0 then
					logAction("*******************")
					logAction(sqlstring)
					logAction("refine search: " & bRefineRS & " refinehitlistid " & Session("RefineHitlistID" & dbkey & formgroup))
					logAction("new search: " & bBaseRS & " basershitlistid " & Session("BaseRSHitlistID" & dbkey & formgroup))
					logAction("hitlist for:" & formgroup & ":" & Session("hitlistID" & dbkey & formgroup) )
					logAction("hitlistRecordCount for:" & formgroup & ":" & Session("hitlistRecordCount" & dbkey & formgroup) )
					
					logAction("*******************")
				end if
			end if
			If bLogSearchPrefs = true and inStr(sqlString, "STRUCTURE")>0 then
				LogSearchPrefs dbkey, sqlString
			end if
		end if
	end if
end function

function CSDOFillChemSearchOptions(ByRef objChemSearchOptions, ByVal dbkey, ByVal formgroup)
	
	' fill chemsearch options with user's session
	' preferences
	'just in case this if from the post, set the appropriate session variables. They also may be set from another routine so don't change what may be there
	if UCase(Request("OverrideSearchPrefs")) = "TRUE" then 
		Session("OverrideDefaultPrefs") = "TRUE"
	end if
	if UCase(Request("GetPrefsFromPost")) = "TRUE" then 
		Session("GetPrefsFromPost") = "TRUE"
	end if
	if UCase(Request("GetDupSearchAppPrefs")) = "TRUE" then 
		Session("GetDupSearchAppPrefs") = "TRUE"
	end if

	if ((UCase(Session("OverrideSearchPrefs")) = "TRUE") OR (UCase(Session("GetPrefsFromPost")) = "TRUE") OR (UCase(Session("GetDupSearchAppPrefs")) = "TRUE")) then
		if UCase(Session("GetDupSearchAppPrefs") = "TRUE") then
				GetExactSearchPrefs dbkey, formgroup
		else
			if UCase(Session("GetPrefsFromPost") = "TRUE") then
				GetPrefsFromPost dbkey, formgroup
			else
				'take the prefs as they are. they may have been set by some other routine
			end if
		end if
	else
		GetCurrentPrefsCSDO dbkey, formgroup
	end if
	Session("OverrideDefaultPrefs") = ""
	Session("GetPrefsFromPost")=""
	Session("GetDupSearchAppPrefs")=""
	
'Order of CSDO7 Fill function
	'EXTRA_FRAGS_OK = PrefsS8
    'EXTRA_FRAGS_OK_IF_RXN = PrefsS9
    'HIT_ANY_CHARGE_CARBON = PrefsS3
    'HIT_ANY_CHARGE_HETERO = PrefsS5
    'FRAGS_CAN_OVERLAP = PrefsS10
    
    'MATCH_TET_DB = PrefsS2
    'MATCH_TET_STEREO = PrefsS1
    'RXN_HIT_RXN_CENTER = PrefsS4

	
	objChemSearchOptions.Fill Session("PrefsS8" & dbkey), _							
			Session("PrefsS9" & dbkey ), _							
			Session("PrefsS3" & dbkey), _	
			Session("PrefsS5" & dbkey), _	
			Session("PrefsS10" & dbkey), _						    
			Session("PrefsS2" & dbkey), _ 
			Session("PrefsS1" & dbkey), _ 
			Session("PrefsS4" & dbkey)
	
	 'SIM_FULL_STRUCTURE = PrefsS7

	CSDOFillSimSearchOptions objChemSearchOptions,Session("PrefsS7" & dbkey)
end function



function CSDOFillChemSearchOptions2(ByRef objChemSearchOptions, ByVal dbkey, ByVal formgroup)
	
	' fill chemsearch options with user's session
	' preferences
	'just in case this if from the post, set the appropriate session variables. They also may be set from another routine so don't change what may be there
	if UCase(Request("OverrideSearchPrefs")) = "TRUE" then 
		Session("OverrideDefaultPrefs") = "TRUE"
	end if
	if UCase(Request("GetPrefsFromPost")) = "TRUE" then 
		Session("GetPrefsFromPost") = "TRUE"
	end if
	if UCase(Request("GetDupSearchAppPrefs")) = "TRUE" then 
		Session("GetDupSearchAppPrefs") = "TRUE"
	end if
	
	if ((UCase(Session("OverrideSearchPrefs")) = "TRUE") OR (UCase(Session("GetPrefsFromPost")) = "TRUE") OR (UCase(Session("GetDupSearchAppPrefs")) = "TRUE")) then
		if UCase(Session("GetDupSearchAppPrefs") = "TRUE") then
				GetExactSearchPrefs dbkey, formgroup
		else
			if UCase(Session("GetPrefsFromPost") = "TRUE") then
				GetPrefsFromPost dbkey, formgroup
			else
				'take the prefs as they are. they may have been set by some other routine
			end if
		end if
	else
		GetCurrentPrefsCSDO dbkey, formgroup
	end if
	Session("OverrideDefaultPrefs") = ""
	Session("GetPrefsFromPost")=""
	Session("GetDupSearchAppPrefs")=""


'Order of CSDO71 Fill function
	'EXTRA_FRAGS_OK = PrefsS8
    'EXTRA_FRAGS_OK_IF_RXN = PrefsS9
    'HIT_ANY_CHARGE_CARBON = PrefsS3
    'HIT_ANY_CHARGE_HETERO = PrefsS5
    'FRAGS_CAN_OVERLAP = PrefsS10
    'MATCH_TET_DB = PrefsS2
    'MATCH_TET_STEREO = PrefsS1
    'RXN_HIT_RXN_CENTER = PrefsS4
    'ABSOLUTE_HITS_REL = PrefsS13
    'RELATIVE_TET_STEREO = PrefsS12
    'IDENTITY = PrefsS11

    ' overwrite the identity search pref
	if Session("currentPrefsS11") <> "" then
		Session("PrefsS11" & dbkey) = true
    End if
       
	objChemSearchOptions.Fill Session("PrefsS8" & dbkey), _							
			Session("PrefsS9" & dbkey), _							
			Session("PrefsS3" & dbkey), _	
			Session("PrefsS5" & dbkey), _	
			Session("PrefsS10" & dbkey), _						    
			Session("PrefsS2" & dbkey), _ 
			Session("PrefsS1" & dbkey), _ 
			Session("PrefsS4" & dbkey),_ 
			Session("PrefsS13" & dbkey), _
			Session("PrefsS12" & dbkey), _
			Session("PrefsS11" & dbkey)
	
	' revert the identy search preference
	if Session("currentPrefsS11") <> "" then
		Session("PrefsS11" & dbkey) = Session("currentPrefsS11")
		Session("currentPrefsS11") = ""
    End if
	
	'SIM_FULL_STRUCTURE = PrefsS7
	CSDOFillSimSearchOptions objChemSearchOptions,Session("PrefsS7" & dbkey)
end function

Sub CSDOFillADOOptions(ByRef objADOOptions, byval dbkey, byval formgroup, byVal maxhits)
	' fill the CSDO ADO options
	If Application("CSDO_DBMS_TYPE" & dbkey) = "" then
		basetable = GetBaseTable(dbkey, formgroup, "basetable")
		conn_name = GetConnGroupVal(dbkey, basetable, kADOConnection)
		on error resume next
		conn_dbms = GetADOConnVal(dbkey,conn_name,kDBMS)
		if err.number <> 0 then conn_dbms = "ACCESS"
		err.clear
		on error goto 0
		if conn_dbms = "" then conn_dbms = "ACCESS"
	
		select case conn_dbms
			case "ORACLE"
				dbms = 2
			case "ACCESS"
				dbms = 1
			case "SQLSERVER","SQL_SERVER"
				dbms = 3
			case else
				dbms = 1 'set Access as the default
		end select
		Application("CSDO_DBMS_TYPE" & dbkey) = dbms
	end if
	if Application("CSDO_DBMS_TYPE" & dbkey) = 2 then
		CSDOFillADODirectKeywordSupport objADOOptions 'add direct keyword support for oracle options True|False|None default is True
	end if
	JoinThres=800
	' 0 - Unknown
	' 1 - Access
	' 2 - Oracle
	' 3 - SQL Server 
	ScratchDir = Application("AppTempDirPath") & "\" & dbkey & "Temp\SessionDir\" & Session.SessionID & "\"
	dim dbkey_username, dbkey_pwd
	if UCase(dbkey) = "REG" then
		dbkey_username= Application("REG_USERNAME")
		dbkey_pwd = Application("REG_PWD")
	else
		dbkey_username= Application(dbkey & "_USERNAME")
		dbkey_pwd = Application(dbkey & "_PWD")
	end if
	objADOOptions.Fill CLng(Application("CSDO_DBMS_TYPE" & dbkey)), _
			, _
			, _
			JoinThres, _
			ScratchDir, _
			Session.SessionID, _
			, _
						
			dbkey_username, _
			dbkey_pwd, _
			, _
			Application("ORA_SQLLDRPATH"),_
			maxHits,_
			Application("ORA_SERVICENAME")
end Sub

function CSDOCreateCombinedSqlSelectString(ByVal strRelSql, byval dbkey, byval formgroup) 

	if UseCartridge(dbkey, formgroup) = true then
		CSDOCreateCombinedSqlSelectString=CartridgeCreateCombinedSql( strRelSql,  dbkey,  formgroup) 
	else
	' add chemical criteria to end of sql statement
		dim subsearch, exactsearch, simsearch
		dim  search, molweightsearch
		dim simpct
		dim addSqlStr
		searchtype = ""
		subSearch = Session(searchtype & "SearchData" & "SubStructure" & dbkey & formgroup)
		exactSearch = Session(searchtype & "SearchData" & "Exact" & dbkey & formgroup)
		simSearch= Session(searchtype & "SearchData" & "Similarity" & dbkey & formgroup)
		idenSearch= Session(searchtype & "SearchData" & "Identity" & dbkey & formgroup)
		formulaSearch= Session(searchtype & "SearchData" & "Formula" & dbkey & formgroup)
		molweightSearch= Session(searchtype & "SearchData" & "MolWeight" & dbkey & formgroup)
	
		simpct = Session("PrefsS6" & dbkey)	' tanimoto sim percentage
		' default sim percentage to 90 if unspecified
		if simpct = "" then simpct = "90"
	
		' if existing rel where str is empty,
		' don't need to append AND for the first
		' criteria
		dim needAND
		if strRelSql = "" then
			needAND = false
		else
			needAND = true
		end if
	
		' add molweight criteria
		if molweightsearch <> "" then
			molweightsearch_array = Split(molweightsearch, ",", -1)
			for i = 0 to UBound(molweightsearch_array)
				final_molweightsearch = CSDOPrepChemField(dbkey, formgroup, _
													molweightsearch_array(i), "MolWeight", _
													reltype, searchtype)
			
				if buildstring <> "" then
					buildString = buildString & " AND MOLWT " 
				else
					buildString = buildString & "MOLWT "
				end if
				' if < or > are not found, add an = 
				if InStr(final_molweightsearch, "<") = 0 and instr(final_molweightsearch, ">") = 0 and instr(final_molweightsearch, "=") = 0 then
					buildString = buildString & " = "
				end if
				buildString = buildString & final_molweightsearch
			next
			if needAND then
				addSqlStr = buildString & " AND "
			else
				addsqlstr = buildString
				'needAND = true
			end if
		end if 
	
		' add formula criteria
		if formulasearch <> "" then
			formulasearch_array = Split(formulasearch, ",", -1)
			for i = 0 to UBound(formulasearch_array)
			final_formulasearch = CSDOPrepChemField(dbkey, formgroup, _
											  formulasearch_array(i), "Formula", _
											  reltype, searchtype)
			
			
				if buildstring <> "" then
					buildString = buildString & " AND FORMULA =" 
				else
					buildString = buildString & "FORMULA ="
				end if
				' if < or > are not found, add an = 
				
				buildString = buildString & "'" & final_formulasearch & "'"
			next
			if needAND then
				addSqlStr = buildString & " AND "
			else
				addsqlstr = buildString
				'needAND = true
			end if
			
		end if	
	
		dim structDone 
		dim querystructpath
		structDone = false
				
		' add substructuresearch
		if subSearch <> "" then
			subSearch_array = Split(subSearch, ",", -1)
			
				for i = 0 to UBound(subSearch_array)
					
					final_querystructpath = CSDOPrepStrucSearch (dbkey, formgroup, _
													  subSearch_array(i), "SubStructure", _
													  reltype, searchtype)
					if buildstring <> "" then
						buildString = buildString &  " AND "& _
						"SUBSTRUCT(STRUCTURE," & _
						" STRUCT('" & final_querystructpath & "')) > 0"
					else
						buildString = "SUBSTRUCT(STRUCTURE," & _
						" STRUCT('" & final_querystructpath & "')) > 0"
					end if
					
				Next
	
			
			if needAND then
				addsqlstr = buildString & " AND "
			else
				addsqlstr = buildString
				'needANd = true
			end if
			structdone = true
				
		end if

		' add exactstructsearch, if sub struct not added
		if (exactsearch <> "") OR (idensearch <> "") AND not structdone then
			if idensearch <> "" then
				' DGB setting this flag to non-blank overides the identity searh
				' preference for this search 
				Session("currentPrefsS11") = "1"
				exactsearch = idensearch	
			end if	
			exactSearch_array = Split(exactsearch, ",", -1)
			for i = 0 to UBound(exactSearch_array)
				final_querystructpath = CSDOPrepStrucSearch (dbkey, formgroup, _
												  exactSearch_array(i), "Exact", _
												  reltype, searchtype)
				if buildstring <> "" then
					buildString = buildString &  " AND "& _
					"EXACTSTRUCT(STRUCTURE," & _
					" STRUCT('" & final_querystructpath & "')) > 0"
				else
					buildString = "EXACTSTRUCT(STRUCTURE," & _
					" STRUCT('" & final_querystructpath & "')) > 0"
				end if
				
			Next
			if needAND then
				addsqlstr = buildString & " AND "
			else
				addsqlstr = buildString
				'needANd = true
			end if
			structdone = true
		end if
	
		' add simsearch, if exact and sub not added
		if simsearch <> "" and not structdone then
			simsearch_array = Split(simsearch, ",", -1)
			for i = 0 to UBound(simsearch_array)
				final_querystructpath = CSDOPrepStrucSearch (dbkey, formgroup, _
												  simsearch_array(i), "Similarity", _
												  reltype, searchtype)
				if buildstring <> "" then
					buildString = buildString &  " AND "& _
					"SIMILARITY(STRUCTURE," & _
					" STRUCT('" & final_querystructpath & "')) > " & _
					simpct
				else
					buildString ="SIMILARITY(STRUCTURE," & _
					" STRUCT('" & final_querystructpath & "')) > " & _
					simpct
				end if
				
			Next
			if needAND then
				addsqlstr = buildString & " AND "
			else
				addsqlstr = buildString
				'needANd = true
			end if
			structdone = true
	
		end if

		' LogAction "combined where str = " & strrelsql & addsqlstr
		strWhere=addsqlstr & strrelsql
		Session("SearchData" & "FullStrWhere" & dbkey & formgroup) = strWhere
		CSDOCreateCombinedSQLSelectString = strWhere
	end if
	
end function

function CSDOPrepStrucSearch(ByVal dbkey, ByVal formgroup, _
						ByVal inputStr, ByVal storetype, _
						ByVal reltype, ByVal searchtype)
	If UCase(searchtype) = "NEW" then
		searchtype = ""
    End If	
    'get the fieldArray by splitting the inputStr passed from the calling subroutine
	fieldArray = split(inputStr, ",", -1)
	count = UBound(fieldArray)
	mypartialPath = Application("TempFileDirectory" & dbkey) & "Sessiondir\" & Session.sessionid & "\"
	for i = 0 to count
		inputdata = split(fieldArray(i), ".", -1)
		AddSubFormNames dbkey, formgroup, fieldArray(i) 
		if UBound(inputdata) = 2 then
			tablename = inputdata(0) & "." & inputdata(1)
			fieldname = inputdata(2) 
		else
			tablename = inputdata(0)
			fieldname = inputdata(1) 
		end if
		fieldValue = Session(searchtype & "SearchData" & fieldArray(i) & dbkey & formgroup)
		formgroupflag = GetFormGroupVal(dbkey, formgroup, kFormGroupFlag)
		If formgroupflag = "GLOBAL_SEARCH" then
			fullfieldname = GetFieldCorr(dbkey, formgroup, "Structure", fieldArray(i))
			temp = split(fullfieldname, ".", -1)
			if Ubound(temp) = 2 then
				tablename = temp(0) & "." & temp(1)
				fieldname = temp(2)
			else
				tablename = temp(0)
				fieldname = temp(1)
			end if
		End If	
		'reg system related.  You need to pass the information from the temp table into the commit table
		'the tablename and fieldname are changed relative to the GetFieldCorre results
		formgroupflag = GetFormGroupVal(dbkey, formgroup,kFormGroupFlag)
		formmode = Request.QueryString("formmode")
		If formgroupflag = "REG_COMMIT" AND formmode = "register" then
		
			CorrFieldname = Request.QueryString("field_name")
			fullfieldname = GetFieldCorr(dbkey, formgroup, "Structure", CorrFieldname)
			temp = split(fullfieldname, ".", -1)
			if UBound(temp) = 2 then
				tablename = temp(0) & "." & temp(1)
				fieldname = temp(2)

			else
				tablename = temp(0)
				fieldname = temp(1)
			end if
			'store the path and vield values for the reg system 
			Session("RegCandidateTableName" & dbkey & formgroup) = tablename
			Session("RegCandidateFieldName" & dbkey & formgroup) = fieldname
			mypath = mypartialPath & "RegCandidate" & ".cdx"
			Session("RegCandidateStructurePath" & dbkey & formgroup)=mypath
		Else
			myPath = mypartialPath & tablename & fieldname & ".cdx"
		End if
		if UseCartridge(dbkey, formgroup) = true then
		
		else
			DecodeBase64 fieldValue, mypath
			AtomsExist = CheckChemicalContent(myPath)
			if Not AtomsExist = true then
				HandleError dbkey, formgroup, "structure query contains no atoms", "", "",""
			end if
		end if
	next
	CSDOPrepStrucSearch = mypath

end function

'-------------------------------------------------------------------------------
' Purpose:  get a formula or molwt string 
'-------------------------------------------------------------------------------
function CSDOPrepChemField(ByVal dbkey, ByVal formgroup, ByVal inputStr, ByVal storetype, ByVal reltype, ByVal searchtype)
    If searchtype = "New" then
		searchtype = ""
    End If
    formgroupflag = GetFormGroupVal(dbkey, formgroup, kFormGroupFlag)
    'create the array for store the formula array for retreiving at a later time If requested by user
	fieldArray = split(inputstr, ",", -1)
	count = UBound(fieldArray, 1)
	for i = 0 to  count
		temp = split(fieldArray(i), ".", -1)
		if UBound(temp) = 2 then
			tablename = temp(0) & "." & temp(1)
			fieldname = temp(2)
		else
			tablename = temp(0)
			fieldname = temp(1)
		end if
		
		fieldValue = Session(searchtype & "SearchData" & fieldArray(i) & dbkey & formgroup)
		If formgroupflag = "GLOBAL_SEARCH" then
			fullfieldname = GetFieldCorr(dbkey, formgroup, storetype, fieldArray(i))
			temp = split(fullfieldname, ".", -1)
			if UBound(temp) = 2 then
				tablename = temp(0) & "." & temp(1)
				fieldname = temp(2)
			else
				tablename = temp(0)
				fieldname = temp(1)
			end if
		End If	
	Next
	
	If storetype = "Formula" then
		Session("formuladone" & dbkey & formgroup) = true
	End If
	If storetype = "MolWeight" then
		Session("molweightdone" & dbkey & formgroup) = true
	End If
	
	CSDOPrepChemField = fieldValue
End function

'!DGB! 04/17/01 New function to populate hitlist properties of the ChemSearchOptions object
Function CSDOFillHitlistOptions(ByRef objChemSearchOptions, SearchDomain, hitlistID, ContentsField, TranslateTable, TranlateStrucKey, TranslateRelKey)
	
	objChemSearchOptions.SearchDomain = SearchDomain
	objChemSearchOptions.hitlistID = hitlistID
	objChemSearchOptions.hitlistContentsField = ContentsField
	objChemSearchOptions.hitlistTranslateTable = TranslateTable
	objChemSearchOptions.hitlistTranslateStrucKey = ""
	objChemSearchOptions.hitlistTranslateRelKey = ""
	
	if CSDO_DEBUG = True then
		Response.Write "<br><b>hitlistID</b>" & hitlistID
		Response.Write "<br><b>ContentsField</b>" & ContentsField
		Response.Write "<br><b>TranslateTable</b>" & TranslateTable
		'Response.Write "<br><b>TranlateStrucKey</b>" & TranlateStrucKey
		'Response.Write "<br><b>TranslateRelKey</b>" & TranslateRelKey
	end if
	'After each call we want to set back to defaults so that requests that don't explicitly 
	'set this properties will do the right thing 
	' Set the session variables to their default value for next search
	Session("SearchDomain" & dbkey & formgroup)= 0
	Session("ContentsField" & dbkey & formgroup) = "" 
	Session("TranslateTable" & dbkey & formgroup) = "" 
	Session("TranlateStrucKey" & dbkey & formgroup) = ""
	Session("TranslateRelKey" & dbkey & formgroup) = ""
	
End Function


'Purpose use to create an sql string that relates the values in the csdohitlist table to molids. The sql generates
'a new list within csdo that is then send to molserver for a structure search.
Function getMolIDTranslateSqlString(dbkey, formgroup,hitListID)
	Dim transtype, moltable, basetable, baseid, strucid, sqlsyntax
	
	moltable = UCase(Trim(GetBaseTable(dbkey, formgroup, "moltable")))
	basetable = UCase(Trim(GetBaseTable(dbkey, formgroup, "basetable")))
	baseid = UCase(Trim(GetTableVal(dbkey, basetable, kPrimaryKey)))
	strucid = UCase(Trim(GetTableVal(dbkey, basetable, kStrucFieldID)))
	sqlSyntax = UCase(Trim(GetTableVal(dbkey, table_name,kSQLSyntax)))
	' Case1: basetable and moltable are the same, baseid and structure id are the same
	' no translation needed. translatetable = ""
	if (moltable = basetable) AND (baseid = strucID) then
		if NOT UCase(strucID) = "MOL_ID" then
			TransType = "TRANS_SAME_TABLE"
		else
			TransType = "NO_TRANS"
		end if
	end if
	
	' Case2:  basetable and moltable are the same, baseid and structure id are NOT the same
	if (moltable = basetable) AND NOT(baseid = strucID)then
		TransType = "TRANS_SAME_TABLE"
	end if
	' Case3:  basetable and moltable are different, baseid and structure can be same or different
	if NOT (moltable = basetable)then
		TransType = "TRANS_DIFF_TABLE"
	end if
	
	Select Case TransType
		Case "NO_TRANS"
			TranslateSQL = ""
		Case "TRANS_SAME_TABLE"
			baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
			'strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
			TranslateSQL = ""
			'TranslateSQL= "SELECT " & "MOL_ID" &_
							 '" FROM "  & basetable & "," & "CSDOHitlist" &_
							 '" WHERE CSDOHitlist.ID=" & basetable & "." & baseid 
			TranslateSQL= "SELECT " & "MOL_ID" &_
							 " FROM "  & basetable &_
							 " WHERE "
							
			TranslateSQL=AddCSDOHitListToSelect(dbkey, formgroup, TranslateSQL)
		Case "TRANS_DIFF_TABLE"
			
			maxhits=""
			strGetFields=moltable & "." &  "MOL_ID"
			Intertables = getTableVal(dbkey, moltable, kInterTables)
			TranslateSQL = BuildSelectStatement(dbkey, formgroup, moltable, Intertables,strGetFields,maxhits)
			TranslateSQL=AddCSDOHitListToSelect(dbkey, formgroup, TranslateSQL)
			'logaction(translatesql)
	End Select
	getMolIDTranslateSqlString = TranslateSQL
End Function

Sub CSDOFillMolServerMaxHitsOptions(ByRef objChemSearchOptions, molServerMaxHits)
		objChemSearchOptions.molServer_MaxHits = molServerMaxHits
End Sub

Sub CSDOFillSimSearchOptions(ByRef objChemSearchOptions, SimSearchFullStructure)
		objChemSearchOptions.SimSearchFullStructure = SimSearchFullStructure
End Sub

Sub CSDOFillADODirectKeywordSupport(ByRef objADOOptions)
	'determine directKeywordSupport
	
	Select Case UCase(Application("DIRECT_KEYWORD_SUPPORT"))
		Case "FALSE"
			directKeywordSupport = 0 ' this means direct=false 
		Case "TRUE"
			directKeywordSupport = 1  'this means use direct=true which is the default
		Case "NONE"
			directKeywordSupport = 2 'this means direct keyword is not used at all
		Case Else
			directKeywordSupport = 1 ' this means use direct=true which is the default
	end Select
		objADOOptions.DirectKeywordType = directKeywordSupport
End Sub

'-------------------------------------------------------------------------------
' Purpose:  GetCurrentPrefsCSDO - sets the current user preferences when performing a search
			'Gathered from cookies set by prefs.asp dialog box
'-------------------------------------------------------------------------------
Sub GetCurrentPrefsCSDO(ByVal dbkey, ByVal formgroup)
	if Session("no_gui" & dbkey) = true  and Application("NO_GUI_SEARCH_PREF_DEFAULTS") <> "" then
		SearchPrefs = Application("NO_GUI_SEARCH_PREF_DEFAULTS")
	else
		If Not Session("SearchPrefs" & dbkey) <> "" then
			Session("SearchPrefs" & dbkey) = Application("SEARCH_PREF_DEFAULTS")
			'DGB CSBR-65126
			SearchPrefs=Session("SearchPrefs" & dbkey)  
		else
			SearchPrefs=Session("SearchPrefs" & dbkey)
		end if
	end if

	Dim theString
	Dim prefs_array
	Dim i
	theString = SearchPrefs
	prefs_array = Split(theString, ",", -1)
	on error resume next
	for i = 0 to UBound(prefs_array)
		temp_array= split(prefs_array(i), ":", -1)
		if Not temp_array(0) = "S6" then 's6 is a not a boolean is is the similarity percent
			if temp_array(1) = "false" or temp_array(1) = false or temp_array(1) = "0" then
				theSetting = "0"
			else
				theSetting = "1"
			end if
		else
			theSetting = temp_array(1)
		end if
		Select Case(temp_array(0))
			
			Case "S1"
				Session("PrefsS1" & dbkey) = theSetting
				
			Case "S2"
				Session("PrefsS2" & dbkey) = theSetting
			Case "S3"
				Session("PrefsS3" & dbkey) = theSetting
			Case "S4"
				Session("PrefsS4" & dbkey) = theSetting
			Case "S5"
				Session("PrefsS5" & dbkey) = theSetting
			Case "S6"
				Session("PrefsS6" & dbkey) = theSetting
			Case "S7"
				Session("PrefsS7" & dbkey) = theSetting
			Case "S8"
				Session("PrefsS8" & dbkey) = theSetting
			Case "S9"
				Session("PrefsS9" & dbkey) = theSetting
			Case "S10"
				Session("PrefsS10" & dbkey) = theSetting
			Case "S11"
				Session("PrefsS11" & dbkey) = theSetting
			Case "S12"
				Session("PrefsS12" & dbkey) = theSetting
			Case "S13"
				Session("PrefsS13" & dbkey) = theSetting
			Case "S14"
				Session("PrefsS14" & dbkey) = theSetting
			Case "S15"
				Session("PrefsS15" & dbkey) = theSetting
			Case "S16"
				Session("PrefsS16" & dbkey) = theSetting			
		End Select
		
	next
	
	
End Sub



Sub GetExactSearchPrefs(dbkey, formgroup)

    'MATCH_TET_STEREO =  PrefsS1
	Session("PrefsS1" & dbkey )=Application("MATCH_TET_STEREO")
		if  Not Session("PrefsS2" & dbkey ) <> "" then Session("PrefsS2" & dbkey ) = "1"
		
	'MATCH_TET_DB =  PrefsS2
	Session("PrefsS2" & dbkey )=Application("MATCH_DB_STEREO")
		if Not Session("PrefsS2" & dbkey )  <> "" then Session("PrefsS2" & dbkey ) = "1"
		
	'HIT_ANY_CHARGE_CARBON = PrefsS3
	Session("PrefsS3" & dbkey )=Application("HIT_ANY_CHARGE_CARBON")
		if Not Session("PrefsS3" & dbkey )  <> "" then Session("PrefsS3" & dbkey ) = "1"
		
	'RXN_HIT_RXN_CENTER =  PrefsS4
	Session("PrefsS4" & dbkey )=Application("RXN_HIT_RXN_CENTER")
		if Not Session("PrefsS4" & dbkey )   <> "" then Session("PrefsS4" & dbkey ) = "1"
		
	'HIT_ANY_CHARGE_HETERO =  PrefsS5
	Session("PrefsS5" & dbkey ) =Application("HIT_ANY_CHARGE_HETERO")
		if Not Session("PrefsS5" & dbkey )   <> "" then Session("PrefsS5" & dbkey ) = "1"
	
	'SIM_SEARCH_THRESHOLD = PrefsS6 'set similarity prefs- they are not relevant to exact dup search but should be set anyway
	Session("PrefsS6" & dbkey ) = "90" 
	
	'FULL_STRUCTURE_SIMILARITY = PrefsS7 'set similarity prefs- they are not relevant to exact dup search but should be set anyway
	Session("PrefsS7" & dbkey ) = "1" 'FullStructure Similarity
	
	'EXTRA_FRAGS_OK = PrefsS8
	Session("PrefsS8" & dbkey ) =Application("EXTRA_FRAGS_OK")
		if Not Session("PrefsS8" & dbkey )  <> "" then Session("PrefsS8" & dbkey ) = "0"
	
	'EXTRA_FRAGS_OK_IF_RXN = PrefsS9
	Session("PrefsS9" & dbkey ) =Application("EXTRA_FRAGS_OK_IF_RXN")
		if Not Session("PrefsS9" & dbkey )  <> "" then Session("PrefsS9" & dbkey ) = "0"
		
	'FRAGS_CAN_OVERLAP = PrefsS10
	Session("PrefsS10" & dbkey ) =Application("FRAGS_CAN_OVERLAP")
		if Not Session("PrefsS10" & dbkey )  <> "" then Session("PrefsS10" & dbkey ) = "0"
	
	'IDENTITY = PrefsS11
	Session("PrefsS11" & dbkey ) =Application("IDENTITY")
		if Not Session("PrefsS11" & dbkey )   <> "" then Session("PrefsS11" & dbkey ) = "0"
		
	'RELATIVE_TET_STEREO = PrefsS12
	Session("PrefsS12" & dbkey ) =Application("RELATIVE_TET_STEREO")
		if Not Session("PrefsS12" & dbkey )  <> "" then Session("PrefsS12" & dbkey ) = "0"
		
	 'ABSOLUTE_HITS_REL = PrefsS13
	Session("PrefsS13" & dbkey ) =Application("ABSOLUTE_HITS_REL")
		if Not Session("PrefsS13" & dbkey )  <> "" then Session("PrefsS13" & dbkey ) = "0"

	 'TAUTOMER = PrefsS14
	Session("PrefsS14" & dbkey ) =Application("TAUTOMER")
		if Not Session("PrefsS14" & dbkey )  <> "" then Session("PrefsS14" & dbkey ) = "0"
	 'LOOSEDELOCALIZATION = PrefsS15
	Session("PrefsS15" & dbkey ) =Application("LOOSEDELOCALIZATION")
		if Not Session("PrefsS15" & dbkey )  <> "" then Session("PrefsS15" & dbkey ) = "0"
	'IGNOREIMPLICITH = PrefsS16
	Session("PrefsS16" & dbkey ) =Application("IGNOREIMPLICITH")
		if Not Session("PrefsS16" & dbkey )  <> "" then Session("PrefsS16" & dbkey ) = "0"

End Sub

Sub getPrefsFromPost(dbkey, formgroup)
	 'MATCH_TET_STEREO =  PrefsS1
	Session("PrefsS1" & dbkey )=Request("MATCH_TET_STEREO")
		if Not ((Session("PrefsS1" & dbkey ) = "0") OR (Session("PrefsS1" & dbkey ) = "1")) then 
			Session("PrefsS1" & dbkey ) = "1"
		end if
		
	'MATCH_TET_DB =  PrefsS2
	Session("PrefsS2" & dbkey )=Request("MATCH_DB_STEREO")
		if Not ((Session("PrefsS2" & dbkey ) = "0") OR (Session("PrefsS2" & dbkey ) = "1")) then 
			Session("PrefsS2" & dbkey ) = "1"
		end if
		
	'HIT_ANY_CHARGE_CARBON = PrefsS3
	Session("PrefsS3" & dbkey )=Request("HIT_ANY_CHARGE_CARBON")
		if Not ((Session("PrefsS3" & dbkey ) = "0") OR (Session("PrefsS3" & dbkey ) = "1")) then 
			Session("PrefsS3" & dbkey ) = "1"
		end if
		
	'RXN_HIT_RXN_CENTER =  PrefsS4
	Session("PrefsS4" & dbkey )=Request("RXN_HIT_RXN_CENTER")
		if Not ((Session("PrefsS4" & dbkey ) = "0") OR (Session("PrefsS4" & dbkey ) = "1")) then 
			Session("PrefsS4" & dbkey ) = "1"
		end if
		
	'HIT_ANY_CHARGE_HETERO =  PrefsS5
	Session("PrefsS5" & dbkey ) =Request("HIT_ANY_CHARGE_HETERO")
		if Not ((Session("PrefsS5" & dbkey ) = "0") OR (Session("PrefsS5" & dbkey ) = "1")) then 
			Session("PrefsS5" & dbkey ) = "1"
		end if
	
	'SIM_SEARCH_THRESHOLD = PrefsS6 'set similarity prefs- they are not relevant to exact dup search but should be set anyway
	Session("PrefsS6" & dbkey ) =Request("SIM_SEARCH_THRESHOLD")
		if  Session("PrefsS6" & dbkey )  = "" then Session("PrefsS6" & dbkey ) = "90"

	'FULL_STRUCTURE_SIMILARITY = PrefsS7 'set similarity prefs- they are not relevant to exact dup search but should be set anyway
	Session("PrefsS7" & dbkey ) =Request("FULL_STRUCTURE_SIMILARITY")
		if Not ((Session("PrefsS7" & dbkey ) = "0") OR (Session("PrefsS7" & dbkey ) = "1")) then 
			Session("PrefsS7" & dbkey ) = "1"
		end if

	
	'EXTRA_FRAGS_OK = PrefsS8
	Session("PrefsS8" & dbkey ) =Request("EXTRA_FRAGS_OK")
		if Not ((Session("PrefsS8" & dbkey ) = "0") OR (Session("PrefsS8" & dbkey ) = "1")) then 
			Session("PrefsS8" & dbkey ) = "0"
		end if
	
	'EXTRA_FRAGS_OK_IF_RXN = PrefsS9
	Session("PrefsS9" & dbkey ) =Request("EXTRA_FRAGS_OK_IF_RXN")
		if Not ((Session("PrefsS9" & dbkey ) = "0") OR (Session("PrefsS9" & dbkey ) = "1")) then 
			Session("PrefsS9" & dbkey ) = "1"
		end if
		
	'FRAGS_CAN_OVERLAP = PrefsS10
	Session("PrefsS10" & dbkey ) =Request("FRAGS_CAN_OVERLAP")
		if Not ((Session("PrefsS10" & dbkey ) = "0") OR (Session("PrefsS10" & dbkey ) = "1")) then 
			Session("PrefsS10" & dbkey ) = "1"
		end if
		
	'IDENTITY = PrefsS11
	Session("PrefsS11" & dbkey ) =Request("IDENTITY")
		if Not ((Session("PrefsS11" & dbkey ) = "0") OR (Session("PrefsS11" & dbkey ) = "1")) then 
			Session("PrefsS11" & dbkey ) = "0"
		end if
		
	'RELATIVE_TET_STEREO = PrefsS12
	Session("PrefsS12" & dbkey ) =Request("RELATIVE_TET_STEREO")
		if Not ((Session("PrefsS12" & dbkey ) = "0") OR (Session("PrefsS12" & dbkey ) = "1")) then 
			Session("PrefsS12" & dbkey ) = "0"
		end if
		
	 'ABSOLUTE_HITS_REL = PrefsS13
	Session("PrefsS13" & dbkey ) =Request("ABSOLUTE_HITS_REL")
		if Not ((Session("PrefsS13" & dbkey ) = "0") OR (Session("PrefsS13" & dbkey ) = "1")) then 
			Session("PrefsS13" & dbkey ) = "0"
		end if
    
	 'TAUTOMER = PrefsS14
	Session("PrefsS14" & dbkey ) =Request("TAUTOMER")
		if Not ((Session("PrefsS14" & dbkey ) = "0") OR (Session("PrefsS14" & dbkey ) = "1")) then 
			Session("PrefsS14" & dbkey ) = "0"
		end if
	' LOOSEDELOCALIZATION = PrefsS15	
	Session("PrefsS15" & dbkey ) =Request("LOOSEDELOCALIZATION")
		if Not ((Session("PrefsS15" & dbkey ) = "0") OR (Session("PrefsS15" & dbkey ) = "1")) then 
			Session("PrefsS15" & dbkey ) = "0"
		end if
	' IGNOREIMPLICITH = PrefsS16	
	Session("PrefsS16" & dbkey ) =Request("IGNOREIMPLICITH")
		if Not ((Session("PrefsS16" & dbkey ) = "0") OR (Session("PrefsS16" & dbkey ) = "1")) then 
			Session("PrefsS16" & dbkey ) = "0"
		end if
End Sub

Sub LogSearchPrefs(dbkey, sql)
	LogAction("SQL" & sql)
	LogAction("MOLSERVER_VERSION" & Application("MOLSERVER_VERSION"))
	LogAction("MATCH_TET_STEREO" & Session("PrefsS1" & dbkey ))
	LogAction("MATCH_TET_DB" & Session("PrefsS2" & dbkey ))
	LogAction("HIT_ANY_CHARGE_CARBON" & Session("PrefsS3" & dbkey ))
	LogAction("RXN_HIT_RXN_CENTER" & Session("PrefsS4" & dbkey ))
	LogAction("HIT_ANY_CHARGE_HETERO" & Session("PrefsS5" & dbkey ))
	LogAction("SIM_THRESHOLD" & Session("PrefsS6" & dbkey ))
	LogAction("SIM_FULL_STRUCTURE" & Session("PrefsS7" & dbkey ))
	LogAction("EXTRA_FRAGS_OK" & Session("PrefsS8" & dbkey ))
	LogAction("EXTRA_FRAGS_OK_IF_RXN" & Session("PrefsS9" & dbkey ))
	LogAction("FRAGS_CAN_OVERLAP" & Session("PrefsS10" & dbkey ))
	'if Application("MOLSERVER_VERSION") = "7.1" then
		LogAction("IDENTITY" & Session("PrefsS11" & dbkey ))
		LogAction("RELATIVE_TET_STEREO" & Session("PrefsS12" & dbkey ))
		LogAction("ABSOLUTE_HITS_REL" & Session("PrefsS13" & dbkey ))
	'end if
	LogAction("TAUTOMER" & Session("PrefsS14" & dbkey ))
	LogAction("LOOSEDELOCALIZATION" & Session("PrefsS15" & dbkey ))
	LogAction("IGNOREIMPLICITH" & Session("PrefsS16" & dbkey ))
End Sub
		
Function CheckChemicalContent(myPath)
	if Not isObject(Application("Molserver_Molecule")) then
		Application.Lock
			Set Application("Molserver_Molecule") = Server.CreateObject("MolServer" & Application("MOLSERVER_VERSION") & ".Molecule")
		Application.UnLock
	end if
	
	Application("Molserver_Molecule").Read(myPath)
	Set Atoms = Application("Molserver_Molecule").Atoms
	If Atoms.Count > 0 then
		CheckChemicalContent = true
		
	else
		CheckChemicalContent = false
	end if
	Set Atoms = Nothing
End Function


%>




