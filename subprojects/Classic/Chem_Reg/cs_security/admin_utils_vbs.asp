<%'Copyright 1998-2001 CambridgeSoft Corporation All Rights Reserved
'DO NOT EDIT THIS FILE%>
<!--#INCLUDE FILE = "../source/app_privileges.asp"-->

<%

'******************************************************************
'the following code is for Oracle Admin
'******************************************************************
Function GetRoleList(dbkey, formgroup)

	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql = getPrivTableRoleSQL(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
	
	on error resume next
	Set RS = DataConn.Execute(sql)
		
	theErrors = CheckErrors(DataConn)	
		if theErrors = "" then			
			theList = GetLookupList(RS, "ROLE_NAME", "ROLE_NAME")
		else
			theList = ""
		end if
		CloseRS(RS)
		CloseConn(Dataconn)
		GetRoleList = theList
	
End Function

Function GetPeopleList(dbkey, formgroup)
	
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql = "Select * From People"
	on error resume next
	Set RS = DataConn.Execute(sql)
	if not (RS.BOF and RS.EOF) then
		RS.MoveFirst
		Do While Not RS.EOF
			theErrors = CheckErrors(DataConn)	
			if theErrors = "" then			
				theList = GetLookupList(RS, "Person_ID", "Last_Name")
			else
				theList = ""
			end if
		RS.MoveNext
		Loop
	end if
	CloseRS(RS)
	CloseConn(Dataconn)
	GetPeopleList = theList
End Function

Function GetPeoplePersonIDList(dbkey, formgroup)

	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql = "Select * From People"
	on error resume next
	Set RS = DataConn.Execute(sql)
	if not (RS.BOF and RS.EOF) then
		RS.MoveFirst
		Do While Not RS.EOF
			
			theErrors = CheckErrors(DataConn)	
			if theErrors = "" then			
				if theList <> "" then 
					theList = theList & "," & RS("PERSON_ID") 
				else
					theList =  RS("PERSON_ID")
				end if
			else
				theList = ""
			end if
			RS.MoveNext
		loop
	end if
	CloseRS(RS)
	CloseConn(DataConn)
GetPeoplePersonIDList = theList
	
End Function


Function GetPeopleUserIDList(dbkey, formgroup)
Set DataConn = GetConnection(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
	sql = "Select * From People"
	on error resume next
	Set RS = DataConn.Execute(sql)
	if not (RS.BOF and RS.EOF) then
		RS.MoveFirst
		Do While Not RS.EOF
			theErrors= CheckErrors(DataConn)	
			if theErrors = "" then			
				if theList <> "" then 
					theList = theList & "," & "'" & RS("USER_ID") & "'"
				else
					theList =  "'" & RS("USER_ID")& "'"
				end if
			else
				theList = ""
			end if
		RS.MoveNext
	loop
	end if
	CloseRS(RS)
	CloseConn(DataConn)
	GetPeopleUserIDList = theList
End Function

Function GetTableSpace(dbkey, formgroup, priv_table)

	Set DataConn = GetConnection(dbkey, formgroup, priv_table)	
	
	sql = "Select * From privilege_tables where Upper(privilege_table_name)=" & "'" & UCase(priv_table) & "'"
	
	on error resume next
	Set RS = DataConn.Execute(sql)
	if not (RS.BOF and RS.EOF) then
		CheckErrors(DataConn)	
		if theErrors = "" then			
			thevalue =  RS("TABLE_SPACE")
		else
			Response.Write theErrors
		end if
		
	end if
	CloseRS(RS)
	CloseConn(DataConn)
	GetTableSpace = thevalue
End Function

Function GetRoleListSingle(byRef RS, byval field1)
	on error resume next
	if not (rs.bof and rs.eof) then
		rs.MoveFirst
			Do While Not rs.EOF
				 if theList <> "" then
				 	theList = theList & "," & rs.fields(field1)
					else
					 theList = rs.fields(field1) 
				 end if
				rs.MoveNext
			loop
	end if
	CloseRS(RS)
	GetRoleListSingle= theList
End Function


Function GetSingleList(ByRef RS, ByVal field1)
	on error resume next
	if not (rs.bof and rs.eof) then
		rs.MoveFirst
			Do While Not rs.EOF
				 if theList <> "" then
				 	theList = theList & "," & rs.fields(field1)
					else
					 theList = rs.fields(field1) 
				 end if
				rs.MoveNext
			loop
	end if
	GetSingleList= theList
End Function 



Function CheckErrors(ByRef DataConn)
	on error resume next
	if DataConn.Errors.Count > 0 then
		for i = 0 to DataConn.Errors.Count 
			if the_errors <> "" then
				the_errors=  the_errors & "<br>" & DataConn.Errors.Item(i)
			else
				the_errors=  DataConn.Errors.Item(i)
			end if
		next
		GetErrors = the_errors
	else
		GetErrors = ""
	end if
End FUnction



Function getUsersListSQL(ByRef DataConn, dbkey, formgroup, priv_table)
		privTableRolesSQL = getPrivTableRoleSQLUpper(dbkey, formgroup, priv_table)
		'sql = "SELECT DISTINCT grantee FROM dba_role_privs " &_
		'	" WHERE Upper(dba_role_privs.granted_role) IN (" & privTableRolesSQL & ")" &_
		'	" AND Upper(grantee) IN (SELECT Upper(people.user_ID) FROM people)"
		
		'SYAN removed Upper on 10/1/2004 since it is causing problems. And the data in the tables are upper case anyway.
		sql = "SELECT DISTINCT grantee FROM dba_role_privs " &_
			" WHERE dba_role_privs.granted_role IN (" & privTableRolesSQL & ")" &_
			" AND grantee IN (SELECT people.user_ID FROM people)"
		
	getUsersListSQL = sql
end function

Function getUserHasRole(ByRef DataConn, dbkey, formgroup, role_name)
		bUserHasRole = false
		sql = "Select Distinct grantee from dba_role_privs " &_
			" WHERE upper(dba_role_privs.granted_role) = '" & UCase(role_name)& "'"
		Set myRS = DataConn.Execute(sql)
		if NOT (myRS.EOF and myRS.BOF) then
			bUserHasRole = true
			CloseRS(myRS)
		end if
	getUserHasRole = bUserHasRole
	
end function


Function getPrivTableRoleSQL(dbkey, formgroup, priv_table)
	If CBool(Application("ENABLE_SHOW_ALL_CS_ROLE")) = true and NOT UCase(CStr(Request("existingUser"))) = "TRUE" then
		sql= "SELECT role_name from security_roles"
	else
		sql= "SELECT role_name from security_roles,privilege_tables," & priv_table &_
		" WHERE security_roles.privilege_table_int_id=privilege_tables.privilege_table_id " &_
		" AND " & priv_table & ".role_internal_id=security_roles.Role_ID"
	end if
	getPrivTableRoleSQL = sql
End Function

Function getPrivTableRoleSQLUPPER(dbkey, formgroup, priv_table)
	If CBool(Application("ENABLE_SHOW_ALL_CS_ROLE")) = true then
		sql= "SELECT Upper(role_name) from security_roles"
	else
		sql= "SELECT Upper(role_name) from security_roles,privilege_tables," & priv_table &_
		" WHERE security_roles.privilege_table_int_id=privilege_tables.privilege_table_id " &_
		" AND " & priv_table & ".role_internal_id=security_roles.Role_ID"
	end if
	getPrivTableRoleSQLUpper = sql
End Function

Function GetApplicationRolesSql(dbkey,formgroup, Priv_Table)
	roles_list_sql = "Select role_ID from SECURITY_ROLES, PRIVILEGE_TABLES where Upper(privilege_table_name)=" & "'" & UCase(priv_Table) & "'" & " AND privilege_tables.privilege_table_ID = security_roles.privilege_table_int_ID"
	GetApplicationRolesSql=roles_list_sql
End Function

Function GetAllRolesSql(dbkey, formgroup)
	roles_list_sql = "Select role_ID from SECURITY_ROLES"
	GetAllRolesSql = roles_list_sql
End Function

Function GetRolesListSQL(dbkey,formgroup, Priv_Table)
	roles_list_sql = GetApplicationRolesSql(dbkey,formgroup, Priv_Table)
	GetRolesListSQL = roles_list_sql
End Function

Function getSingleUserSQL(dbkey, formgroup, priv_table, UserName)
	privTableRolesSQL = getPrivTableRoleSQLUpper(dbkey, formgroup, priv_table)
	sql = "Select granted_role from dba_role_privs " &_
		" WHERE Upper(grantee) =" & "'" & UCase(username) & "'" &_
		" AND  Upper(dba_role_privs.granted_role) IN (" & privTableRolesSQL & ")"
	getSingleUserSQL = sql
end function


Function getSingleUserALL_ROLES_SQL(dbkey, formgroup, UserName)
	all_cs_roles_sql ="Select Upper(Role_name) from cs_security.security_roles"
	sql = "Select granted_role from dba_role_privs " &_
		" WHERE Upper(grantee) =" & "'" & UCase(username) & "'" &_
		" AND  Upper(dba_role_privs.granted_role) IN (" & all_cs_roles_sql & ")"
	getSingleUserALL_ROLES_SQL = sql
	
end function

Function ListAllUsers(dbkey, formgroup, priv_table)
	
	on error resume next
	Set DataConn = GetConnection(dbkey, formgroup, priv_table)	
	sql=getUsersListSQL(DataConn, dbkey, formgroup, priv_table)
	Set RS =DataConn.Execute(sql)
	isOK = checkErrors(DataConn)
	if isOK <> "" then
		Response.Write isOK
		theUserList = ""
	else
		theUserList = GetLookupList(RS,"username", "username")
	end if
	ListAllUsers = theUserList
	
	CloseConn(DataConn)
	CloseRS(RS)
End Function


Function ListAllUnBoundUsers(dbkey, formgroup, priv_table)
	'on error resume next
	Set DataConn = GetConnection(dbkey, formgroup, "people")	
	thePeopleUserIDList = GetPeopleUserIDList(dbkey, formgroup)
	theTableSpace = GetTableSpace(dbkey, formgroup, priv_table)
	sql = "Select distinct username from dba_users, people where Upper(default_tablespace) ='"  & UCase(theTableSpace) & "' AND Upper(username) not IN (" & UCase(thePeopleUserIDList) & ")"
	Set RS =DataConn.Execute(sql)
	isOK = checkErrors(DataConn)	
	
	if isOK <> "" then
		Response.Write isOK
		theUserList = ""
	else
		theUserList = GetLookupList(RS,"username", "username")
	end if
	
	CloseConn(DataConn)
	CloseRS(RS)
	ListAllUnBoundUsers = theUserList
End Function


Function ListAllUsers22(dbkey, formgroup)
	'on error resume next
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")	
	tablespace = GetTableSpace(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
	sql= "Select username,default_tablespace from dba_users where Upper(default_tablespace) ='" & tablespace & "'"
	Set RS =DataConn.Execute(sql)
	isOK = checkErrors(DataConn)
	if isOK <> "" then
		Response.Write isOK
		theList = ""
	else
		theList = GetLookupList(RS,"username", "username")
	end if
	ListAllUsers = theList
	CloseConn(DataConn)
	CloseRS(RS)
End Function

Function GetUserPassword(dbkey,formgroup,username)
	storeUsername = Session("UserName" & dbkey)
	storePassword = Session("UserID" & dbkey)
	'set temporary privs so password can be updated by any user
	Session("UserName" & dbkey)=Application("DBA_USERNAME")
	Session("UserID" & dbkey)=Application("DBA_PWD")
	on error resume next
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql= "Select * from dba_users where Upper(username) =" & "'" & UCase(username) & "'"
	Set RS=DataConn.Execute(sql)
	isOK = checkErrors(DataConn)
	on error goto 0
	if isOK = "" then
		if not(RS.BOF and RS.EOF) then
			'RS.movefirst
			password = RS("password")
			CloseRS(RS)
			CloseConn(DataConn)
			
		else
			password = ""
			CloseConn(DataConn)

		end if
	else
		Response.Write isOK
		password = ""
		CloseRS(RS)
		CloseConn(DataConn)
	end if
	
	Session("UserName" & dbkey)=storeUsername
	Session("UserID" & dbkey)=storePassword
	GetUserPassword = password
End Function


Function GetUserRoles(dbkey,formgroup,username)
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	if CBool(Application("ENABLE_SHOW_ALL_CS_ROLE")) = true then
		sql= getSingleUserALL_ROLES_SQL(dbkey, formgroup,username)
	else
		sql = getSingleUserSQL(dbkey, formgroup, Application("PRIV_TABLE_NAME"), username)
	end if
	Set RS =DataConn.Execute(sql)
	isOK = checkErrors(DataConn)
	if isOK = "" then
		roleslist = GetRoleListSingle(RS, "GRANTED_ROLE")
	
	else
		Response.Write isOK
		roleslist = ""
	end if
	CloseConn(DataConn)
	CloseRS(RS)
	GetUserRoles= roleslist 
End Function


Function update_user(user_name)
	'on error resume next
	change_roles= Request.querystring("change_roles")
	change_password=Request.QueryString("change_password")
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")

	if change_roles = "true" then
		
		orig_roles= Request("original_roles_hidden")
		if orig_roles <> "" then
			thearray = Split(orig_roles, ",", -1)
			for i = 0 to UBound(thearray)
				sql = "REVOKE " & QuotedString(UCase(thearray(i)))  & " FROM " & QuotedString(UCase(user_name)) 
				DataConn.Execute(sql)
				isOk = CheckErrors(DataConn)
				sql = " ALTER USER " & QuotedString(UCase(user_name))  & " DEFAULT ROLE NONE"
				DataConn.Execute sql
				DataConn.Execute "commit"
				isOk = CheckErrors(DataConn)
			next
		end if
		
		new_roles=Request("current_roles_hidden")
		
		thearray = Split(new_roles, ",", -1)
		
		for i = 0 to UBound(thearray)
			sql = "GRANT " & QuotedString(UCase(thearray(i))) & ""  & " TO " & QuotedString(UCase(user_name))
			DataConn.Execute(sql)
			sql =  "ALTER USER " & QuotedString(UCase(user_name)) & " DEFAULT ROLE ALL"
			DataConn.Execute sql
			DataConn.Execute "commit"
			isOk = CheckErrors(DataConn)
		next
	end if
	
	if change_password = "true" then
		new_password = Request("password")
		sql = "ALTER USER " & QuotedString(user_name) & " IDENTIFIED BY " & QuotedString(new_password)
		DataConn.Execute sql
		DataConn.Execute "commit"
		isOk = CheckErrors(DataConn)
	end if
	dba_users_sql_string = getUsersListSQL("", dbkey, formgroup, Application("PRIV_TABLE_NAME"))
	Set RS = DataConn.Execute(dba_users_sql_string)
	if not (RS.BOF and RS.EOF) then
		Session("Base_RS" & dbkey & formgroup) =RS.GetRows(-1)
	end if
	CloseRS(RS)	

	update_user = isOK
End Function

Function update_user_pwd(user_name)
	change_password=Request.QueryString("change_password")
	storeUsername = Session("UserName" & dbkey)
	storePassword = Session("UserID" & dbkey)
	'set temporary privs so password can be updated by any user
	Session("UserName" & dbkey)=Application("DBA_USERNAME")
	Session("UserID" & dbkey)=Application("DBA_PWD")
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	if change_password = "true" then
		new_password = Request("password")
		sql = "ALTER USER " & QuotedString(user_name) & " IDENTIFIED BY " & QuotedString(new_password)
		DataConn.Execute sql
		DataConn.Execute "commit"
		isOk = CheckErrors(DataConn)
	end if
	if not isOK <> "" then
		Session("UserName" & dbkey)=storeUsername
		Session("UserID" & dbkey)=new_password
	else
		Session("UserName" & dbkey)=storeUsername
		Session("UserID" & dbkey)=storePassword
	end if
	update_user_pwd = isOK
End Function


Function delete_user(user_name)
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql = "DROP USER " & QuotedString(UCase(user_name)) & " CASCADE"
	on error goto 0
	DataConn.Execute sql
	DataConn.Execute "commit"
	
	isOk = CheckErrors(DataConn)
	delete_user = isOk
End Function


Function GetAvailRoleList(dbkey, formgroup, current_roles)
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	on error resume next
	if current_roles <> "" then
		if CBool(Application("ENABLE_SHOW_ALL_CS_ROLE")) = true then
			if inStr(current_roles, ",")> 0 then
				current_roles = replace(current_roles,",", "','")
				sql = "Select role_name From security_roles " &_
				"WHERE NOT Upper(ROLE_NAME) IN ('" & UCase(current_roles) & "')"
			Else
				sql = "Select role_name From security_roles " &_
				"WHERE NOT Upper(ROLE_NAME)='" &  UCase(current_roles) & "'"

			end if
		else
			if inStr(current_roles, ",")> 0 then
				current_roles = replace(current_roles,",", "','")
				sql = "Select role_name from SECURITY_ROLES, PRIVILEGE_TABLES " &_
				"WHERE Upper(privilege_table_name)=" & "'" & UCase(Application("PRIV_TABLE_NAME"))  & "'" &_
			    " AND privilege_tables.privilege_table_ID = security_roles.privilege_table_int_ID" &_
			    " AND  NOT Upper(ROLE_NAME) IN ('" & UCase(current_roles) & "'" & ")"
				
			Else
				sql = "Select role_name from SECURITY_ROLES, PRIVILEGE_TABLES " &_
				"WHERE Upper(privilege_table_name)=" & "'" & UCase(Application("PRIV_TABLE_NAME")) & "'" &_
				" AND privilege_tables.privilege_table_ID = security_roles.privilege_table_int_ID" &_
				" AND NOT Upper(ROLE_NAME)='" &  UCase(current_roles) & "'"

			end if
		end if
	else
		sql = "Select role_name From security_roles"
	end if
	Set RS = DataConn.Execute(sql)
		theErrors = CheckErrors(DataConn)	
		if theErrors = "" then			
			theList = GetRoleListSingle(RS, "ROLE_NAME")
		else
			theList = ""
		end if
		GetAvailRoleList = theList
End Function

Function deListStr(current_roles)
	thearray = split(current_roles, ",", -1)
	for i = 0 to UBound(thearray)
		thearray2 = Split(thearray(i), ":", -1)
		if theList <> "" then
			theList = theList & "," & thearray2(1)
		else
			theList = thearray2(1)
		end if
	next
	
	deListStr= theList

End Function

Function UserAlreadyExists(dbkey, formgroup, user_name)
	bUserFound = False
	privTable = Application("Priv_Table_Name")
	users_string = ListAllUsers(dbkey, formgroup, privTable)
	users_array = split(users_string, ",", -1)
		for i = 0 to UBound(users_array)
			temp = split(users_array(i), ":", -1)
			user_test = temp(1)
			if UCase(user_test) = UCase(user_name) then
				bUserFound = True
			end if
		Next
	 UserAlreadyExists = bUserFound
End Function

Function RoleMatchesUser(dbkey, formgroup, user_name)
	bRoleFound = False
	roles_string = GetRoleList(dbkey, formgroup)
	roles_array = split(roles_string, ",", -1)
		for i = 0 to UBound(roles_array)
			temp = split(roles_array(i), ":", -1)
			role_test = temp(1)
			if UCase(role_test) = UCase(user_name) then
				bRoleFound = True
			end if
		Next
	 RoleMatchesUser = bRoleFound

End Function

Function AddUser(dbkey, formgroup)
	
	user_name = UCase(request("user_name"))
	user_password = request("password_confirmed")
	
	'SYAN added on 2/6/2002 to add an oracle existing user
	if request("userExisting") = "true" then ' to add an oracle existing user
			if OracleUserExists(dbkey, formgroup,user_name) = True then
				if Not RoleMatchesUser(dbkey, formgroup,user_name) = True then
					role_to_grant = request("roles_hidden")
					Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
					sql = " GRANT " & QuotedString(role_to_grant) & " TO "  & QuotedString(user_name) 
					DataConn.Execute sql
					sql = "ALTER USER " & QuotedString(user_name) & " DEFAULT ROLE ALL"
					DataConn.Execute(sql)
					DataConn.Execute "commit"
					'now add the user to the peoplese table
					sql = "Select person_id FROM PEOPLE where upper(user_id)='" & UCase(user_name) & "'"
					Set RS = DataConn.Execute(sql)
					if (rs.bof and rs.eof) then
						sql = "INSERT INTO people(user_code,user_id,supervisor_internal_id,last_name,site_id,active)values('" & user_name & "','" & user_name & "','1','" & user_name & "','1','1')"
						DataConn.Execute sql
						DataConn.Execute "commit"
						sql = "Select person_id,supervisor_internal_id from people where upper(user_id)='" & UCASE(user_name) & "'"
						Set RS = DataConn.Execute(sql)
						if not (RS.BOF and RS.EOF) then
							person_id = RS("person_id")
						end if
						CloseRS(RS)
						sql = "Update people set supervisor_internal_id = " & person_id & " where person_id=" & person_id
						DataConn.Execute sql
						DataConn.Execute "commit"
					end if

					dba_users_sql_string = getUsersListSQL("", dbkey, formgroup, Application("PRIV_TABLE_NAME"))
				
					Set RS = DataConn.Execute(dba_users_sql_string)
					if not (RS.BOF and RS.EOF) then
						Session("Base_RS" & dbkey & formgroup) =RS.GetRows(-1)
					end if
					'on error resume next
					'thearray = Session("Base_RS" & dbkey & formgroup)
					'currentcount =UBound(thearray, 2)
				'
					'ReDim Preserve thearray(0, currentcount + 1)
					'thearray(0, currentcount + 1) = UCASE(user_name) 
					'Session("Base_RS" & dbkey & formgroup) = thearray
					on error goto 0
					CloseRS(RS)	

					theFinalErrors = CheckErrors(DataConn)
					CloseConn(DataConn)
				else
					theFinalErrors = "The user name cannot match a role name."
				end if 'if rolename matches user name
			else
				theFinalErrors = "The user name " & user_name & " is not an existing Oracle user. Please check the username and password. "
			end if 'username already exists
	'End of SYAN modification
	
	else 'to add an new user	
		if Len(user_password) > 0 then
			if Not UserAlreadyExists(dbkey, formgroup,user_name) = True then
				if Not RoleMatchesUser(dbkey, formgroup,user_name) = True then
					
								
								Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
								on error resume next
								sql = "CREATE USER " & QuotedString(UCase(user_name))  & " IDENTIFIED BY " & QuotedString(user_password)
								tablespace = GetTableSpace(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
								sql = sql & " DEFAULT TABLESPACE """ & tablespace & """ TEMPORARY TABLESPACE """ & tablespace & """"
								DataConn.Execute sql
							
						
							sql = sql & " PROFILE DEFAULT ACCOUNT UNLOCK" 
								
							if CheckErrors(DataConn)= "" then	
								sql =" GRANT ""CONNECT"" TO " & QuotedString(UCase(user_name)) 
								DataConn.Execute sql
							end if
							
							role_to_grant = request("roles_hidden")
							
							the_role_array = split(role_to_grant, ",", -1)
							dim k
							for k=0 to UBound(the_role_array)
								if CheckErrors(DataConn)= "" then	
									sql = " GRANT " & QuotedString(UCase(Trim(the_role_array(k)))) & " TO "  & QuotedString(UCase(user_name)) 
									DataConn.Execute sql
								end if
							next
							
							if CheckErrors(DataConn)= "" then	
								sql = " ALTER USER " & QuotedString(UCase(user_name)) & " DEFAULT ROLE ALL"
								DataConn.Execute sql
								DataConn.Execute "commit"
							end if
						
						
						sql = "Select person_id from people where upper(user_id)='" & UCase(user_name) & "'"
						Set RS = DataConn.Execute(sql)
						if (rs.bof and rs.eof) then
							sql = "INSERT INTO people(user_code,user_id,supervisor_internal_id,last_name,site_id,active)values('" & user_name & "','" & user_name & "','1','" & user_name & "','1','-1')"
							DataConn.Execute sql
							DataConn.Execute "commit"
							sql = "Select person_id,supervisor_internal_id from people where upper(user_id)='" & UCASE(user_name) & "'"
							Set RS = DataConn.Execute(sql)
							if not (RS.BOF and RS.EOF) then
								person_id = RS("person_id")
							end if
							CloseRS(RS)
							sql = "Update people set supervisor_internal_id = " & person_id & " where person_id=" & person_id
							DataConn.Execute sql
							DataConn.Execute "commit"
						end if

						dba_users_sql_string = getUsersListSQL("", dbkey, formgroup, Application("PRIV_TABLE_NAME"))
						Set RS = DataConn.Execute(dba_users_sql_string)
						if not (RS.BOF and RS.EOF) then
							Session("Base_RS" & dbkey & formgroup) =RS.GetRows(-1)
						end if
						CloseRS(RS)	

						
					
						theFinalErrors = CheckErrors(DataConn)
	
	
						CloseConn(DataConn)
					else
						theFinalErrors = "The user name cannot match a role name."
					end if 'if rolename matches user name
			else
				theFinalErrors = "The user name " & user_name & " aready exists."
			end if 'username already exists
		else
			theFinalErrors ="The password cannot be empty"
		end if 'if password is empty
	end if
	
	AddUser = theFinalErrors
	
End Function


Function DoProcessRole(dbkey, formgroup, PrivNames, table_name, row_id, ProcessType)
	StoreUser = Session("UserName" & dbkey)
	StorePWD = Session("UserID" & dbkey)
	if UCase(dbkey) = "REG" then
		Session("UserName" & dbkey) =  Application("REG_USERNAME")
		Session("UserID" & dbkey) =Application("REG_PWD")
	else
		username = dbkey  & "_USERNAME"
		userid = dbkey  & "_PWD"
		Session("UserName" & dbkey) =  Application(username)
		Session("UserID" & dbkey) =Application(userid)
	end if
	Set REG_Conn = GetConnection(dbkey, formgroup,Application("PRIV_TABLE_NAME"))
	
	Session("UserName" & dbkey) = Application("DBA_USERNAME")
	Session("UserID" & dbkey) =  Application("DBA_PWD")
	Set DBA_Conn = GetConnection(dbkey, formgroup,Application("PRIV_TABLE_NAME"))
	Session("UserName" & dbkey) = Application("SEC_USERNAME")
	Session("UserID" & dbkey) =  Application("SEC_PWD")
	Set SEC_Conn = GetConnection(dbkey, formgroup,Application("PRIV_TABLE_NAME"))
	Session("UserName" & dbkey)=StoreUser
	Session("UserID" & dbkey)=StorePWD 
	
	sql = "SELECT security_roles.role_id from security_roles where Upper(role_name) = '" & UCase(Role_Name) & "'"
	Set RS = SEC_CONN.Execute(sql)
	if not (RS.BOF AND RS.EOF) then
		RS.MoveFirst
		RoleID = RS("ROLE_ID")
		RS.Close()
		RS= Nothing
	Else
		ROLE_ID = ""
	end if
	PrivTableName = Application("PRIV_TABLE_NAME")
	
	Select Case UCase(ProcessType)
		Case "ADD"
			Role_Name = Request("Security_Roles.Role_Name")
			isOK = doCreateRole(DBA_Conn,Role_Name)
			
			if Not isOK <> "" then
			PrivNames_array = Split(PrivNames, ",", -1)
				for i = 0 to UBound(PrivNames_array)
		
					If instr(UCase(PrivNames_array(i)), UCase(Application("PRIV_TABLE_NAME"))) then
					
						isOK =doMapPrivilege(REG_Conn,DBA_Conn, SEC_Conn,ProcessType, Role_Name, PrivNames_array(i))
						if  isOK <> "" then
							Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
						Else
							if RoleID <> "" then
								DoProcessPrivTable SEC_Conn, ProcessType, RoleID, PrivTableName
							end if
						end if
					end if
				Next
			end if

		Case "UPDATE"
			
			Role_Name = Request("Role_Name")
			PrivNames_array = Split(PrivNames, ",", -1)
			for i = 0 to UBound(PrivNames_array)
			
				If instr(UCase(PrivNames_array(i)), UCase(Application("PRIV_TABLE_NAME"))) then
					isOK =doMapPrivilege(REG_Conn,DBA_Conn, SEC_Conn,ProcessType, Role_Name, PrivNames_array(i))
					if  isOK <> "" then
						Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
					else
						if RoleID <> "" then
							DoProcessPrivTable SEC_Conn, ProcessType, RoleID, PrivTableName
						end if
					end if
				end if
				
			Next
			
		Case "DELETE"
			Role_Name = Request("Role_Name")
			isOK = doDeleteRole(DBA_Conn,Role_Name)
			if isOK <> "" then
				Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
			end if
		
	End Select	
	
	
	
	CloseConn(REG_Conn)
	CloseConn(SEC_Conn)
	CloseConn(DBA_Conn)
	doProcessRole = isOK

End Function

Function doCreateRole(ByRef DBA_Conn, Role_Name)

	on error resume next
	sql = "DROP ROLE " & QuotedString(UCase(Role_Name))
	DBA_Conn.Execute sql
	err.Clear()
	DBA_Conn.Execute "commit"
	sql = "CREATE ROLE " & QuotedString(UCase(Role_Name)) & "NOT IDENTIFIED"	
	DBA_Conn.Execute sql
	DBA_Conn.Execute "commit"
	sql = "REVOKE  " & QuotedString(UCase(Role_Name)) & " FROM " & Application("DBA_USERNAME")
	DBA_Conn.Execute sql
	DBA_Conn.Execute "commit"
	
	isOk = CheckErrors(DBA_Conn)
	if isOK <> "" then
		Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
	end if
	doCreateRole = isOK
End Function

Function doDeleteRole(ByRef DBA_Conn, Role_Name)
	on error resume next
	sql = "DROP ROLE " & QuotedString(UCase(Role_Name))
	DBA_Conn.Execute sql
	DBA_Conn.Execute "commit"
	
	if err.number <> 0 then
		
		Session("errors_found" & dbkey & formgroup) = err.number & err.description
		
	end if
	doDeleteRole = Session("errors_found" & dbkey & formgroup)
End Function




Function DoProcessPriv(ByRef DataConn, ProcessType, Role_Name, Privs_List)
	Privs_List_Array = split(Privs_List, ",", -1)
		thecounter = 0
		Session("count")= UBound(Privs_List_Array)
		'start commit loop
		for thecounter = 0 to CLng(Session("count"))
		Select Case UCase(ProcessType)
			Case "ADD"
					on error resume next
					sql = "GRANT " & UCase(Privs_List_Array(thecounter))& ""  & " TO " & QuotedString(UCase(Role_Name))
					DataConn.Execute sql
					DataConn.Execute "commit"
					'isOk = CheckErrors(DataConn)
					if err.number > 0 then
						LogAction(sql)
						err.clear()
					End if
					
					
			Case "REVOKE"
					on error resume next
					sql = "REVOKE " & UCase(Privs_List_Array(thecounter))& ""  & " FROM " & QuotedString(UCase(Role_Name))
					DataConn.Execute sql
					DataConn.Execute "commit"
					'isOk = CheckErrors(DataConn)
					if err.number > 0 then
						LogAction(sql)
						err.clear()
					End if
		end Select
	Next
	DoProcessPriv = isOK
End Function 
Function DoProcessPrivTable(ByRef SecConn, ProcessType, RoleID, PrivTableName)
		Select Case UCase(ProcessType)
			Case "ADD"
					on error resume next
					sql = "UPDATE PrivTableName SET " & ProcessType & "=1"
					SecConn.Execute sql
					SecConn.Execute "commit"
					
					isOk = CheckErrors(SecConn)
					if err.number > 0 then
						LogAction(sql)
						err.clear()
					End if
			Case "REVOKE"
					on error resume next
					sql = "UPDATE PrivTableName SET " & ProcessType & "=0"
					SecConn.Execute sql
					SecConn.Execute "commit"
					isOk = CheckErrors(SecConn)
					if err.number > 0 then
						LogAction(sql)
						err.clear()
					End if
		end Select

	DoProcessPrivTable = isOK
End Function 

Function DoAddRoleRecord(dbkey, formgroup, table_names, field_names, addType)
	'SYAN added on 2/6/2002 to add an oracle existing role

	if UCase(request("roleExisting")) = "TRUE" then ' to add an oracle existing role
		role_name = Request("role_name")
			
		Set DataConn = GetConnection(dbkey, formgroup, "Security_Roles")
		if DataConn.State=0 then ' assume user has been logged out
			DoLoggedOutMsg()
		end if
		sql = "Select role_name from cs_security.security_roles where upper(role_name) = '" & UCase(role_name) & "'"
		
		Set RS =DataConn.Execute(sql)
		
		bAlreadyInCSSecurity = false
			if not (RS.BOF or RS.EOF) then
				bAlreadyInCSSecurity = true
			end if
	
		CloseRS(RS)
		if  bAlreadyInCSSecurity=false then ' is not already in security_roles table
			sql = "Select role from dba_roles where upper(role) = '" & UCase(role_name) & "'"
		
			Set RS =DataConn.Execute(sql)	
		
			bRoleFound = false
		
			if not (RS.BOF or RS.EOF) then
				bRoleFound = true
			end if
		
			CloseRS(RS)
		
		
		
			if bRoleFound = True then 'it is indeed a existing role
				
				sql = "SELECT PRIVILEGE_TABLE_ID FROM PRIVILEGE_TABLES WHERE PRIVILEGE_TABLE_NAME = 'OTHER_PRIVILEGES'"
				Set RS =DataConn.Execute(sql)	

				if not (RS.BOF or RS.EOF) then
					RS.MoveFirst
					privilege_table_id = RS("PRIVILEGE_TABLE_ID")
				end if
			
				CloseRS(RS)
				Set CommitRS = Server.CreateObject("ADODB.Recordset")
				CommitRS.Open "SECURITY_ROLES", DataConn, adOpenKeyset,  adLockOptimistic 'get the right record with mol_id
				CommitRS.AddNew
				CommitRS("PRIVILEGE_TABLE_INT_ID") = privilege_table_id
				CommitRS("ROLE_NAME") = role_name
				CommitRS.Update
				
				CloseRS(CommitRS)

				'add to BaseRS
				
				sql = "SELECT ROLE_ID FROM SECURITY_ROLES WHERE ROLE_ID = (SELECT MAX(ROLE_ID) FROM SECURITY_ROLES)"
				Set RS =DataConn.Execute(sql)	

				if not (RS.BOF or RS.EOF) then
					RS.MoveFirst
					new_role_id = RS("ROLE_ID")
				end if
				CloseRS(RS)
				
				sql = getRolesListSQl(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
				Set RS = DataConn.Execute(sql)
				if not (RS.BOF and RS.EOF) then
					Session("Base_RS" & dbkey & formgroup) =RS.GetRows(-1)
				end if

				if err.number > 0 OR Session("errors_found" & dbkey & formgroup)<> "" then
					Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & " "  & err.number  & ":" & err.description
					success = Session("errors_found" & dbkey & formgroup)
				else
					success = ""
					ShowMessageDialog("The Role has been Added To CS Security and will appear when adding or editing users. However, it will not appear in the manage roles list as it is not an editable role.")
				end if	
			else
				success = "The role name you entered is not a valid Oracle role, please check the role name and try again."
			end if
		else
			success = "The role you entered is already in the cs_security table."
		end if
		
		CloseConn(DataConn)
	'End of SYAN modification
	else 'add a new role
		on error resume next
		'loop through data from form groups ado searchable fields and commit each fields data to temp table
		temp_tables_array = split(table_names, ",", -1)
		dim i
		for i = 0 to UBound(temp_tables_array)
			tablename_temp = temp_tables_array(i)
			
			Set DataConn = GetConnection(dbkey, formgroup, tablename_temp)
			if DataConn.State=0 then ' assume user has been logged out
				DoLoggedOutMsg()
			end if
			Set CommitRS = Server.CreateObject("ADODB.Recordset")
			primkey = GetTableVal(dbkey, tablename_temp, kPrimaryKey) 
			CommitRS.Open tablename_temp, DataConn, adOpenKeyset,  adLockOptimistic 'get the right record with mol_id
			CommitRS.AddNew	
			
			if UCase(addType) = "CASCADE" then
				if i > 0 then
					linkVals = GetTableVal(dbkey,tablename_temp,kSelectJoin)
					temp = Split(linkVals, "=", -1)
					temp2 = Split(temp(0), ".", -1)
					FKey = temp2(1)
					CommitRS(FKey) = newid
					
				end if
			end if
			field_array = Split(field_names, ",", -1)
			
	
			for j = 0 to UBound(field_array)
				fullfieldname =field_array(j)
				fieldnamearray = split(fullfieldname, ".", -1)
				table_name = fieldnamearray(0)
				fieldname = fieldnamearray(1)
				
				
				if UCase(table_name) =  UCase(tablename_temp) then
					on error resume next
					
					theValue = Request(fullfieldname)
					
					if Not isNull(theValue)then 
						CommitRS.Fields(fieldname).Value= theValue
					else
						CommitRS.Fields(fieldname).Value= 0
					end if
					CheckForADOErrors dbkey, DataConn, "DoAddRecord Field error: " & fieldname & Session("SearchData" & fullfieldname & dbkey & formgroup), "log"
				end if
				CommitRS.Update

			Next 'j field
			newid = CommitRS(primkey)

			CommitRS.Close
			

		Next 'i table
	
		sql = getRolesListSQl(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
		
		
		Set RS = DataConn.Execute(sql)
		if not (RS.BOF and RS.EOF) then
			Session("Base_RS" & dbkey & formgroup) =RS.GetRows(-1)
		end if
		CloseRS(CommitRS)
		CloseConn(DataConn)
		if err.number > 0 OR Session("errors_found" & dbkey & formgroup)<> "" then
			Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & " "  & err.number  & ":" & err.description
			success = Session("errors_found" & dbkey & formgroup)
		else
			success = ""
		end if
	end if
	DoAddRoleRecord=success
End Function

Function checkDependency(dbkey, formgroup, ByRef SEC_CONN, ByRef RS, RoleName,Privileges)           
	priv_array = Split(Privileges, ",", -1)
	RevokeOK = true
	for i = 0 to UBound(priv_array)
		sql = "Select Role_internal_ID from " &  Application("PRIV_TABLE_NAME") & " where " & priv_array(i) & "=1"
		on error resume next
		RS.Open sql, SEC_CONN
		if err.number <> 0 then
			RS.Close
			RS.Open sql, SEC_CONN
		end if
		if Not (RS.EOF and RS.BOF)then
			RevokeOK = false
			RS.Close
		end if
	next

	checkDependency=RevokeOK
end function

'SYAN added on 2/1/2002
'To check if a user is an oracle existing user
Function OracleUserExists(dbkey, formgroup, user_name)
	bUserFound = False
	
	priv_table = Application("Priv_Table_Name")
	
	on error resume next
	Set DataConn = GetConnection(dbkey, formgroup, priv_table)	
	
	sql= "Select username from dba_users  ORDER BY username"
	
	Set RS =DataConn.Execute(sql)
	
	isOK = checkErrors(DataConn)
	if isOK <> "" then
		Response.Write isOK
		theUserList = ""
	else
		theUserList = GetLookupList(RS,"username", "username")
	end if
	users_string = theUserList
	

	CloseConn(DataConn)
	CloseRS(RS)

	users_array = split(users_string, ",", -1)
	for i = 0 to UBound(users_array)
		temp = split(users_array(i), ":", -1)
		user_test = temp(1)
		'Response.Write "<font color=red>user_test: " & user_test & "</font><br>"
		'Response.Write "user_name: " & user_name & "<br>"
		if UCase(user_test) = UCase(user_name) then
			bUserFound = True
			'Response.Write "found the user: " & user_name & "<br>"
			'Response.end
		end if
	Next
	'Response.Write bUserFound
	'Response.End
	
	OracleUserExists = bUserFound
End Function


%>
