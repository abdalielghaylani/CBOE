
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">



<script language = "javascript">
//Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved

//DO NOT EDIT THIS FILE

function isValidNotebook(elm) {
	var strRegExpParam = /^E?\d{5}[-_]\d{3}/;
	if (!(strRegExpParam.test(elm.value)) && elm.value!="")
	{
		alert(elm.value + " is not a correctly formatted Array Notebook Page number.  Please check that your input starts with this format: (E)#####-###. Contact Scientific Support with questions.");
		elm.value = "";
	}
}

function getOpenFileButton(fieldname){


	var outpuval = ""
	outputval = '<a href="javascript:MainWindow.doOpenFileLoadWindow(&quot;' + fieldname + '&quot;)">'
	outputval = outputval + '<img SRC="/<%=Application("AppKey")%>/graphics/open_file_btn.gif" BORDER="0"></a>'
	document.write(outputval)
}


function doOpenFileLoadWindow(fieldname){

		var w = ""
		if (w.name == null){		
			var w = window.open("/<%=application("appkey")%>/Load_IDS.asp?dbname=<%=dbkey%>&formgroup=<%=formgroup%>&fieldname=" + fieldname,"load_ids_from_file","width=450,height=30,scrollbars=yes,status=yes,resizable=yes");
			w.focus()}
		else{
			w.focus()}
	}

function clearFormNP(){
	MainWindow.document.cows_input_form.reset()
	clearFields();
}

function CheckisVendor(theVal){
	if (theVal.toLowerCase() == "vendor"){
		showVendorInfo()
	}
	else{
		hideVendorInfo()
	}
}

function isVendor(elm){
	if (elm.options[elm.selectedIndex].value.toLowerCase() == "vendor"){
		showVendorInfo()
	}
	else{
		hideVendorInfo()
	}
}

// Show/Hide functions for pointer objects

function showVendorInfo() {

	ns4 = (document.layers)? true:false
	ie4 = (document.all)? true:false
	if (ns4){
		
		document.layers['VENDOR_NAME'].visibility = "show"
		document.layers['VENDOR_NAME_LABEL'].visibility= "show"
		document.layers['VENDOR_ID'].visibility= "show"
		document.layers['VENDOR_ID_LABEL'].visibility= "show"
	}
	if (ie4) {
		document.all['VENDOR_NAME'].style.visibility = "visible"
		document.all['VENDOR_NAME_LABEL'].style.visibility = "visible"
		document.all['VENDOR_ID'].style.visibility = "visible"
		document.all['VENDOR_ID_LABEL'].style.visibility = "visible"
	}
}


function hideVendorInfo() {
	ns4 = (document.layers)? true:false
	ie4 = (document.all)? true:false
	if (ns4){
		document.layers['VENDOR_NAME'].visibility = "hide"
		document.layers['VENDOR_NAME_LABEL'].visibility= "hide"
		document.layers['VENDOR_ID'].visibility= "hide"
		document.layers['VENDOR_ID_LABEL'].visibility= "hide"
		}
	if (ie4) {
		
		document.all['VENDOR_NAME'].style.visibility = "hidden"
		document.all['VENDOR_NAME_LABEL'].style.visibility = "hidden"
		document.all['VENDOR_ID'].style.visibility = "hidden"
		document.all['VENDOR_ID_LABEL'].style.visibility = "hidden"	
		}
}

function checkNotEmpty(theInputElm){
	if (theInputElm.value == ""){
		alert("please enter a prefex")
	
	}
}
function checkDupEntry(theInputElm, theForm, AlertName){
	
		var thearray = theForm.elements["current_value_list"].value.split(",")
		var bfound = false
		for(i=0;i<thearray.length;i++){
			var thearray2 = thearray[i].split(":")
			if (theInputElm.value.toLowerCase() == thearray2[1].toLowerCase()){
				bfound = true
			}
		}
		if (bfound == true){
			alert("the " + AlertName + " you entered already exists, please enter a unique " + AlertName )
			theInputElm.value = ""
			
		}
	
	
}

function checkForComma(theInputElm){

	if (theInputElm.value.indexOf(",") != -1){
		alert("Commas are not allowed in a prefix.")
		theInputElm.value = ""
		}
	
}
function checkDupEntry_Update(theInputElm, theForm, AlertName){

	var thearray = theForm.elements["current_value_list"].value.split(",")
	var theCurrentVal = theForm.elements["current_value"].value
	
	var bfound = false
	for(i=0;i<thearray.length;i++){
		var thearray2 = thearray[i].split(":")
		if (theInputElm.value.toLowerCase() != theCurrentVal.toLowerCase()){
			if (theInputElm.value.toLowerCase() == thearray2[1].toLowerCase()){
				bfound = true
			}
		}
	}
	if (bfound == true){
		alert("the " + AlertName + " you entered already exists, please enter a unique " + AlertName )
		theInputElm.value = theCurrentVal
		
	}
}



function doApproveAll(){
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "approve_all" + "&dbname=" + dbname 
		MainWindow.document.cows_input_form.submit();
}

function doApproveSingle(uniqued_id){
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "approve_single" + "&dbname=" + dbname + "&unique_id=" + uniqued_id 
		MainWindow.document.cows_input_form.submit();
}

//SYAN added on 12/8/2004 to fix CSBR-49587
function doPreRegisterApproveAll(){
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "pre_register_approve_all" + "&dbname=" + dbname 
		MainWindow.document.cows_input_form.submit();
}

function doPreRegisterApproveSingle(uniqued_id){
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "pre_register_approve_single" + "&dbname=" + dbname + "&unique_id=" + uniqued_id 
		MainWindow.document.cows_input_form.submit();
}
	
//End of SYAN modification

function putTempChemCode(theValue){
	if (theValue != ""){
		top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Chemist_Code"].value = theValue
		//top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Chemist_Code"].focus() 

	}
}

function putTempProdCode(theValue){
	if (theValue != ""){
		top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Producer_Code"].value = theValue
		//top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Producer_Code"].focus() 
	}
}

function putChemCode(theValue,therowid){
	if (theValue != ""){
		top.frames["main"].document.cows_input_form.elements["UID." +therowid + ":Batches.Chemist_Code"].value = theValue
		//top.frames["main"].document.cows_input_form.elements["UID." +therowid + ":Batches.Chemist_Code"].focus() 

	}
}

function putProdCode(theValue,therowid){
	if (theValue != ""){
		top.frames["main"].document.cows_input_form.elements["UID." +therowid + ":Batches.Producer_Code"].value = theValue
		//top.frames["main"].document.cows_input_form.elements["UID." +therowid + ":Batches.Producer_Code"].focus() 

	}
}

function checkProdCode(theValue,therowid){
	if (theValue != ""){
		if (formmode.toLowerCase() == "edit_record"){
			if (top.frames["main"].document.cows_input_form.elements["UID." +therowid + ":Batches.Producer_Code"].value == ""){
				alert("Please enter a valid Producer Code to auto generate the producer name")
				top.frames["main"].document.cows_input_form.elements["UID." +therowid + ":Batches.Producer_Name"].value = ""
			}
		}else{
			if (top.frames["main"].document.cows_input_form.elements["Batches.Producer_Code"].value == ""){
				alert("Please enter a valid Producer Code to auto generate the producer name")
				top.frames["main"].document.cows_input_form.elements["Batches.Producer_Name"].value = ""
			}
		}
	}

}

function checkChemCode(theValue,therowid){
	if (theValue != ""){
		if (formmode.toLowerCase() == "edit_record"){
			if (top.frames["main"].document.cows_input_form.elements["UID." +therowid + ":Batches.Chemist_Code"].value==""){
				alert("Please enter a valid Scientist Code to auto generate the scientist name")
				top.frames["main"].document.cows_input_form.elements["UID." +therowid + ":Batches.Chemist_Name"].value = ""
			}
		}
		else{
			if (top.frames["main"].document.cows_input_form.elements["Batches.Chemist_Code"].value==""){
				alert("Please enter a valid Scientist Code to auto generate the scientist name")
				top.frames["main"].document.cows_input_form.elements["Batches.Chemist_Name"].value = ""
			}
		}
	}
}

function checkTempProdCode(theValue){
if (theValue != ""){
	if (top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Producer_Code"].value == ""){
		alert("Please enter a valid Producer Code to auto generate the producer name")
		top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Producer_Name"].value = ""
		//top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Producer_Code"].focus()

	}
}
}


function checkTempChemCode(theValue){
if (theValue != ""){
	if (top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Chemist_Code"].value == ""){
		alert("Please enter a valid Sci. Code to auto generate the scientist name")
		top.frames["main"].document.cows_input_form.elements["Temporary_Structures.Chemist_Name"].value = ""
	}
}
}
function reg_EditStructure2(fieldname,uniqueid){
		var z = ""
		fullfieldname = fieldname +  uniqueid
		sourceStruc = eval('MainWindow.document.applets["' + fullfieldname + '"]')
		structure_transfer = sourceStruc.getData(0)
		structure_transfer_name = fullfieldname
	if (z.name == null){
		z = window.open(app_Path + "/reg_source/dups_edit_structure.asp"+ "?fieldname=" + fullfieldname + "&uniqueid=" + uniqueid + "&field=" + fieldname + "&dbname=" + dbname,"","width=800,height=600,status=yes,resizable=yes");
		z.name = "dups_edit_structure"
		}
	else{
		z.focus()}
	
}

//registration  functions
function loadHelperFrame(theID){
	top.frames["helper"].location.replace(app_Path + "/helper.asp?dbname=" + "<%=dbkey%>" + "&formmode=" + "<%=formmode%>"+ "&formgroup=" + formgroup+ "&unique_id=" + theID + "&action=" + "get_chemist"  + "&Timer=" + theTimer)	
}

function loadHelperFrame2(theID){
	top.frames["helper"].location.replace(app_Path + "/helper.asp?dbname=" + "<%=dbkey%>" + "&formmode=" + "<%=formmode%>" + "&formgroup=" + formgroup+ "&unique_id=" + theID + "&action=" + "get_producer"+ "&Timer=" + theTimer)	
}

function loadHelperFrame_edit(theID,rowid){
	top.frames["helper"].location.replace(app_Path + "/helper.asp?dbname=" + "<%=dbkey%>" + "&formmode=" + "<%=formmode%>" + "&formgroup=" + formgroup+ "&unique_id=" + theID + "&action=" + "get_chemist" + "&rowid=" + rowid + "&Timer=" + theTimer)	
}

function loadHelperFrame2_edit(theID,rowid){
	top.frames["helper"].location.replace(app_Path + "/helper.asp?dbname=" + "<%=dbkey%>" + "&formmode=" + "<%=formmode%>"+ "&formgroup=" + formgroup+ "&unique_id=" + theID + "&action=" + "get_producer" + "&rowid=" + rowid + "&Timer=" + theTimer)	
}
function checkCompoundType(fullfieldname){

	var theSelectBox = eval('MainWindow.document.forms[0].elements["' + fullfieldname + '"].options[MainWindow.document.forms[0].elements["'+ fullfieldname + '"].selectedIndex]')
	setStrucReq(theSelectBox.text)
}

function setStrucReq(theValue){
	var newstring = ""
	if (theValue.toUpperCase() == "<%=UCase(Application("NO_STRUCTURE_TEXT"))%>"){
	
		reqfieldsarray=required_fields.split(",")
		for(i=0;i<reqfieldsarray.length;i++){
			testcase = reqfieldsarray[i].toLowerCase()

			if(testcase.indexOf(".structure")==-1){

				if(newstring == ""){
					newstring = reqfieldsarray[i]
				}
				else
				{
					newstring = newstring + "," + reqfieldsarray[i]
					
				}
			
			}
			override_non_chemical_submit_flag = "ALLOW"

		}
	}

	else{
		
		override_non_chemical_submit_flag = ""
		newstring = document.forms[0].elements['orig_required_fields'].value
		
	}
	required_fields = newstring
}


function doDeleteRegister_edit(){

var doDelete = false
commit_type_temp=MainWindow.document.forms["nav_variables"].elements["CommitType"].value
UniqueID=MainWindow.document.forms["nav_variables"].elements["UniqueID"].value
commit_type=commit_type_temp.toLowerCase()
	if(commit_type =="full_commit"){
		if(confirm("All data for this compound will be deleted from the temporary table.  Continue?")){
			doDelete = true
		}
	}
	if(commit_type =="batch_commit"){
		if (confirm("The displayed batch data for this registered compound will be deleted from the temporary table.  Continue?")){
			doDelete = true
		}
	}
	if(commit_type =="add_identifiers"){
		if (confirm("The displayed identifiers for this registered compound will be deleted from the temporary table.  Continue?")){
			doDelete = true
		}
	}
	
	if(commit_type =="add_salt"){
		if (confirm("The displayed salt for this registered root compound will be deleted from the temporary table.  Continue?")){
			doDelete = true
		}
	}
	if (doDelete== true){
		fullfieldname = struc_fields + uniqueid
		commit_type = "DELETE_RECORD"
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		action = "register"
		formmode = "register"
		MainWindow.document.cows_input_form.action = actiontemp + "?uniqueid=" + uniqueid + "&field_name=" + struc_fields + "&duplicates_check=false&formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + action + "&dbname=" + dbname + "&commit_type=" + commit_type
		MainWindow.document.cows_input_form.submit();
	}
	
}

//registration  functions
function openDupsWindow_edit(fieldname,uniqueid){

var reg_dups_path="<%=Application("AppPathHTTP") & "/source/reg_dups.asp"%>"

		var w = ""
		var sourceStruc
		currentIndex=MainWindow.document.forms["nav_variables"].elements["CurrentIndex"].value
		if (w.name == null){
		var w = window.open(reg_dups_path + "?dbname=reg&formgroup=reg_ctrbt_commit_form_group&fieldname=" + fieldname + "&uniqueid=" + uniqueid + "&formmode=" + formmode + "&indexValue=" + currentIndex,"reg_duplicates","width=900,height=600,scrollbars=yes,status=no,resizable=yes");
			w.focus()}
		else{
			w.focus()}
}	
function getRegBtn_edit(uniqueid, commit_type, out_type) {	
	if (duplicates_flag.toLowerCase() == "true"){
			fullfieldname = struc_fields + uniqueid
			openDupsWindow_edit(struc_fields,uniqueid)
			}
	else{
		var buttonGifPath = app_Path + "/graphics/register_btn.gif"
		reghelpstr = "register this record"
		if(out_type=="text"){
			outputval = '<A HREF = "javascript:MainWindow.doRegister_edit(&quot;' + uniqueid + '&quot;,&quot;' + commit_type + '&quot;)" onMouseOver="window.status=&quot;'  + reghelpstr + '&quot;; return true;"><IMG SRC="' +  buttonGifPath  + '" Name=button' + uniqueid + ' BORDER="0" ALT="Commit data to registry"></A>'
			return outputval
		}
		else{
			outputval = '<A HREF = "javascript:doRegister_edit(&quot;' + uniqueid + '&quot;,&quot;' + commit_type + '&quot;)" onMouseOver="window.status=&quot;'  + reghelpstr + '&quot;; return true;"><IMG SRC="' +  buttonGifPath  + '" Name=button' + uniqueid + ' BORDER="0" ALT="Commit data to registry"></A>'
			document.write(outputval)
		}
}
}

function doRegister_edit(){
	var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
	commit_type = MainWindow.document.forms["nav_variables"].elements["CommitType"].value
	uniqueid=MainWindow.document.forms["nav_variables"].elements["UniqueID"].value
	fullfieldname = struc_fields + uniqueid
	action = "register"
	formmode = "register"
	MainWindow.document.cows_input_form.action = actiontemp + "?uniqueid=" + uniqueid + "&field_name=" + struc_fields + "&duplicates_check=false&formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=register&dbname=" + dbname + "&commit_type=" + commit_type
	MainWindow.document.cows_input_form.submit();
	
}

function doRegister_All(){
	var w = ""

	if (w.name == null){
		w = window.open("/chem_reg/source/get_dup_action_reg_all.asp","get_dup_record_action","width=500,height=200,status=no,resizable=no");
		w.focus()
	}
	else{
		w.focus()
	}
}

//SYAN added 10/19/2004 to fix CSBR-46772
function doDelete_Marked_Temp(){
	if(confirm("All records that are marked will be deleted from the temporary registry tables.  Continue?")){
		commit_type = "DELETE_MARKED"
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?uniqueid=" + uniqueid + "&formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "Delete_Marked_Temp" + "&dbname=" + dbname + "&commit_type=" + commit_type
		MainWindow.document.cows_input_form.submit();
		}	
}

function doDelete_Marked_Perm(){
	if(confirm("All records that are marked will be deleted from the registry tables.  Continue?")){
		commit_type = "DELETE_MARKED"
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?uniqueid=" + uniqueid + "&formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "Delete_Marked_Perm" + "&dbname=" + dbname + "&commit_type=" + commit_type
		MainWindow.document.cows_input_form.submit();
		}	
}

function doReApply_ChemScript_Rules(){
	if(confirm("All records that are marked will be re-applied with ChemScript rules.  Continue?")){
		commit_type = "REAPPLY_CHEMSCRIPT_RULES"
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?uniqueid=" + uniqueid + "&formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "ReApply_ChemScript_Rules" + "&dbname=" + dbname + "&commit_type=" + commit_type
		MainWindow.document.cows_input_form.submit();
		}	
}

function doReApply_ChemScript_Rules_Single(tID){
	if(confirm("This record will be re-applied with ChemScript rules.  Continue?")){
		commit_type = "REAPPLY_CHEMSCRIPT_RULES_SINGLE"
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?tempID=" + tID + "&formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "ReApply_ChemScript_Rules_Single" + "&dbname=" + dbname + "&commit_type=" + commit_type
		MainWindow.document.cows_input_form.submit();
		}	
}


//End of SYAN modification

function doRegAllSubmit(){
	commit_type = "register_all"
	var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
	action = "register_all"
	formmode = "register"
	MainWindow.document.cows_input_form.action = actiontemp + "?&duplicates_check=false&formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=register_all&dbname=" + dbname + "&commit_type=" + commit_type
	MainWindow.document.cows_input_form.submit();
}

function submitDupsAction(actiontemp){
		
		MainWindow.document.cows_input_form.action = actiontemp
		MainWindow.document.cows_input_form.submit()
}




function doRegUpdate(){
	strucVar = structure_transfer
	sourceStruc = eval('MainWindow.document.applets["' + structure_transfer_name + '"]')
	sourceStruc.clear()
	sourceStruc.putData(0,strucVar)	
	getStructureFields_Reg(structure_transfer_name)
	var action_form_path = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
	MainWindow.document.cows_input_form.action = action_form_path + "?fullfieldname=" + structure_transfer_name + "&formgroup=reg_ctrbt_commit_form_group&dataaction=commit_reg_edit&dbname=reg"
	MainWindow.document.cows_input_form.submit()

	}


function doAddBatch_Project(){
		
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		getRelationalFields()
		
		var missingfields = getSearchStrategy()
		
		if (missingfields == "no_entries"){
				alert("Please enter into one or more fields.")
			}
		else{
			if ((missingfields == "ok_to_submit") || (missingfields == "")){
				currentRecord =	MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
				setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
				setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
				MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + "<%=formmode%>" + "&formgroup=" + "<%=formgroup%>" + "&dataaction2=" + "add_batch_project" + "&dbname=" + "<%=dbkey%>" 
				MainWindow.document.cows_input_form.submit();
				}
			else{
				alert("Please enter information for the following required fields :"  + missingfields)
			}
		}		

}
function doUpdateBatch_Project(batch_project_id){
		//getRelationalFields()- relational data is gathered as changes are made
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "update_batch_project" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&batch_project_id=" + batch_project_id
		MainWindow.document.cows_input_form.submit();
		

}
function doDeleteBatch_Project(batch_project_id){
	if(confirm("You are about to delete this project.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_batch_project" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&batch_project_id=" +  batch_project_id
		MainWindow.document.cows_input_form.submit();
	}

}
function doDeleteNotebook(notebook_id){
	if(confirm("You are about to delete this notebook.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_notebook" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&notebook_id=" +  notebook_id
		MainWindow.document.cows_input_form.submit();
	}

}

function doDeleteSolvate(solvate_id){
	if(confirm("You are about to delete this solvate.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_solvate" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&solvate_id=" +  solvate_id
		MainWindow.document.cows_input_form.submit();
	}

}

function doDeleteSalt(salt_id){
	if(confirm("You are about to delete this salt.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_salt" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&salt_id=" +  salt_id
		MainWindow.document.cows_input_form.submit();
	}

}

function doDeleteProject(project_id){
	if(confirm("You are about to delete this project.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_project" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&project_id=" +  project_id
		MainWindow.document.cows_input_form.submit();
	}

}


function doDeleteSite(site_id){
	if(confirm("You are about to delete this site.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_site" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&site_id=" +  site_id
		MainWindow.document.cows_input_form.submit();
	}

}

function doDeleteCompoundType(compound_type_id){
	if(confirm("You are about to delete this structure comment.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_compound_type" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&compound_type_id=" +  compound_type_id
		MainWindow.document.cows_input_form.submit();
	}

}

function doDeleteSequence(sequence_id){
	if(confirm("You are about to delete this sequence.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_sequence" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&sequence_id=" +  sequence_id
		MainWindow.document.cows_input_form.submit();
	}

}


function doAddUtilization(){
		
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		getRelationalFields()
		
		var missingfields = getSearchStrategy()
		
		if (missingfields == "no_entries"){
				alert("Please enter into one or more fields.")
			}
		else{
			if ((missingfields == "ok_to_submit") || (missingfields == "")){
				currentRecord =	MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
				setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
				setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
				MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + "<%=formmode%>" + "&formgroup=" + "<%=formgroup%>" + "&dataaction2=" + "add_utilization" + "&dbname=" + "<%=dbkey%>" 
				MainWindow.document.cows_input_form.submit();
				}
			else{
				alert("Please enter information for the following required fields :"  + missingfields)
			}
		}		

}
function doUpdateUtilization(utilization_id){
		
		//getRelationalFields()- relational data is gathered as changes are made
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "update_utilization" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&utilization_id=" + utilization_id
		MainWindow.document.cows_input_form.submit();
		

}
function doDeleteUtilization(utilization_id){
	if(confirm("You are about to delete this utilization.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_utilization" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&utilization_id=" +  utilization_id
		MainWindow.document.cows_input_form.submit();
	}

}
function doAddTemp(){
	var cpd_counter = ""
		var commit_type = ""
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		commit_type = MainWindow.document.forms["nav_variables"].elements["CommitType"].value
		table_name = MainWindow.document.forms["nav_variables"].elements["TableName"].value
		uniqueid = MainWindow.document.forms["nav_variables"].elements["UniqueID"].value
		current_location = MainWindow.document.cows_input_form.CurrentLocation.value
		setCookie("PagingMove" + MainWindow.dbname,"first_record",1)
		if (commit_type == "full_commit"){
		 if(plugin_value.toLowerCase()!="false"){
				getStructureFields()
			}
		}

		cpd_counter = MainWindow.cpd_counter
		getRelationalFields()
		var missingfields = getSearchStrategy()
		if (override_submit == false){
			if (missingfields == "no_entries"){
					alert("Please enter into one or more fields.")
				}
			else{
				if ((missingfields == "ok_to_submit") || (missingfields == "")){
					currentRecord =	MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
					setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
					setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
					if (button_override !=""){
						MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=add_temp&dbname=" + dbname + "&commit_type=" + commit_type + "&cpd_counter=" + cpd_counter + "&table_name=" + table_name + "&button_override=" + button_override + "&preserve_items=button_override"
					}
					else{
						MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=add_temp&dbname=" + dbname + "&commit_type=" + commit_type + "&cpd_counter=" + cpd_counter + "&table_name=" + table_name
					}
					MainWindow.document.cows_input_form.submit();
					}
				else{
					alert("Please enter information for the following required fields :"  + missingfields)
				}
			}
		}
		override_submit =false
	
}

function doUpdateReg(){
		current_location = MainWindow.document.cows_input_form.CurrentLocation.value
		MainWindow.document.forms["nav_variables"].elements["Stored_Location"].value=stored_location
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		formmode = formmode.toLowerCase()
		if (formmode == "add_record"){
			action = "add_record"
			commit_type = MainWindow.document.forms["nav_variables"].elements["CommitType"].value
			uniqueid=""
			}
		else{
			commit_type = MainWindow.document.forms["nav_variables"].elements["CommitType"].value
			uniqueid = MainWindow.document.forms["nav_variables"].elements["UniqueID"].value
		}
		if (commit_type ==""){
			commit_type = "full_commit"
		}
		if (commit_type.toLowerCase() == "full_commit"){
			if (formmode == "add_record"){
				if (plugin_value.toLowerCase() != "false"){
					getStructureFields()
				}
			}
			if (formmode == "edit_record"){
				if (plugin_value.toLowerCase() != "false"){
					getStructureFields()
				}
				
			}
		}
		//getRelationalFields()- relational data is gathered as changes are made
		if (override_submit == false){
			var missingfields = getSearchStrategy()
			if (missingfields == "no_entries"){
				alert("Please enter into one or more fields.")
			}
			else{
				if ((missingfields == "ok_to_submit") || (missingfields == "")){
					MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=update_reg&dbname=" + dbname + "&commit_type=" + commit_type + "&unique_id=" + uniqueid 
					MainWindow.document.cows_input_form.submit();
					}
				else{
					alert("Please enter information for the following required fields :"  + missingfields)
				}
			}
		}
	override_submit =false

}

function doDeleteReg(uniqueid){

	if(confirm("All data for this compound will be deleted from the permanent registry tables.  Continue?")){
		uniqueid = MainWindow.document.forms["nav_variables"].elements["BaseID"].value
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"	
		MainWindow.document.cows_input_form.action = actiontemp + "?uniqueid=" + uniqueid + "&formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "Delete_Reg" + "&dbname=" + dbname 
		MainWindow.document.cows_input_form.submit();

		}
	
}

function doDeleteBatch(batch_id){
	if(confirm("You are about to delete this batch and all associated analytics data.  Continue?")){
		//getAllLoadedFields()
		//currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		//setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		//setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_batch" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&batch_id=" +  batch_id
		MainWindow.document.cows_input_form.submit();
	}
	
}

function doDeleteAnalytics(batch_id){
	if(confirm("You are about to delete this analytics data.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_analytics" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&batch_id=" +  batch_id
		MainWindow.document.cows_input_form.submit();
	}
	
}
function doDeleteExperiment(experiment_id){
	if(confirm("You are about to delete this experiment data.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_experiment" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&experiment_id=" +  experiment_id
		MainWindow.document.cows_input_form.submit();
	}
	
}

function doUpdateAnalytics(var_experiment_id){	
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "edit_analytics" + "&dbname=" + dbname + "&experiment_id=" + var_experiment_id 
		MainWindow.document.cows_input_form.submit();
	
}


////////list 


function addCurrentUserList(){

	// CSBR-75835, 8/1/2007, Tao Ran, begins
	if (<%=Application("mainwindow")%>.document.forms["cows_input_form"].elements["users"].selectedIndex==-1) {
		alert("please make selection in Available Users list")
	}
	else {
	// CSBR-75835, 8/1/2007, Tao Ran, ends
	
	addItemtext_text = <%=Application("mainwindow")%>.document.forms[0].elements["users"].options[<%=Application("mainwindow")%>.document.forms["cows_input_form"].elements["users"].selectedIndex].text
	addItemtext_option = <%=Application("mainwindow")%>.document.forms[0].elements["users"].options[<%=Application("mainwindow")%>.document.forms["cows_input_form"].elements["users"].selectedIndex].value
	
	//SYAN added on 10/20/2005 to fix CSBR-58112
	addItemtext = addItemtext_option + ":" + ((addItemtext_text.replace(" (", ":")).replace(" ", ":")).replace(")", "")
	//End of SYAN modification

	if ((addItemtext!= "undefined")||(addItemtext!= null)){
		w_avail_list=removeFromCurrentUserList(addItemtext, w_avail_list)
		w_current_list=addToCurrentUserList(addItemtext, w_current_list)
		fill_project_user_lists()
	}
	else{
		alert("please make selection in Available Users list")
	}
		
	// CSBR-75835, 8/1/2007, Tao Ran, begins
	}
	// CSBR-75835, 8/1/2007, Tao Ran, ends
	
}

function removeCurrentUserList(){

	// CSBR-75835, 8/1/2007, Tao Ran, begins
	if (<%=Application("mainwindow")%>.document.forms["cows_input_form"].elements["current_users"].selectedIndex==-1) {
		alert("please make selection in Project Bound Users list")
	}
	else {
	// CSBR-75835, 8/1/2007, Tao Ran, ends

	removeItemtext_text = <%=Application("mainwindow")%>.document.forms[0].elements["current_users"].options[<%=Application("mainwindow")%>.document.forms["cows_input_form"].elements["current_users"].selectedIndex].text
	removeItemtext_option = <%=Application("mainwindow")%>.document.forms[0].elements["current_users"].options[<%=Application("mainwindow")%>.document.forms["cows_input_form"].elements["current_users"].selectedIndex].value
	
	//SYAN added on 10/20/2005 to fix CSBR-58112
	removeItemtext = removeItemtext_option + ":" + ((removeItemtext_text.replace(" (", ":")).replace(" ", ":")).replace(")", "")
	//End of SYAN modification
		
	if ((removeItemtext!= "undefined")||(removeItemtext!= null)){
		//SYAN modified on 10/20/2005 to fix CSBR-58112
		w_current_list=removeFromCurrentUserList(removeItemtext, w_current_list)
		w_avail_list=addToCurrentUserList(removeItemtext, w_avail_list)
		//End of SYAN modification
		fill_project_user_lists()
	}
	else{
		alert("please make selection in Project Bound Users list")
	}
		
	// CSBR-75835, 8/1/2007, Tao Ran, begins
	}
	// CSBR-75835, 8/1/2007, Tao Ran, ends

}

//SYAN added on 10/20/2005 to fix CSBR-58112
function removeFromCurrentUserList(theItem, theList){
	var thenewlist= ""
	
	if (theList.length > 0){
		temp = theList.split(",")
		
		for (i=0; i<temp.length; i++){
			temp2 = temp[i].split(":");
			temp3 = theItem.split(":");
			
			//alert(temp2[0]);
			//alert(temp3[0]);
			
			if (temp2[0] != temp3[0]){
				if (thenewlist.length > 0){
					thenewlist = thenewlist + "," + temp[i]
				}
				else{
					thenewlist = temp[i]
				}
			}
			//alert(thenewlist);
		}
	}
	else {
		thenewlist = ""
	}
	
	return thenewlist
}
//End of SYAN modification

function removeFromCurrentList(theItem, theList){
	var thenewlist= ""
	if (theList.length > 0){
		temp = theList.split(",")
		for (i=0;i<temp.length;i++){
			if (temp[i].toLowerCase() != theItem.toLowerCase()){
				if (thenewlist.length >0){
					thenewlist = thenewlist + "," + temp[i]
				}
				else{
				
					thenewlist = temp[i]
				}
			}
		}
	}
	else{
		thenewlist = ""
	}
return thenewlist
}

//SYAN added on 10/20/2005 to fix CSBR-58112
function addToCurrentUserList(theItem, theList){
	//alert(theItem)
	var thenewlist= ""
	var ok_to_add = true
	
	if (theList.length >0 ){
		temp = theList.split(",")
		
		for (i=0; i<temp.length; i++){
			temp2 = temp[i].split(":");
			temp3 = theItem.split(":");
			
			if (temp2[0].toLowerCase() == temp3[0].toLowerCase()){
				ok_to_add = false
			}
		}
		
		if(ok_to_add == true){
			thenewlist = theList + "," + theItem;
		}
		else{
			thenewlist = theList
		}
	}
	else{
		thenewlist = theItem
	}
	
	return thenewlist
}
//End of SYAN modification

function addToCurrentList(theItem, theList){
	var thenewlist= ""
	var ok_to_add = true
	
	if (theList.length >0 ){
		temp = theList.split(",")
		for (i=0;i<temp.length;i++){
			if (temp[i].toLowerCase() == theItem.toLowerCase()){
				ok_to_add = false
			}
		}
		if(ok_to_add == true){
			thenewlist = theList + "," + theItem
		}
		else{
			thenewlist = theList
		}
	}
	else{
		thenewlist = theItem
	}
	
	return thenewlist
}

function fill_project_user_lists(){
	fillAvailUsersList()
	fillCurrentUsersList()
	updateUserHidden()
}

function updateUserHidden(){

	theavailusers = <%=Application("mainwindow")%>.document.forms[0].elements["users_hidden"]
	thecurrentusers = <%=Application("mainwindow")%>.document.forms[0].elements["current_users_hidden"]
	theavailusers.value = w_avail_list
	thecurrentusers.value = w_current_list
}

function fillAvailUsersList(){
		temp = w_avail_list.split(",")
		<%=Application("mainwindow")%>.document.forms[0].elements["users"].length = 0
		for (i=0;i<temp.length;i++){
			temp2 = temp[i].split(":")
			<%=Application("mainwindow")%>.document.forms[0].elements["users"].options[i] = new Option(temp2[0])
			//SYAN modified on 10/20/2005 to fix CSBR-58112
			<%=Application("mainwindow")%>.document.forms[0].elements["users"].options[i].value = temp2[0]
			if (temp2[2] != "undefined" && temp2[3] != "undefined" && temp2[2] != null && temp2[3] != null && temp2[2] != "" && temp2[3] != "") {
				<%=Application("mainwindow")%>.document.forms[0].elements["users"].options[i].text = temp2[1] + " (" + temp2[2] + " " + temp2[3] + ")" //user_id (firstname username)
			}
			else {
				<%=Application("mainwindow")%>.document.forms[0].elements["users"].options[i].text = temp2[1] //user_id
			}
			//End of SYAN modification
		
	}
}

function fillCurrentUsersList(){
	//alert(w_current_list);
	if (w_current_list.length >0){
	temp = w_current_list.split(",")
	<%=Application("mainwindow")%>.document.forms[0].elements["current_users"].length = 0
		for (i=0;i<temp.length;i++){
			temp2 = temp[i].split(":")
			<%=Application("mainwindow")%>.document.forms[0].elements["current_users"].options[i] = new Option(temp2[0])
			<%=Application("mainwindow")%>.document.forms[0].elements["current_users"].options[i].value = temp2[0]

			//SYAN modified on 10/20/2005 to fix CSBR-58112
			if (temp2[2] != "undefined" && temp2[3] != "undefined" && temp2[2] != null && temp2[3] != null && temp2[2] != "" && temp2[3] != "") {
				<%=Application("mainwindow")%>.document.forms[0].elements["current_users"].options[i].text = temp2[1] + " (" + temp2[2] + " " + temp2[3] + ")" //user_id (firstname username)
			}
			else {
				<%=Application("mainwindow")%>.document.forms[0].elements["current_users"].options[i].text = temp2[1] //user_id
			}
			//End of SYAN modification
		}
		
	}
	else{
		<%=Application("mainwindow")%>.document.forms[0].elements["current_users"].length = 0

	}
}

function doAddPeople_Project(){
		
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		getRelationalFields()
		
		var missingfields = getSearchStrategy()
		
		if (missingfields == "no_entries"){
				alert("Please enter into one or more fields.")
			}
		else{
			if ((missingfields == "ok_to_submit") || (missingfields == "")){
				currentRecord =	MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
				setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
				setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
				MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + "<%=formmode%>" + "&formgroup=" + "<%=formgroup%>" + "&dataaction2=" + "add_people_project" + "&dbname=" + "<%=dbkey%>" 
				MainWindow.document.cows_input_form.submit();
				}
			else{
				alert("Please enter information for the following required fields :"  + missingfields)
			}
		}		

}
function doUpdatePeople_Project(project_id){
		//getRelationalFields()- relational data is gathered as changes are made
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "update_people_project" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&project_id=" + project_id
		MainWindow.document.cows_input_form.submit();
		

}
function doDeletePeople_Project(project_id){
	if(confirm("You are about to delete this project and assoicated users.  Continue?")){
		getAllLoadedFields()
		currentRecord =MainWindow.document.forms["nav_variables"].elements["CurrentRecord"].value
		setCookie("PagingMove" + MainWindow.dbname,"goto_record",1)
		setCookie("GoToValue" + MainWindow.dbname,currentRecord,1)
		var actiontemp = "/<%=Application("AppKey")%>/<%=dbkey%>/<%=dbkey%>" + "_action.asp"		
		MainWindow.document.cows_input_form.action = actiontemp + "?formmode=" + formmode + "&formgroup=" + formgroup + "&dataaction2=" + "delete_people_project" + "&dbname=" + dbname + "&commit_type=" + commit_type + "&project_id=" +  project_id
		MainWindow.document.cows_input_form.submit();
	}

}


function truncateName(theItem){
	var showMFwithSaltName="<%=Application("SHOW_MF_WITH_SALT_NAME")%>"
	if (showMFwithSaltName==1){
		var NewArray = theItem.value.split("(")
		theItem.value = NewArray[0]
	}
	return false
}


function updateSaltName(theform,elm,saltnamefield, saltmwfield, baseid){
	var salts_editable_form_reg_salts = "<%=Application("SALT_EDITABLE_FOR_REG_SALTS")%>"
	
	if (salts_editable_form_reg_salts=="1"){
		var mySalts= theform.elements["salts_batch_list"].value
		
		
		var myArray = mySalts.split(",")
		
		myvar=elm.options[elm.selectedIndex].text
		
		for (i=0;i<myArray.length;i++){
			myArray2 =myArray[i].split(":")
			var myTest = myArray2[1]
			if (myvar.toLowerCase() == myTest.toLowerCase()){
				var myMW=myArray2[0]
			}
		}
		//SYAN modified 10/17/2005 to fix CSBR-59184
		theform.elements[saltnamefield].value = myvar
		theform.elements[saltmwfield].value = myMW
		
		//originally
		//theform.elements["UID." + baseid + ":" + saltnamefield + "_orig"].value = myvar
		//theform.elements["UID." + baseid + ":" + saltmwfield+ "_orig"].value= myMW
		//End of SYAN modification
		
	}
	
	else{
		var mySalts= theform.elements["salts_batch_list"].value
		
		var myArray = mySalts.split(",")
		
		myvar=elm.options[elm.selectedIndex].text
		
		for (i=0;i<myArray.length;i++){
			myArray2 =myArray[i].split(":")
			var myTest = myArray2[1]
			if (myvar.toLowerCase() == myTest.toLowerCase()){
				var myMW=myArray2[0]
			}
		}
			theform.elements[saltnamefield].value = myvar
			theform.elements[saltmwfield].value = myMW
			theform.elements[saltnamefield + "display"].value = myvar
			theform.elements[saltmwfield + "display"].value = myMW
			if (formmode.toUpperCase() =="EDIT_RECORD"){
				theform.elements["UID." + baseid + ":" + saltnamefield].value = myvar
				theform.elements["UID." + baseid + ":" + saltmwfield].value= myMW
				UpdateRelUpdateFields2(theform,"UID." + baseid + ":" + saltnamefield)
				UpdateTable_Row_IDS2(theform,"UID." + baseid + ":" + saltnamefield)
				UpdateTable_Names2(theform,"UID." + baseid + ":" + saltnamefield)
				UpdateRelUpdateFields2(theform,"UID." + baseid + ":" + saltmwfield)
				UpdateTable_Row_IDS2(theform,"UID." + baseid + ":" + saltmwfield)
				UpdateTable_Names2(theform,"UID." + baseid + ":" + saltmwfield)
			
			}
	}
	
}

function updateSaltNameBatct(theform,elm,saltnamefield, saltmwfield,baseid){
	
	var mySalts= theform.elements["salts_batch_list"].value
	var myArray = mySalts.split(",")
	myvar=elm.options[elm.selectedIndex].text
	for (i=0;i<myArray.length;i++){
		myArray2 =myArray[i].split(":")
		var myTest = myArray2[1]
		if (myvar.toLowerCase() == myTest.toLowerCase()){
			var myMW=myArray2[0]
		}
	}
	
		
		theform.elements[saltnamefield].value = myvar
		theform.elements[saltmwfield].value = myMW
		theform.elements[saltnamefield + "display"].value = myvar
		theform.elements[saltmwfield + "display"].value = myMW
		if (formmode.toUpperCase() =="EDIT_RECORD"){
			theform.elements["UID." + baseid + ":" + saltnamefield].value = myvar
			theform.elements["UID." + baseid + ":" + saltmwfield].value= myMW
			UpdateRelUpdateFields2(theform,"UID." + baseid + ":" + saltnamefield)
			UpdateTable_Row_IDS2(theform,"UID." + baseid + ":" + saltnamefield)
			UpdateTable_Names2(theform,"UID." + baseid + ":" + saltnamefield)
			UpdateRelUpdateFields2(theform,"UID." + baseid + ":" + saltmwfield)
			UpdateTable_Row_IDS2(theform,"UID." + baseid + ":" + saltmwfield)
			UpdateTable_Names2(theform,"UID." + baseid + ":" + saltmwfield)
		
		}
	
}

function alertNoEdit(theform,saltnamefield, saltmwfield,baseid){

	if ((formgroup.toLowerCase()== "batch_ctrbt_form_group")||(formgroup.toLowerCase()== "base_form_group")||(formgroup.toLowerCase()== "approve_form_group")){
			alert("Salt name and salt mw must be the same as the registered compound salt and are not editable.")
			theform.elements[saltnamefield + "display"].value = '<%=Session("Salt_Name")%>'
			theform.elements[saltmwfield + "display"].value =  '<%=Session("Salt_MW")%>'
		}
	else{
		alert("Salt name and salt mw can only be edited by selecting from the new salt dropdown list.")
		
			theform.elements[saltnamefield + "display"].value = theform.elements[saltnamefield].value
			theform.elements[saltmwfield + "display"].value = theform.elements[saltmwfield].value
	}		
}

function get_db_record_count(type){
	var Use_Session_Record_Counts = "<%=Application("Use_Session_Record_Counts")%>"

	if (type.toLowerCase() == "temp"){
		if (Use_Session_Record_Counts == "0" ) {
			db_record_count="<%=Application("Temporary_Structures" & "RecordCount" & dbkey)%>"
		}else{
			
			db_record_count="<%=Session("Temporary_Structures" & "RecordCount" & dbkey)%>"
		}
	}
	
	if (type.toLowerCase() == "reg_numbers"){
		if (Use_Session_Record_Counts == "0" ) {
			db_record_count="<%=Application("reg_numbers" & "RecordCount" & dbkey)%>"
		}else{
			db_record_count="<%=Session("reg_numbers" & "RecordCount" & dbkey)%>"
		}
	}
	
	if (type.toLowerCase() == "reg_numbers"){
		if (Use_Session_Record_Counts == "0"  ) {
			db_record_count="<%=Application("batches" & "RecordCount" & dbkey)%>"
		}else{
			db_record_count="<%=Session("batches" & "RecordCount" & dbkey)%>"
		}
	}
	return db_record_count
}


function makeUpperCase(elm){
	formmode="<%=request("formmode")%>"
	if (formmode.toLowerCase() == "edit_record"){
		var origField = ""
		var uppVal = elm.value
		uppVal = uppVal.toUpperCase()
		elm.value=uppVal
		var name = elm.name
		name = name.replace("_orig", "")
		UpdateFieldVal(name)

	}
	else{
		elm.value=elm.value.toUpperCase()
	}

}


//Start Givaudan EVAL customization

function doAddEvalData(){
	batch_id = MainWindow.document.cows_input_form.batch_id.value
	getRelationalFields()
	var missingfields = getSearchStrategy()
	if (missingfields == "no_entries"){
			alert("Please enter into one or more fields.")
		}
	else{
		if ((missingfields == "ok_to_submit") || (missingfields == "")){
			MainWindow.document.cows_input_form.action = action_form_path + "?formgroup=add_eval_data_form_group&dataaction2=do_Add_Eval_Data&dbname=reg&batch_id=" + batch_id
			MainWindow.document.cows_input_form.submit()
			}
		else{
			alert("Please enter information for the following required fields :"  + missingfields)
		}
	}
}


function doShowEvalData(){
	batch_id = MainWindow.document.cows_input_form.batch_id.value
	MainWindow.document.cows_input_form.action = action_form_path + "?formgroup=add_eval_data_form_group&dataaction2=do_Show_Eval_Data&dbname=reg&batch_id=" + batch_id
	MainWindow.document.cows_input_form.submit()
}

function doEditEvalData(){
	batch_id = MainWindow.document.cows_input_form.batch_id.value
	MainWindow.document.cows_input_form.action = action_form_path + "?formgroup=add_eval_data_form_group&dataaction2=do_Edit_Eval_Data&dbname=reg&batch_id=" + batch_id
	MainWindow.document.cows_input_form.submit()
	
}

function doDeleteEvalData(evscreen_id){
	if(confirm("You are about to delete all fragrance evaluation data associated with this batch.  Continue?")){
		evscreen_id= MainWindow.document.cows_input_form.batch_id.value
		MainWindow.document.cows_input_form.action = action_form_path + "?formgroup=add_eval_data_form_group&dataaction2=Do_Delete_Eval_Data&dbname=reg&evscreen_id=" + evscreen_id
		MainWindow.document.cows_input_form.submit()
	}
	
}



function checkInitiatorCode(theValue){
	if (theValue != ""){
		if (top.frames["main"].document.cows_input_form.elements["EVSCREEN.TEST_INITIATOR_CODE"].value==""){
			alert("Please enter a valid Test Initiator Code to auto generate the Test Initiator name")
			top.frames["main"].document.cows_input_form.elements["EVSCREEN.TEST_INITIATOR_NAME"].value = ""
			top.frames["main"].document.cows_input_form.elements["EVSCREEN.TEST_INITIATOR_CODE"].focus()
		}
	}
}

function loadHelperFrame3(theID){
	top.frames["helper"].location.replace(app_Path + "/helper.asp?dbname=" + "<%=dbkey%>" + "&formmode=" + "<%=formmode%>" + "&formgroup=" + formgroup+ "&unique_id=" + theID + "&action=" + "get_initiator"+ "&Timer=" + theTimer)	
}


function loadHelperFrame3_edit(theID,rowid){
	top.frames["helper"].location.replace(app_Path + "/helper.asp?dbname=" + "<%=dbkey%>" + "&formmode=" + "<%=formmode%>"+ "&formgroup=" + formgroup+ "&unique_id=" + theID + "&action=" + "get_initiator" + "&rowid=" + rowid + "&Timer=" + theTimer)	
}

function putInitiatorCode(theValue){
	if (theValue != ""){
		top.frames["main"].document.cows_input_form.elements["EVSCREEN.TEST_INITIATOR_CODE"].value = theValue
		top.frames["main"].document.cows_input_form.elements["EVSCREEN.TEST_INITIATOR_CODE"].focus() 

	}
}
//End Givaudan EVAL customization
</script>



