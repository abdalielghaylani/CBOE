--Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved

--run this script to update the cartridge version of ChemREG.  THIS IS FOR NEW INSTALLATION ONLY. THE BASE64 COLUMNS ARE DROPPED>

Connect &&schemaName/&&schemaPass@&&serverName

--we have found the that indexs on the structures table are not working properly after the clob conversion so we will drop and recreate








drop index INDEX_STRUCTURES_MOLID;

ALTER TABLE STRUCTURES
    DROP CONSTRAINT PK_CPD_INTERNAL_ID2;


create index PK_CPD_INTERNAL_ID2 on STRUCTURES(
	CPD_INTERNAL_ID ASC)  TABLESPACE &&indexTableSpaceName;
create index INDEX_STRUCTURES_MOLID on STRUCTURES(
	MOL_ID ASC)  TABLESPACE &&indexTableSpaceName;
create index TEMP_MOL_ID_INDEX on TEMPORARY_STRUCTURES(
	MOL_ID ASC)  TABLESPACE &&indexTableSpaceName;

ALTER TABLE STRUCTURES
    ADD(CONSTRAINT PK_CPD_INTERNAL_ID2 PRIMARY KEY(CPD_INTERNAL_ID));


create index BATCHES_REGID on BATCHES(REG_INTERNAL_ID ASC)  TABLESPACE &&indexTableSpaceName;

--drop table molfiles;


ALTER TABLE REGDB.TEMPORARY_STRUCTURES ADD (LEGACY_REG_NUMBER VARCHAR2(100));
ALTER TABLE "REGDB"."SALTS" MODIFY("SALT_NAME" NOT NULL);
ALTER TABLE "REGDB"."SOLVATES"  MODIFY("SOLVATE_NAME" NOT NULL);
ALTER TABLE "REGDB"."NOTEBOOKS" MODIFY("NOTEBOOK_NAME" NOT NULL);
ALTER TABLE "REGDB"."PROJECTS" MODIFY("PROJECT_NAME" NOT NULL);
ALTER TABLE "REGDB"."COMPOUND_TYPE" MODIFY("DESCRIPTION" NOT NULL);
ALTER TABLE "REGDB"."SEQUENCE" MODIFY("PREFIX" NOT NULL);
ALTER TABLE "REGDB"."UTILIZATIONS" MODIFY("UTILIZATION_TEXT" NOT NULL);
ALTER TABLE "REGDB"."BATCH_PROJECTS" MODIFY("PROJECT_NAME" NOT NULL);
ALTER TABLE "REGDB"."PARAMETERTYPE"  MODIFY("PARAMETER_TYPE_NAME" NOT NULL);
ALTER TABLE "REGDB"."RESULTTYPE" MODIFY("RESULT_TYPE_NAME" NOT NULL);

ALTER TABLE "REGDB"."TEMPORARY_STRUCTURES" MODIFY("BATCH_COMMENT" VARCHAR2(2000));

ALTER TABLE "REGDB"."BATCHES" MODIFY("BATCH_COMMENT" VARCHAR2(2000));
GRANT SELECT,INSERT,UPDATE,DELETE ON BATCH_PROJECTS TO CS_SECURITY WITH GRANT OPTION;

--Create/Update globals table.
@@globals.sql

---create sequence for molids and triggers for structures and temporary_structures tables
--RESET MOLID SEQUENCE Max MOLID can be from either temp or perm so must figure out which is highest
DECLARE
  maxID INTEGER;
  maxID2 INTEGER;
  
BEGIN
  SELECT NVL(MAX(MOL_ID),0) INTO maxID FROM TEMPORARY_STRUCTURES;
  SELECT NVL(MAX(MOL_ID),0) INTO maxID2 FROM STRUCTURES;
  
  if maxID2 > maxID then 
  	maxID := maxID2;
  end if;	 
  
  EXECUTE IMMEDIATE 'CREATE SEQUENCE MOLID_SEQ INCREMENT By 1 START With '|| to_char(maxID + 1);

END;
/

-- Create table level triggers for structures.
create or replace trigger TRG_MOL_ID
BEFORE INSERT ON STRUCTURES
FOR EACH ROW

BEGIN
SELECT MOLID_SEQ.NEXTVAL INTO :NEW.MOL_ID  FROM DUAL;
END;
/

-- Create table level triggers for temporary_structures table
create or replace trigger TRG_TEMP_MOL_ID
BEFORE INSERT ON TEMPORARY_STRUCTURES
FOR EACH ROW

BEGIN
SELECT MOLID_SEQ.NEXTVAL INTO :NEW.MOL_ID  FROM DUAL;
END;
/

--drop oldstyle csdohitlist tables
--DROP TABLE CSDOHITLISTID;
--DROP TABLE CSDOHITLIST;
--DROP SEQUENCE CSDOHITLIST_SEQ;


--recompile triggers

CREATE OR REPLACE TRIGGER "REGDB"."TRG_ALT_IDS" BEFORE
INSERT ON "REGDB"."ALT_IDS" FOR EACH ROW BEGIN
SELECT SEQ_ALT_IDS.NEXTVAL INTO :NEW.ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_BATCHES" BEFORE
INSERT ON "REGDB"."BATCHES" FOR EACH ROW BEGIN
SELECT SEQ_BATCHES.NEXTVAL INTO :NEW.BATCH_INTERNAL_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_BATCH_PROJECTS" BEFORE
INSERT ON "REGDB"."BATCH_PROJECTS" FOR EACH ROW BEGIN
SELECT SEQ_BATCH_PROJECTS.NEXTVAL INTO :NEW.BATCH_PROJECT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_COMPOUND_MOLECULE" BEFORE
INSERT ON "REGDB"."COMPOUND_MOLECULE" FOR EACH ROW BEGIN
SELECT SEQ_COMPOUND_MOLECULE.NEXTVAL INTO :NEW.CPD_DATABASE_COUNTER  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_COMPOUND_PROJECT" BEFORE
INSERT ON "REGDB"."COMPOUND_PROJECT" FOR EACH ROW BEGIN
SELECT SEQ_COMPOUND_PROJECT.NEXTVAL INTO :NEW.COMP_PROJECT_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_COMPOUND_SALT" BEFORE
INSERT ON "REGDB"."COMPOUND_SALT" FOR EACH ROW BEGIN
SELECT SEQ_COMPOUND_SALT.NEXTVAL INTO :NEW.COMPOUND_SALT_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_COMPOUND_TYPE" BEFORE
INSERT ON "REGDB"."COMPOUND_TYPE" FOR EACH ROW BEGIN
SELECT SEQ_COMPOUND_TYPE.NEXTVAL INTO :NEW.COMPOUND_TYPE  FROM DUAL;
END;
/



CREATE OR REPLACE TRIGGER "REGDB"."TRG_NOTEBOOKS" BEFORE
INSERT ON "REGDB"."NOTEBOOKS" FOR EACH ROW BEGIN
SELECT SEQ_NOTEBOOKS.NEXTVAL INTO :NEW.NOTEBOOK_NUMBER FROM DUAL;
END;
/


CREATE OR REPLACE TRIGGER "REGDB"."TRG_PARAMETER_TYPE_ID" BEFORE
INSERT ON "REGDB"."PARAMETERTYPE" FOR EACH ROW BEGIN
SELECT SEQ_PARAMETERTYPE.NEXTVAL INTO :NEW.PARAMETER_TYPE_ID  FROM DUAL;
END;
/


CREATE OR REPLACE TRIGGER "REGDB"."TRG_PROJECTS" BEFORE
INSERT ON "REGDB"."PROJECTS" FOR EACH ROW BEGIN
SELECT SEQ_PROJECTS.NEXTVAL INTO :NEW.PROJECT_INTERNAL_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_REG_NUMBERS" BEFORE
INSERT ON "REGDB"."REG_NUMBERS" FOR EACH ROW BEGIN
SELECT SEQ_REG_NUMBERS.NEXTVAL INTO :NEW.REG_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_RESULT_TYPE_ID" BEFORE
INSERT ON "REGDB"."RESULTTYPE" FOR EACH ROW BEGIN
SELECT SEQ_RESULTTYPE.NEXTVAL INTO :NEW.RESULT_TYPE_ID FROM DUAL;
END;
/


CREATE OR REPLACE TRIGGER "REGDB"."TRG_SALTS" BEFORE
INSERT ON "REGDB"."SALTS" FOR EACH ROW BEGIN
SELECT SEQ_SALTS.NEXTVAL INTO :NEW.SALT_CODE  FROM DUAL;
END;
/


CREATE OR REPLACE TRIGGER "REGDB"."TRG_SEQUENCE" BEFORE
INSERT ON "REGDB"."SEQUENCE" FOR EACH ROW BEGIN
SELECT SEQ_SEQUENCE.NEXTVAL INTO :NEW.SEQUENCE_ID  FROM DUAL;
END;
/


CREATE OR REPLACE TRIGGER "REGDB"."TRG_SOLVATES" BEFORE
INSERT ON "REGDB"."SOLVATES" FOR EACH ROW BEGIN
   SELECT SEQ_SOLVATES.NEXTVAL INTO :NEW.SOLVATE_ID FROM DUAL;
END;
/


CREATE OR REPLACE TRIGGER "REGDB"."TRG_TEMPORARY_STRUCTURES" 
BEFORE INSERT ON "REGDB"."TEMPORARY_STRUCTURES" FOR EACH ROW BEGIN
SELECT SEQ_TEMPORARY_STRUCTURES.NEXTVAL INTO :NEW.TEMP_COMPOUND_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_TEMP_MOL_ID" BEFORE
INSERT ON "REGDB"."TEMPORARY_STRUCTURES" FOR EACH ROW BEGIN
SELECT MOLID_SEQ.NEXTVAL INTO :NEW.MOL_ID  FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER "REGDB"."TRG_UTILIATIONS" BEFORE
INSERT ON "REGDB"."UTILIZATIONS" FOR EACH ROW BEGIN
SELECT SEQ_UTILIZATIONS.NEXTVAL INTO :NEW.UTILIZATION_ID FROM DUAL;
END;
/

Connect &&InstallUser/&&sysPass@&&serverName

alter user cscartridge quota unlimited on &&cscartTableSpaceName;	

@@FastIndexAccess.sql;


Connect &&InstallUser/&&sysPass@&&serverName

REVOKE SELECT ANY TABLE FROM SUPERVISING_CHEMICAL_ADMIN;
REVOKE CREATE USER FROM  SUPERVISING_CHEMICAL_ADMIN;
REVOKE DROP USER FROM  SUPERVISING_CHEMICAL_ADMIN;
REVOKE ALTER USER FROM  SUPERVISING_CHEMICAL_ADMIN;
REVOKE CREATE ROLE FROM  SUPERVISING_CHEMICAL_ADMIN;
REVOKE ALTER ANY ROLE FROM  SUPERVISING_CHEMICAL_ADMIN;
REVOKE DROP ANY ROLE FROM  SUPERVISING_CHEMICAL_ADMIN;
REVOKE GRANT ANY ROLE FROM  SUPERVISING_CHEMICAL_ADMIN;
REVOKE GRANT ANY PRIVILEGE FROM  SUPERVISING_CHEMICAL_ADMIN;


Connect &&securitySchemaName/&&securitySchemaPass@&&serverName;

delete from cs_security.object_privileges where schema='REGDB' and object_name='MOLFILES';

update cs_security.object_privileges set object_name= 'BATCH_PROJECTS' where object_name=' BATCH_PROJECTS' and schema='REGDB';

Grant CSS_USER to PERFUME_CHEMIST;

GRANT EXECUTE ON GrantOnCoreTableToAllRoles to &&schemaName;

--These are removed since they are ALWAYS necessary for everyuser. They are business logic only no grants to tables are relevant.
ALTER TABLE CS_SECURITY.CHEM_REG_PRIVILEGES
    SET UNUSED (CAMSOFT_LOG_ON, EDIT_SCOPE_SELF) CASCADE 
    CONSTRAINTS;
    

   
    