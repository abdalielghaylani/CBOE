<script language = "javascript">
//Copyright 1998-2002, CambridgeSoft Corp., All Rights Reserved
//DO NOT EDIT THIS FILE

//set global variables
var plugin = true
var date_picker_used = false



//Name: getDataEditRec(elm)
//Purpose: get chemical data from form in "edit" formmode
//Parameters: Form element
//Return Values: Stores Base64 into field defined by input parameter form element
//Comments: requires two form elements. The element name passed in represents the field where the 
//resulting base64 form the plugin in is store for a commit. The field that the plugin is using must
//be the name plus "_ctrl" 

function getDataEditRec(elm){
	var tables_with_base64 = "<%=Application("TABLES_WITH_BASE64_CDX")%>"
	if((formgroupflag.toLowerCase()=="reg_commit") ||(formgroupflag.toLowerCase()=="reg_search")||(tables_with_base64.length>0)){
			
			var theStrucFld_orig = eval('MainWindow.document.cows_input_form.elements["' + elm + '_orig"]')
			
			var theStrucFld = eval('MainWindow.document.cows_input_form.elements["' + elm + '"]')
			
			var mw = ""
			var temp_fullfieldname=elm.split(":")
			var temp_fieldname = temp_fullfieldname[1].split(".")
			
			if(temp_fieldname.length ==3){
				var fieldname = temp_fieldname[2]
				var tablename= temp_fieldname[0] + "." + temp_fieldname[1]
			}
			else
			{
				var fieldname = temp_fieldname[1]
				var tablename= temp_fieldname[0]
				
			}
			base64_cdx = elm.replace(fieldname, "BASE64_CDX")
			if (formgroupflag.toLowerCase() == "reg_search"){
				base64_cdx = base64_cdx.replace(tablename, "Structures")
			}
			else{
				if (formgroupflag.toLowerCase() == "reg_commit"){
					base64_cdx = base64_cdx.replace(tablename, "Temporary_Structures")
				}
				else{
					base64_cdx = base64_cdx.replace(tablename, tables_with_base64)
				}
			}
			
			var theBase64Fld=eval('MainWindow.document.cows_input_form.elements["' + base64_cdx + '"]')
			
			//temp = eval('MainWindow.document.applets["' + elm + '_ctrl"]')	
			
			var temp = elm + "_ctrl"
			
				checkForBrackets(temp)
				theStrucFld.value = getBase64Data(temp)
				theBase64Fld.value = getBase64Data(temp)
				
				if (theStrucFld_orig.value==theStrucFld.value){
					theStrucFld.value = ""
					theBase64Fld.value=""}
				else
					{
						if(theStrucFld.value != ""){
							UpdateAddEditVal(base64_cdx)
							}
						else{
							//put blank cdx string in field so structure will be updated
								theStrucFld.value = "VmpDRDAxMDAEAwIBAAAAAAAAAAAAAAAAAAAAAAMAEAAAAENoZW1EcmF3IDYuMC4xCAAMAAAAbXl0ZXN0LmNkeAADMgAIAP///////wAAAAAAAP//AAAAAP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wEJCAAAAFkAAAAEAAIJCAAAAKcCAAAXAgIIEAAAAAAAAAAAAAAAAAAAAAAAAwgEAAAAeAAECAIAeAAFCAQAAJoVAAYIBAAAAAQABwgEAAAAAQAICAQAAAACAAkIBAAAswIACggIAAMAYAC0AAMACwgIAAQAAADwAAMADQgAAAAIeAAAAwAAAAEAAQAAAAAACwARAAAAAAALABEDZQf4BSgAAgAAAAEAAQAAAAAACwARAAEAZABkAAAAAQABAQEABwABJw8AAQABAAAAAAAAAAAAAAAAAAIAGQGQAAAAAAJAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAEAhAAAAD+/wAA/v8AAAIAAAACAAABJAAAAAIAAwDkBAUAQXJpYWwEAOQEDwBUaW1lcyBOZXcgUm9tYW4BgAEAAAAEAhAAAAD+/wAA/v8AAAIAAAACAA8IAgABABAIAgABABYIBAAAACQAGAgEAAAAJAAAAAAA"
								theBase64Fld.value = "VmpDRDAxMDAEAwIBAAAAAAAAAAAAAAAAAAAAAAMAEAAAAENoZW1EcmF3IDYuMC4xCAAMAAAAbXl0ZXN0LmNkeAADMgAIAP///////wAAAAAAAP//AAAAAP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wEJCAAAAFkAAAAEAAIJCAAAAKcCAAAXAgIIEAAAAAAAAAAAAAAAAAAAAAAAAwgEAAAAeAAECAIAeAAFCAQAAJoVAAYIBAAAAAQABwgEAAAAAQAICAQAAAACAAkIBAAAswIACggIAAMAYAC0AAMACwgIAAQAAADwAAMADQgAAAAIeAAAAwAAAAEAAQAAAAAACwARAAAAAAALABEDZQf4BSgAAgAAAAEAAQAAAAAACwARAAEAZABkAAAAAQABAQEABwABJw8AAQABAAAAAAAAAAAAAAAAAAIAGQGQAAAAAAJAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAEAhAAAAD+/wAA/v8AAAIAAAACAAABJAAAAAIAAwDkBAUAQXJpYWwEAOQEDwBUaW1lcyBOZXcgUm9tYW4BgAEAAAAEAhAAAAD+/wAA/v8AAAIAAAACAA8IAgABABAIAgABABYIBAAAACQAGAgEAAAAJAAAAAAA"
							
								UpdateAddEditVal(base64_cdx)
							
						}
					}
	}
	else{
		
			var theStrucFld_orig = eval('MainWindow.document.cows_input_form.elements["' + elm + '_orig"]')
			var theStrucFld = eval('MainWindow.document.cows_input_form.elements["' + elm + '"]')
			var temp = elm + '_ctrl'
			checkForBrackets(temp)
			theStrucFld.value = getBase64Data(temp)
		
			if (theStrucFld_orig.value==theStrucFld.value){
				theStrucFld.value = ""
				}
			else{
			//put blank cdx string in field so structure will be updated
				if(theStrucFld.value != ""){
					UpdateAddEditVal(elm)
					}
				else
				{
					theStrucFld.value = "VmpDRDAxMDAEAwIBAAAAAAAAAAAAAAAAAAAAAAMAEAAAAENoZW1EcmF3IDYuMC4xCAAMAAAAbXl0ZXN0LmNkeAADMgAIAP///////wAAAAAAAP//AAAAAP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wEJCAAAAFkAAAAEAAIJCAAAAKcCAAAXAgIIEAAAAAAAAAAAAAAAAAAAAAAAAwgEAAAAeAAECAIAeAAFCAQAAJoVAAYIBAAAAAQABwgEAAAAAQAICAQAAAACAAkIBAAAswIACggIAAMAYAC0AAMACwgIAAQAAADwAAMADQgAAAAIeAAAAwAAAAEAAQAAAAAACwARAAAAAAALABEDZQf4BSgAAgAAAAEAAQAAAAAACwARAAEAZABkAAAAAQABAQEABwABJw8AAQABAAAAAAAAAAAAAAAAAAIAGQGQAAAAAAJAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAEAhAAAAD+/wAA/v8AAAIAAAACAAABJAAAAAIAAwDkBAUAQXJpYWwEAOQEDwBUaW1lcyBOZXcgUm9tYW4BgAEAAAAEAhAAAAD+/wAA/v8AAAIAAAACAA8IAgABABAIAgABABYIBAAAACQAGAgEAAAAJAAAAAAA"					
					UpdateAddEditVal(elm)
				}
			}
	}

}

//Name: getDataSearchRec(elm)
//Purpose: get chemical data from form in "search" formmode
//Parameters: Form element
//Return Values: Stores Base64 into field defined by input parameter form element
//Comments: requires two form elements. The element name passed in represents the field where the 
//resulting base64 form the plugin in is store for a commit. The field that the plugin is using must
//be the name plus "_ctrl" 

function getDataSearchRec(elm){
	 
	var theStrucFld = eval('MainWindow.document.cows_input_form.elements["' + elm + '"]')
	var temp = elm + '_ctrl'
	
	//DGB check for the presence of the elmement
	// This check is required to fix CSBR-62471
	if (theStrucFld){	
		theStrucFld.value = getBase64DataSearch(temp)
	}
}

//Name: getDataAddRec(elm)
//Purpose: get chemical data from form in "add_" formmode
//Parameters: Form element
//Return Values: Stores Base64 into field defined by input parameter form element
//Comments: requires two form elements. The element name passed in represents the field where the 
//resulting base64 form the plugin in is store for a commit. The field that the plugin is using must
//be the name plus "_ctrl" 

function getDataAddRec(elm){
	var theStrucFld = eval('MainWindow.document.cows_input_form.elements["' + elm + '"]')
	if((formgroupflag.toLowerCase()=="reg_commit") ||(formgroupflag.toLowerCase()=="reg_search")){
		temp_fieldname=elm.split(".")
		if(temp_fieldname.length ==3){
			fieldname = temp_fieldname[2]
			tablename= temp_fieldname[0] + "." + temp_fieldname[1]
		}
		else
		{
			fieldname = temp_fieldname[1]
			tablename= temp_fieldname[0]
		}
		

		base64_cdx = tablename + ".BASE64_CDX"
		var theBase64Fld=eval('MainWindow.document.cows_input_form.elements["' + base64_cdx + '"]')
		//temp = eval('MainWindow.document.applets["' + elm + '_ctrl"]')
		var temp = elm + '_ctrl'
		checkForBrackets(temp)
		theStrucFld.value = getBase64Data(temp)
		theBase64Fld.value = getBase64Data(temp)
		emptyfields = doRequiredCheck(elm)
	
		if (isEmpty(emptyfields)){
			if (theStrucFld.value == ""){
				theStrucFld.value = "VmpDRDAxMDAEAwIBAAAAAAAAAAAAAAAAAAAAAAMAEAAAAENoZW1EcmF3IDYuMC4xCAAMAAAAbXl0ZXN0LmNkeAADMgAIAP///////wAAAAAAAP//AAAAAP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wEJCAAAAFkAAAAEAAIJCAAAAKcCAAAXAgIIEAAAAAAAAAAAAAAAAAAAAAAAAwgEAAAAeAAECAIAeAAFCAQAAJoVAAYIBAAAAAQABwgEAAAAAQAICAQAAAACAAkIBAAAswIACggIAAMAYAC0AAMACwgIAAQAAADwAAMADQgAAAAIeAAAAwAAAAEAAQAAAAAACwARAAAAAAALABEDZQf4BSgAAgAAAAEAAQAAAAAACwARAAEAZABkAAAAAQABAQEABwABJw8AAQABAAAAAAAAAAAAAAAAAAIAGQGQAAAAAAJAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAEAhAAAAD+/wAA/v8AAAIAAAACAAABJAAAAAIAAwDkBAUAQXJpYWwEAOQEDwBUaW1lcyBOZXcgUm9tYW4BgAEAAAAEAhAAAAD+/wAA/v8AAAIAAAACAA8IAgABABAIAgABABYIBAAAACQAGAgEAAAAJAAAAAAA"					
			}
		}
	}
	else{
		//temp = eval('MainWindow.document.applets["' + elm + '_ctrl"]')
		var temp = elm + '_ctrl'
		
		checkForBrackets(temp)
		theStrucFld.value = getBase64Data(temp)
		
		emptyfields = doRequiredCheck(elm)
		if (emptyfields.indexOf(elm) != -1){
			if (theStrucFld.value == ""){
				theStrucFld.value = "VmpDRDAxMDAEAwIBAAAAAAAAAAAAAAAAAAAAAAMAEAAAAENoZW1EcmF3IDYuMC4xCAAMAAAAbXl0ZXN0LmNkeAADMgAIAP///////wAAAAAAAP//AAAAAP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wEJCAAAAFkAAAAEAAIJCAAAAKcCAAAXAgIIEAAAAAAAAAAAAAAAAAAAAAAAAwgEAAAAeAAECAIAeAAFCAQAAJoVAAYIBAAAAAQABwgEAAAAAQAICAQAAAACAAkIBAAAswIACggIAAMAYAC0AAMACwgIAAQAAADwAAMADQgAAAAIeAAAAwAAAAEAAQAAAAAACwARAAAAAAALABEDZQf4BSgAAgAAAAEAAQAAAAAACwARAAEAZABkAAAAAQABAQEABwABJw8AAQABAAAAAAAAAAAAAAAAAAIAGQGQAAAAAAJAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAEAhAAAAD+/wAA/v8AAAIAAAACAAABJAAAAAIAAwDkBAUAQXJpYWwEAOQEDwBUaW1lcyBOZXcgUm9tYW4BgAEAAAAEAhAAAAD+/wAA/v8AAAIAAAACAA8IAgABABAIAgABABYIBAAAACQAGAgEAAAAJAAAAAAA"					
			}
		}
	}
}

//Name: checkForBrackets(temp)
//Purpose: Check for brackets within a proposed chemdraw control post and flags user depending on ini setting Application("BRACKET_IN_STRUC_HANDLING")
//Parameters: Form element
//Return Values: Boolean
//Comments: if the return is false then an override_submit variable is set so that no post will occur

function checkForBrackets(temp){
	var cdxmlCheck = getCDXMLData(temp)
	var theReturn = true
	if (cdxmlCheck.indexOf('GraphicType="Bracket"')!= -1){
		var BracketHandling = "<%=Application("BRACKET_IN_STRUC_HANDLING")%>"
		if (BracketHandling.toLowerCase()=="warn"){
			if (confirm("WARNING: Structure contains brackets. These will not be properly interpreted. \n\n Submit anyway?")){
				override_submit = false
				theReturn = true
				}
			else{
				override_submit = true
				theReturn = false
			}
		}
		if (BracketHandling.toLowerCase()=="disallow"){
			alert("ERROR:  Structure contains brackets and can not be submitted.")
			override_submit = true
			theReturn = false
		}
		if (BracketHandling.toLowerCase()=="allow"){
			override_submit = false
			theReturn = true
		}
		if (BracketHandling.toLowerCase()==""){
			override_submit = false
			theReturn = true
		}
	}	
	else{
		theReturn = false
	}
	return theReturn
}

//Name: etCDXMLData(theControl)
//Purpose: Get Chemical XML Data using the appropriate control (activeX or plugin) based on Browser type
//Parameters: plugin control form element
//Return Values: XML string
//Comments: none

function getCDXMLData(theControl){
	
	theReturnData=cd_getData(theControl, "text/xml")
	return theReturnData

}


//Purpose: Get Chemical Data using the appropriate control (activeX or plugin) based on Browser type for edit and add mode
//Parameters: plugin control form element
//Return Values: Base64 string
//Comments: calls overrideChemCheck to determine if non-chemical posts are allowed by the applicaiton

function getBase64Data(temp){
	var theReturnData = ""
	if (overrideChemCheck(temp)){
		theReturnData=cd_getData(temp, "chemical/x-cdx",false)
	}
	
	return theReturnData
}

//Name: getBase64DataSearch(theControl)
//Purpose: Get Chemical Data using the appropriate control (activeX or plugin) based on Browser type for search mode
//Parameters: plugin control form element
//Return Values: Base64 string
//Comments: Allows all posts even if not chemicall significant

function getBase64DataSearch(theControl){
	var theReturnData=""
	if (cd_testBrowserType("Microsoft Internet Explorer")) {

		theReturnData=cd_getData(theControl, "chemical/x-cdx",true)
	}
	else{
		theReturnData=cd_getData(theControl, "chemical/x-cdx",true)

		if (theReturnData !=""){	
			if(MainWindow.document.cows_input_form.elements["blank_cdx"].value != ""){	
				if(MainWindow.document.cows_input_form.elements["blank_cdx"].value == theReturnData){
						
				theReturnData=""
				}
			}
		}	
	}
	

	return theReturnData
}

//Name: getMolWeight(theControl)
//Purpose: Get MolWeight using appropriate control (activeX or plugin) based on Browser type
//Parameters: plugin control form element
//Return Values: MolWeight string
//Comments: none

function getMolWeight(theControl){
	theReturnData=cd_getMolWeight(theControl)
	return theReturnData
}

//Name:  getData(elm)
//Purpose: Get the data from the plugin for each field value from the split of StructureFields hidden field
//Parameters: form element. 
//Return Values: None but populates the input form element hidden field with base64 output
//Comments: This is the form element name without the "_ctr"

function getData(elm){
	
	if (plugin == true){
		temp = ""
		theStrucFld = ""
		if (formmode.toLowerCase() == "edit_record"){
		
			getDataEditRec(elm)
			
		}
		else{
			if ((formmode.indexOf("add_")!=-1) ||(formmode.indexOf("edit_")!=-1)||(formmode.toLowerCase() == "add_compounds")||(formmode.toLowerCase() == "add_record")){
				getDataAddRec(elm)
			}
			else{
				getDataSearchRec(elm)
			}
		}
	}
			
}

//Name: getPlugVer(elm)
//Purpose: Populate the version hidden field with the version of the chemdraw plugin
//Parameters: form element name
//Return Values: None but populates the "version" form element hidden field
//Comments: only import for macintosh 

function getPlugVer(elm){
	var temp = elm + '_ctrl'
	MainWindow.document.cows_input_form.version.value =  cd_getVersion(temp)
}

//Name: getStrucData()
//Purpose: Populate the base64 fields based on gather structure fields from the ini file inot the StructureFields hidden field
//Parameters: none
//Return Values: None but populates the base64 hidden fields in the form
//Comments: If the variable editStrucOverride is true the function is ignored

function getStrucData(){

	if (editStrucOverride == false){


		if ((plugin == false )||(plugin_value.toLowerCase() == "false")){

			MainWindow.document.cows_input_form.Plugin.value = "false"
		}
		else{
			if (formmode.toLowerCase() =="edit_record"){
				var strucArray = strucAppletFields.split(",");	
				
			}
			else
			{
				var strucArray = struc_fields.split(",");	
			}
			
			//alert(strucArray.length)
			
			//SYAN modified on 8/16/2007 changed variable from i to j, because it looks like i get manipuated inside getData
			//even the variable should be local
			//The result is if there are more than one activeX controls on the page, the second one wouldn't be recoganized 
			//because i has exceeded strucArray.length
			for(j = 0; j<strucArray.length; j++){
				//alert ('in getStrucData, ' + j)
				getData(strucArray[j])
				//alert('now!' + j)
			}
			
			//End of SYAN modification

					if (MacNet3 != 1) {
						getPlugVer(strucArray[0]);
						MainWindow.document.cows_input_form.Mac3.value = "False"
						}
					else {
						MainWindow.document.cows_input_form.Mac3.value = "True"
					}
		}
	}
}

//Name:clearAllFields()
//Purpose: Clear all fields in the current input form
//Parameters: none
//Return Values: clears all field elements
//Comments: none

function clearAllFields(){
	if ((plugin == false )||(plugin_value.toLowerCase() == "false")|| (commit_type.toLowerCase()== "full_commit_ns")){
		 MainWindow.document.cows_input_form.reset()
		clearFields();
		}
	else{
		MainWindow.document.cows_input_form.reset()
		clearFields();
		
		var strucArray = struc_fields.split(",");
		for(i = 0;i<strucArray.length;i++){	
				clearData(strucArray[i])
		}
	}
}

//Name: clearData(elm)
//Purpose: Clear all chemdraw plugin/control fields in the current input form
//Parameters: none
//Return Values: clears all chemdraw plugin/control fields
//Comments: none

function clearData(elm){
		var temp = elm + '_ctrl'
		cd_clear(temp)
		
}

//Name: clearFields()
//Purpose: Clear all fields in the current input form when the formmode = "edit_query"
//Parameters: none
//Return Values: clears all fields
//Comments: when edit_query mode is used, the fields will not clear by using reset so you
//need to go through each element and set it to nothing

function clearFields(){
	f = MainWindow.document.cows_input_form
	for (i=0;i<f.length;i++){
		var e = f.elements[i]
		if ((e.type == "text") || (e.type == "textarea")){
			e.value = "";
		}
	}
}

//Name: getStructureFields()
//Purpose: populate hidden variables specifyint the structure fields and search type for the field
//Parameters: none. 
//Return Values: populates hidden fields, SubSearchFields,ExactSearchFields,SimSearchFields,IdentitySearchFields
//Comments: Uses global variable strucAppletFields to determine field list

function getStructureFields(){
	
	getStrucData()
	if (formmode.toLowerCase() == "edit_record"){
		
		var strucArray = strucAppletFields.split(",");
		
	}
	else{
		var strucArray = struc_fields.split(",");
	}


	var i
	var objValue = ""
	var strucname = ""
	var rtsubstruc = ""
	var rtexact = ""
	var rtsim = ""
	var rtiden = ""
	var sstypeval = ""
	formmode = formmode.toLowerCase()
	formgroupflag = formgroupflag.toLowerCase()
	bExact=false
	if ((formgroupflag == "reg_commit")&&((formmode=="edit") ||(formmode=="register"))){
		bExact=true}
	if ((formmode.indexOf("add_")!=-1)||(formmode.indexOf("edit_")!=-1)){
		bExact=true}


	for(i = 0;i<strucArray.length;i++){
		
		objValue = getVal(strucArray[i])
		
		
		if (isEmpty(objValue) == false){
			
			formmode = formmode.toLowerCase()
		
			if(bExact == true){
				if(rtexact == ""){
					rtexact = strucArray[i]}	
				else{
					rtexact +=  ',' + strucArray[i]}
					if(formmode.toLowerCase()=="edit_record"){
						UpdateTable_Row_IDS(strucArray[i])
						UpdateTable_Names(strucArray[i])
					}
			}
			else{
				sstypeval = getSelectVal(strucArray[i] + ".sstype")
				
				if (sstypeval == 0){
					if(rtsubstruc == ""){
						rtsubstruc = strucArray[i]}	
					else{
						rtsubstruc +=  ',' + strucArray[i]}
				}
				if(sstypeval == 1){
					if(rtexact == ""){
						rtexact = strucArray[i]}	
					else{
						rtexact +=  ',' + strucArray[i]}
				}
				if(sstypeval== 2){
					if(rtiden == ""){
						rtiden = strucArray[i]}			
					else{
						rtiden +=  ',' + strucArray[i]}
				}
				if(sstypeval== 3){
					if(rtsim == ""){
						rtsim = strucArray[i]}			
					else{
						rtsim +=  ',' + strucArray[i]}
				}
			}
 		}
	}

	MainWindow.document.cows_input_form.SubSearchFields.value = rtsubstruc
	MainWindow.document.cows_input_form.ExactSearchFields.value = rtexact
	MainWindow.document.cows_input_form.SimSearchFields.value = rtsim
	MainWindow.document.cows_input_form.IdentitySearchFields.value = rtiden
	
}


//Purpose: populate hidden variables specifying the formula fields
//Parameters: none. 
//Return Values: populates hidden field:  FormulaSearchFields
//Comments: none


function getFormulaFields(){
	var formulaArray = formula_fields.split(",");
	var i
	var objValue = ""
	var strucname = ""
	var rtformula = ""
		for(i = 0;i<formulaArray.length;i++){
		objValue = getVal(formulaArray[i])
			if (isEmpty(objValue) == false){	
				if(rtformula == "")
					rtformula = formulaArray[i]			
				else
					rtformula +=  ',' + formulaArray[i]
			}
		}
	MainWindow.document.cows_input_form.FormulaSearchFields.value = rtformula
}

//Name: getMolWeightFields()
//Purpose: populate hidden variables specifying the molweight fields
//Parameters: none. 
//Return Values: populates hidden field:  MolWeightSearchFields
//Comments: none

function getMolWeightFields(){
	var molweightArray = mw_fields.split(",");
	var i
	var objValue = ""
	var rtmolweight = ""
	
		for(i = 0;i<molweightArray.length;i++){
		objValue = getVal(molweightArray[i])
			if (isEmpty(objValue) == false){	
				if(rtmolweight == "")
					rtmolweight = molweightArray[i]			
				else
					rtmolweight +=  ',' + molweightArray[i]
			}
		}
	
	MainWindow.document.cows_input_form.MolWeightSearchFields.value = rtmolweight
}


//Name: getRelationalFields()
//Purpose: populate hidden variables specifying the relational fields for a search
//Parameters: none. 
//Return Values: populates hidden field:  RelationalSearchFields
//Comments: none

function getRelationalFields(){
	var relationalArray = relational_fields.split(",");
	var i
	var objValue = ""
	var rtrelfields = ""
		for(i = 0;i<relationalArray.length;i++){
		var temp = relationalArray[i]
		relfieldonly = temp.split(";");
		objValue = getVal(relfieldonly[0])
			if (!isEmpty(objValue)){
				if(rtrelfields == "")
					rtrelfields = relationalArray[i]			
				else
					rtrelfields +=  ',' + relationalArray[i]
			}
		}	
		MainWindow.document.cows_input_form.RelationalSearchFields.value = rtrelfields
}

//Name: getRelationalFields()
//Purpose: populate a global variable with all fields loaded in a form
//Parameters: none. 
//Return Values: populates global variable: allfields
//Comments: none

function getAllLoadedFields(){

	allfields =relLoadedFields
	if (strucAppletFields.length > 0 ){
		if (allfields.length >0){
		allfields = relLoadedFields  + "," + strucAppletFields
		}
		else{
		allfields = strucAppletFields
		}
	}
	thearray = allfields.split(",")
	for(i=0;i<thearray.length;i++){
		fullfieldname = thearray[i]
		UpdateTable_Row_IDS(fullfieldname)
		UpdateTable_Names(fullfieldname)
	}
	
}

//Name: getVal(elm)
//Purpose: get a value for a form element
//Parameters: form element
//Return Values:  the value for the element
//Comments: none

function getVal(elm){
//elm = elm.toLowerCase()
	
	var val
	//LJB 8/16/2004. Check for null state
	if ((elm == null)||(elm=="")){
		val = ""
	}
	else
	{
	
		if(eval('MainWindow.document.cows_input_form.elements["' + elm + '"]')){
			val = eval('MainWindow.document.cows_input_form.elements["' + elm + '"].value')
			//alert(val)
		}
		else
		{
			val = ""
		}
	}
	return val
	
}

//Name: getSelectVal(elm)
//Purpose: get a value for a select box form elemetn
//Parameters: select box form element
//Return Values: the value for the element
//Comments: none

function getSelectVal(elm){
var i
var arraylen = eval('MainWindow.document.cows_input_form.elements["' + elm + '"]' + '.length')
	if (arraylen > 0){
var val
	for(i=0;i<arraylen;i++){
		if(eval('MainWindow.document.cows_input_form.elements["' + elm + '"]' + '.options[i].selected')){
			val = eval('MainWindow.document.cows_input_form.elements["' + elm + '"]' + '.options[i].value')
			}
		}
	}else{
		var val = eval('MainWindow.document.cows_input_form.elements["' + elm + '"].value')
	}
return val
}

//Name: isEmpty(inputVal)
//Purpose: check if a field value is empty
//Parameters: field value
//Return Values: boolean
//Comments: none

function isEmpty(inputVal){
	if(inputVal == "" || inputVal == null){
		return true
	}
	return false
}

function checkWidth(elm,max_width){


	var theLength = elm.value.length
	if (theLength > max_width){
		alert("This field is limited to a maximum of " + max_width + " characters.")
		elm.focus()
	}
	
}
//Name:isValid(elm, type)
//Purpose: validate whether a field contains the right type of data
//Parameters: field value, validation type
//Return Values: boolean
//Comments: displays an alert of validation fails

function isValid(elm, type){
	var inputval = ""
	//type integer
	if(type == 1){
		elm.value = rmspace(elm.value);
		inputval = elm
		if (inputval.value != ""){
			if (!isLongInteger(inputval.value)){
				if (formmode.toLowerCase() == "search"){
					alert("Please enter a positve or negative integer." + "\n\n" + " -, >, <, <=, >=, and = allowed at start of number, - allowed within range.")
				}
				else{
					alert("Please enter a positve or negative integer.")
				}
				inputval.value = ""
				return false
				
			}
		}
	}
	// type - floating point integer
	if(type == 2){
		elm.value = rmspace(elm.value);
		inputval = elm
		if (inputval.value != ""){
			if (!isFPInteger(inputval.value)){
				if (formmode.toLowerCase() == "search"){
					alert("Please enter a positive or negative number." + "\n\n" + "-, >, <, <=, >=, and = allowed at start of number, - allowed within range.")
				}
				else{
					alert("Please enter a positive or negative number.")
				}
				inputval.value = ""
				return false
				
			}
		}
	}
	//positive - integer
	if(type == 3){
		elm.value = rmspace(elm.value);
		inputval = elm
		if (inputval.value != ""){
			if (!isPosLongInteger(inputval.value)){
				if (formmode.toLowerCase() == "search"){
					alert("Please enter a positve integer." + "\n\n" + ">, <, <=, >=, and = allowed at start of number, - allowed within range.")
				}
				else{
					alert("Please enter a positve integer.")
				}
				inputval.value = ""
				return false
				
			}
			
		}
	}
	
	
	//type - positive float/ MW
	if(type == 5){
		elm.value = rmspace(elm.value);
		inputval = elm
	
		if (inputval.value != ""){
			if (!isPosFPInteger(inputval.value)){
				if (formmode.toLowerCase() == "search"){
					alert("Entry must be a positive number." + "\n\n" + ">, <, <=, >=, and = allowed at start of number, - allowed within range.")
				}
				else{
					alert("Entry must be a positive number.")
				}
				inputval.value = ""
				return false
			}
		}
	}
	//type - date
	if(type == 8){
		
		if (date_picker_used==false){
			isDateMaster(elm, type)
		}
		date_picker_used=false
	}
	
	
	//type - date
	if(type == 9){
	
		if (date_picker_used==false){
			isDateMaster(elm, type)
		}
		date_picker_used=false
	}
	//isCas
	if(type == 21){
		inputval = elm
		if (inputval.value.length >0 ){
			if (inputval.value.indexOf('*')==-1){
				if (!isCAS(inputval.value)){
					alert("The number you entered is not a valid CAS Number.");
					inputval.value = ""
					//SYAN added on 2/20/2006 to fix CSBR-64203
					inputval.focus();
					//End of SYAN modification
					return false
					
					
				}
				
			}
		}
	}
	//not empty
	if(type == 22){
		inputval = elm
	
		if (!inputval.value.length>0){
			alert("This field cannot be empty");
				inputval.value = ""
					return false
			}
			
	}
	
	if(type == 24){
		inputval = elm
		if (inputval.value.length>0){
			if (!isFirstLetter(inputval.value)){
				alert("Formula queries may only begin with a letter.")
					inputval.value = ""
					return false
				}
		}
			
	}
	if (type == 25) { //full text input field
		inputval = elm
	}
	

return false
}

//Name:isDateMaster(inputval, type)
//Purpose: date validate 
//Parameters: field value, data format
//Return Values: boolean
//Comments: displays an alert of validation fails

	function isDateMaster(inputval, type){
			var resultText = ""
				if (formmode.toLowerCase().indexOf("search") != -1){
				
					if (inputval.value.indexOf("-")== -1){
					
						if (inputval.value.length >0 ){
								
							if (!isDate(inputval.value)){
								
									if (type == 8){
										resultText = "Entry must use 'mm/dd/yyyy' format"
									}
									if (type == 9){
										resultText = "Entry must use 'dd/mm/yyyy' format"
									}
								
							}
						}
					}
						
					else{
						
							resultText = checkDateRange(inputval, type)
					}
				
				}
						
				else{
					//old way used when not in search mode - ranges make no sense
						if (inputval.value.length >0 ){
							if (!isDate(inputval.value)){
								if (type ==8 ){
									resultText="Entry must use 'mm/dd/yyyy' format"
								}
								if (type ==9 ){
									resultText="Entry must use 'dd/mm/yyyy' format"
								}
							}
						}
				}
			if (resultText.length > 0 ){
				alert(resultText)
				inputval.value = ""
				return false
				
			}
			return true
			
	
	}
	
	
//Name:checkDateRange(inputval,type)
//Purpose: date range validate 
//Parameters: field value, date format
//Return Values: boolean
//Comments: displays an alert of validation fails

function checkDateRange(inputval,type){
	var myAlert = false
	var returnText = ""
	mydatearray = inputval.value.split("-")
		if (mydatearray[0].length>0 ){
			if (!isDate(mydatearray[0])){
				myAlert = true
			}
			if (!myAlert == true){
				for(i=1;i<mydatearray.length;i++){
					if (mydatearray[i].length>0){
						if (!isDate(mydatearray[i])){
							myAlert = true
						}
					}
				}
			}
		}

		if (myAlert == true){
			if (type == 8){
				returnText = "Entry must use 'mm/dd/yyyy-mm/dd/yyyy' format"
			}
			if (type == 9){
					returnText = "Entry must use 'dd/mm/yyyy-dd/mm/yyyy' format"

			}
		}

	return returnText
}

//Name: isCAS(maybeCAS)
//Purpose: CAS Number  validation
//Parameters: cas number
//Return Values: boolean
//Comments:none

//check if Case
function isCAS(maybeCAS) {
	maybeCAS = trim(maybeCAS)
	if ((isNaN(parseFloat(maybeCAS.substring(maybeCAS.length-1,maybeCAS.length)))==false) 
		&& (maybeCAS.substring(maybeCAS.length-2,maybeCAS.length-1)=="-")
		&& (isNaN(parseFloat(maybeCAS.substring(maybeCAS.length-4,maybeCAS.length-2)))==false) 
		&& (maybeCAS.substring(maybeCAS.length-5,maybeCAS.length-4))=="-"
		&& (isNaN(parseFloat(maybeCAS.substring(maybeCAS.length-6,maybeCAS.length-5)))==false)) {
		var firstdash=maybeCAS.indexOf("-", 1);

		if ((firstdash<=9) && (isNaN(maybeCAS.substring(1,firstdash))==false)){
			var seconddash=maybeCAS.indexOf("-", firstdash+1);

			var isCAS=false;

			dashfree_maybeCAS=maybeCAS.substring(0,firstdash)+maybeCAS.substring(firstdash+1,firstdash+3)+maybeCAS.substring(seconddash+1,maybeCAS.length)
			CASsum=0;
			i=dashfree_maybeCAS.length-1; 
			while (i>=1) {
			CASsum=CASsum + i*(dashfree_maybeCAS.substring(dashfree_maybeCAS.length-i-1,dashfree_maybeCAS.length-i));
			i--;
			}


		if ((CASsum%10)==((dashfree_maybeCAS.substring(dashfree_maybeCAS.length-1,dashfree_maybeCAS.length))%10)) {
			isCAS=true;		
			return(true);
			
		}

		else {
			return(false);
			}
		}
		}

	else 
		{
		return(false);
		}
}

//Name: inRange(inputVal, range)
//Purpose: check if value is within a range
//Parameters: input value, target range
//Return Values: boolean
//Comments:none


function inRange(inputVal, range){
if (inputVal.length > 0){
	num = parseInt(inputVal)
	var temp = range.split("-")
	min = parseInt(temp[0])
	max = parseInt(temp[1])
		if (num < min || num > max) {
			return false
		}
		return true
	}
return true
}

//Name: isDate(inputVal)
//Purpose: check if value is valid date in US, European or Asian format
//Parameters: input value
//Return Values: boolean
//Comments:none

function isDate(inputVal){
	var m, d, y;
	
	if (inputVal.length > 0){
		inputStr = inputVal.toString()		
		
		strArray = inputStr.split( "/")             
		
		//SYAN added 12/19/2003 to fix CSBR-35466
		if ('<%=Application("DATE_FORMAT")%>' == '8') { //US mm/dd/yyyy
			m = 0; //index of the array storing month
			d = 1; //index of the array storing day
			y = 2; //index of the array storing year
		}
		
		if ('<%=Application("DATE_FORMAT")%>' == '9') { //European dd/mm/yyyy
			m = 1; //index of the array storing month
			d = 0; //index of the array storing day
			y = 2; //index of the array storing year
		
		}
		
		if ('<%=Application("DATE_FORMAT")%>' == '10') { //Asian yyyy/mm/dd
			m = 1; //index of the array storing month
			d = 2; //index of the array storing day
			y = 0; //index of the array storing year
		}
		//End of SYAN modification

		//3 array elements means day, month, and year
		if(strArray.length == 3){
			//Test the value of each element falls in an acceptable range
			if ((isPosLongInteger(strArray[m])!=true) ||(isPosLongInteger(strArray[d])!=true) ||(isPosLongInteger(strArray[y])!=true)){
				return false;
			}
			
			if ((strArray[m].indexOf(">")==1)||(strArray[m].indexOf("<")==1)||(strArray[m].indexOf("<=")==1)||(strArray[m].indexOf(">=")==1)||(strArray[m].indexOf("=")==1)){
				return true
			}
			else {
				if ((strArray[m] < 0) || (strArray[m] >12)){
					return false;
				}
			}
			
			if ((strArray[d] < 0) || (strArray[d] >31)){
				return false;
			}
					
			if ((strArray[y].length ==1)||(strArray[y].length == 2) || (strArray[y].length ==3)||(strArray[y].length >4)||(strArray[y].length <1)){
				return false;
			}
			//if none of the above fail then set return value to true
			return true;
		}
		else{
			//strArray.length not = 3
			return false
		}
	}
	else{
		//inputVal.length !> 0 
		return false;
	}
}


//Name: isDate2(inputVal)
//Purpose: check if value if formated as data FORMAT MM/DD/YYYY
//Parameters: input value
//Return Values: boolean
//Comments:none

function isDate2(inputVal){
	if (inputVal.length > 0){
		inputStr = inputVal.toString()		
		strArray = inputStr.split( "/")             
		//3 array elements means day, month, and year
		if(strArray.length == 3){
		//Test the value of each element falls in an acceptable range
			for (var i = 0; i < strArray.length; i++){
				if ((isPosLongInteger(strArray[0])!=true) ||(isPosLongInteger(strArray[1])!=true) ||(isPosLongInteger(strArray[2])!=true)){
					return false;
				}
				if ((strArray[0] < 0) || (strArray[0] >31)){
					return false;
				}
				if ((strArray[1] < 0) || (strArray[1] >12)){
					return false;
				}
				if (strArray[2].length != 4){
					return false;
				}
			return true;
			}
		return false;
		}
	return false;
	}
}

//Name: showAlert(inputVal)
//Purpose: show an alert
//Parameters: input value
//Return Values: false
//Comments:none

function showAlert(msg){
	alert(msg)
	return false
}

//Name: isFPInteger(inputVal)
//Purpose:check if input is a positive or negative number
//Parameters: input value
//Return Values: boolean
//Comments:none
//DGB fixed to support negative range searches -10--5
function isFPInteger(inputVal){
	var compareSign = false
	var oneDecimal = false
	var oneDash = false
	var twoDash = false
	if (inputVal.length > 0){
		inputStr = inputVal.toString()		
		for(var i=0; i< inputStr.length; i++){
				
			var oneChar = inputStr.charAt(i)
				
			if (i == 0 && oneChar == "-") {
				continue
			}
			
			if(i == 0 && oneChar == "="){
				continue
			}
			
			if(i == 0 && ((oneChar == "<") || (oneChar == ">"))){
				compareSign = true
				continue
			}
			
			if(i == 1 && ((oneChar == "=") && (compareSign == true))){
				continue
			}
						
			//SYAN modified on 9/9/2004 to fix CSBR-46729
			if ('<%=Application("FLOAT_FORMAT")%>' == '8') {
				if(oneChar == "." && !oneDecimal) {
					oneDecimal = true
					continue
				}
			}
			else if ('<%=Application("FLOAT_FORMAT")%>' == '9') {
				if (oneChar == "," && !oneDecimal) {
					oneDecimal = true
					continue
				}
			}
			//End of SYAN modification
			
			if((oneChar == "-") && (twoDash != true)){
				if ((oneDash) && (!twoDash)) twoDash = true;
				if (!oneDash) oneDash = true;	
				continue
			}
			if (oneChar < "0" || oneChar > "9") {
				return false
			}
		}
	
		return true
	}
	return true
}

//Name: isFirstInt(inputVal)
//Purpose: check if input is a positive or negative number
//Parameters: input value
//Return Values: boolean
//Comments:none

function isFirstInt(inputVal){
	theResult=false
	if (inputVal.length > 0){
		inputStr = inputVal.toString()		
		var oneChar = inputStr.charAt(0)
				
			if(oneChar=="0"){
				theResult= true
			}
			if(oneChar=="1"){
				theResult= true
			}
			if(oneChar=="2"){
				theResult= true
			}
			if(oneChar=="3"){
				theResult= true
			}
			if(oneChar=="4"){
				theResult= true
			}
			if(oneChar=="5"){
				theResult= true
			}
			if(oneChar=="6"){
				theResult= true
			}
			if(oneChar=="7"){
				theResult= true
			}
			if(oneChar=="8"){
				theResult= true
			}
			if(oneChar=="9"){
				theResult= true
			}
		}
		return theResult
	}


//Name: isFirstLetter(inputVal)
//Purpose: check if input is a positive or negative number
//Parameters: input value
//Return Values: boolean
//Comments:none	

function isFirstLetter(inputVal){
	theResult=false
	if (inputVal.length > 0){
		inputStr = inputVal.toString()		
		var oneChar = inputStr.charAt(0)
			if(oneChar.toLowerCase()=="a"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="b"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="c"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="d"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="e"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="f"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="g"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="h"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="i"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="j"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="k"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="l"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="m"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="n"){
				theResult= true
			}			
			if(oneChar.toLowerCase()=="o"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="p"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="q"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="r"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="s"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="t"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="u"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="v"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="w"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="x"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="y"){
				theResult= true
			}
			if(oneChar.toLowerCase()=="z"){
				theResult= true
			}
		}
		return theResult
	}
	
	
//Name: isPosFPInteger(inputVal)
//Purpose: check if input is a postive integer
//Parameters: input value
//Return Values: boolean
//Comments:none

function isPosFPInteger(inputVal){
	var compareSign = false
	var oneDecimal = false
	var oneDash = false
	if (inputVal.length > 0){
		inputStr = inputVal.toString()	
			
		for(var i=0; i< inputStr.length; i++){
			var oneChar = inputStr.charAt(i)
			
			if (i == 0 && oneChar == "-") {
				return false
			}
		
			if(i == 0 && oneChar == "="){
				continue
			}
			
			if(i == 0 && ((oneChar == "<") || (oneChar == ">"))){
				compareSign = true
				continue
			}
			
			if(i == 1 && ((oneChar == "=") && (compareSign == true))){
				continue
			}
			

			//SYAN modified on 9/9/2004 to fix CSBR-46729
			if ('<%=Application("FLOAT_FORMAT")%>' == '8') {
				if(oneChar == "." && !oneDecimal) {
					oneDecimal = true
					continue
				}
			}
			else if ('<%=Application("FLOAT_FORMAT")%>' == '9') {
				if (oneChar == "," && !oneDecimal) {
					oneDecimal = true
					continue
				}
			}
			//End of SYAN modification
				
			if(oneChar == "-" && !oneDash) {
				oneDash = true
				oneDecimal = false
				continue
			}
			//alert(oneChar + '|' + (oneChar<"0") + '|' + (oneChar>"9"));
			
			//SYAN modified on 6/3/2005 to fix CSBR-55509
			//if((i>0 &&(oneChar<"0" || oneChar>"9"))) {
			if((i>=0 &&(oneChar<"0" || oneChar>"9"))) {
			//End of SYAN modification
				return false
			}
		}
	
		return true
	}
	return true
}


//Name: isLongInteger(inputVal)
//Purpose: check if input is a positive or negative integer
//Parameters: input value
//Return Values: boolean
//Comments:none
//DGB fixed two allow two dashes (ie. -10--5)
function isLongInteger(inputVal){
	var compareSign = false
	var oneDash = false
	var twoDash = false
	if (inputVal.length > 0){
			inputStr = inputVal.toString()		
			for(var i=0; i< inputStr.length; i++){
			var oneChar = inputStr.charAt(i)
				if(i == 0 && oneChar == "-"){
					continue
					}
				if(i == 0 && oneChar == "="){
					continue
					}
				if(i == 0 && ((oneChar == "<") || (oneChar == ">"))){
					compareSign = true
					continue
					}
				if(i == 1 && ((oneChar == "=") && (compareSign == true))){
					continue
					}
				if((oneChar == "-") && (twoDash != true)){
					if ((oneDash) && (!twoDash)) twoDash = true;
					if (!oneDash) oneDash = true;
						
					continue
					}
				if(oneChar < "0" || oneChar > "9") {
					return false
				}
		}	
		return true
	}
	return true	
}

//Name: isPosLongInteger(inputVal)
//Purpose: check if input is a positive or negative integer
//Parameters: input value
//Return Values: boolean
//Comments:none

function isPosLongInteger(inputVal){
	var compSign = false
	var oneDash = false
	
	if (inputVal.length > 0){
			inputStr = inputVal.toString()		
			for(var i=0; i< inputStr.length; i++){
			var oneChar = inputStr.charAt(i)
				if(i == 0 && oneChar == "-"){
					continue
					}
				if(i == 0 && oneChar == "="){
					continue
					}
				if(i == 0 && ((oneChar == "<") || (oneChar == ">"))){
					compareSign = true
					continue
					}
				if(i == 1 && ((oneChar == "=") && (compareSign == true))){
					continue
					}
				if((oneChar == "-") && (oneDash != true)){
					oneDash = true
					continue
					}
				if(oneChar < "0" || oneChar > "9") {
					return false
				}
		}	
		return true
	}
	return true	

}

//Name: createAllFieldsStr(subSearch, exactSearch, simSearch, formulaSearch, MWSearch, relSearch)
//Purpose: create master string of all fields in a form
//Parameters: a string for each of the following: subSearch, exactSearch, simSearch, formulaSearch, MWSearch, relSearch
//Return Values: string
//Comments:none

function createAllFieldsStr(subSearch, exactSearch, simSearch, formulaSearch, MWSearch, relSearch){
	var fieldsstr = ""
	if (!isEmpty(subSearch)){
		fieldsstr = addToStr(fieldsstr, subSearch)}
	if (!isEmpty(exactSearch)){
		fieldsstr = addToStr(fieldsstr, exactSearch)}
	if (!isEmpty(simSearch)){
		fieldsstr = addToStr(fieldsstr, simSearch)}
	if (!isEmpty(formulaSearch)){
		fieldsstr = addToStr(fieldsstr, formulaSearch)}
	if (!isEmpty(MWSearch)){
		fieldsstr = addToStr(fieldsstr, MWSearch)}
	if (!isEmpty(relSearch)){
		fieldsstr = addToStr(fieldsstr, relSearch)}
return fieldsstr

}

//Name: requiredAddToStr(fieldsstr, inputval)
//Purpose: Create/concatenate text string showing the fields that need to be populated before a submit can occur
//Parameters: fields determined to be missing, existing string with missing fields
//Return Values: new required fields string
//Comments:none

function requiredAddToStr(fieldsstr, inputval){
	if (isEmpty(fieldsstr)){
		fieldsstr = "\n\n" + inputval + "\n"}
	else{
		fieldsstr = fieldsstr +  inputval + "\n"
		}
return fieldsstr
}

//Name: addToStr(fieldsstr, inputval)
//Purpose: add items to a string
//Parameters: new items to add to string, existing string 
//Return Values: new string
//Comments:none 

function addToStr(fieldsstr, inputval){
	if (isEmpty(fieldsstr)){
		fieldsstr = inputval}
	else{
		fieldsstr = fieldsstr + "," + inputval
		}
return fieldsstr
}

//Name: doRequiredCheck(inputfields)
//Purpose: Check that all required fields are populated prior to sumbit  Search Mode
//Parameters: comma delimited string of required fields
//Return Values: string containing fields names that are not populated
//Comments:none 

function doRequiredCheck(inputfields){
	//alert(inputfields)
	//alert(required_fields)
	var emptyreqfields = ""
	var allfieldsarray = inputfields.split(",")
	var reqfieldsarray = required_fields.split(",")
	if (formmode.toLowerCase() != "edit_record"){
			for(i=0;i<reqfieldsarray.length;i++){
				var count = 0
				for(j=0;j<allfieldsarray.length;j++){
					fieldnamearray = reqfieldsarray[i].split(":")
					
					//SYAN modified on 8/29/2007 to fix CSBR-83866
					//I've seen other problems when the ini file field is in different case as the form fields
					if(fieldnamearray[0].toLowerCase() == allfieldsarray[j].toLowerCase()){
					//End SYAN modification
						count = count + 1
					}
				}
				if (count==0){
					emptyreqfields = requiredAddToStr(emptyreqfields,fieldnamearray[1])
				}
					
			}
		
	}
	return emptyreqfields
}

//Name:  checkEmptyStructure(reqfieldsarray,StructureName)
//Purpose: Check if a structure field is empty
//Parameters: comma delimited string of all populated fields, name of structure field
//Return Values: boolean true when structure field is empty
//Comments:none 

function checkEmptyStructure(reqfieldsarray,StructureName){
//check for empty structures
		struReg = false
		for(i=0;i<reqfieldsarray.length;i++){
			if(reqfieldsarray[i].toLowerCase().indexOf(".structure") != -1){
					if (StructureName.toLowerCase().indexOf(reqfieldsarray[i].toLowerCase()) != -1){
						theNewValue = StructureName.replace(".STRUCTURE", ".BASE64_CDX")
						theNewValue = StructureName.replace(".structure", ".BASE64_CDX")
						theNewValue = StructureName.replace(".Structure", ".BASE64_CDX")
						//theNewArray = theNewValue.split(":")
						//theStructureName = theNewArray[0]
						theVal = document.forms["cows_input_form"].elements[StructureName].value
							if (theVal == ""){
								struReg = true
							}
					}
			}
		}
return struReg
}

//Name: doEditModeRequiredCheck(inputfields)
//Purpose: Check that all required fields are populated prior to sumbit - Edit Record Mode
//Parameters: none. 
//Return Values: string containing fields names that are not populated
//Comments:gather required fields from global vairable: rquired_fields 

function doEditModeRequiredCheck(){
	var emptyreqfields
	reqfieldsarray = required_fields.split(",")
	myDoc = document.forms["cows_input_form"].elements
		for(m=0; m<myDoc.length;m++){
			var storeStructureName = ""
			var myVal = document.forms["cows_input_form"].elements[m].value
			var myName = document.forms["cows_input_form"].elements[m].name
			if ((myVal== "") && (myName.indexOf("UID.") != -1) && (myName.indexOf("_orig") == -1)){
			
				var theNameValue_temp = myName.split(":")
				var theNameValue = theNameValue_temp[1]
				var theStrucTest = theNameValue.toLowerCase()
				if (theStrucTest.indexOf(".structure")!= -1){
					storeStructureName = theNameValue
				}
				for(i=0;i<reqfieldsarray.length;i++){
					if (reqfieldsarray[i].indexOf(";") != -1){
						var temp_array2 = reqfieldsarray[i].split(";")
						var theReqNameValue = temp_array2[0]
					}else{
						
						var theReqNameValue_temp = reqfieldsarray[i]
						if (theReqNameValue_temp.indexOf(":") !=-1){
							theReqNameValue_temp=theReqNameValue_temp.split(":")
							theReqNameValue = theReqNameValue_temp[0]
						}
						else{
							var theReqNameValue= theReqNameValue_temp
							
						}
					}
					
					if(theNameValue.toLowerCase()==theReqNameValue.toLowerCase()){
						if (temp_array2[1].indexOf(":") != -1){
							var temp_array3=temp_array2[1].split(":")
							var dialogValue = temp_array3[1]
						}else{
							var dialogValue = temp_array2[1]
						}
						
						if (storeStructureName != ""){
								var struReg = checkEmptyStructure(emptyreqfields, reqfieldsarray,storeStructureName)
								if (struReg==true){
									emptyreqfields = requiredAddToStr(emptyreqfields,dialogValue)
								}
						}else{
								emptyreqfields = requiredAddToStr(emptyreqfields,dialogValue)
						} 
					}				
				} 
			}
		}


return emptyreqfields

}

//Name: getSearchStrategy()
//Purpose: Determine type of search (chem, chem_rel of rel to assist parsing after initial post
//Parameters: none 
//Return Values: population of hidden field: SearchStrategy
//Comments: none

function getSearchStrategy(){
	var subSearch = MainWindow.document.cows_input_form.SubSearchFields.value
	var exactSearch = MainWindow.document.cows_input_form.ExactSearchFields.value
	var simSearch = MainWindow.document.cows_input_form.SimSearchFields.value
	var idenSearch = MainWindow.document.cows_input_form.IdentitySearchFields.value
	var formulaSearch = MainWindow.document.cows_input_form.FormulaSearchFields.value
	var MWSearch = MainWindow.document.cows_input_form.MolWeightSearchFields.value
	var relationalSearch = MainWindow.document.cows_input_form.RelationalSearchFields.value
	var SQLEngine = MainWindow.document.cows_input_form.SQLEngine.value
	var chemicalSearch = false
	var relSearch = false
	var emptyfieldsstr = ""
	if (!isEmpty(subSearch) || !isEmpty(simSearch) || !isEmpty(exactSearch)|| !isEmpty(formulaSearch) || !isEmpty(MWSearch)){
		chemicalSearch = true}
	if(!isEmpty(relationalSearch)){
		relSearch = true}
	if (chemicalSearch && relSearch && (SQLEngine == "CFW")){
		MainWindow.document.cows_input_form.SearchStrategy.value = "chem_rel"}
	if (chemicalSearch && relSearch && (SQLEngine != "CFW")){
		MainWindow.document.cows_input_form.SearchStrategy.value = "chem_rel_special"}
	if (chemicalSearch && !relSearch){
		MainWindow.document.cows_input_form.SearchStrategy.value = "chem_only"}
	if (!chemicalSearch && relSearch){
		MainWindow.document.cows_input_form.SearchStrategy.value = "rel"}
	if (!chemicalSearch && !relSearch){
		emptyfieldsstr="no_entries"}
	//check that require fields have values
	if ((!required_fields == "")||(!required_fields == "NULL")){
		inputstr = createAllFieldsStr(subSearch, exactSearch, simSearch, formulaSearch, MWSearch, relationalSearch)
		if (formmode.toLowerCase() == "edit_record"){
			emptyfields = doEditModeRequiredCheck()
		}else{
			emptyfields = doRequiredCheck(inputstr)
		}
		if (isEmpty(emptyfields)){
		emptyfieldsstr = "ok_to_submit"}
		else{
		emptyfieldsstr = emptyfields}
	}
	return emptyfieldsstr
}


//Name: getSearchDB()
//Purpose: Get list of databases to search from user selection of checkboxes. Check agains global variable : app_db_names
//Parameters: none 
//Return Values: empty | ok_to_submit. if return is "empty" then the submission proceeds
//Comments: populates hidden variable : DBSearchNames with comma delimited string of db_names


function getSearchDB(){
	var notempty = false
	var theDBNames
	theArray =app_db_names.split(",")
	for (i=0;i<theArray.length;i++){
	theCheckBox = eval('MainWindow.document.cows_input_form.' +theArray[i])
		if(theCheckBox.checked==true){		
				notempty = true
				if (!i == 0){
				theDBNames = theDBNames + "," + theArray[i]}
				else{
					theDBNames = theArray[i]
				}
		}
	}
	if (notempty == false){
		return "empty"}
		else{
		MainWindow.document.cows_input_form.DBSearchNames.value = theDBNames
	
		return "ok_to_submit"
	}
}


//Name: overrideChemCheck(temp)
//Purpose: check whether application supports non-chemical submits
//Parameters: form element 
//Return Values: true | false if false then the variable override_submit is populated and the submission doesn't occur
//Comments: checks variable Application("NON_CHEMICAL_SUBMIT") to determine if non_chemical submists are allowed


function overrideChemCheck(temp){
	
	var formmode_uc = formmode.toUpperCase()
	if ((formmode_uc.indexOf("ADD_") != -1) || (formmode_uc.indexOf("EDIT_") != -1)){
	if (override_non_chemical_submit_flag != ""){
		var non_chemical_submit = "ALLOW"
	}else{
		var non_chemical_submit = "<%=Application("NON_CHEMICAL_SUBMIT")%>"
	}
	var mw= getMolWeight(temp)
	
		if (mw > 0){
			override_submit = false
			theReturn = true
		}
		else{
			if (non_chemical_submit.toUpperCase() == "ALLOW") {
				override_submit = false
				theReturn = true
			}
			else {
				if (non_chemical_submit.toUpperCase() == "DISALLOW") {
					
					alert("the data you entered does not contain a structure")
					theReturn = false
					override_submit = true
				}
				else{
					if (non_chemical_submit.toUpperCase() == "PROMPT") {
						if (confirm("WARNING: The data you entered is not a valid structure.  \n\n Submit anyway?")){
							override_submit = false					
							theReturn = true
						}
						else{
							override_submit = true
							theReturn = false
						}
					
					}
				}
			}
		}
	}
	else{
		theReturn = true
		override_submit = false
	}
	return theReturn
}
/////////////////////////////////////////////////////////////////////////////////	
//obsolete code. Included only for backwards compatablity
////////////////////////////////////////////////////////////////////////////////

//setBrowserVar() // this code is no longer used. ChemDraw_js.js checks all the browser types for the chemdraw plugin/control


//function to check presence of plugin in netscape browsers
// this code is no longer used. ChemDraw_js.js checks all the browser types for the chemdraw plugin/control
function plugdetect(){
	pluginFound = "empty"
	for(i=0;i<navigator.plugins.length;i++){
		testVal = navigator.plugins[i].name
		if (testVal.indexOf("ChemDraw") != -1){
			pluginFound="found";}
	}
	if (pluginFound =="found"){
		return true}
	else{
		return false}
	
}

//function to check window.on error for microsoft browsers - must return false to keep going
// this code is no longer used. ChemDraw_js.js checks all the browser types for the chemdraw plugin/control
function isPluginError(msg, url, lno){
	if(msg.indexOf("NullPointerException") != -1){
		plugin = false
		return false
	}
	else if (msg.indexOf("has no properties") != -1){
		plugin = false
		return false
	}
	else{plugin = true
		return false
	}
}

function setBrowserVar(){
//set browser type and version variables
// this code is no longer used. ChemDraw_js.js checks all the browser types for the chemdraw plugin/control
	if (Browser.indexOf("Netscape") != -1){
		NSCheck = 1
		var version = ""
		if  (parseFloat(navigator.appVersion) >= 5.0 && navigator.vendorSub != null && !isNaN(parseFloat(navigator.vendorSub))) {
			 version = parseFloat(navigator.vendorSub);
		}else{
			version = parseFloat(navigator.appVersion);
		}
		if (version >= 6.0){
			Ver6Check=1
		}
		else{
			if (version >= 4.0){
				Ver4Check=1
			}
			else{
				if (version >= 3.0){
					Ver3Check=1
				}
			}
		}

	}
	if (Browser.indexOf("Microsoft") != -1){
		MicroCheck = 1
		
	}
	
	if (Browser.indexOf("MSIE 3.") != -1){
		Ver3Check = 1
	}
	
	if (Version.indexOf("Mozilla/3.") != -1){
		Ver3Check = 1
	}
	if (Version.indexOf("MSIE 4.") != -1){
		Ver4Check = 1
	}

	if (Version.indexOf("Mozilla/4.") != -1){
		Ver4Check = 1
	}
	if (Version.indexOf("MSIE 5.") != -1){
		Ver5Check = 1
	}
	
	if (Version.indexOf("Mozilla/5.") != -1){
		Ver5Check = 1
	}
	if (Version.indexOf("MSIE 6.") != -1){
		Ver6Check = 1
	}
	if (Version.indexOf("Mozilla/6.") != -1){
		Ver6Check = 1
	}

	if (Version.indexOf("Win") != -1){
		WinVer = 1
	}
	if (Version.indexOf("Mac") != -1){
		MacVer = 1
	}
	if (NSCheck == 1 && MacVer ==1 && (Ver4Check ==1 || Ver5Check ==1 || Ver6Check==1 )){
		MacNet4 = 1
	}
	if (NSCheck == 1 && MacVer ==1 && Ver3Check == 1){
		MacNet3 = 1
	}
	if (NSCheck == 1 && WinVer ==1 && (Ver4Check ==1 || Ver5Check ==1 || Ver6Check==1 )){
		WinNet4 = 1
	}
	if (NSCheck == 1 && WinVer ==1 && Ver6Check ==1){
		WinNet6 = 1
	}
	if (NSCheck == 1 && MacVer ==1 && Ver6Check ==1){
		MacNet6 = 1
	}
	if (NSCheck == 1 && WinVer ==1 && Ver3Check == 1){
		WinNet3 = 1
	}
	if (MicroCheck == 1 && MacVer ==1){
		MacIE = 1
	}
	if ((MicroCheck == 1) && (WinVer ==1) && (Ver4Check ==1) || (Ver5Check ==1) || (Ver6Check==1 )){
		WinIE4 = 1
	}
	if ((MicroCheck == 1) && (WinVer ==1) && (Ver3Check == 1)){
		WinIE3 = 1
	}
	if ((MacNet3 ==1) || (MacNet4 ==1) || (WinNet3 ==1) || (WinNet4 ==1) || (MacIE == 1) || (WinIE4 == 1) || (WinIE3 ==1)){
		;
	}
	else {
		location.replace("/cfserverasp/source/error.asp?error_number=browser")
	}
	if ((WinIE3 ==1)&&(formmode=="search")){
		location.replace("/cfserverasp/source/error.asp?error_number=browser_win_ie3")
	}
	if ((MacIE ==1)&&(formmode=="search")){
		location.replace("/cfserverasp/source/error.asp?error_number=browser_mac_ie")
	}

//check if java is enabled this must be done before the microsft check is done for the plugin
//because the errror message checked for could be due to java being off
	if (MacNet3 != 1 && WinNet3 != 1 && MacNet6 !=1 && WinNet6 != 1){
		var myjava = navigator.javaEnabled();
		if (myjava == false){
			location.replace("/cfserverasp/source/error.asp?error_number=java_off")}
		}

//check if browser is netscape - if so, find out if the plugin is installed
//No longer used. ChemDraw_js.js takes care of browser checking for the plugin
	if (NSCheck == 1){
	pluginval = plugdetect()
		if(pluginval==true){
			plugin= true;}
		else{
			plugin = false;}
	}
//check if browser is microsoft if so look at msg arror for windo on error to see if the plugin is missing
	if (MicroCheck == 1){
		window.onerror = isPluginError}
}


function storeStrucData(elm){
	var theStrucFld_orig = eval('MainWindow.document.cows_input_form.elements["' + elm + '_orig"]')
	var theStrucFld = eval('MainWindow.document.cows_input_form.elements["' + elm + '"]')
	//temp = eval('MainWindow.document.applets["' + elm + '_orig_crtl"]')
	
	var temp = elm + '_ctrl'
	theStrucFld_orig.value = getBase64Data(temp)
}

//determine if any structure fields contain data and what the searching type is
function storeStuctureFields(){

	getStrucData()
	var strucArray = struc_fields.split(",");
	var i
	var objValue = ""
	var strucname = ""
	var rtsubstruc = ""
	var rtexact = ""
	var rtiden = ""
	var rtsim = ""
	var sstypeval = ""
	for(i = 0;i<strucArray.length;i++){
	

		objValue = getVal(strucArray[i])
		if (isEmpty(objValue) == false){	
			formmode = formmode.toLowerCase()
			if (((formgroupflag =="REG_COMMIT") &&((formmode == "add_record")||(formmode == "edit_record")||(formmode == "register")||(formmode=="edit"))) || ((formmode =="add_compounds") || (formmode.indexOf("add_")!=-1) ||(formmode.indexOf("edit_")!=-1))) {
				if(rtexact == ""){
					rtexact = strucArray[i]}	
				else{
					rtexact +=  ',' + strucArray[i]}
			}
			else{
				sstypeval = getSelectVal(strucArray[i] + ".sstype")
				if (sstypeval == 0){
					if(rtsubstruc == ""){
						rtsubstruc = strucArray[i]}	
					else{
						rtsubstruc +=  ',' + strucArray[i]}
				}
				if(sstypeval == 1){
					if(rtexact == ""){
						rtexact = strucArray[i]}	
					else{
						rtexact +=  ',' + strucArray[i]}
				}
				if(sstypeval== 2){
					if(rtiden == ""){
						rtiden = strucArray[i]}			
					else{
						rtiden +=  ',' + strucArray[i]}
				}
				if(sstypeval== 3){
					if(rtsim == ""){
						rtsim = strucArray[i]}			
					else{
						rtsim +=  ',' + strucArray[i]}
				}
			}
 		}
	}
	MainWindow.document.cows_input_form.SubSearchFields.value = rtsubstruc
	MainWindow.document.cows_input_form.ExactSearchFields.value = rtexact
	MainWindow.document.cows_input_form.SimSearchFields.value = rtsim
	MainWindow.document.cows_input_form.IdentitySearchFields.value = rtiden
}

function oldrequiredAddToStr(fieldsstr, inputval){
	if (inputval.indexOf(";") != -1){
		newval = inputval.split(";")
		newvalfinal = newval[0].split(".")
		
		}
	else{
		newvalfinal = inputval.split(".")
	}
	if(newvalfinal.length == 3){
		if (isEmpty(fieldsstr)){
			fieldsstr = "\n" + newvalfinal[2] + "\n"}
		else{
			fieldsstr = fieldsstr +  newvalfinal[2]+ "\n"
			}
	}
	else{
		if (isEmpty(fieldsstr)){
			fieldsstr = "\n" + newvalfinal[1] + "\n"}
		else{
			fieldsstr = fieldsstr +  newvalfinal[1]+ "\n"
			}
	}
return fieldsstr
}

// Generic text triming functions

// removes leading spaces
function ltrim (s){
	return s.replace( /^\s*/, "" );
}

// removes trailing spaces
function rtrim (s){
	return s.replace( /\s*$/, "" );
}

// removes both trailing and leading spaces
function trim (s){
	return rtrim(ltrim(s));
}


// removes all spaces
function rmspace (s){
	return s.replace(/\s*/g,"")
	
}
 
//SYAN added 12/15/2003 to fix CSBR-35466
//Format date from flipFrom format to flipTo format.
//8 -- U.S. mm/dd/yyyy
//9 -- European dd/mm/yyyy
//10 -- Asian yyyy/mm/dd
function FormatDate(dateStr, flipFrom, flipTo) {
	var firstSlash, secondSlash
	var m, d, y
	
	if (flipFrom != flipTo) {//need to flip
		firstSlash = dateStr.indexOf('/');
		secondSlash = dateStr.indexOf('/', firstSlash + 1);
		
		if (flipFrom == 8) {
			m = dateStr.substring(0, firstSlash);
			d = dateStr.substring(firstSlash + 1, secondSlash);
			y = dateStr.substring(secondSlash + 1, dateStr.length);
		}
		else if (flipFrom == 9) {
			d = dateStr.substring(0, firstSlash);
			m = dateStr.substring(firstSlash + 1, secondSlash);
			y = dateStr.substring(secondSlash + 1, dateStr.length);
		}
		else if (flipFrom == 10) {
			y = dateStr.substring(0, firstSlash);
			m = dateStr.substring(firstSlash + 1, secondSlash);
			d = dateStr.substring(secondSlash + 1, dateStr.length);
		}
		else {
		}
		
		if (flipTo == '8') {
			dateStr = m + '/' + d + '/' + y
		}
	
		if (flipTo == '9') {
			dateStr = d + '/' + m + '/' + y
		}
	
		if (flipTo == '10') {
			dateStr = y + '/' + m + '/' + d
		}
	}
	return dateStr;
}
//End of SYAN modification

</script>


