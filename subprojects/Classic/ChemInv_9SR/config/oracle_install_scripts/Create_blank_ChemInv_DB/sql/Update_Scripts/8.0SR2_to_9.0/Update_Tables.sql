--Copyright Cambridgesoft Corp 2001-2005 all rights reserved

-- TABLES
-- Create new table INV_STATES.
CREATE TABLE "INV_STATES"(
	"STATE_ID" NUMBER(4) NOT NULL,
	"COUNTRY_ID_FK" NUMBER(4),
	"STATE_NAME" VARCHAR2(255),
	"STATE_ABBREVIATION" VARCHAR2(20),
    CONSTRAINT "INV_STATES_PK"
		PRIMARY KEY("STATE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	);
  
-- Create new table INV_COUNTRY.
CREATE TABLE "INV_COUNTRY"(
	"COUNTRY_ID" NUMBER(4) NOT NULL,
	"COUNTRY_NAME" VARCHAR2(255),
    CONSTRAINT "INV_COUNTRIES_PK"
		PRIMARY KEY("COUNTRY_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	);

-- Create new table INV_ADDRESS.
CREATE TABLE "INV_ADDRESS"(
	"ADDRESS_ID" NUMBER(4) NOT NULL,
  "CONTACT_NAME" VARCHAR2(255),
	"ADDRESS1" VARCHAR2(255),
	"ADDRESS2" VARCHAR2(255),
	"ADDRESS3" VARCHAR2(255),
	"ADDRESS4" VARCHAR2(255),
	"CITY" VARCHAR2(255),
	"STATE_ID_FK" NUMBER(4),
	"COUNTRY_ID_FK" NUMBER(4),
	"ZIP" VARCHAR2(20),
	"FAX"  VARCHAR2(255),
	"PHONE" VARCHAR2(255),
	"EMAIL" VARCHAR2(255),
  CONSTRAINT "INV_ADDRESS_PK"
		PRIMARY KEY("ADDRESS_ID") USING INDEX TABLESPACE &&indexTableSpaceName,
  CONSTRAINT "INV_ADDRESS_STATEID_FK" 
		FOREIGN KEY("STATE_ID_FK") 
		REFERENCES "INV_STATES"("STATE_ID")
    ON DELETE SET NULL,
  CONSTRAINT "INV_ADDRESS_COUNTRYID_FK" 
		FOREIGN KEY("COUNTRY_ID_FK") 
		REFERENCES "INV_COUNTRY"("COUNTRY_ID")
    ON DELETE SET NULL
	);
-- Index the inv_address table
CREATE INDEX INV_ADDRESS_STATEIDFK_IDX ON INV_ADDRESS(STATE_ID_FK) TABLESPACE &&indexTableSpaceName;    
CREATE INDEX INV_ADDRESS_COUNTRYIDFK_IDX ON INV_ADDRESS(COUNTRY_ID_FK) TABLESPACE &&indexTableSpaceName;    

-- Alter the INV_LOCATIONS table
alter table INV_LOCATIONS add(
	ADDRESS_ID_FK NUMBER(4),
	constraint INV_LOCATIONS_ADDRESSID_FK 
  	foreign key (ADDRESS_ID_FK)
  	references INV_ADDRESS (ADDRESS_ID) 
    on delete set null
  );
-- Add indexes 
CREATE INDEX INV_LOCATIONS_ADDRESS_IDX ON INV_LOCATIONS(ADDRESS_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_LOCATIONS_PARENTID_IDX ON INV_LOCATIONS(PARENT_ID) TABLESPACE &&indexTableSpaceName;

-- Alter the INV_SUPPLIERS table
alter table INV_SUPPLIERS add (
	SUPPLIER_FACILITY_NAME VARCHAR2(255),
  SUPPLIER_ADDRESS_ID_FK NUMBER(4),
	IS_OFFICIAL_SUPPLIER NUMBER(1),
  "RID" NUMBER(10), 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user), 
	"TIMESTAMP" DATE DEFAULT SYSDATE,   
  constraint INV_SUPPLIERS_ADDRESSID_FK 
  	foreign key (SUPPLIER_ADDRESS_ID_FK)
  	references INV_ADDRESS (ADDRESS_ID) 
    on delete set null
  );  
-- update inv_suppliers so we can add the not null constraints
UPDATE inv_suppliers SET RID = trunc(seq_rid.NEXTVAL), creator = '&&schemaName', TIMESTAMP = SYSDATE WHERE rid IS NULL;
COMMIT;
ALTER TABLE inv_suppliers MODIFY (
	RID NOT NULL,
  CREATOR NOT NULL,
  TIMESTAMP NOT NULL);
  
-- Add indexes 
CREATE INDEX INV_SUPPLIERS_ADDRESS_IDX ON INV_SUPPLIERS(SUPPLIER_ADDRESS_ID_FK) TABLESPACE &&indexTableSpaceName;

-- Alter the INV_CONTAINERS table
alter table INV_CONTAINERS add(
	FAMILY NUMBER(9),
  DATE_CERTIFIED DATE,
  DATE_APPROVED DATE,
  "STORAGE_CONDITIONS" VARCHAR2(2000),
  "HANDLING_PROCEDURES" VARCHAR2(2000)
  );

-- Create table INV_CONTAINER_CHECKIN_DETAILS
CREATE TABLE "INV_CONTAINER_CHECKIN_DETAILS"(
	"CHECKIN_DETAILS_ID" NUMBER(16) NOT NULL,
  "CONTAINER_ID_FK" NUMBER(9) NOT NULL,
	"USER_ID_FK" VARCHAR2(50), 
  "FIELD_1" VARCHAR2(2000),
  "FIELD_2" VARCHAR2(2000),
  "FIELD_3" VARCHAR2(2000),
  "FIELD_4" VARCHAR2(2000),
  "FIELD_5" VARCHAR2(2000),
  "FIELD_6" VARCHAR2(2000),
  "FIELD_7" VARCHAR2(2000),
  "FIELD_8" VARCHAR2(2000),
  "FIELD_9" VARCHAR2(2000),
  "FIELD_10" VARCHAR2(2000),
  "DATE_1" DATE,
  "DATE_2" DATE,
  "DATE_3" DATE,
  "RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
  CONSTRAINT "INV_CON_CHECKIN_CONTAINERID_FK" 
		FOREIGN KEY("CONTAINER_ID_FK") 
		REFERENCES "INV_CONTAINERS"("CONTAINER_ID") 
		ON DELETE CASCADE, 
	CONSTRAINT "INV_CON_CHECKIN_USERID_FK"
  	FOREIGN KEY("USER_ID_FK")
    REFERENCES "PEOPLE"("USER_ID"),
  CONSTRAINT "INV_CON_CHECKIN_DETAILS_PK" 
		PRIMARY KEY("CHECKIN_DETAILS_ID") USING INDEX TABLESPACE T_CHEMINVDB2_INDEX
	);
-- Add indexes
CREATE INDEX INV_CONCCHKIN_CONTAINERID_IDX ON INV_CONTAINER_CHECKIN_DETAILS(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_CONCCHKIN_USERID_IDX ON INV_CONTAINER_CHECKIN_DETAILS(USER_ID_FK) TABLESPACE &&indexTableSpaceName;

  
-- Alter table INV_EHS_CAS_SUBSTANCE
alter table INV_EHS_CAS_SUBSTANCE add(
	ACGIH_CARCINOGEN_CATEGORY VARCHAR2(2),
	constraint EHS_CAS_ACGIH_CHK
  	check (ACGIH_Carcinogen_Category IN ('A1', 'A2'))
  );

-- Alter table INV_GRID_FORMAT
alter table INV_GRID_FORMAT add ZERO_PADDING_COUNT NUMBER(4);

-- Alter table INV_GRID_ELEMENT
alter table INV_GRID_ELEMENT
  drop constraint INV_GRIDELM_PLATEID_FK;
alter table INV_GRID_ELEMENT
  add constraint INV_GRIDELM_PLATEID_FK foreign key (PLATE_ID_FK)
  references INV_PLATES (PLATE_ID) on delete cascade;
alter table INV_GRID_ELEMENT
  drop constraint INV_GRIDELM_WELLID_FK;
alter table INV_GRID_ELEMENT
  add constraint INV_GRIDELM_WELLID_FK foreign key (WELL_ID_FK)
  references INV_WELLS (WELL_ID) on delete cascade;

-- Create table INV_ORDER_STATUS    
CREATE TABLE "INV_ORDER_STATUS"(
	"ORDER_STATUS_ID" NUMBER(4) NOT NULL,
	"ORDER_STATUS_NAME" VARCHAR2(50) NOT NULL,
  CONSTRAINT "INV_ORDER_STATUS_PK"
		PRIMARY KEY("ORDER_STATUS_ID") USING INDEX TABLESPACE &&indexTableSpaceName
    );

-- Create table INV_ORDERS    
CREATE TABLE INV_ORDERS (
	"ORDER_ID" NUMBER(9) NOT NULL,
	"DELIVERY_LOCATION_ID_FK" NUMBER(9) NOT NULL,
	"SHIP_TO_NAME" VARCHAR2(255) NOT NULL,
	"ORDER_STATUS_ID_FK" NUMBER(4) NOT NULL,
  "SHIPPING_CONDITIONS" VARCHAR2(255),
	"DATE_CREATED" DATE,
	"DATE_SHIPPED" DATE,
	"DATE_RECEIVED" DATE,  
	"CANCEL_REASON" VARCHAR2(1000),
  "RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
  CONSTRAINT "INV_ORDERS_ORDERSTATUS_FK"
		FOREIGN KEY("ORDER_STATUS_ID_FK")
		REFERENCES "INV_ORDER_STATUS"("ORDER_STATUS_ID") ON DELETE CASCADE,  
  CONSTRAINT "INV_ORDERS_LOCATIONID_FK"
		FOREIGN KEY("DELIVERY_LOCATION_ID_FK")
		REFERENCES "INV_LOCATIONS"("LOCATION_ID") ON DELETE CASCADE,
  CONSTRAINT "INV_ORDERS_PK"
		PRIMARY KEY("ORDER_ID") USING INDEX TABLESPACE &&indexTableSpaceName
   );
-- Add indexes 
CREATE INDEX IORDERS_DELIVERY_LOC_ID_FK_IDX ON INV_ORDERS(DELIVERY_LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX ORDER_STATUS_ID_FK_IDX ON INV_ORDERS(ORDER_STATUS_ID_FK) TABLESPACE &&indexTableSpaceName;

-- Create table INV_ORDER_CONTAINERS      
CREATE TABLE INV_ORDER_CONTAINERS(
	ORDER_ID_FK NUMBER(16),
	CONTAINER_ID_FK NUMBER(16),
	"RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
	PRIMARY KEY(ORDER_ID_FK, CONTAINER_ID_FK),
	CONSTRAINT "INV_ORDERCON_ORDERID_FK"
		FOREIGN KEY("ORDER_ID_FK")
    REFERENCES "INV_ORDERS"("ORDER_ID")	
    ON DELETE CASCADE,
	CONSTRAINT "INV_ORDERCON_CONTAINERID_FK"
		FOREIGN KEY("CONTAINER_ID_FK")
	  REFERENCES "INV_CONTAINERS"("CONTAINER_ID")
  	ON DELETE CASCADE)
  ORGANIZATION INDEX;
-- Add indexes
CREATE INDEX INV_ORDERCON_CONTAINERID ON INV_ORDER_CONTAINERS(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;

-- Create table INV_PLATE_PARENT 
CREATE TABLE INV_PLATE_PARENT (
	PARENT_PLATE_ID_FK NUMBER(16),
	CHILD_PLATE_ID_FK NUMBER(16),
	PRIMARY KEY(PARENT_PLATE_ID_FK, CHILD_PLATE_ID_FK),
	CONSTRAINT "INV_PLATE_PARENT_PARENTIDFK_FK"
		FOREIGN KEY("PARENT_PLATE_ID_FK")
	    REFERENCES "INV_PLATES"("PLATE_ID")
    	ON DELETE CASCADE,
	CONSTRAINT "INV_PLATE_PARENT_CHILDIDFK_FK"
		FOREIGN KEY("CHILD_PLATE_ID_FK")
	    REFERENCES "INV_PLATES"("PLATE_ID")
    	ON DELETE CASCADE)
  	ORGANIZATION INDEX;
-- Add indexes    
CREATE INDEX INV_PLATE_PARENT_CHILDID_IDX ON INV_PLATE_PARENT(CHILD_PLATE_ID_FK) TABLESPACE &&indexTableSpaceName;        
    
-- Create table INV_WELL_PARENT
CREATE TABLE INV_WELL_PARENT (
	PARENT_WELL_ID_FK NUMBER(16),
	CHILD_WELL_ID_FK NUMBER(16),
	PRIMARY KEY(PARENT_WELL_ID_FK, CHILD_WELL_ID_FK),
	CONSTRAINT "INV_WELL_PARENT_PARENTIDFK_FK"
		FOREIGN KEY("PARENT_WELL_ID_FK")
	    REFERENCES "INV_WELLS"("WELL_ID")
    	ON DELETE CASCADE,
	CONSTRAINT "INV_WELL_PARENT_CHILDIDFK_FK"
		FOREIGN KEY("CHILD_WELL_ID_FK")
	    REFERENCES "INV_WELLS"("WELL_ID")
    	ON DELETE CASCADE)
	ORGANIZATION INDEX;    
-- Add indexes  
CREATE INDEX INV_WELL_PARENT_CHILDID_IDX ON INV_WELL_PARENT(CHILD_WELL_ID_FK) TABLESPACE &&indexTableSpaceName;         
  
-- Create table INV_REPORTPARAMS
CREATE TABLE INV_REPORTPARAMS (REPORT_ID number NOT NULL,
	PARAMNAME varchar2(255) NOT NULL,
  PARAMDISPLAYNAME varchar2(255) NOT NULL,
  ISREQUIRED number,
	PARAMTYPE varchar2(10) NOT NULL
  );
  
-- Alter table INV_REPORTS
alter table INV_REPORTS add(
	REPORTSQL CLOB,
  REPORT_DESC VARCHAR2(2000),
  QUERYNAME VARCHAR2(255)
  );

-- Create table INV_REQUEST_STATUS    
CREATE TABLE "INV_REQUEST_STATUS"(
	"REQUEST_STATUS_ID" NUMBER(4) NOT NULL,
	"REQUEST_STATUS_NAME" VARCHAR2(50) NOT NULL,
   CONSTRAINT "INV_REQUEST_STATUS_PK"
		PRIMARY KEY("REQUEST_STATUS_ID") USING INDEX TABLESPACE &&indexTableSpaceName
  );

-- Create table INV_REQUEST_TYPES
CREATE TABLE "INV_REQUEST_TYPES"(
	"REQUEST_TYPE_ID" NUMBER(4) NOT NULL,
	"REQUEST_TYPE_NAME" VARCHAR2(50) NOT NULL,
  CONSTRAINT "INV_REQUEST_TYPES_PK"
		PRIMARY KEY("REQUEST_TYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
  );
  
-- Alter table INV_REQUESTS
alter table INV_REQUESTS add(
	REQUEST_TYPE_ID_FK NUMBER(4) not null,
  REQUEST_STATUS_ID_FK NUMBER(4) not null,
  CONTAINER_TYPE_ID_FK NUMBER(4),
  NUMBER_CONTAINERS NUMBER(4),
  QUANTITY_LIST VARCHAR2(1000),
  SHIP_TO_NAME VARCHAR2(255),
  DECLINE_REASON VARCHAR2(1000),
  "EXPENSE_CENTER" VARCHAR2(255),  
	constraint INV_REQUESTS_REQUESTSTATUS_FK foreign key (REQUEST_STATUS_ID_FK)
  	references INV_REQUEST_STATUS (REQUEST_STATUS_ID),
	constraint INV_REQUESTS_REQUESTTYPE_FK foreign key (REQUEST_TYPE_ID_FK)
  	references INV_REQUEST_TYPES (REQUEST_TYPE_ID)
  );
alter table INV_REQUESTS
  drop constraint INV_REQUESTS_LOC_ID_FK;
alter table INV_REQUESTS
  add constraint INV_REQUESTS_LOC_ID_FK foreign key (DELIVERY_LOCATION_ID_FK)
  references INV_LOCATIONS (LOCATION_ID) on delete set null;
-- Add indexes
CREATE INDEX REQUEST_TYPE_ID_FK_IDX ON INV_REQUESTS(REQUEST_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX REQUEST_STATUS_ID_FK_IDX ON INV_REQUESTS(REQUEST_STATUS_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX IREQUESTS_CONTAINER_ID_FK_IDX ON INV_REQUESTS(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;

-- Alter table INV_SYNONYMS
alter table INV_SYNONYMS
  drop constraint INV_SYN_COMPOUND_FK;
alter table INV_SYNONYMS add (
  "RID" NUMBER(12) NOT NULL,
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
  constraint INV_SYN_COMPOUND_FK foreign key (COMPOUND_ID_FK)
  	references INV_COMPOUNDS (COMPOUND_ID) on delete cascade);
	  
-- Create table INV_REQUEST_SAMPLES
CREATE TABLE INV_REQUEST_SAMPLES(
	REQUEST_ID_FK NUMBER(16),
	CONTAINER_ID_FK NUMBER(16),
	PRIMARY KEY(REQUEST_ID_FK, CONTAINER_ID_FK),
	CONSTRAINT "INV_REQSAMPLES_REQUESTID_FK"
		FOREIGN KEY("REQUEST_ID_FK")
	  REFERENCES "INV_REQUESTS"("REQUEST_ID")
    ON DELETE CASCADE,
	CONSTRAINT "INV_REQSAMPLES_CONTAINERID_FK"
		FOREIGN KEY("CONTAINER_ID_FK")
	  REFERENCES "INV_CONTAINERS"("CONTAINER_ID")
    ON DELETE CASCADE)
  ORGANIZATION INDEX;    
-- Add indexes  
CREATE INDEX INV_REQSAMPLES_CONTAINERID_IDX ON INV_REQUEST_SAMPLES(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;  
  
-- Drop old INV_WELL_COMPOUNDS  
DROP TABLE inv_well_compounds;

-- Create table INV_WELL_COMPOUNDS
CREATE TABLE "INV_WELL_COMPOUNDS"(
	WELL_COMPOUND_ID NUMBER(9) NOT NULL,
  WELL_ID_FK NUMBER(9) NOT NULL,
	COMPOUND_ID_FK NUMBER(9),
  REG_ID_FK NUMBER(9),
  BATCH_NUMBER_FK NUMBER(9),
  CONSTRAINT "INV_WELL_COMPOUNDS_PK" 
		PRIMARY KEY("WELL_COMPOUND_ID") USING INDEX TABLESPACE &&indexTableSpaceName, 
  CONSTRAINT "INV_WELLCMPD_COMPOUNDID_FK" 
		FOREIGN KEY("COMPOUND_ID_FK") 
		REFERENCES "INV_COMPOUNDS"("COMPOUND_ID"),
  CONSTRAINT "INV_WELLCMPD_WELLID_FK" 
		FOREIGN KEY("WELL_ID_FK") 
		REFERENCES "INV_WELLS"("WELL_ID")
    ON DELETE CASCADE
  );
-- Add indexes
CREATE INDEX IWC_COMPOUND_ID_FK_IDX ON INV_WELL_COMPOUNDS(COMPOUND_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX IWC_WELL_ID_FK_IDX ON INV_WELL_COMPOUNDS(WELL_ID_FK) TABLESPACE &&indexTableSpaceName;

-- Alter table INV_PLATES
ALTER TABLE inv_plates DROP CONSTRAINT "PLATE_SOLVENT_UNIT_FK";
ALTER TABLE inv_plates DROP CONSTRAINT "PLATE_LOCATION_FK";
ALTER TABLE inv_plates ADD(
  CONSTRAINT "PLATE_SOLVENT_UNIT_FK" 
		FOREIGN KEY("SOLVENT_VOLUME_UNIT_ID_FK")
	 	REFERENCES "INV_UNITS"("UNIT_ID"),
  CONSTRAINT PLATE_LOCATION_FK
		FOREIGN KEY (LOCATION_ID_FK)
		REFERENCES "INV_LOCATIONS" (LOCATION_ID)
		ON DELETE CASCADE,
	CONSTRAINT "INV_PLATES_SOLVENTID_FK"
  	FOREIGN KEY("SOLVENT_ID_FK")
    REFERENCES "INV_SOLVENTS"("SOLVENT_ID"));

-- NEW INDICES
CREATE INDEX INV_ALWD_PTYPES_LOCATIONID_IDX ON INV_ALLOWED_PTYPES(LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_ALWD_PTYPES_PTYPEID_IDX ON INV_ALLOWED_PTYPES(PLATE_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_ENUMERATION_ESETID_IDX ON INV_ENUMERATION(ESET_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_SOLVENTS_COMPOUNDID_IDX ON INV_SOLVENTS(COMPOUND_ID_FK) TABLESPACE &&indexTableSpaceName;
  
-- SEQUENCES  
CREATE SEQUENCE SEQ_INV_REPORTS INCREMENT BY 1 START WITH 1000;
CREATE SEQUENCE SEQ_INV_COUNTRY INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_STATES INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_ADDRESS INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_REQUEST_TYPES INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_REQUEST_STATUS INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_ORDER_STATUS INCREMENT BY 1 START WITH 1000 MAXVALUE 999999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_ORDERS INCREMENT BY 1 START WITH 1000;
CREATE SEQUENCE SEQ_INV_CON_CHECKIN_DETAILS INCREMENT BY 1 START WITH 1000;
CREATE SEQUENCE SEQ_INV_WELL_COMPOUNDS INCREMENT BY 1 START WITH 1000;
CREATE SEQUENCE SEQ_INV_OWNERS INCREMENT BY 1 START WITH 1000 MAXVALUE 999999 MINVALUE 1 NOCYCLE NOCACHE ORDER;

-- TRIGGERS
@@..\..\triggers\inv_requests_ad0.trg;
@@..\..\triggers\inv_requests_au0.trg;
@@..\..\triggers\trg_inv_containers_id.sql
@@..\..\triggers\trg_inv_containers_family_bu.sql
@@..\..\triggers\trg_inv_reports_id.sql
@@..\..\triggers\trg_plate_id.SQL
@@..\..\triggers\inv_suppliers_bi0.trg;
@@..\..\triggers\inv_suppliers_au0.trg;
@@..\..\triggers\inv_suppliers_ad0.trg;
@@..\..\triggers\inv_orders_bi0.trg;
@@..\..\triggers\inv_orders_au0.trg;
@@..\..\triggers\inv_orders_ad0.trg;
@@..\..\triggers\inv_order_containers_bi0.trg;
@@..\..\triggers\inv_order_containers_au0.trg;
@@..\..\triggers\inv_order_containers_ad0.trg;
@@..\..\triggers\inv_container_checkin_details_bi0.trg;
@@..\..\triggers\inv_container_checkin_details_au0.trg;
@@..\..\triggers\inv_container_checkin_details_ad0.trg;
@@..\..\triggers\inv_synonyms_bi0.trg
@@..\..\triggers\inv_synonyms_au0.trg
@@..\..\triggers\inv_synonyms_ad0.trg

--------------------------------------
--  New trigger trg_inv_address_id  --
--------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_ADDRESS_ID"
    BEFORE INSERT
    ON "INV_ADDRESS"
    FOR EACH ROW
    begin
		if :new.Address_ID is null then
			select seq_Inv_Address.nextval into :new.Address_id from dual;
		end if;
end;
/

------------------------------------------------
--  New trigger trg_inv_con_checkin_det_cdid  --
------------------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_CON_CHECKIN_DET_CDID"
    BEFORE INSERT
    ON "INV_CONTAINER_CHECKIN_DETAILS"
    FOR EACH ROW
    
begin
		if :new.CHECKIN_DETAILS_ID is null then
			select seq_INV_CON_CHECKIN_DETAILS.nextval into :new.CHECKIN_DETAILS_ID from dual;
		end if;
end;
/

--------------------------------------
--  New trigger trg_inv_country_id  --
--------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_COUNTRY_ID"
    BEFORE INSERT
    ON "INV_COUNTRY"
    FOR EACH ROW
    
begin
		if :new.Country_ID is null then
			select seq_Inv_Country.nextval into :new.Country_ID from dual;
		end if;
end;
/

-------------------------------------------
--  New trigger trg_inv_orders_order_id  --
-------------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_ORDERS_ORDER_ID"
    BEFORE INSERT
    ON "INV_ORDERS"
    FOR EACH ROW
    
begin
		if :new.ORDER_ID is null then
			select seq_INV_ORDERS.nextval into :new.ORDER_ID from dual;
		end if;
end;
/

--------------------------------------------------
--  New trigger trg_inv_order_status_ordrstsid  --
--------------------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_ORDER_STATUS_ORDRSTSID"
    BEFORE INSERT
    ON "INV_ORDER_STATUS"
    FOR EACH ROW
    
begin
		if :new.ORDER_STATUS_ID is null then
			select seq_INV_ORDER_STATUS.nextval into :new.ORDER_STATUS_ID from dual;
		end if;
end;
/

---------------------------------------------
--  New trigger trg_inv_request_status_id  --
---------------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_REQUEST_STATUS_ID"
    BEFORE INSERT
    ON "INV_REQUEST_STATUS"
    FOR EACH ROW
    
begin
		if :new.REQUEST_STATUS_ID is null then
			select seq_INV_REQUEST_STATUS.nextval into :new.REQUEST_STATUS_ID from dual;
		end if;
end;
/

-------------------------------------------
--  New trigger trg_inv_request_type_id  --
-------------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_REQUEST_TYPE_ID"
    BEFORE INSERT
    ON "INV_REQUEST_TYPES"
    FOR EACH ROW
    
begin
		if :new.REQUEST_TYPE_ID is null then
			select seq_INV_REQUEST_TYPES.nextval into :new.REQUEST_TYPE_ID from dual;
		end if;
end;
/

-------------------------------------
--  New trigger trg_inv_states_id  --
-------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_STATES_ID"
    BEFORE INSERT
    ON "INV_STATES"
    FOR EACH ROW
    
begin
		if :new.State_ID is null then
			select seq_Inv_States.nextval into :new.State_id from dual;
		end if;
end;
/

------------------------------------------
--  New trigger trg_inv_well_compounds  --
------------------------------------------
CREATE OR REPLACE TRIGGER "TRG_INV_WELL_COMPOUNDS"
    BEFORE INSERT
    ON "INV_WELL_COMPOUNDS"
    FOR EACH ROW
    
begin
		if :new.WELL_COMPOUND_ID is null then
			select seq_inv_well_compounds.nextval into :new.well_compound_id from dual;
		end if;
end;
/
-- Create table level triggers for table INV_OWNERS
CREATE OR REPLACE TRIGGER "TRG_INV_OWNERS" 
    BEFORE INSERT 
    ON "INV_OWNERS" 
    FOR EACH ROW 
    begin
		if :new.OWNER_ID is null then
			select seq_inv_owners.nextval into :new.owner_id from dual;
		end if;
end;
/




  