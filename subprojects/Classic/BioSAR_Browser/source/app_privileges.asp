<%'Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved
Function doMapPrivilege(ByRef User_Conn, ByRef DBA_Conn, ByRef SEC_Conn, ProcessTypeIn, RoleName, PrivilegeFieldName)
		if ProcessTypeIn = "ADD" then
			temp = Split(PrivilegeFieldName, ";",-1)
			temp2 = Split(temp(0), ".",-1)
			PrivilegeName = temp2(1)
			value = Request(temp(0))
			if value = "1" then 
				ProcessType = "ADD"
			else
				Exit Function 'no need to do anything, this is a new role
			end if
		else
			temp = Split(PrivilegeFieldName, ".",-1)
			PrivilegeName = temp(2)
			value = Request(PrivilegeFieldName)
			if value = "1" then 
				ProcessType = "ADD"
			else
				ProcessType = "REVOKE"
			end if
		end if
		Sec_Table= Application("SEC_USERNAME")
		Appkey = Application("AppKey")
		
		SEC_SelectPrivileges = "SELECT ON " & Sec_Table & "." & UCase(Application("PRIV_TABLE_NAME"))
		SEC_SelectPrivileges = SEC_SelectPrivileges  & ",SELECT ON " & Sec_Table & "." & "PEOPLE"
		SEC_SelectPrivileges = SEC_SelectPrivileges  & ",SELECT ON " & Sec_Table & "." & "SITES"
		SEC_SelectPrivileges = SEC_SelectPrivileges &  ",SELECT ON " & Sec_Table & "." & "PRIVILEGE_TABLES"
		SEC_SelectPrivileges = SEC_SelectPrivileges  & ",SELECT ON " & Sec_Table & "." & "SECURITY_ROLES"
		
		FG_MGMENT_SELECT ="SELECT ON BIOSARDB.DB_FORM"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_FORMGROUP"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_FORMGROUP_TABLES"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_FORMTYPE "
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_FORMTYPE_DOPT"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_FORM_ITEM"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_QUERY"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_TABLE"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_COLUMN"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_DATATYPE_DISPLAY_TYPE"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_DISPLAY_OPTION"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_DISPLAY_TYPE"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_DTYP_DOPT"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_RELATIONSHIP"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_SCHEMA"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_STRUCTURES"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_TABLE"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_VW_CHILD_TABLES"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_VW_COLUMN_TABLE"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_VW_FORMGROUP_TABLES"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_VW_FORMITEMS_ALL"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_VW_PARENT_TABLES"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.DB_VW_TABLE_SCHEMA"
		FG_MGMENT_SELECT =FG_MGMENT_SELECT & ",SELECT ON BIOSARDB.EXCEPTIONS"

		
		FG_MGMENT_DELETE ="DELETE UPDATE ON BIOSARDB.DB_FORM"
		FG_MGMENT_DELETE =FG_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_FORMGROUP"
		FG_MGMENT_DELETE =FG_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_FORMGROUP_TABLES"
		FG_MGMENT_DELETE =FG_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_FORMTYPE "
		FG_MGMENT_DELETE =FG_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_FORMTYPE_DOPT"
		FG_MGMENT_DELETE =FG_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_FORM_ITEM"
		FG_MGMENT_DELETE =FG_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_QUERY"
		
		FG_MGMENT_INSERT ="INSERT ON BIOSARDB.DB_FORM"
		FG_MGMENT_INSERT =FG_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_FORMGROUP"
		FG_MGMENT_INSERT =FG_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_FORMGROUP_TABLES"
		FG_MGMENT_INSERT =FG_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_FORMTYPE "
		FG_MGMENT_INSERT =FG_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_FORMTYPE_DOPT"
		FG_MGMENT_INSERT =FG_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_FORM_ITEM"
		FG_MGMENT_INSERT =FG_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_QUERY"
		
		FG_MGMENT_UPDATE ="UPDATE ON BIOSARDB.DB_FORM"
		FG_MGMENT_UPDATE =FG_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_FORMGROUP"
		FG_MGMENT_UPDATE =FG_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_FORMGROUP_TABLES"
		FG_MGMENT_UPDATE =FG_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_FORMTYPE "
		FG_MGMENT_UPDATE =FG_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_FORMTYPE_DOPT"
		FG_MGMENT_UPDATE =FG_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_FORM_ITEM"
		FG_MGMENT_UPDATE =FG_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_QUERY"
		
		FG_ADMIN_MGMENT_SELECT =  "SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_COLUMN"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_DATATYPE_DISPLAY_TYPE"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_DISPLAY_OPTION"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_DISPLAY_TYPE"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_DTYP_DOPT"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_RELATIONSHIP"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_SCHEMA"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_STRUCTURES "
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_TABLE"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_VW_CHILD_TABLES"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_VW_COLUMN_TABLE"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_VW_FORMGROUP_TABLES "
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_VW_FORMITEMS_ALL"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_VW_PARENT_TABLES"
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.DB_VW_TABLE_SCHEMA "
		FG_ADMIN_MGMENT_SELECT = FG_ADMIN_MGMENT_SELECT & ",SELECT, INSERT, DELETE, UPDATE ON BIOSARDB.EXCEPTIONS"

		FG_ADMIN_MGMENT_DELETE =  "DELETE ON BIOSARDB.DB_COLUMN"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_DATATYPE_DISPLAY_TYPE"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_DISPLAY_OPTION"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_DISPLAY_TYPE"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_DTYP_DOPT"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_RELATIONSHIP"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_SCHEMA"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_STRUCTURES "
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_TABLE"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_VW_CHILD_TABLES"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_VW_COLUMN_TABLE"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_VW_FORMGROUP_TABLES "
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_VW_FORMITEMS_ALL"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_VW_PARENT_TABLES"
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.DB_VW_TABLE_SCHEMA "
		FG_ADMIN_MGMENT_DELETE = FG_ADMIN_MGMENT_DELETE & ",DELETE ON BIOSARDB.EXCEPTIONS"

		FG_ADMIN_MGMENT_INSERT =  "INSERT ON BIOSARDB.DB_COLUMN"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_DATATYPE_DISPLAY_TYPE"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_DISPLAY_OPTION"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_DISPLAY_TYPE"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_DTYP_DOPT"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_RELATIONSHIP"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_SCHEMA"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_STRUCTURES "
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_TABLE"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_VW_CHILD_TABLES"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_VW_COLUMN_TABLE"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_VW_FORMGROUP_TABLES "
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_VW_FORMITEMS_ALL"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_VW_PARENT_TABLES"
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.DB_VW_TABLE_SCHEMA "
		FG_ADMIN_MGMENT_INSERT = FG_ADMIN_MGMENT_INSERT & ",INSERT ON BIOSARDB.EXCEPTIONS"

		FG_ADMIN_MGMENT_UPDATE =  "UPDATE ON BIOSARDB.DB_COLUMN"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_DATATYPE_DISPLAY_TYPE"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_DISPLAY_OPTION"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_DISPLAY_TYPE"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_DTYP_DOPT"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_RELATIONSHIP"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_SCHEMA"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_STRUCTURES "
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_TABLE"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_VW_CHILD_TABLES"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_VW_COLUMN_TABLE"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_VW_FORMGROUP_TABLES "
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_VW_FORMITEMS_ALL"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_VW_PARENT_TABLES"
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.DB_VW_TABLE_SCHEMA "
		FG_ADMIN_MGMENT_UPDATE = FG_ADMIN_MGMENT_UPDATE & ",UPDATE ON BIOSARDB.EXCEPTIONS"

			


	Select Case UCase(PrivilegeName)

		Case "CAMSOFT_LOG_ON"
			Privileges = "CONNECT"
			isOK = DoProcessPriv(DBA_Conn, ProcessType, RoleName, Privileges)
		Case "ADD_USER_FORMGROUP"
			Privileges = FG_MGMENT_SELECT & "," & FG_MGMENT_DELETE& "," &FG_MGMENT_INSERT& "," &FG_MGMENT_UPDATE
			isOK = DoProcessPriv(User_Conn, ProcessType, RoleName, Privileges)
			'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)		
		Case "EDIT_USER_FORMGROUP"	
			Privileges = FG_MGMENT_SELECT& "," &FG_MGMENT_DELETE& "," &FG_MGMENT_INSERT& "," &FG_MGMENT_UPDATE
			isOK = DoProcessPriv(User_Conn, ProcessType, RoleName, Privileges)
			'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		Case "DELETE_USER_FORMGROUP"	
			Privileges = FG_MGMENT_SELECT& "," &FG_MGMENT_DELETE& "," &FG_MGMENT_INSERT& "," &FG_MGMENT_UPDATE
			isOK = DoProcessPriv(User_Conn, ProcessType, RoleName, Privileges)
			'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		
		Case "SET_FORMGROUP_PUBLIC "
			'business logic only
		Case "ADD_ADMIN_SCHEMA"
			Privileges = FG_ADMIN_MGMENT_SELECT& "," &FG_ADMIN_MGMENT_DELETE& "," &FG_ADMIN_MGMENT_INSERT& "," &FG_ADMIN_MGMENT_UPDATE
			isOK = DoProcessPriv(User_Conn, ProcessType, RoleName, Privileges)
			'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		Case "EDIT_ADMIN_SCHEMA"
			Privileges = FG_ADMIN_MGMENT_SELECT& "," &FG_ADMIN_MGMENT_DELETE& "," &FG_ADMIN_MGMENT_INSERT& "," &FG_ADMIN_MGMENT_UPDATE
			isOK = DoProcessPriv(User_Conn, ProcessType, RoleName, Privileges)
			'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		Case "DELETE_ADMIN_SCHEMA"
			Privileges = FG_ADMIN_MGMENT_SELECT& "," &FG_ADMIN_MGMENT_DELETE& "," &FG_ADMIN_MGMENT_INSERT& "," &FG_ADMIN_MGMENT_UPDATE
			isOK = DoProcessPriv(User_Conn, ProcessType, RoleName, Privileges)
			'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		Case "IS_FORMGROUP_PUBLIC"
			'business logic only
		Case "ADD_ROLES_TABLE"	
			Privileges ="SELECT ANY TABLE,CREATE USER,DROP USER,ALTER USER"
			Privileges = Privileges & ",CREATE ROLE,ALTER ANY ROLE,DROP ANY ROLE,GRANT ANY ROLE,GRANT ANY PRIVILEGE"
						Privileges = Privileges  & ",SELECT ON NOTEBOOKS,SELECT ON PROJECTS,SELECT ON SALTS,SELECT ON COMPOUND_TYPE,SELECT ON IDENTIFIERS"

			isOK = DoProcessPriv(DBA_CONN, ProcessType, RoleName, Privileges)
			Privileges = "DELETE ON " & Sec_Table & ".SECURITY_ROLES,INSERT ON " & Sec_Table & ".SECURITY_ROLES,UPDATE ON " & Sec_Table & ".SECURITY_ROLES"
			Privileges = Privileges & ",DELETE ON " & Sec_Table & "." & UCase(Application("AppKey")) & "_REG_PRIVILEGES,INSERT ON " & Sec_Table & "." & UCase(Application("AppKey")) & "_REG_PRIVILEGES,UPDATE ON " & Sec_Table & "." & UCase(Application("PRIV_TABLE_NAME"))
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, Privileges)
							'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		Case "EDIT_ROLES_TABLE"	
			Privileges ="SELECT ANY TABLE,CREATE USER,DROP USER,ALTER USER"
			Privileges = Privileges & ",CREATE ROLE,ALTER ANY ROLE,DROP ANY ROLE,GRANT ANY ROLE,GRANT ANY PRIVILEGE"
						Privileges = Privileges  & ",SELECT ON NOTEBOOKS,SELECT ON PROJECTS,SELECT ON SALTS,SELECT ON COMPOUND_TYPE,SELECT ON IDENTIFIERS"

			isOK = DoProcessPriv(DBA_CONN, ProcessType, RoleName, Privileges)
			Privileges = "DELETE ON " & Sec_Table & ".SECURITY_ROLES,INSERT ON " & Sec_Table & ".SECURITY_ROLES,UPDATE ON " & Sec_Table & ".SECURITY_ROLES"
			Privileges = Privileges & ",DELETE ON " & Sec_Table & "." & UCase(Application("AppKey")) & "_REG_PRIVILEGES,INSERT ON " & Sec_Table & "." & UCase(Application("AppKey")) & "_REG_PRIVILEGES,UPDATE ON " & Sec_Table & "." & UCase(Application("PRIV_TABLE_NAME"))
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, Privileges)
							'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		Case "DELETE_ROLES_TABLE"	
			Privileges ="SELECT ANY TABLE,CREATE USER,DROP USER,ALTER USER"
			Privileges = Privileges & ",CREATE ROLE,ALTER ANY ROLE,DROP ANY ROLE,GRANT ANY ROLE,GRANT ANY PRIVILEGE"
						Privileges = Privileges  & ",SELECT ON NOTEBOOKS,SELECT ON PROJECTS,SELECT ON SALTS,SELECT ON COMPOUND_TYPE,SELECT ON IDENTIFIERS"

			isOK = DoProcessPriv(DBA_CONN, ProcessType, RoleName, Privileges)
			Privileges = "DELETE ON " & Sec_Table & ".SECURITY_ROLES,INSERT ON " & Sec_Table & ".SECURITY_ROLES,UPDATE ON " & Sec_Table & ".SECURITY_ROLES"
			Privileges = Privileges & ",DELETE ON " & Sec_Table & "." & UCase(Application("AppKey")) & "_REG_PRIVILEGES,INSERT ON " & Sec_Table & "." & UCase(Application("AppKey")) & "_REG_PRIVILEGES,UPDATE ON " & Sec_Table & "." & UCase(Application("PRIV_TABLE_NAME"))
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, Privileges)
							'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		
		
		Case "EDIT_PEOPLE_TABLE"
			Privileges ="UPDATE ON " & Sec_Table & ".PEOPLE"
			Privileges = Privileges  & ",SELECT ON NOTEBOOKS,SELECT ON PROJECTS,SELECT ON SALTS,SELECT ON COMPOUND_TYPE,SELECT ON IDENTIFIERS"

			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, Privileges)
							'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)


		Case "EDIT_USERS_TABLE"
			Privileges ="SELECT ANY TABLE,CREATE USER,DROP USER,ALTER USER"
			Privileges = Privileges & ",CREATE ROLE,ALTER ANY ROLE,DROP ANY ROLE,GRANT ANY ROLE,GRANT ANY PRIVILEGE"
						Privileges = Privileges  & ",SELECT ON NOTEBOOKS,SELECT ON PROJECTS,SELECT ON SALTS,SELECT ON COMPOUND_TYPE,SELECT ON IDENTIFIERS"

			isOK = DoProcessPriv(DBA_CONN, ProcessType, RoleName, Privileges)
			Privileges = "DELETE ON " & Sec_Table & ".SECURITY_ROLES,INSERT ON " & Sec_Table & ".SECURITY_ROLES,UPDATE ON " & Sec_Table & ".SECURITY_ROLES"
			Privileges = Privileges & ",DELETE ON " & Sec_Table & "." & UCase(Application("AppKey")) & "_REG_PRIVILEGES,INSERT ON " & Sec_Table & "." & UCase(Application("AppKey")) & "_REG_PRIVILEGES,UPDATE ON " & Sec_Table & "." & UCase(Application("PRIV_TABLE_NAME"))
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, Privileges)
							'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)
		Case "ADD_PEOPLE_TABLE"
			Privileges ="INSERT ON " & Sec_Table & ".PEOPLE"
			Privileges = Privileges  & ",SELECT ON NOTEBOOKS,SELECT ON PROJECTS,SELECT ON SALTS,SELECT ON COMPOUND_TYPE,SELECT ON IDENTIFIERS"

			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, Privileges)
							'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)

		Case "DELETE_PEOPLE_TABLE"
			Privileges ="DELETE ON " & Sec_Table & ".PEOPLE"
			Privileges = Privileges  & ",SELECT ON NOTEBOOKS,SELECT ON PROJECTS,SELECT ON SALTS,SELECT ON COMPOUND_TYPE,SELECT ON IDENTIFIERS"

			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, Privileges)
							'add sec privileges
			isOK = DoProcessPriv(SEC_CONN, ProcessType, RoleName, SEC_SelectPrivileges)

		

	end Select
	doMapPrivilege = isOK
End Function
%>