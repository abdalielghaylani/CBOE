<%@ LANGUAGE=VBScript %>
<%Response.Buffer = true
Response.Expires = 0%>
<%'Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved

'DO NOT EDIT THIS FILE
'-------------------------------------------------------------------------------
' 'the action page contains the actions the biosar api
'-------------------------------------------------------------------------------
OverrideManageHits = true
OverrideManageQueries=true

%>

<!--#INCLUDE VIRTUAL= "/biosar_browser/biosar_browser_admin/admin_tool/admin_func_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cows_func_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/utility_func_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/global_app_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cs_security/cs_security_utils_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cs_security/cs_security_login_utils_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/biosar_browser/source/app_vbs.asp"-->

<%
	on error resume next
		
	dbkey = "biosar_browser"
	Session("dbkey_admin_tools") = dbkey
	Session("no_gui" & dbkey & formgroup) = True 'pass by response.redirects when necessary
	Session("bypass_ini" & dbkey & formgroup) = true
	request_type = request("request_type") 'choose method SEARCH|REG_TEMP|REG_PERM|DB_INFO
	'validates user and role if valid returns empty string, else returns appropriate message
	Session("UserName" & dbkey)= Trim(Request("user_id"))
	Session("UserID" & dbkey)= Trim(Request("user_pwd"))
	Session("CurrentUser" & dbkey) = Session("UserName" & dbkey)
	method = request("method")
	Select case UCase(request_type)
		case "ADMIN"
			formgroup = "base_form_group"
			bIsAdminRequest = true
		case "SEARCH"
			formgroup = request("formgroup")
			bIsSearchRequest = false
	End select
	if Not Session("UserValidated" & dbKey) = 1 then
		isValidUser = DoUserValidate(dbKey, Application("PrivTableList"))
		Session("UserValidated" & dbKey) = isValidUser
	else
		isValidUser = Session("UserValidated" & dbKey)
	end if
		
if CBool(isValidUser) = true then

	'Session("UserValidated" & dbkey) = 1
	if request_type = "AUTHENTICATE" then
		isValidAction = 1 
	else
		
		isValidAction = DoValidateAction(dbkey, request_type, method)
	end if

	if isValidAction = 1 then 'indicates user is valid and has proper roles for specified action
	
		SetSessionVars dbkey, formgroup, "search" ' reset all variable to defaults
		if UCase(request_type) = "AUTHENTICATE" then
			post_result = "user authenticated"
		else
			Select Case UCase(method)
				Case "EXPOSE_TABLE"
					'get parameters from request object (must be from a post)
					'schemaname
					'tablename
					'pk_column_name
					'table_display_name
					dim rc
					dim rc2
					
					schemaname=request("schemaname")
					tablename=request("tablename")
					the_type = UCase(request("type"))
					pk_column_name=request("pk_column_name")
					table_display_name=request("table_display_name")	
					mime_type = request("MIME")	
					
					if Not inStr(tablename, ".")>0 then
						fullName = schemaname & "." & tablename
					else
						fullName = tablename
					end if
					
					rc= DoExpose(the_type, fullName, pk_column_name, table_display_name)	
					
					' Conditionally crate and expose an extented view
					if Application("CREATE_EXTENDED_BIOASSAY_VIEW") then
						CreateExtendedView schemaname, tablename, table_display_name, extendedViewName, extendedViewDisplayName
						rc2 =DoExpose(the_type, extendedViewName, pk_column_name, extendedViewDisplayName)	
					end if
					' Return the tableid from the initial table exposed	
					sendResponse(rc)
				Case "UNEXPOSE_TABLE"
					'schemaname
					'tablename
					
					schemaname=request("schemaname")
					tablename=request("tablename")
					if Not inStr(tablename, ".")>0 then
						fullName = schemaname & "." & tablename
					else
						fullName = tablename
					end if
					on error resume next
					Call UnexposeTable(fullName)
					if  err.number <> 0 then
						sendResponse("ERROR: " & err.number & err.description)
					else
						'Need to send something so "1" for success seems reasonable.
						sendResponse("1")
					end if
					
				Case "EDIT_LOOKUP"
				
					'schemaname
					'tablename
					'table_id
					'link_column_name
					'lookup_schema
					'lookup_table
					'link_to_column
					'link_to_column_display
					'lookup_join
					'lookup_sort
					'removeLookup  - if -1 will remove lookup for this column
					
					lTableID = request("table_id")
					
					link_column_name = request("link_column_name")
					if link_column_name <> "" then
						if Not lTableID <> "" then
							schemaname=request("schemaname")
							tablename=request("tablename")
							if Not inStr(tablename, ".")>0 then
								fullName = schemaname & "." & tablename
							else
								fullName = tablename
							end if
							lTableID = getTableIDFromName(schemaname, tablename)
						end if
						link_column_id = getColIDFromName(lTableID, link_column_name)
						if Not link_column_id <> "" then
							sendResponse("ERROR: " & link_column_name & " not found")
						end if
						
						removeLookup = request("removeLookup")
						on error resume next
						
						if  trim(removeLookup) = "-1" then
							call  EditLookup(link_column_id,removeLookup,"","","","")
						else
							lu_schemaname=request("link_to_schema")
							lu_tablename=request("link_to_table")
							if Not inStr(tablename, ".")>0 then
								lLookup_fullName = lu_schemaname & "." & lu_tablename
							else
								lLookup_fullName = lu_tablename
							end if
							
							lLookupTableID = getTableIDFromName(lu_schemaname, lu_tablename)
							
							link_to_column=request("link_to_column")
							link_to_column_id = getColIDFromName(lLookupTableID, link_to_column)
							if not link_to_column_id <> "" then
								sendResponse("ERROR: " & link_to_column & " not found")
							end if
							
							link_to_column_display=request("link_to_column_display")
							link_to_column_display_id = getColIDFromName(lLookupTableID, link_to_column_display)
							if not link_to_column_display_id <> "" then
								sendResponse("ERROR: " & link_to_column_display & " not found")
							end if
							'Everything checks out so edit the table:
							lookup_join = request("lookup_join")
							if Not UCase(lookup_join)= "OUTER" then
								lookup_join = "INNER"
							end if
							lookup_sort = request("lookup_sort")
							if Not UCase(lookup_sort)= "DESC" then
								lookup_sort = "ASC"
							end if
							
							call  EditLookup(link_column_id,"",lookup_join,lookup_sort,link_to_column_id,link_to_column_display_id)
						end if
						if Not err.number <> 0 then
							'Need to send something so "1" for success seems reasonable.
							SendResponse("1")
						else
							SendResponse("ERROR: " & err.number & err.description)
						end if
					else
						SendResponse("ERROR: " & "No lookup column in request")
					end if
				
				Case "EDIT_REL"
				'get parameters from request object (must be from a post)
					'schemaname
					'tablename
					'table_id
					'link_column_name
					'parent_schema
					'parent_table
					'parent_column_link_name
					'join_type
					'removeRel  - if -1 will remove relationshipt for this child/parent
					
					lTableID = request("table_id")
					
					link_column_name = request("link_column_name")
					if link_column_name <> "" then
						if Not lTableID <> "" then
							schemaname=request("schemaname")
							tablename=request("tablename")
							if Not inStr(tablename, ".")>0 then
								fullName = schemaname & "." & tablename
							else
								fullName = tablename
							end if
							lTableID = getTableIDFromName(schemaname, tablename)
						end if
						link_column_id = getColIDFromName(lTableID, link_column_name)
						if Not link_column_id <> "" then
							sendResponse("ERROR: " & link_column_name & " not found")
						end if
						on error resume next
						removerel = request("removeRel")
						if Not trim(removerel) = "-1" then
							parent_schemaname=request("parent_schema")
							parent_tablename=request("parent_table")
							if Not inStr(tablename, ".")>0 then
								parent_fullName = parent_schemaname & "." & parent_tablename
							else
								parent_fullName = parent_tablename
							end if
							
							ParentTableID = getTableIDFromName(parent_schemaname, parent_tablename)
							
							parent_column_link_name=request("parent_column_link_name")
							parent_column_link_id = getColIDFromName(ParentTableID, parent_column_link_name)
							if not parent_column_link_id <> "" then
								sendResponse("ERROR: " & parent_column_link_name & " not found")
							end if
							'Everything checks out so edit the table:
							join_type = request("join_type")
							if Not UCase(join_type)= "OUTER" then
								join_type = "INNER"
							end if
							Call doEditRels(link_column_id, parent_column_link_id,"",join_type)
						else
							Call doEditRels(link_column_id, parent_column_link_id,removerel,join_type)
						end if
						if Not err.number <> 0 then
							'Need to send something so "1" for success seems reasonable.
							SendResponse("1")
						else
							SendResponse("ERROR: " & err.number & err.description)
						end if
					else
						SendResponse("ERROR: " & "No link_column_name in request")
					end if
			
				Case "SEARCH_RETURN_XML"
						Session("LIST_RS") = ""
						dbkey = request("dbname")
						formgroup= request("formgroup")
						Session("DBMSTYPE")="ORACLE"
						Session("UserName" & dbkey)= Trim(Request("user_id"))
						Session("UserID" & dbkey)= Trim(Request("user_pwd"))
						Session("result_display_type") = "XML"
						if Not (UCase(formgroup)="BASE_FORM_GROUP" or UCase(formgroup) = "MANAGE_USERS_FORM_GROUP" or  UCase(formgroup)="MANAGE_ROLES_FORM_GROUP" or UCase(formgroup)="MANAGE_TABLES_FORM_GROUP" ) then
							if not isArray(Application("FORM_GROUP" & dbkey & formgroup)) OR CDD_DEBUG = true or CDD_RESULT_DEBUG = true then
								populateFormDefArrays dbkey, formgroup
							end if
						end if
						SetSessionVars dbkey, formgroup, "new_search"
						SetSessionVars dbkey, formgroup, "search"
						
						GetSearchData_blind dbkey, formgroup
						OverrideManageHits = false

					
						strwhere = dorelsearch(dbkey, formgroup, strategy, "new")
						err.clear()
						'!DGB! 04/18/01 hitlist setup
						'LJB 4/22 add to retrieve all to make that work too!!
				
						basetable = GetBaseTable(dbkey, formgroup, "basetable")
						baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
						strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
					
							'clear this so if a refine is done, it will indicate that is is the first and that the base values should be stored.
						Session("Refine" & dbkey & formgroup)=""
						Session("SearchDomain" & dbkey & formgroup) = 0
						'!DGB! 02/03 hitlistmangement
						Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
						Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
					
						Session ("error" & dbkey & formgroup) = false
						strwhere = CSDOCreateCombinedSqlSelectString(strwhere, dbkey, formgroup) 	
						Session("USER_SETTINGS_ID" & dbkey)=Session("UserName" & dbkey)
						GetResults dbkey, formgroup, "cows_sql_request", "no_gui", strWhere
						
						call getListFields(formgroup, dbkey,  "LIST")
		
				Case Else
					sendResponse("no_request_found")
					
			end select
				
			end if 'if UCase(reg_privileges) = "AUTHENTICATE" then
		else 'isValidAction
			sendResponse("invalid privileges")
		end if
else 'isValidUser
	sendResponse("invalid username or password")

end if



function MyTrue(theVal)
Dim theReturn
theReturn=False
select case VarType(theVal)
case vbString
	if UCase(theVal)="TRUE" Then theReturn=True
case vbInteger
	if theVal=1 Then theReturn=True
case vbLong
	if theVal=1 Then theReturn=True
case vbBoolean
	if theVal=True Then theReturn=True
case else
end select
MyTrue=theReturn
end function

function DoValidateAction(dbkey, request_type, method)

	return_val = 0
	Select case UCase(request_type)
		case "ADMIN"
			select case UCase(method)
				Case "EXPOSE_TABLE"
					if Session("ADD_ADMIN_SCHEMA" & dbkey) = True then
						return_val = 1
					end if
				Case "UNEXPOSE_TABLE"
					if Session("DELETE_ADMIN_SCHEMA" & dbkey) = True then
						return_val = 1
					end if
				Case "EDIT_LOOKUP"
					if Session("EDIT_ADMIN_SCHEMA" & dbkey) = True then
						return_val = 1
					end if
				Case "EDIT_REL"
					if Session("EDIT_ADMIN_SCHEMA" & dbkey) = True then
						return_val = 1
					end if
				
			End Select 
		case "SEARCH"
			if (Session("SEARCH_USING_FORMGROUP" & dbkey)) then
				return_val = 1
			end if
	end select
	DoValidateAction = return_val

end function

' DGB  Factored out this sub to expose a table or view so it
' can be called once for exposing the original table/view and once
' for exposing the Extended view.
Function DoExpose(the_type, fullName, pk_column_name, table_display_name)	
		on error resume next
		if the_type = "VIEW" then
			lTableID = ExposeView(fullName)
			if lTableID="NO_TABLE" then
				sendResponse("ERROR: " & fullName & " not found")
			end if
		else
			lTableId = ExposeTable(fullName)
			if lTableID="NO_TABLE" then
				sendResponse("ERROR: " & fullName & " not found")
			end if
			setTableContraints lTableId,fullName 
		end if
							
	if Not err.number <> 0 then
		'convert text values to ids
		if lTableID <> "" then
			if not mime_type <> "" then
				'default to gif
				mime_type = "IMAGE/GIF"
			end if
								
			if pk_column_name <> "" then
				pk_col_id = getColIDFromName(lTableID, pk_column_name)
				if pk_col_ID <> "" then
					call doEditTable(lTableId,table_display_name,"")
					call doEditPrimaryKey(lTableId,pk_col_id)
					if mime_type <> "" then
						call doSetMimeType(lTableID,mime_type) 
					end if
				else
					sendResponse("ERROR: " & pk_column_name & " not found")
				end if
			else
									
				 call  doEditTable(lTableId,table_display_name,"")
			end if
			DoExpose= lTableID  ' =====> EXIT POINT
		else
			sendResponse("ERROR: no TableID returned")
		end if
	else
		sendResponse("ERROR: " & err.number & err.Description)
	end if
End Function

' Calls a stored procedure in BioAssayHTS that creates a new view exteding an exisiting BioAssay view
' Returns the name and displayname of the created extented view
Sub CreateExtendedView(schemaname, BaseName, BaseDisplayName, byRef NewName, byRef NewDisplayName)
	on error resume next
	if not isObject(oConn) then
		Set oConn = SysConnection
	end if
	
	Set cmd= Server.CreateObject("ADODB.Command")
	cmd.CommandType=adCmdStoredProc
	cmd.ActiveConnection = oConn
	cmd.CommandText = schemaname & "." & "CreateExtendedView"
	cmd.Parameters.Append cmd.CreateParameter("pBaseName", 200, 1, len(BaseName), BaseName)
	cmd.Parameters.Append cmd.CreateParameter("pBaseDisplayName", 200, 1, len(BaseDisplayName), BaseDisplayName)
	cmd.Parameters.Append cmd.CreateParameter("oNewName", 200, 2, 30, null)
	cmd.Parameters.Append cmd.CreateParameter("oNewDisplayName", 200, 2, 255, null)
	cmd.Parameters.Append cmd.CreateParameter("oKeyField", 200, 2, 255, null)

	cmd.Execute
	if err then
		if Instr(1,err.Description, "-20002") then
			s = inStr(1, err.Description, "#")
			l = inStr(s+1, err.Description, "#") - s
			SendResponse(Mid(err.Description, s+2, l-2))	
		else
			SendResponse( "ERROR: Executing " & cmd.CommandText & " " & err.description & " " & err.Source) 
		end if
	end if
	NewName = schemaname & "." & cmd.Parameters("oNewName").Value
	NewDisplayName = cmd.Parameters("oNewDisplayName").Value
End Sub

Sub SendResponse(msg)
	response.clear
	response.Write msg
	response.End
end sub



'<!----------------------------- Error Handler --------------------------------->

'If Err Then HandleError dbkey, formgroup, "", "", err.number, err.description
%>
