<%'Copyright 1998-2001 CambridgeSoft Corporation All Rights Reserved
'DO NOT EDIT THIS FILE%>
<!--#INCLUDE FILE = "../source/app_privileges.asp"-->

<%

'******************************************************************
'the following code is for Oracle Admin
'******************************************************************
Function GetRoleList(dbkey, formgroup)

	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql = "Select role_name From security_roles"
	on error resume next
	Set RS = DataConn.Execute(sql)
		
	theErrors = CheckErrors(DataConn)	
		if theErrors = "" then			
			theList = GetLookupList(RS, "ROLE_NAME", "ROLE_NAME")
		else
			theList = ""
		end if
		CloseRS(RS)
		CloseConn(Dataconn)
		GetRoleList = theList
	
End Function

Function GetPeopleList(dbkey, formgroup)

	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql = "Select * From People"
	on error resume next
	Set RS = DataConn.Execute(sql)
	if not (RS.BOF and RS.EOF) then
		RS.MoveFirst
		Do While Not RS.EOF
			theErrors = CheckErrors(DataConn)	
			if theErrors = "" then			
				theList = GetLookupList(RS, "Person_ID", "Last_Name")
			else
				theList = ""
			end if
		RS.MoveNext
		Loop
	end if
	CloseRS(RS)
	CloseConn(Dataconn)
	GetPeopleList = theList
End Function

Function GetPeoplePersonIDList(dbkey, formgroup)

	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql = "Select * From People"
	on error resume next
	Set RS = DataConn.Execute(sql)
	if not (RS.BOF and RS.EOF) then
		RS.MoveFirst
		Do While Not RS.EOF
			
			theErrors = CheckErrors(DataConn)	
			if theErrors = "" then			
				if theList <> "" then 
					theList = theList & "," & RS("PERSON_ID") 
				else
					theList =  RS("PERSON_ID")
				end if
			else
				theList = ""
			end if
			RS.MoveNext
		loop
	end if
	CloseRS(RS)
	CloseConn(DataConn)
GetPeoplePersonIDList = theList
	
End Function


Function GetPeopleUserIDList(dbkey, formgroup)
Set DataConn = GetConnection(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
	sql = "Select * From People"
	on error resume next
	Set RS = DataConn.Execute(sql)
	if not (RS.BOF and RS.EOF) then
		RS.MoveFirst
		Do While Not RS.EOF
			theErrors= CheckErrors(DataConn)	
			if theErrors = "" then			
				if theList <> "" then 
					theList = theList & "," & "'" & RS("USER_ID") & "'"
				else
					theList =  "'" & RS("USER_ID")& "'"
				end if
			else
				theList = ""
			end if
		RS.MoveNext
	loop
	end if
	CloseRS(RS)
	CloseConn(DataConn)
	GetPeopleUserIDList = theList
End Function

Function GetTableSpace(dbkey, formgroup, priv_table)

	Set DataConn = GetConnection(dbkey, formgroup, priv_table)	
	
	sql = "Select * From privilege_tables where Upper(privilege_table_name)=" & "'" & UCase(priv_table) & "'"
	
	on error resume next
	Set RS = DataConn.Execute(sql)
	if not (RS.BOF and RS.EOF) then
		CheckErrors(DataConn)	
		if theErrors = "" then			
			thevalue =  RS("TABLE_SPACE")
		else
			Response.Write theErrors
		end if
		
	end if
	CloseRS(RS)
	CloseConn(DataConn)
	GetTableSpace = thevalue
End Function

Function GetRoleListSingle(byRef RS, byval field1)
	on error resume next
	if not (rs.bof and rs.eof) then
		rs.MoveFirst
			Do While Not rs.EOF
				 if theList <> "" then
				 	theList = theList & "," & rs.fields(field1)
					else
					 theList = rs.fields(field1) 
				 end if
				rs.MoveNext
			loop
	end if
	CloseRS(RS)
	GetRoleListSingle= theList
End Function


Function GetSingleList(ByRef RS, ByVal field1)
	on error resume next
	if not (rs.bof and rs.eof) then
		rs.MoveFirst
			Do While Not rs.EOF
				 if theList <> "" then
				 	theList = theList & "," & rs.fields(field1)
					else
					 theList = rs.fields(field1) 
				 end if
				rs.MoveNext
			loop
	end if
	GetSingleList= theList
End Function 



Function CheckErrors(ByRef DataConn)
	on error resume next
	if DataConn.Errors.Count > 0 then
		for i = 0 to DataConn.Errors.Count 
			if the_errors <> "" then
				the_errors=  the_errors & "<br>" & DataConn.Errors.Item(i)
			else
				the_errors=  DataConn.Errors.Item(i)
			end if
		next
		GetErrors = the_errors
	else
		GetErrors = ""
	end if
End FUnction



Function getUsersListSQL(ByRef DataConn, dbkey, formgroup, priv_table)
	tablespace=GetTableSpace(dbkey, formgroup,  priv_table)
	
	sql= "Select username,default_tablespace from dba_users where Upper(default_tablespace) =" & "'" & UCase(tablespace) & "'" & " ORDER BY USERNAME"
	getUsersListSQL = sql
end function

Function getSingleUserSQL(dbkey, formgroup, priv_table, UserName)
	tablespace=GetTableSpace(dbkey, formgroup,  priv_table)
	sql= "Select username,default_tablespace from dba_users where Upper(default_tablespace) =" & "'" & UCase(tablespace) & "'" & " AND Upper(default_tablespace)=" & "'" & UCase(UserName) & "'"
	getSingleUserSQL = sql
end function

Function ListAllUsers(dbkey, formgroup, priv_table)
	on error resume next
	Set DataConn = GetConnection(dbkey, formgroup, priv_table)	
	sql=getUsersListSQL(DataConn, dbkey, formgroup, priv_table)
	Set RS =DataConn.Execute(sql)
	isOK = checkErrors(DataConn)
	if isOK <> "" then
		Response.Write isOK
		theUserList = ""
	else
		theUserList = GetLookupList(RS,"username", "username")
	end if
	ListAllUsers = theUserList
	
	CloseConn(DataConn)
	CloseRS(RS)
End Function


Function ListAllUnBoundUsers(dbkey, formgroup, priv_table)
	'on error resume next
	Set DataConn = GetConnection(dbkey, formgroup, "people")	
	thePeopleUserIDList = GetPeopleUserIDList(dbkey, formgroup)
	theTableSpace = GetTableSpace(dbkey, formgroup, priv_table)
	sql = "Select distinct username from dba_users, people where Upper(default_tablespace) ='"  & UCase(theTableSpace) & "' AND Upper(username) not in(" & UCase(thePeopleUserIDList) & ")"
	Set RS =DataConn.Execute(sql)
	isOK = checkErrors(DataConn)	
	
	if isOK <> "" then
		Response.Write isOK
		theUserList = ""
	else
	Response.Write RS("username")
		theUserList = GetLookupList(RS,"username", "username")
	end if
	
	CloseConn(DataConn)
	CloseRS(RS)
	ListAllUnBoundUsers = theUserList
End Function


Function ListAllUsers22(dbkey, formgroup)
	'on error resume next
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")	
	tablespace = GetTableSpace(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
	sql= "Select username,default_tablespace from dba_users where Upper(default_tablespace) ='" & tablespace & "'"
	Set RS =DataConn.Execute(sql)
	isOK = checkErrors(DataConn)
	if isOK <> "" then
		Response.Write isOK
		theList = ""
	else
		theList = GetLookupList(RS,"username", "username")
	end if
	ListAllUsers = theList
	CloseConn(DataConn)
	CloseRS(RS)
End Function

Function GetUserPassword(dbkey,formgroup,username)
	storeUsername = Session("UserName" & dbkey)
	storePassword = Session("UserID" & dbkey)
	'set temporary privs so password can be updated by any user
	Session("UserName" & dbkey)=Application("DBA_USERNAME")
	Session("UserID" & dbkey)=Application("DBA_PWD")
	on error resume next
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql= "Select * from dba_users where Upper(username) =" & "'" & UCase(username) & "'"
	Set RS=DataConn.Execute(sql)
	isOK = checkErrors(DataConn)
	on error goto 0
	if isOK = "" then
		if not(RS.BOF and RS.EOF) then
			'RS.movefirst
			password = RS("password")
			CloseRS(RS)
			CloseConn(DataConn)
			
		else
			password = ""
			CloseConn(DataConn)

		end if
	else
		Response.Write isOK
		password = ""
		CloseRS(RS)
		CloseConn(DataConn)
	end if
	
	Session("UserName" & dbkey)=storeUsername
	Session("UserID" & dbkey)=storePassword
	GetUserPassword = password
End Function


Function GetUserRoles(dbkey,formgroup,username)
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql= "Select granted_role from dba_role_privs where Upper(grantee) =" & "'" & UCase(username) & "'"
	Set RS =DataConn.Execute(sql)
	isOK = checkErrors(DataConn)
	if isOK = "" then
		roleslist = GetRoleListSingle(RS, "GRANTED_ROLE")
	else
		Response.Write isOK
		roleslist = ""
	end if
	CloseConn(DataConn)
	CloseRS(RS)
	GetUserRoles= roleslist 
End Function


Function update_user(user_name)
	'on error resume next
	change_roles= Request.querystring("change_roles")
	change_password=Request.QueryString("change_password")
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")

	if change_roles = "true" then
		
		orig_roles= Request("original_roles_hidden")
		if orig_roles <> "" then
			thearray = Split(orig_roles, ",", -1)
			for i = 0 to UBound(thearray)
				sql = "REVOKE " & QuotedString(UCase(thearray(i)))  & " FROM " & QuotedString(UCase(user_name)) 
				DataConn.Execute(sql)
				isOk = CheckErrors(DataConn)
				sql = " ALTER USER " & QuotedString(UCase(user_name))  & " DEFAULT ROLE NONE"
				DataConn.Execute sql
				DataConn.Execute "commit"
				isOk = CheckErrors(DataConn)
			next
		end if
		
		new_roles=Request("current_roles_hidden")
		thearray = Split(new_roles, ",", -1)
		
		for i = 0 to UBound(thearray)
			sql = "GRANT " & QuotedString(UCase(thearray(i))) & ""  & " TO " & QuotedString(UCase(user_name))
			DataConn.Execute(sql)
			sql =  "ALTER USER " & QuotedString(UCase(user_name)) & " DEFAULT ROLE ALL"
			DataConn.Execute sql
			DataConn.Execute "commit"
			isOk = CheckErrors(DataConn)
		next
	end if

	if change_password = "true" then
		new_password = Request("password")
		sql = "ALTER USER " & QuotedString(user_name) & " IDENTIFIED BY " & QuotedString(new_password)
		DataConn.Execute sql
		DataConn.Execute "commit"
		isOk = CheckErrors(DataConn)
	end if

	update_user = isOK
End Function

Function update_user_pwd(user_name)
	change_password=Request.QueryString("change_password")
	storeUsername = Session("UserName" & dbkey)
	storePassword = Session("UserID" & dbkey)
	'set temporary privs so password can be updated by any user
	Session("UserName" & dbkey)=Application("DBA_USERNAME")
	Session("UserID" & dbkey)=Application("DBA_PWD")
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	if change_password = "true" then
		new_password = Request("password")
		sql = "ALTER USER " & QuotedString(user_name) & " IDENTIFIED BY " & QuotedString(new_password)
		DataConn.Execute sql
		DataConn.Execute "commit"
		isOk = CheckErrors(DataConn)
	end if
	if not isOK <> "" then
		Session("UserName" & dbkey)=storeUsername
		Session("UserID" & dbkey)=new_password
	else
		Session("UserName" & dbkey)=storeUsername
		Session("UserID" & dbkey)=storePassword
	end if
	update_user_pwd = isOK
End Function


Function delete_user(user_name)
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	sql = "DROP USER " & QuotedString(UCase(user_name)) & " CASCADE"
	on error goto 0
	DataConn.Execute sql
	DataConn.Execute "commit"
	
	isOk = CheckErrors(DataConn)
	delete_user = isOk
End Function


Function GetAvailRoleList(dbkey, formgroup, current_roles)
	Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
	on error resume next
	if current_roles <> "" then
		if inStr(current_roles, ",")> 0 then
			current_roles = replace(current_roles,",", "','")
			sql = "Select role_name From security_roles where NOT Upper(ROLE_NAME) IN('" & UCase(current_roles) & "')"
		Else
			sql = "Select role_name From security_roles where NOT Upper(ROLE_NAME)='" &  UCase(current_roles) & "'"

		end if
	else
		sql = "Select role_name From security_roles"
	end if
	Set RS = DataConn.Execute(sql)
		theErrors = CheckErrors(DataConn)	
		if theErrors = "" then			
			theList = GetRoleListSingle(RS, "ROLE_NAME")
		else
			theList = ""
		end if
		GetAvailRoleList = theList
End Function

Function deListStr(current_roles)
	thearray = split(current_roles, ",", -1)
	for i = 0 to UBound(thearray)
		thearray2 = Split(thearray(i), ":", -1)
		if theList <> "" then
			theList = theList & "," & thearray2(1)
		else
			theList = thearray2(1)
		end if
	next
	
	deListStr= theList

End Function

Function UserAlreadyExists(dbkey, formgroup, user_name)
	bUserFound = False
	privTable = Application("Priv_Table_Name")
	users_string = ListAllUsers(dbkey, formgroup, privTable)
	users_array = split(users_string, ",", -1)
		for i = 0 to UBound(users_array)
			temp = split(users_array(i), ":", -1)
			user_test = temp(1)
			if UCase(user_test) = UCase(user_name) then
				bUserFound = True
			end if
		Next
	 UserAlreadyExists = bUserFound
End Function

Function RoleMatchesUser(dbkey, formgroup, user_name)
	bRoleFound = False
	roles_string = GetRoleList(dbkey, formgroup)
	roles_array = split(roles_string, ",", -1)
		for i = 0 to UBound(roles_array)
			temp = split(roles_array(i), ":", -1)
			role_test = temp(1)
			if UCase(role_test) = UCase(user_name) then
				bRoleFound = True
			end if
		Next
	 RoleMatchesUser = bRoleFound

End Function

Function AddUser(dbkey, formgroup)
	user_name=UCase(request("user_name"))
	user_password = request("password_confirmed")
	if Len(user_password) > 0 then
		if Not UserAlreadyExists(dbkey, formgroup,user_name) = True then
			if Not RoleMatchesUser(dbkey, formgroup,user_name) = True then
					role_to_grant = request("roles_hidden")
					Set DataConn = GetNewConnection(dbkey, formgroup, "base_connection")
					on error resume next
					sql = "CREATE USER " & QuotedString(user_name) & " IDENTIFIED BY " & QuotedString(user_password)
					tablespace = GetTableSpace(dbkey, formgroup, Application("PRIV_TABLE_NAME"))
					sql = sql & " DEFAULT TABLESPACE """ & tablespace & """ TEMPORARY TABLESPACE """ & tablespace & """"
					DataConn.Execute sql
					sql = sql & " PROFILE DEFAULT ACCOUNT UNLOCK" 
						
					if CheckErrors(DataConn)= "" then	
						sql =" GRANT ""CONNECT"" TO " & QuotedString(user_name)
						DataConn.Execute sql
					end if
					if CheckErrors(DataConn)= "" then	
						sql = " GRANT " & QuotedString(role_to_grant) & " TO "  & QuotedString(user_name) 
						DataConn.Execute sql
					end if
					if CheckErrors(DataConn)= "" then	
						sql = " ALTER USER " & QuotedString(user_name) & " DEFAULT ROLE ALL"
						DataConn.Execute sql
						DataConn.Execute "commit"
					end if
					sql = "Select person_id where upper(user_id)='" & UCase(user_name) & "'"
					if (rs.bof and rs.eof) then
						sql = "INSERT INTO people(user_code,user_id,supervisor_internal_id,last_name,site_id,active)values('" & user_name & "','" & user_name & "','1','" & user_name & "','1','-1')"
						DataConn.Execute sql
						DataConn.Execute "commit"
						sql = "Select person_id,supervisor_internal_id from people where upper(user_id)='" & UCASE(user_name) & "'"
						Set RS = DataConn.Execute(sql)
						if not (RS.BOF and RS.EOF) then
							person_id = RS("person_id")
						end if
						CloseRS(RS)
						sql = "Update people set supervisor_internal_id = " & person_id & " where person_id=" & person_id
						DataConn.Execute sql
						DataConn.Execute "commit"
					end if

					dba_users_sql_string = getUsersListSQL("", dbkey, formgroup, Application("PRIV_TABLE_NAME"))
					Set RS = DataConn.Execute(dba_users_sql_string)
					if not (RS.BOF and RS.EOF) then
						Session("Base_RS" & dbkey & formgroup) =RS.GetRows(-1)
					end if
					CloseRS(RS)	

	
					theFinalErrors = CheckErrors(DataConn)
	
	
					CloseConn(DataConn)
				else
					theFinalErrors = "The user name cannot match a role name."
				end if 'if rolename matches user name
		else
			theFinalErrors = "The user name " & user_name & " aready exists."
		end if 'username already exists
	else
		theFinalErrors ="The password cannot be empty"
	end if 'if password is empty
	
	AddUser = theFinalErrors
	
End Function


Function DoProcessRole(dbkey, formgroup, PrivNames, table_name, row_id, ProcessType)
	'create dataconns for table owner and dba so so that privs can be granted/revoked to a role
	StoreUser = Session("UserName" & dbkey)
	StorePWD = Session("UserID" & dbkey)
	if UCase(dbkey) = "REG" then
		Session("UserName" & dbkey) =  Application("REG_USERNAME")
		Session("UserID" & dbkey) =Application("REG_PWD")
	else
		username = dbkey  & "_USERNAME"
		userid = dbkey  & "_PWD"
		Session("UserName" & dbkey) =  Application(username)
		Session("UserID" & dbkey) =Application(username)
	end if
	Set REG_Conn = GetConnection(dbkey, formgroup,Application("PRIV_TABLE_NAME"))
	
	Session("UserName" & dbkey) = Application("DBA_USERNAME")
	Session("UserID" & dbkey) =  Application("DBA_PWD")
	Set DBA_Conn = GetConnection(dbkey, formgroup,Application("PRIV_TABLE_NAME"))
	Session("UserName" & dbkey) = Application("SEC_USERNAME")
	Session("UserID" & dbkey) =  Application("SEC_PWD")
	Set SEC_Conn = GetConnection(dbkey, formgroup,Application("PRIV_TABLE_NAME"))
	Session("UserName" & dbkey)=StoreUser
	Session("UserID" & dbkey)=StorePWD 
	
	sql = "SELECT security_roles.role_id from security_roles where Upper(role_name) = '" & UCase(Role_Name) & "'"
	Set RS = SEC_CONN.Execute(sql)
	if not (RS.BOF AND RS.EOF) then
		RS.MoveFirst
		RoleID = RS("ROLE_ID")
		RS.Close()
		RS= Nothing
	Else
		ROLE_ID = ""
	end if
	PrivTableName = Application("PRIV_TABLE_NAME")
	
	Select Case UCase(ProcessType)
		Case "ADD"
			Role_Name = Request("Security_Roles.Role_Name")
			isOK = doCreateRole(DBA_Conn,Role_Name)
			
			if Not isOK <> "" then
			PrivNames_array = Split(PrivNames, ",", -1)
				for i = 0 to UBound(PrivNames_array)
		
					If instr(UCase(PrivNames_array(i)), UCase(Application("PRIV_TABLE_NAME"))) then
					
						isOK =doMapPrivilege(REG_Conn,DBA_Conn, SEC_Conn,ProcessType, Role_Name, PrivNames_array(i))
						if  isOK <> "" then
							Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
						Else
							if RoleID <> "" then
								DoProcessPrivTable SEC_Conn, ProcessType, RoleID, PrivTableName
							end if
						end if
					end if
				Next
			end if

		Case "UPDATE"
			
			Role_Name = Request("Role_Name")
			
			PrivNames_array = Split(PrivNames, ",", -1)
			
			for i = 0 to UBound(PrivNames_array)
			
				If instr(UCase(PrivNames_array(i)), UCase(Application("PRIV_TABLE_NAME"))) then
				
					isOK =doMapPrivilege(REG_Conn,DBA_Conn, SEC_Conn,ProcessType, Role_Name, PrivNames_array(i))
					if  isOK <> "" then
						Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
					else
						if RoleID <> "" then
							DoProcessPrivTable SEC_Conn, ProcessType, RoleID, PrivTableName
						end if
					end if
				end if
				
			Next
			
		Case "DELETE"
			Role_Name = Request("Role_Name")
			isOK = doDeleteRole(DBA_Conn,Role_Name)
			if isOK <> "" then
				Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
			end if
		
	End Select	
	
	
	
	CloseConn(REG_Conn)
	CloseConn(SEC_Conn)
	CloseConn(DBA_Conn)
	doProcessRole = isOK
		

End Function

Function doCreateRole(ByRef DBA_Conn, Role_Name)

	on error resume next
	sql = "DROP ROLE " & Role_Name
	DBA_Conn.Execute sql
	DBA_Conn.Execute "commit"
	sql = "CREATE ROLE " & Role_Name & " NOT IDENTIFIED"
	DBA_Conn.Execute sql
	DBA_Conn.Execute "commit"
	sql = "REVOKE " & Role_Name & " FROM " & Application("DBA_USERNAME")
	DBA_Conn.Execute sql
	DBA_Conn.Execute "commit"
	isOk = CheckErrors(DBA_Conn)
	if isOK <> "" then
		Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
	end if
	doCreateRole = isOK
End Function

Function doDeleteRole(ByRef DBA_Conn, Role_Name)
	on error resume next
	sql = "DROP ROLE " & Role_Name
	DBA_Conn.Execute sql
	DBA_Conn.Execute "commit"
	if isOK <> "" then
		Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & ":" & isOK
	end if
	doDeleteRole = isOK
End Function




Function DoProcessPriv(ByRef DataConn, ProcessType, Role_Name, Privs_List)
	Privs_List_Array = split(Privs_List, ",", -1)
		thecounter = 0
		Session("count")= UBound(Privs_List_Array)

		'start commit loop
		for thecounter = 0 to CLng(Session("count"))
		Select Case UCase(ProcessType)
			Case "ADD"
					on error resume next
					sql = "GRANT " & UCase(Privs_List_Array(thecounter))& ""  & " TO " & QuotedString(UCase(Role_Name))
					DataConn.Execute sql
					DataConn.Execute "commit"
					isOk = CheckErrors(DataConn)
					if err.number > 0 then
						LogAction(sql)
						err.clear()
					End if
					
					
			Case "REVOKE"
					on error resume next
					sql = "REVOKE " & UCase(Privs_List_Array(thecounter))& ""  & " FROM " & QuotedString(UCase(Role_Name))
					DataConn.Execute sql
					DataConn.Execute "commit"
					isOk = CheckErrors(DataConn)
					if err.number > 0 then
						LogAction(sql)
						err.clear()
					End if
		end Select
	Next
	DoProcessPriv = isOK
End Function 
Function DoProcessPrivTable(ByRef SecConn, ProcessType, RoleID, PrivTableName)
		Select Case UCase(ProcessType)
			Case "ADD"
					on error resume next
					sql = "UPDATE PrivTableName SET " & ProcessType & "=1"
					SecConn.Execute sql
					SecConn.Execute "commit"
					
					isOk = CheckErrors(SecConn)
					if err.number > 0 then
						LogAction(sql)
						err.clear()
					End if
			Case "REVOKE"
					on error resume next
					sql = "UPDATE PrivTableName SET " & ProcessType & "=0"
					SecConn.Execute sql
					SecConn.Execute "commit"
					isOk = CheckErrors(SecConn)
					if err.number > 0 then
						LogAction(sql)
						err.clear()
					End if
		end Select

	DoProcessPrivTable = isOK
End Function 

Function DoAddRoleRecord(dbkey, formgroup, table_names, field_names, addType)
	on error resume next
	'loop through data from form groups ado searchable fields and commit each fields data to temp table
	temp_tables_array = split(table_names, ",", -1)
	for i = 0 to UBound(temp_tables_array)
		tablename_temp = temp_tables_array(i)
		
		Set DataConn = GetConnection(dbkey, formgroup, tablename_temp)
		if DataConn.State=0 then ' assume user has been logged out
			DoLoggedOutMsg()
		end if
		Set CommitRS = Server.CreateObject("ADODB.Recordset")
		primkey = GetTableVal(dbkey, tablename_temp, kPrimaryKey) 
		CommitRS.Open tablename_temp, DataConn, adOpenKeyset,  adLockOptimistic 'get the right record with mol_id
		CommitRS.AddNew	
		
		if UCase(addType) = "CASCADE" then
			if i > 0 then
				linkVals = GetTableVal(dbkey,tablename_temp,kSelectJoin)
				temp = Split(linkVals, "=", -1)
				temp2 = Split(temp(0), ".", -1)
				FKey = temp2(1)
				CommitRS(FKey) = newid
			end if
		end if
		field_array = Split(field_names, ",", -1)
	
		for j = 0 to UBound(field_array)
			fullfieldname =field_array(j)
			fieldnamearray = split(fullfieldname, ".", -1)
			fieldname = fieldnamearray(1)
			table_name = fieldnamearray(0)
			
			
			if UCase(table_name) =  UCase(tablename_temp) then
				on error resume next
				
				 theValue = Request(fullfieldname)
				
					if Not isNull(theValue)then 
						CommitRS.Fields(fieldname).Value= theValue
					else
						CommitRS.Fields(fieldname).Value= 0
					end if
					CheckForADOErrors dbkey, DataConn, "DoAddRecord Field error: " & fieldname & Session("SearchData" & fullfieldname & dbkey & formgroup), "log"
				
				
			end if
		Next 'j field

		CommitRS.Update
		newid = CommitRS(primkey)
			'add to BaseRS
		
		
			if i = 0 then
				thearray= Session("Base_RS" & dbkey & formgroup)
				currentcount =UBound(thearray,2)
				ReDim Preserve thearray(0,currentcount + 1)
				thearray(0,currentcount + 1) = newid
				Session("Base_RS" & dbkey & formgroup) = thearray
			end if
		CloseRS(CommitRS)
		CloseConn(DataConn)

	Next 'i table

	if err.number > 0 OR Session("errors_found" & dbkey & formgroup)<> "" then
	Session("errors_found" & dbkey & formgroup) = Session("errors_found" & dbkey & formgroup) & " "  & err.number  & ":" & err.description
		success = Session("errors_found" & dbkey & formgroup)
	else
		success = ""
	end if
	DoAddRoleRecord=success
End Function



%>
