--Copyright Cambridgesoft Corp 2001-2003 all rights reserved
-- NOTE THIS SCRIPT MUST BE RUN FROM THE COMMAND LINE VERSION OF SQLPLUS
-- This script will not run from SQLPlus Worksheet!

-- Creates and grants to default DocManager Roles and populates CS_SECURITY tables
-- Assumes that CS_SECURITY schema exists.

Connect &&securitySchemaName/&&securitySchemaPass@&&serverName

GRANT EXECUTE ON GrantOnCoreTableToAllRoles to &&schemaName;

DECLARE
	n NUMBER;
BEGIN
	select count(*) into n from user_tables where table_name = Upper('&&privTableName');
	if n = 1 then
		execute immediate '
		DROP TABLE &&privTableName CASCADE CONSTRAINTS';
	end if;
END;
/

CREATE TABLE  &&privTableName (
	ROLE_INTERNAL_ID			NUMBER(8,0) not null,
	SEARCH_DOCS					NUMBER(1,0) null,
	SUBMIT_DOCS					NUMBER(1,0) null,
	BATCHLOAD_DOCS				NUMBER(1,0) null,
	DELETE_MY_DOCS				NUMBER(1,0) null,
	DELETE_ALL_DOCS				NUMBER(1,0) null,
	VIEW_HISTORY				NUMBER(1,0) null,
	CONSTRAINT PK_DOCMANAGER_PRIVILEGES PRIMARY KEY (ROLE_INTERNAL_ID),
	CONSTRAINT DOCMANAGERPRIV_SECURITYROLE 
		FOREIGN KEY (ROLE_INTERNAL_ID)
		REFERENCES SECURITY_ROLES (ROLE_ID)	 
) TABLESPACE &&securityTableSpaceName;


--#########################################################
--CREATE ROLES
--#########################################################

-- ROLE creation script for DOCMANAGER/Oracle version
-- Copyright Cambridgesoft corp 1999-2003 all rights reserved
CONNECT &&InstallUser/&&sysPass@&&serverName

prompt Dropping test roles...

DECLARE
	PROCEDURE dropRole(roleName IN varchar2) IS
			n NUMBER;
		BEGIN
			select count(*) into n from dba_roles where Upper(role) = roleName;
			if n > 0 then
				execute immediate 'DROP ROLE ' || roleName;
			end if;
		END dropRole;
BEGIN
	dropRole('DOCMGR_BROWSER');
	dropRole('DOCMGR_SUBMITTER');
	dropRole('DOCMGR_ADMINISTRATOR');
	dropRole('DOCMGR_EXTERNAL');
END;
/

--DOCMGR_BROWSER
CREATE ROLE DOCMGR_BROWSER NOT IDENTIFIED;
REVOKE DOCMGR_BROWSER FROM SYSTEM;
GRANT CSS_USER to DOCMGR_BROWSER;
	
--DOCMGR_SUBMITTER
CREATE ROLE DOCMGR_SUBMITTER NOT IDENTIFIED;
REVOKE DOCMGR_SUBMITTER FROM SYSTEM;
GRANT CSS_USER to DOCMGR_SUBMITTER;
GRANT DOCMGR_BROWSER to DOCMGR_SUBMITTER;
	
--DOCMGR_ADMINISTRATOR
CREATE ROLE DOCMGR_ADMINISTRATOR NOT IDENTIFIED;
REVOKE DOCMGR_ADMINISTRATOR FROM SYSTEM;
GRANT CSS_ADMIN to DOCMGR_ADMINISTRATOR;
GRANT DOCMGR_BROWSER to DOCMGR_ADMINISTRATOR;

--DOCMGR_EXTERNAL
CREATE ROLE DOCMGR_EXTERNAL NOT IDENTIFIED;


Connect &&schemaName/&&schemaPass@&&serverName

-- DOCMGR_BROWSER
GRANT SELECT ON DOCMGR_DOCUMENTS TO DOCMGR_BROWSER;
GRANT SELECT ON DOCMGR_STRUCTURES TO DOCMGR_BROWSER;
-- Added for external links functionality
GRANT SELECT, INSERT, DELETE, UPDATE ON DOCMGR.DOCMGR_EXTERNAL_LINKS TO DOCMGR_BROWSER;

-- DOCMGR_SUBMITTER
GRANT INSERT, UPDATE, DELETE ON DOCMGR_DOCUMENTS TO DOCMGR_SUBMITTER;
GRANT INSERT, UPDATE, DELETE ON DOCMGR_STRUCTURES TO DOCMGR_SUBMITTER;

-- DOCMGR_ADMINISTRATOR
GRANT INSERT, UPDATE, DELETE ON DOCMGR_DOCUMENTS TO DOCMGR_ADMINISTRATOR;
GRANT INSERT, UPDATE, DELETE ON DOCMGR_STRUCTURES TO DOCMGR_ADMINISTRATOR;

-- DOCMGR_EXTERNAL
GRANT SELECT, INSERT ON DOCMGR_DOCUMENTS TO DOCMGR_EXTERNAL;
GRANT SELECT, INSERT ON DOCMGR_STRUCTURES TO DOCMGR_EXTERNAL;
GRANT SELECT, INSERT, DELETE, UPDATE ON DOCMGR.DOCMGR_EXTERNAL_LINKS TO DOCMGR_EXTERNAL;


Connect &&securitySchemaName/&&securitySchemaPass@&&serverName
	
-- SECURITY_ROLES
delete from SECURITY_ROLES where (PRIVILEGE_TABLE_INT_ID) IN (SELECT PRIVILEGE_TABLE_ID FROM PRIVILEGE_TABLES WHERE PRIVILEGE_TABLE_NAME = 'DOCMANAGER_PRIVILEGES');
commit;

--PRIVELEGE_TABLES
delete from PRIVILEGE_TABLES where TABLE_SPACE = 'T_DOCMGR';
commit;

--PRIVELEGE_TABLES
INSERT INTO PRIVILEGE_TABLES (PRIVILEGE_TABLE_NAME, TABLE_SPACE, APP_NAME) values('DOCMANAGER_PRIVILEGES', 'T_DOCMGR','Document Manager');

--SECURITY_ROLES

INSERT INTO SECURITY_ROLES (PRIVILEGE_TABLE_INT_ID, ROLE_NAME, COEIDENTIFIER) values((SELECT PRIVILEGE_TABLE_ID FROM PRIVILEGE_TABLES WHERE PRIVILEGE_TABLE_NAME='DOCMANAGER_PRIVILEGES'), 'DOCMGR_BROWSER', 'DocManager');
INSERT INTO SECURITY_ROLES (PRIVILEGE_TABLE_INT_ID, ROLE_NAME, COEIDENTIFIER) values((SELECT PRIVILEGE_TABLE_ID FROM PRIVILEGE_TABLES WHERE PRIVILEGE_TABLE_NAME='DOCMANAGER_PRIVILEGES'), 'DOCMGR_SUBMITTER', 'DocManager');
INSERT INTO SECURITY_ROLES (PRIVILEGE_TABLE_INT_ID, ROLE_NAME, COEIDENTIFIER) values((SELECT PRIVILEGE_TABLE_ID FROM PRIVILEGE_TABLES WHERE PRIVILEGE_TABLE_NAME='DOCMANAGER_PRIVILEGES'), 'DOCMGR_ADMINISTRATOR', 'DocManager');
INSERT INTO SECURITY_ROLES (PRIVILEGE_TABLE_INT_ID, ROLE_NAME, COEIDENTIFIER) values((SELECT PRIVILEGE_TABLE_ID FROM PRIVILEGE_TABLES WHERE PRIVILEGE_TABLE_NAME='DOCMANAGER_PRIVILEGES'), 'DOCMGR_EXTERNAL','DocManager');

INSERT INTO DOCMANAGER_PRIVILEGES(ROLE_INTERNAL_ID, SEARCH_DOCS, SUBMIT_DOCS, BATCHLOAD_DOCS, DELETE_MY_DOCS, DELETE_ALL_DOCS, VIEW_HISTORY) 
		VALUES ((SELECT ROLE_ID FROM SECURITY_ROLES WHERE ROLE_NAME='DOCMGR_BROWSER'), '1', '0', '0', '0', '0', '0');
		
INSERT INTO DOCMANAGER_PRIVILEGES(ROLE_INTERNAL_ID, SEARCH_DOCS, SUBMIT_DOCS, BATCHLOAD_DOCS, DELETE_MY_DOCS, DELETE_ALL_DOCS, VIEW_HISTORY) 
		VALUES ((SELECT ROLE_ID FROM SECURITY_ROLES WHERE ROLE_NAME='DOCMGR_SUBMITTER'), '1', '1', '0', '1', '0', '1');
		
INSERT INTO DOCMANAGER_PRIVILEGES(ROLE_INTERNAL_ID, SEARCH_DOCS, SUBMIT_DOCS, BATCHLOAD_DOCS, DELETE_MY_DOCS, DELETE_ALL_DOCS, VIEW_HISTORY) 
		VALUES ((SELECT ROLE_ID FROM SECURITY_ROLES WHERE ROLE_NAME='DOCMGR_ADMINISTRATOR'), '1', '1', '1', '1', '1', '1');

INSERT INTO DOCMANAGER_PRIVILEGES(ROLE_INTERNAL_ID, SEARCH_DOCS, SUBMIT_DOCS, BATCHLOAD_DOCS, DELETE_MY_DOCS, DELETE_ALL_DOCS, VIEW_HISTORY) 
		VALUES ((SELECT ROLE_ID FROM SECURITY_ROLES WHERE ROLE_NAME='DOCMGR_EXTERNAL'), '1', '1', '0', '0', '0', '0');
Commit;


DELETE FROM &&securitySchemaName..OBJECT_PRIVILEGES WHERE Schema = '&&SchemaName';


-- SEARCH_DOCS
INSERT INTO &&securitySchemaName..OBJECT_PRIVILEGES VALUES ('SEARCH_DOCS', 'SELECT', '&&SchemaName', 'DOCMGR_DOCUMENTS');
INSERT INTO &&securitySchemaName..OBJECT_PRIVILEGES VALUES ('SEARCH_DOCS', 'SELECT', '&&SchemaName', 'DOCMGR_STRUCTURES');

-- SUBMIT_DOCS
INSERT INTO &&securitySchemaName..OBJECT_PRIVILEGES VALUES ('SEARCH_DOCS', 'INSERT', '&&SchemaName', 'DOCMGR_DOCUMENTS');
INSERT INTO &&securitySchemaName..OBJECT_PRIVILEGES VALUES ('SEARCH_DOCS', 'UPDATE', '&&SchemaName', 'DOCMGR_DOCUMENTS');
INSERT INTO &&securitySchemaName..OBJECT_PRIVILEGES VALUES ('SEARCH_DOCS', 'INSERT', '&&SchemaName', 'DOCMGR_STRUCTURES');
INSERT INTO &&securitySchemaName..OBJECT_PRIVILEGES VALUES ('SEARCH_DOCS', 'UPDATE', '&&SchemaName', 'DOCMGR_STRUCTURES');

-- DELETE_MY_DOCS
INSERT INTO &&securitySchemaName..OBJECT_PRIVILEGES VALUES ('SEARCH_DOCS', 'DELETE', '&&SchemaName', 'DOCMGR_DOCUMENTS');
INSERT INTO &&securitySchemaName..OBJECT_PRIVILEGES VALUES ('SEARCH_DOCS', 'DELETE', '&&SchemaName', 'DOCMGR_STRUCTURES');


Commit;

Connect &&schemaName/&&schemaPass@&&serverName

--- Grant all object permissions to &&securitySchemaName
GRANT SELECT ON "&&SchemaName".DOCMGR_DOCUMENTS TO &&securitySchemaName WITH GRANT OPTION;
GRANT SELECT ON "&&SchemaName".DOCMGR_STRUCTURES TO &&securitySchemaName WITH GRANT OPTION;
GRANT INSERT ON "&&SchemaName".DOCMGR_DOCUMENTS TO &&securitySchemaName WITH GRANT OPTION;
GRANT INSERT ON "&&SchemaName".DOCMGR_STRUCTURES TO &&securitySchemaName WITH GRANT OPTION;
GRANT UPDATE ON "&&SchemaName".DOCMGR_DOCUMENTS TO &&securitySchemaName WITH GRANT OPTION;
GRANT UPDATE ON "&&SchemaName".DOCMGR_STRUCTURES TO &&securitySchemaName WITH GRANT OPTION;
GRANT DELETE ON "&&SchemaName".DOCMGR_DOCUMENTS TO &&securitySchemaName WITH GRANT OPTION;
GRANT DELETE ON "&&SchemaName".DOCMGR_STRUCTURES TO &&securitySchemaName WITH GRANT OPTION;
--Added for new external links functionality
GRANT SELECT ON "&&SchemaName".DOCMGR_EXTERNAL_LINKS TO &&securitySchemaName WITH GRANT OPTION;
GRANT INSERT ON "&&SchemaName".DOCMGR_EXTERNAL_LINKS TO &&securitySchemaName WITH GRANT OPTION;
GRANT UPDATE ON "&&SchemaName".DOCMGR_EXTERNAL_LINKS TO &&securitySchemaName WITH GRANT OPTION;
GRANT DELETE ON "&&SchemaName".DOCMGR_EXTERNAL_LINKS TO &&securitySchemaName WITH GRANT OPTION;


commit;
