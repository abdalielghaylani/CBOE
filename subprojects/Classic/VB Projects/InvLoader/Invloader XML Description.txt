Invloader.xml Description

As of version 11.0.4, Invloader was modified to use dynamic
field definitions in an XML file: Invloader.xml.  Invloader
expects to find the file on the middle tier in the config
subdirectory of the Inventory site.  It allows the display
name of the fields to be changed and it controls the
ordering of the fields as they appear in the mapping grid.
It is also possible to remove fields, but careful testing is
required since if there is a specific reference to a missing
field, an error will be generated.  A default file is
supplied with Invloader to serve as an exemplar, but it must
be edited to accommodate the actual Registration fields,
since their definition is not fixed.

The top element of the XML file is <invloader>.  Under it
there are three sections:

  <defaults>    optional, it is currently used only for the
                  container load limit.  It is optional.
  <fields>      the main section which defines the fields
  <picklists>   defines the Inventory picklists
  <regfields>   defines the Registration fields

The <defaults> section

Currently contains only an attribute whose value is an
override for the container load limit, the number of
containers uploaded in one transmission to the middle tier.
The default is value is 100.  If too many containers are
loaded in one transmission, IIS will time out and the load
will fail.  Reducing the container limit will fix this
problem. A sample section would be:

     <defaults containerlimit="25" />

The <fields> section

This section is composed of <field> elements, whose
attributes define the fields used by Invloader.  Note that
their order in the file is the order they will appear in the
mapping grid.  The attributes are:

  target      Required.  Determines which of the three
               types of upload the field is used for:
               “PLATE”, “CONTAINER”, or “COMPOUND”.   The
               fields are never shared between types.
  
  class       Optional.  Used for CONTAINER and PLATE
               fields.  Indicates that the field is a
               compound value.  “INV” indicates the value is
               used for Inventory compounds (defined in the
               INV_COMPOUNDS table), while “REG” indicates
               the compound will be passed to the
               Registration system.  “REG” fields are
               defined in the <regfields> section of this
               file.
  
  designator  Required.  This is the string used to
               identify the field inside InvLoader.  By
               convention, PLATE fields begin with “P_”,
               CONTAINER fields with “C_”, and COMPOUND
               fields with “S_”.  The designators are
               expected to be globally unique.
  
  xmlparent   Required.  Defines the parent element for the
               field inside the XML file passed to the
               middle tier.  The value is blank for certain
               fields that are processed in a special
               manner.  In general, the value should not be
               changed from that shown in the exemplar file
               delivered with Invloader.  For Registration
               fields, the value should be “COMPOUND" for
               PLATE fields and "REGISTERSUBSTANCE" for
               CONTAINER fields.
  
  xmlposition Required.  Defines the position (attribute or
               subelement) of the field inside the XML file
               passed to the middle tier.  The value is
               blank for certain fields that are processed
               in a special manner.  In general, the value
               should not be changed from that shown in the
               exemplar file delivered with Invloader.  For
               Registration fields, the value should be
               “REGSUBSTANCE " for PLATE fields and
               "ELEMENT" for CONTAINER fields.
  
  field       Required.  This is the name of the field in
               the XML transmitted to the middle tier.  The
               values are fixed for the Inventory fields.
               For the Registration fields, they are defined
               in <regfields> section of the file (see
               below).
  
  display     Required.  This is the display name for the
               field.  It appears in the mapping grid and is
               used when the field must be identified to the
               user.  It may be edited freely, but very long
               values will not work well with the GUI.
  
  type        Required.  The data type of the field, used
               for validity checking.  Values are:
                 eText    Text value (no checking)
                 eInteger Integer value
                 eReal    Real number
                 eDate    Date (locale format)
  
  width       Optional.  The maximum number of characters
               allowed.  Applies to eText type values only.
  
  picklist    Optional.  Specifies a picklist, a list of
               values from which a user can select a value.
               It is composed of a list of display-code
               pairs, where the user selects a display value
               and the corresponding code value is sent to
               the middle tier.  If the picklist value
               begins with a *, then the list is in the
               attribute value, with each display and value
               element (in that order) separated by a pipe
               character: |.  If there is no initial *, the
               value of the attribute must be the name of a
               <picklist>.  For Inventory picklists, they
               are defined in the the <picklists> section of
               the file (see below).  Registration picklists
               are defined in the GetPicklistXML.asp file in
               the Reg folder under the Inventory site on
               the middle tier.

  default     Optional.  Specifies a default value for the
               field.  It will be displayed in the mapping
               grid and may be changed.  Note that for a
               picklist, the default value should be a
               display value, not a code value.
 
  canbelist   Optional.  If present with value “Y”,
               indicates that the value can be a list.
               Supported only for Registration fields.

The <picklists> section

This section is composed of <picklist> elements, whose
attributes define the picklists used by Invloader.  Note
that this section is used by both the Invloader client and
the middle tier.  The only attribute is the “name”, which is
required.  The value of the <picklist> element is the SQL
used to retrieve the picklist.  The SQL must return two
values.  The first value must be the display value, the
second the code value.  If the values are the same, use SQL
that returns the same value twice.

The <regfields> section

This section defines the Registration fields that can be
uploaded by Invloader.  Creation of a Registration compound
is performed through the CreateRegistryRecord SOAP call,
which has an XML argument that defines the compound
(substance) being created.  The prototype for this XML is
retrieved using the RetrieveNewRegistryRecord SOAP call.
The text for each <regfield> defines the XPATH location
where the field (or its list elements, see below) will be
stored in the XML.  It has the following attributes:
  
  name        Required.  The name of the field being
               defined
  
  type        Required.  The Regsitration entity to which
               the field is attached.  Has these values:

                COMPOUND The field is attached to the
                          compound.  The XPATH should be
                          defined from the root
                BATCH    The field is at the batch level.
                          The XPATH should be relative to
                          the batch element
  
  listelement Optional.  If present, it is list of the
               element(s) that will be appended under the
               XPATH location.  It is a comma-separated list
               of elements that will appended in a nested
               manner.  For example, if the XPATH location is
               <ProjectList> and the listelement is
               “Project,ProjectID”, then adding a value of 66
               will produce an XML fragment that looks like:
                 <ProjectList><Project><ProjectID>66</ProjectID>
                 </Project></ProjectList>


