
<%@ LANGUAGE=VBScript %>
<%Response.Buffer = true
Response.Expires = 0
%>
<%'Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved

'DO NOT EDIT THIS FILE
'-------------------------------------------------------------------------------
' 'the action page contains the actions for searching registering compounds to the Registration Enterprise
'without using the standard GUI
'-------------------------------------------------------------------------------
'added functions for performing registration tasks
OverrideManageHits = true
OverrideManageQueries=true

Dim bPersistRegConn
''stop
%>
<!--#INCLUDE FILE = "app_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cows_func_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/utility_func_vbs.asp"-->

<!--#INCLUDE VIRTUAL = "/cfserverasp/source/global_app_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cs_security/cs_security_utils_vbs.asp"-->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cs_security/cs_security_login_utils_vbs.asp"-->

<%
'stop
on error resume next
	Dim DSM_reg_DEBUG
	DSM_reg_DEBUG=False
		dbkey = "reg"
		Session("no_gui" & dbkey & formgroup) = True 'pass by response.redirects when necessary
		reg_method = request("reg_method") 'choose method SEARCH|REG_TEMP|REG_PERM|DB_INFO
		'validates user and role if valid returns empty string, else returns appropriate message
		Session("UserName" & dbkey)= Trim(Request("user_id"))
		Session("USER_SETTINGS_ID" & dbkey)=Session("UserName" & dbkey)
		Session("UserSettingsSQLSyntax" & dbkey)="ORACLE"
		Session("DBMS_TYPE") = "ORACLE"
		Session("DBMSTYPE") = "ORACLE"
		Session("UserID" & dbkey)= Trim(Request("user_pwd"))
		Session("CurrentUser" & dbkey) = Session("UserName" & dbkey)
		
		if (UCase(reg_method) = "DB_INFO" or UCase(reg_method) = "GUI_TABLE_LOOKUPS" or UCase(reg_method) = "GUI_HIDE_FIELDS") then
			formgroup = "base_form_group"
			bIsInfoRequest = true
		else
			formgroup = "reg_ctrbt_commit_form_group"
			bIsInfoRequest = false
		end if
		BaseTable = GetTableGroupVal(dbkey, formgroup, kBaseTable)
		appType= "registration"
		return_fields = request("return_fields")

			'set default
		if Not return_fields <> "" then
			return_fields=getReturnFieldsDefault()
		end if
			commit_type = request("commit_type")
			'set default
			if commit_type = "" then
				commit_type = "full_commit"
			end if
		reg_id = request("reg_id")
		temp_id = request("temp_id")
		reg_parameter = request("reg_parameter")
		if not reg_parameter <> "" then
			reg_parameter=getRegParameterDefault(reg_method)
		end if
		
		if Not Session("UserValidated" & dbKey) = 1 then
			isValidUser = DoUserValidate(dbKey, Application("PrivTableList"))
			Session("UserValidated" & dbKey) = isValidUser
		else
			isValidUser = Session("UserValidated" & dbKey)
		end if
		
		if CBool(isValidUser) = true then
	
			'Session("UserValidated" & dbkey) = 1
			isValidAction = DoValidateAction(dbkey, reg_method, reg_parameter)
			
			if bIsInfoRequest and isValidAction then
				'using regdb username and password for this request.
				normalized_sql = replace(Request("sql_request"), " ", "")
				test_sql = "SELECTTNAMEFROMTAB"
				test2_sql = "SELECTCOLUMN_NAMEFROMUSER_TAB_COLUMNSWHERETABLE_NAME='TEMPORARY_STRUCTURES'"
				if (Not CBool(Application("PROJECT_LEVEL_ROW_SECURITY")) = true) OR instr(UCase(normalized_sql),test_sql)>0 OR instr(UCase(normalized_sql),test2_sql)>0 then
					Session("UserName" & dbkey) = Application("REG_USERNAME")
					Session("UserID" & dbkey) = Application("REG_PWD")
				end if 
				
				'SYAN added on 2/10/2005 to fix CSBR-50934
				test3_sql = "SELECTCOLUMN_NAMEFROMUSER_TAB_COLUMNSWHERETABLE_NAME='BATCHES'"
				if (Not CBool(Application("PROJECT_LEVEL_ROW_SECURITY")) = true) OR instr(UCase(normalized_sql),test_sql)>0 OR instr(UCase(normalized_sql),test3_sql)>0 then
					Session("UserName" & dbkey) = Application("REG_USERNAME")
					Session("UserID" & dbkey) = Application("REG_PWD")
				end if 
				'End of SYAN modification
			end if
			
			if isValidAction = 1 then 'indicates user is valid and has proper roles for specified action
			
				SetSessionVars dbkey, formgroup, "search" ' reset all variable to defaults
				if UCase(reg_parameter) = "AUTHENTICATE" then
					post_result = "user authenticated"
					
					
				else
				
				
					Select Case UCase(reg_method)
						Case "JOB_START"
							'if Not isObject(RegConn) then
									'Set RegConn = GetNewConnection(dbkey, formgroup, "base_connection")
							'end if
							
							'CartridgeResume RegConn, "regdb.mx"
							'CartridgeResume RegConn, "regdb.mx2"
							
						
						Case "JOB_END"
							'if Not isObject(RegConn) then
									'Set RegConn = GetNewConnection(dbkey, formgroup, "base_connection")
							'end if
							
							'CartridgeResume RegConn, "regdb.mx"
							'CartridgeResume RegConn, "regdb.mx2"
							
							'RegConn.close()
						'search registery and response.write value of return_field
						Case "REG_TEMP_GUI"
							dbkey = "reg"
							formgroup = "reg_ctrbt_form_group"
							Session("UserValidated" & dbkey) = 1
							Session("no_gui" & dkbey &formgroup ) = False
							GetSearchData_blind dbkey, formgroup
							'test stirng http://localhost/chem_reg/reg/reg_post_action.asp?reg_method=REG_TEMP_GUI&Temporary_Structures.Notebook_Page=2222&Temporary_Structures.Notebook_text=1222&Temporary_Structures.Notebook_page=1222&user_id=t5_85&user_pwd=t5_85
							Session("currentlocation" & dbkey & formgroup) = "/chem_reg/reg/reg_ctrbt_form.asp?record_added=false&formmode=add_compounds&formgroup=" & formgroup & "&dbname=" & dbkey & "&commit_type=full_commit&special=edit_query"
							Response.Redirect "/chem_reg/default.asp?dbname=" & dbkey & "&formgroup=" & formgroup
							Response.end

						Case "EDIT_TEMP"
							dbkey = "reg"
							dest_formgroup = "review_register_form_group"
							buildrs dbkey, dest_formgroup,  request("temp_id")
							'test string:  http://localhost/chem_reg/reg/reg_post_action.asp?user_id=t5_85&user_pwd=t5_85&reg_method=edit_temp&temp_id=144
							Session("UserValidated" & dbkey) = 1
							Session("currentlocation" & dbkey & dest_formgroup) = "/chem_reg/reg/reg_ctrbt_commit_result_form.asp?formgroup=review_register_form_group&formmode=edit_record&dbname=reg&BaseCurrentIndex=1&BaseRecordCount=0&dbsearchnames=reg"
							Response.Redirect "/chem_reg/default.asp?dbname=" & dbkey & "&formgroup=" & dest_formgroup
							Response.end
							
						Case "GET_REG"
							dbkey = "reg"
							dest_formgroup = "base_form_group"
							
							Set RegConn = getRegConn(dbkey, dest_formgroup)
							reg_number = request("reg_number")
							reg_id = getValueFromTablewConn(RegConn,"reg_numbers", "reg_number", reg_number , "reg_id")
							'Set DataConn = Nothing
							buildrs dbkey, dest_formgroup,  reg_id
							'test string:  http://localhost/chem_reg/reg/reg_post_action.asp?user_id=t5_85&user_pwd=t5_85&reg_method=get_reg&reg_number=AB-000834
							Session("UserValidated" & dbkey) = 1
							Session("currentlocation" & dbkey & dest_formgroup) = "/chem_reg/reg/reg_result_form.asp?formgroup=base_form_group&formmode=edit&dbname=reg&BaseCurrentIndex=1&BaseRecordCount=0&dbsearchnames=reg"
							Response.Redirect "/chem_reg/default.asp?dbname=" & dbkey & "&formgroup=" & dest_formgroup
							Response.end
						

						Case "DB_INFO"
							'stop
							bValidRequest = true
							SetSessionVars dbkey, formgroup, "search" 
							dim sql_request
							sql_request = request("sql_request")
							'logaction(sql_request)
							Session("SearchDomain" & dbkey & formgroup)= 0
							Session("ContentsField" & dbkey & formgroup) = "" 
							Session("SearchData" & "RelPortion" & dbkey & formgroup) =sql_request
							if inStr(UCASE(sql_request), "DELETE")>0 then
								bValidRequest = false
							end if
							if inStr(UCASE(sql_request), "UPDATE")>0 then
								bValidRequest = false
							end if
							if inStr(UCASE(sql_request), "INSERT")>0 then
								bValidRequest = false
							end if
							if NOT inStr(UCASE(sql_request), "SELECT")>0 then
								bValidRequest = false
							end if
							
							if bValidRequest = true then 
								on error resume next
								'strategy = Session("SearchData" & "SearchStrategy" & dbkey & formgroup)
								'strwhere = dorelsearch(dbkey, formgroup, strategy, "new")
								'strwhere = CSDOCreateCombinedSqlSelectString(strwhere, dbkey, formgroup) 
								if (Not Instr(Lcase(sql_request), ".structure") AND Not Instr(Lcase(sql_request), ".formula") AND not Instr(Lcase(sql_request), ".molweight") AND Not Instr(Lcase(sql_request), "molwt")) then
									Set RegConn = getRegConn(dbkey, dest_formgroup)
									Set myRS = Server.CreateObject("ADODB.RECORDSET")
									set cmd = server.CreateObject("adodb.command")
									cmd.ActiveConnection =  RegConn
									cmd.CommandType = adCmdText
									Set myRS = RegConn.Execute(sql_request)
								
									If Not (myRS.BOF and myRS.EOF) then
										Session("records_found" & dbkey & formgroup)=1
									else
										Session("records_found" & dbkey & formgroup)=0
									end if
									
								else
									GetResults dbkey, formgroup, "full_sql_as_is", "no_gui", sql_request	
									if Session("records_found" & dbkey & formgroup)>0 then
										Set myrs = Session("no_gui" & dbkey & formgroup)
									end if
								end if
								
								if  Session("records_found" & dbkey & formgroup)>0 then
									on error resume next
									Do while not myrs.EOF
										if theVal <> "" and not myrs.bof then
											theVal = theVal & ";"
										end if
										Set myfields = myrs.fields
										return_props = request("return_props")
										if return_props = "" then 
											return_props = "value"
										end if
											for k = 0 to myfields.count - 1
												if theVal <> "" and not k= 0then
													theVal = theVal & ","
												end if
												return_props_array = split(return_props, ",", -1)
												for l=0 to UBound(return_props_array)
													test_property = Trim(return_props_array(l))
													newval=property_val(myfields.item(k),test_property) 
													if theVal <> ""  then
														if l = 0 then
															theVal= theVal & newval
														else
															theVal = theVal & ":" & newval
														end if
													else
														theVal = newval
													end if
												next
											
											next
									
									myrs.movenext
									
									loop
									Set myrs = Nothing
									myrs = ""
									if instr(1,sql_request,"COLUMN_NAME from user_tab_columns where TABLE_NAME = 'BATCHES'") > 0 then 
										theVal = "REG_NUMBER;" & theVal
									end if
									post_result = theVal
									
									CloseRS(MyRS)
									'CloseConn(DataConn)
									normalized_sql_request = replace(sql_request, " ", "")
									'SYAN modified on 10/31/2005 to fix CSBR-60214
									if UCase(normalized_sql_request) = "SELECTCOLUMN_NAMEFROMUSER_TAB_COLUMNSWHERETABLE_NAME='TEMPORARY_STRUCTURES'" or UCase(normalized_sql_request) = "SELECTCOLUMN_NAMEFROMUSER_TAB_COLUMNSWHERETABLE_NAME='BATCHES'" then
									'if UCase(normalized_sql_request) = "SELECTCOLUMN_NAMEFROMUSER_TAB_COLUMNSWHERETABLE_NAME='TEMPORARY_STRUCTURES'" then
									'End of SYAN modification
										post_result = UCase(ModifyFieldResponse(post_result))
									end if
									
								else
									post_result = "no_records_found"
								end if
							else
								post_result = "invalid sql request.  Only select allowed via this interface"
							end if
							
						Case "SEARCH"
							'stop
							OverrideManageHits = false
							Session("GetPrefsFromPost") = "TRUE"
							Session("OverrideDefaultPrefs") = "TRUE"
							formgroup = "base_form_group"
							SetSessionVars dbkey, formgroup, "search" 
							Session("SearchData" & "RelPortion" & dbkey & formgroup)=""
							return_fields = request("return_fields")
							return_structure = request("return_structure")
							Session("fEmptyRecordset" & dbkey & formgroup)=False
							if not return_structure <> "" then 
								return_structure = "false"
							end if
						
							if DSM_reg_DEBUG=True Then
								Response.Write "<P>Case SEARCH</P>"
								Response.Write "return_structure: " & return_structure & "<BR>"
								Response.Write "return_fields: " & return_fields & "<BR>"
							end if
							if MyTrue(return_structure) then
								if Not inStr(LCase(return_fields), "structures.cpd_internal_id")> 0 then
									Response.write = "structures.cpd_internal_id must be in the request"
									Response.end
								end if
							end if
							return_field_names = request("return_field_names")
							if not return_field_names <> "" then
								return_field_names = 0
							end if

							if DSM_reg_DEBUG=True Then Response.Write "return_field_names: " & return_field_names & "<BR>"

							GetSearchData_blind dbkey, formgroup	
							strategy = Session("SearchData" & "SearchStrategy" & dbkey & formgroup)
							strwhere = dorelsearch(dbkey, formgroup, strategy, "new")
							'provide backwards compatibility with pre cartridge searches
					
							if inStr(UCase((request.Form)),"REG_NUMBERS.STRUCTURE")  then 
								StrucFields="STRUCTURES.STRUCTURE"
								
								SearchType = LCase(Request("struc_search_type"))
								if Not SearchType <> "" then SearchType = "exact"
								Select Case SearchType
									Case "substructure"
										
										SubSearchFields = StrucFields
										Session("SearchData" & "SubStructure" & dbkey & formgroup)=StrucFields
										
										AddSubFormNames dbkey, formgroup, SubSearchFields 
									Case "exact"
										Session("SearchData" & "Exact" & dbkey & formgroup)=StrucFields
										
										AddSubFormNames dbkey, formgroup, SubSearchFields 
									Case "similarity"
										Session("SearchData" & "Similarity" & dbkey & formgroup)=StrucFields
										
										AddSubFormNames dbkey, formgroup, SubSearchFields
									Case "identity"
										Session("SearchData" & "Identity" & dbkey & formgroup)=StrucFields
										
										AddSubFormNames dbkey, formgroup, SubSearchFields
								End Select
								Session("SearchData" & "STRUCTURES.STRUCTURE" & dbkey & formgroup)= request.Form("REG_NUMBERS.STRUCTURE")
							end if
							if inStr(UCase((request.Form)),"REG_NUMBERS.FORMULA") then
								Session("SearchData" & "Formula" & dbkey & formgroup)=STRUCTURES
								Session("SearchData" & "STRUCTURES.FORMULA" & dbkey & formgroup)= request.Form("REG_NUMBERS.FORMULA")
								AddSubFormNames dbkey, formgroup, "STRUCTURES.FORMULA"
							end if
							if inStr(UCase((request.Form)),"REG_NUMBERS.MOLWEIGHT") then
								Session("SearchData" & "MolWeight" & dbkey & formgroup)="STRUCTURES.MOLWEIGHT"
								AddSubFormNames dbkey, formgroup, "STRUCTURES.MOLWEIGHT"
								Session("SearchData" & "STRUCTURES.MOLWEIGHT" & dbkey & formgroup)= request.Form("REG_NUMBERS.FORMULA")
							end if
							
							strwhere = CSDOCreateCombinedSqlSelectString(strwhere, dbkey, formgroup) 	
							
							if DSM_reg_DEBUG=True Then Response.Write "Use SQL: " & strWhere & "<BR>"
							if not strWhere <> "" then 
								response.write "no_records_found"
								response.End
							end if
							
							basetable = GetBaseTable(dbkey, formgroup, "basetable")
							baseid = GetTableVal(dbkey, basetable, kPrimaryKey)
							Session("ContentsField" & dbkey & formgroup) = basetable & "." & baseid
							Session("TranslateTable" & dbkey & formgroup) = basetable
							Session("SearchDomain" & dbkey & formgroup) = 0
							'!DGB! 02/03 hitlistmangement
							if NOT Application("allow_hitlist_management") OR Application("Expire_hitlist_history_days")=0 then
								Session("hitlistID" & dbkey & formgroup) = Session("BaseRShitlistID" & dbkey & formgroup)		
							else
								Session("hitlistID" & dbkey & formgroup) = 0 
							End if
							strucid = GetTableVal(dbkey, basetable, kStrucFieldID)
							if Not return_fields <> "" then
								return_fields= baseid
							end if
								
							'SYAN added on 12/1/2004 to fix web service structure search problem
							session("order_by" & dbkey & formgroup) = request("order_by")
							session("sort_direction" & dbkey & formgroup) = request("sort_direction")
							'End of SYAN modification

							GetResults dbkey, formgroup, "cows_sql_request", "no_gui", strWhere
							
							
							if  Session("records_found" & dbkey & formgroup)>0 then
								if DSM_reg_DEBUG=True Then Response.Write "Records Found...<BR>"

									on error resume next
									'SYAN modified on 9/13/2004 in order to return reg_numbers.reg_id when base table is batches.
									Set myrs = Session("no_gui" & dbkey & formgroup)
				
									if Not (myrs.BOF and myrs.EOF) then
									
										'DGB: 09/09/2004
										' if basetable is batches and return_field is reg_numbers.reg_id
										' then set select distinct reg_internal_id as reg_id from batches, csdhohitlist where batches.batch_internal_id = csdhohitlist.id and csdhohitlist.hititsid = Session(...hitlistid) 
									
										Set theRS = Server.CreateObject("ADODB.Recordset")
										set theRS = myrs
										
								'stop								
										'Do while not myrs.EOF
										Do while not theRS.EOF
										    
											if UCase(basetable) = "BATCHES" and UCase(return_fields) = "REG_NUMBERS.REG_ID" then
												'sql = "select distinct reg_internal_id as reg_id from batches, csdohitlist where batches.batch_internal_id=csdohitlist.hitlistid and csdohitlist.hitlistid=" & Session("hitlistID" & dbkey & formgroup)
												sql = "select distinct reg_internal_id as reg_id from batches where batches.batch_internal_id=" & theRS(0)
													
												set cmd = server.CreateObject("adodb.command")
												if Not isObject(RegConn) then
													Set RegConn =GetRegConn(dbkey, formgroup)
												end if

												cmd.ActiveConnection =  RegConn
												cmd.CommandType = adCmdText
												Set myrs = RegConn.Execute(sql)
													
												bMyRSAltered = true
											End if
											'End of SYAN modification			
										
										if inStr(return_fields, ",")>0 then
											if DSM_reg_DEBUG=True Then Response.Write "Multiple return_fields requested<BR>"
											return_fields_array = split(return_fields, ",", -1)
											thecounter = 0
											Session("count")= UBound(return_fields_array)
											
												for thecounter = 0 to CLng(Session("count"))

													if inStr(return_fields_array(thecounter), ".") > 0 then
														return_field_array = split(return_fields_array(thecounter), ".", -1)
														return_field = return_field_array(1)
													
													else
														return_field =return_fields_array(i)
													end if

													 'check for structure request
													if not (MyTrue(return_structure) AND (UCase(return_field) = UCase("cpd_internal_id"))) then
														if DSM_reg_DEBUG=True Then Response.Write "<P>No STRUCTURE requested.</P>"

														if not return_field = "*" then
															if MyTrue(return_field_names) then
																theVal = myrs(return_field).name & ":" & myrs(return_field)
															else
																theVal = myrs(return_field)
															end if
														else
															if MyTrue(return_field_names) then
																if theVal = "" then
																	theVal =  myfields.item(j).name & ":" & myfields.item(j).value
																else
																	theVal = theVal & ";" &  myfields.item(j).name & ":" & myfields.item(j).value
																end if
																myfields.movenext
																else
																	if theVal = "" then
																		theVal = myfields.item(j).value
																	else
																		theVal = theVal & ";" & myfields.item(j).value
																	end if
																		myfields.movenext
																end if
														end if
													else
														if DSM_reg_DEBUG=True Then Response.Write "<P>STRUCTURE requested.</P>"
														if MyTrue(return_structure) then
															
															cpd=myrs("cpd_internal_id")
															if MyTrue(return_field_names) then
																theVal ="CPD_INTERNAL_ID" & ":" &  getStructure(cpd)
															else
																theVal = getStructure(cpd)
															end if
															if DSM_reg_DEBUG=True Then Response.Write "<P>getStructure() returned: " & theVal & "</P>"
														end if
													end if
													if return_str <> "" then
														return_str = return_str & "," & theVal
													else
														return_str = theVal
													end if
												next
											else ' End of InStr(return_fields, ',')
												if DSM_reg_DEBUG=True Then Response.Write "Single return_field requested<BR>"
												if inStr(return_fields, ".") > 0 then
													return_field_array = split(return_fields, ".", -1)
													return_field = return_field_array(1)
												else
													return_field =return_fields
												end if

												if DSM_reg_DEBUG=True Then Response.Write "return_field is set to be: " & return_field & "<BR>"

												if MyTrue(return_structure) Then ' Uses a generic True/False determining algorithm...
													if (UCase(return_field)<>UCase("cpd_internal_id")) Then
														Response.Write "ERROR: Must specifiy Structures.Cpd_Internal_ID as return field in this case.<BR>"
														Response.End
													end if

													if DSM_reg_DEBUG=True Then Response.Write "<P>STRUCTURE requested.</P>"
														cpd=myrs("cpd_internal_id")
														'SYAN added on 11/24/2004
														if IsEmpty(cpd) then
															cpd = myrs("REG_ID")
														end if
														'end of SYAN modification
														
														if MyTrue(return_field_names) then
															theVal ="CPD_INTERNAL_ID" & ":" &  getStructure(cpd)
														else
															theVal = getStructure(cpd)
														end if

													if DSM_reg_DEBUG=True Then Response.Write "<P>getStructure() returned: " & theVal & "</P>"
												else
													if DSM_reg_DEBUG=True Then Response.Write "Doing the NOT case...<BR>"

													if not return_field = "*" then
												
														if MyTrue(return_field_names) then
															theVal =  myrs(return_field).name & ":" & myrs(return_field)
														else 
															theVal = myrs(return_field)
														end if
															
													else
														
														set myfields = myrs.Fields
														for j=0 to myfields.count
															if MyTrue(return_field_names) then
																if not theVal <> "" then
																	theVal =  myfields.item(j).name & ":" & myfields.item(j).value
																else
																	theVal = theVal & ";" &  myfields.item(j).name & ":" & myfields.item(j).value
																end if
																myfields.movenext
															else
																if not theVal <> "" then
																	theVal = myfields.item(j).value
																else
																	theVal = theVal & ";"  &  myfields.item(j).value
																end if
																myfields.movenext
															end if
														next
													end if
												end if

												if Len(theVal) > 0 then
													if return_str <> "" then
														return_str = return_str & "," & theVal
													else
														return_str = theVal
													end if
												end if
										end if
									
									'SYAN modified on 9/22/2004
									'myrs.MoveNext
									
									'DGB looks to me that theRS and myRS are pointers to the same recordset
									'This code therefore does a MoveNext twice, skiping over every other row.
									'I don't understand why we would ever want to move two rows or none at all,
									'so I am commenting out the second conditional move
									'Also note the bMyRSAltered is always either Empty or true, so the if
									'condition is always met, making it such that there was always a double move.
									
									theRS.MoveNext
									if bMyRSAltered <> true then
									'	myrs.MoveNext
									end if
									'End of SYAN modification
									loop

								end if
									Set myrs = Nothing
									myrs = ""
									post_result = return_str 
									'DataConn.Close
									
								else
									return_str = "no_records_found"
									post_result=return_str
								end if
																

								Session("GetPrefsFromPost") = "FALSE"
								Session("OverrideDefaultPrefs") = "FALSE"
						Case "GET_REQUIRED_FIELDS"
							if reg_parameter = "" then
								reg_parameter = "COMPOUND"
							end if
						
				
							if UCase(request("get_data_type"))= "TRUE" then
								bgetDataType = true
							else
								bgetDataType = false
							end if
							Select Case UCase(reg_parameter)
								Case "COMPOUND"
									formgroup = "REG_CTRBT_FORM_GROUP"
								Case "BATCH"
									formgroup = "BATCH_CTRBT_FORM_GROUP"
								Case "SALT"
									formgroup = "SALT_CTRBT_FORM_GROUP"
							End Select
							req_fields = GetFormGroupVal(dbkey, formgroup, kRequiredFields)
							req_fields_array =Split(req_fields, ",", -1)
							For i = 0 to UBound(req_fields_array)-1
								array2 = split(req_fields_array(i), ":", -1)
								array3 = split(array2(0), ".",-1)
								field_w_datatype = array3(1)
								if inStr(field_w_datatype, ";")> 0 then
									array4 = split(field_w_datatype,";",-1)
									field_only = array4(0)
								else
									field_only = field_w_datatype
								end if
								
								if fieldnames <> "" then
									if bgetDataType = true then
										fieldnames = fieldnames & "," & field_w_datatype	
									else
										fieldnames = fieldnames & "," & field_only
									end if
								else
									if bgetDataType = true then
										fieldnames = field_w_datatype
									else
										fieldnames =  field_only
									end if
								end if
							Next
							post_result =UCase(fieldnames)
							
						'add data to temp table
						Case "REG_TEMP"
							'stop
							bPersistRegConn = true
							Session("DateTime_Stamp") = Time() &  ":" &  Date()
							if CBool(Application("PROJECT_LEVEL_ROW_SECURITY")) = true then
									testProjectID = request("TEMPORARY_STRUCTURES.PROJECT_ID")
									isValid = IsValidUSerProject(dbkey, formgroup,"",testProjectID)
								
									'SYAN modified on 11/17/2004 to fix CSBR-49046
									'Do not allow regdb/oracle kind of user to add, because it is not a valid app user, it will cause problem later.
									bIsAppUser = IsAppUser(dbkey, formgroup, Session("UserName" & dbkey))
										
									if isValid = false or bIsAppUser = false then
										bInvalidProject = true
										post_result = "User " & UCase(Session("UserName" & dbkey)) & " either does not have privileges to add data to the project with PROJECT_ID=" & testProjectID & ", or is  not a valid application user. Nothing is added to the database. Please login as a different user and try again."
										Response.Write post_result
										Response.end
									end if
									'End of SYAN modification

									
									Session("storeSessionUser" & dbkey) = Session("UserName" & dbkey)
									Session("storeSessionPWD" & dbkey) = Session("UserID" & dbkey)
									Session("UserName" & dbkey) = Application("REG_USERNAME")
									Session("UserID" & dbkey) =  Application("REG_PWD")
							end if
							
							Select Case UCase(reg_parameter)
								case "ADD_COMPOUND"
									commit_type = "full_commit"
								case "ADD_BATCH"
									commit_type = "commit_batch"
								case "ADD_SALT" 
									commit_type = "add_salt"
								case "ADD_IDENTIFIER"
									commit_type = "add_identifier"
							end select
							formgroup = "reg_ctrbt_form_group"
							GetSearchData_blind dbkey, formgroup
							
							SetRegPermSpecificItems dbkey, formgroup
							SetRegDefaultvalues dbkey, formgroup
							SetDataIntegrityDefaults dbkey, formgroup	
							
							if bInvalidProject = true then
								Session("SearchData" & "Temporary_Structures.Project_ID" & dbkey & formgroup) = "1"
							end if
							Session("no_gui" & dbkey & formgroup)=True
							'stop
							tempID = DoRegTemp(dbkey, formgroup, commit_type)
							
							post_result = tempID
							if CBool(Application("PROJECT_LEVEL_ROW_SECURITY")) = true then
								Session("UserName" & dbkey) = Session("storeSessionUser" & dbkey)
								Session("UserID" & dbkey) = Session("storeSessionPWD" & dbkey)
							end if
						' add compound to temp table, dup search and register, if duplicates found, and not overriddent, return for user input.
						Case "REG_PERM"
							'stop
							bPersistRegConn = true
							Session("DateTime_Stamp") = Time() &  ":" &  Date()
							bOverrideReg = False
							bInvalidProject = False
							if CBool(Application("PROJECT_LEVEL_ROW_SECURITY")) = true then
								testProjectID = request("TEMPORARY_STRUCTURES.PROJECT_ID")
								if IsEmpty(testProjectID) then
									testProjectID = 1
								end if
								
								isValid = IsValidUSerProject(dbkey, formgroup,"",testProjectID)
								
								'SYAN modified on 11/17/2004 to fix CSBR-49046
								'Do not allow regdb/oracle kind of user to add, because it is not a valid app user, it will cause problem later.
								bIsAppUser = IsAppUser(dbkey, formgroup, Session("UserName" & dbkey))
								
								if isValid = false or bIsAppUser = false then
									bOverrideReg = true
									bInvalidProject = true
									post_result = "User " & UCase(Session("UserName" & dbkey)) & " either does not have privileges to add data to the project with PROJECT_ID=" & testProjectID & ", or is  not a valid application user. Nothing is added to the database. Please login as a different user and try again."
									Response.Write post_result
									Response.end
								end if
								'End of SYAN modification
								
								Session("storeSessionUser" & dbkey) = Session("UserName" & dbkey)
								Session("storeSessionPWD" & dbkey) = Session("UserID" & dbkey)
								Session("UserName" & dbkey) = Application("REG_USERNAME")
								Session("UserID" & dbkey) =  Application("REG_PWD")
							end if
						
							
							'reg_parameter = getDupHandlingSetting(dbkey, formgroup,reg_parameter)
							'see if a temp_id is posted, if so don't add to temp table - this means this is a dup_action on an existing dup checked temp record.
							
							if temp_id <> "" then
								bMuldiDups = False
								bDups = True
								formgroup = "reg_ctrbt_commit_form_group"
							else
								'no temp_id posted, add to temp table and get id
								formgroup = "reg_ctrbt_commit_form_group"
								GetSearchData_blind dbkey, formgroup
								SetRegPermSpecificItems dbkey, formgroup
								SetRegDefaultvalues dbkey, formgroup
								SetDataIntegrityDefaults dbkey, formgroup
								
								if bInvalidProject = true then
									Session("SearchData" & "Temporary_Structures.Project_ID" & dbkey & formgroup) = "1"
								end if
								'temp_id = DoRegTemp(dbkey, formgroup, commit_type)
								temp_id ="NO_TEMP_TABLE"
								working_temp_id = temp_id
								formgroup = "reg_ctrbt_commit_form_group"
							end if
							' if working_temp_id is now populated check for duplicates, else an error occured so response.write to requestor
							if CBool(Application("PROJECT_LEVEL_ROW_SECURITY")) = true then
								if Session("SearchData" & "Temporary_Structures.project_id" & dbkey & formgroup) = "1" or Session("SearchData" & "Temporary_Structures.project_id" & dbkey & formgroup) = 1 then
										bOverrideReg = True
								end if
							end if
							
							if bOverrideReg = False then
							base64string = Session("SearchData" & "Temporary_Structures.Structure" & dbkey & formgroup)
							if Not isObject(RegConn) then
									Set RegConn =GetRegConn(dbkey, formgroup)
							end if
							
							SetOracleSessionCursorSharingParameter RegConn, "force"
							if not base64string <> "" then
								'add a blank structure so it can be processed. There is likely more data - but simply no structure. No need to go through dupcheck code
								bOverrideDupCheck = true
								'LJB 5/1/2003 primary string were is before_compund then we have to go through the dup check code
								primaryStrWhereCriteria = Application("Primary_StrWhere")
								if inStr(primaryStrWhereCriteria, "BEFORE_COMPOUND")> 0 then
									bOverrideDupCheck = false
								end if
								base64string = "VmpDRDAxMDAEAwIBAAAAAAAAAAAAAAAAAAAAAAMAEAAAAENoZW1EcmF3IDYuMC4xCAAMAAAAbXl0ZXN0LmNkeAADMgAIAP///////wAAAAAAAP//AAAAAP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wEJCAAAAFkAAAAEAAIJCAAAAKcCAAAXAgIIEAAAAAAAAAAAAAAAAAAAAAAAAwgEAAAAeAAECAIAeAAFCAQAAJoVAAYIBAAAAAQABwgEAAAAAQAICAQAAAACAAkIBAAAswIACggIAAMAYAC0AAMACwgIAAQAAADwAAMADQgAAAAIeAAAAwAAAAEAAQAAAAAACwARAAAAAAALABEDZQf4BSgAAgAAAAEAAQAAAAAACwARAAEAZABkAAAAAQABAQEABwABJw8AAQABAAAAAAAAAAAAAAAAAAIAGQGQAAAAAAJAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAEAhAAAAD+/wAA/v8AAAIAAAACAAABJAAAAAIAAwDkBAUAQXJpYWwEAOQEDwBUaW1lcyBOZXcgUm9tYW4BgAEAAAAEAhAAAAD+/wAA/v8AAAIAAAACAA8IAgABABAIAgABABYIBAAAACQAGAgEAAAAJAAAAAAA"
							else
								bOverrideDupCheck = false
							end if
							if base64string <> "" then 
							
									if working_temp_id <> "" then
										if bOverrideDupCheck = false then
											duplicates_found = checkForDuplicates(dbkey, formgroup, working_temp_id, "SINGLE_MODE", RegConn) 'returns number of duplicates found
										else
											duplicates_found=""
										end if
										Session("no_gui" & dbkey & formgroup)=True
										
										if  duplicates_found <> "" then
											Session("DuplicatesFound" & dbkey & formgroup)=duplicates_found
											
											bDups = True
												if inStr(duplicates_found, ",")> 0 then
													'if Not UCase(reg_parameter) = "OVERRIDE" then
														bMultiDups = True
													'else
														'bMultiDups = False
													'end if
												else
													bMultiDups = false
												end if
					
										else
											Session("DuplicatesFound" & dbkey & formgroup)=""
											bDups = False
											
										end if
									else
										post_result = tempID & "no temp table id found"
									end if
								end if
								
								'if a dup action has been specified by the requestor and there is only a single duplicate
								if bDups = True AND bMultiDups = False then
										
											duplicates_found_array = split(duplicates_found, ":", -1)
											dup_type = duplicates_found_array(0)
											dup_id = duplicates_found_array(1)
											if UCase(dup_type) = "SALT" then 
												dup_id_name = "cpd_database_counter"
											else
												dup_id_name = "reg_id"
											end if
											'set default if reg_parameter is empty
											if reg_parameter = "" then reg_parameter = "USER_INPUT"
										
										Select Case UCase(reg_parameter)
											Case "OVERRIDE"
												'register compound even if it is a duplicates  and return registry number
												tableorder = Application("Full_Commit_Table_Order")
												Session("tempUniqueID" & dbkey)="NO_TEMP_TABLE"
												commit_numbers = DoCommit(dbkey, formgroup, tableorder, Session("tempUniqueID" & dbkey), "", "full_commit", RegConn)
												temp_array = split(commit_numbers, ":", -1)
												reg_number = temp_array(0)
												if inStr(reg_number,"failed")>0 then
													temp_id = DoRegTemp(dbkey, formgroup, "full_commit")
													if inStr(temp_id, "LOAD_TERMINATED")> 0 then
														post_result="Reg Failed. Add to Temp failed: " & temp_id
													else
														post_result = "Reg Failed. Compound Added to Temp: " & temp_id
													end if
												else
													post_result = "New Compound: " & Reg_Number
												end if
											Case "NEW_BATCH"
												'stop
												Session("tempUniqueID" & dbkey)="NO_TEMP_TABLE"
												tableorder = Application("New_Batch_Commit_table_order")
												'SYAN added on 9/23/2005 to fix Ben Bracke's salt load problem
												if UCase(dup_type) = "ADD_SALT" then
													tableorder = Application("ADD_SALT_COMMIT_TABLE_ORDER")
													commit_numbers = DoCommit(dbkey, formgroup, tableorder, Session("tempUniqueID" & dbkey), dup_id, "add_salt", RegConn)
												else
													commit_numbers = DoCommit(dbkey, formgroup, tableorder, Session("tempUniqueID" & dbkey), dup_id, "batch_commit", RegConn)
												end if
												'End of SYAN modification
												temp_array = split(commit_numbers, ":", -1)
												reg_number = temp_array(0)
												batch_number = temp_array(1)
												if instr(commit_numbers, "unapproved")>0 then
													reg_number = temp_array(1)
											
													post_result = "The duplicate found for this compound is not approved. No batch could be added: "& Reg_Number & ": Batch -" & 0
												else
													reg_number = temp_array(0)
													batch_number = temp_array(1)
													if inStr(reg_number,"failed")>0 then
														temp_id = DoRegTemp(dbkey, formgroup, "full_commit")
														if inStr(temp_id, "LOAD_TERMINATED")> 0 then
															post_result="Reg Failed. Add to Temp failed: " & temp_id
														else
															post_result = "Reg Failed. Compound Added to Temp: " & temp_id
														end if
													else
														if request("Return_All_Reg_Data") = "true" then
															post_result = "NEW_BATCH:" & commit_numbers
														else
															post_result = "New Batch for: "& Reg_Number & ": Batch -" & Batch_Number
														end if
													end if
												end if
											Case "UNIQUE_DEL_TEMP" 'response only includes the regnumber without other text
												RegNumber = getValueFromTable(dbkey, formgroup, "reg_numbers", "reg_id",dup_id,"Reg_number")
												if request("Return_All_Reg_Data") = "true" then
													'SYAN modified on 10/20/2004 to fix CSBR-48397
													'post_result = "NEW_COMPOUND:" & RegNumber
													post_result = "NEW_COMPOUND:" & commit_numbers
													'End of SYAN modification
												else
													post_result = RegNumber
												end if
												'just don't add it
												'RemoveFromTemp dbkey, formgroup, temp_id
											Case "UNIQUE_DEL_TEMP2" 'response  includes the regnumber and description of action
												RegNumber = getValueFromTable(dbkey, formgroup, "reg_numbers", "reg_id",dup_id,"Reg_number")
												post_result = "Duplicate Compound:  "  & RegNumber & ": removed from temporary table. "
												'just don't add it
												'RemoveFromTemp dbkey, formgroup, temp_id
											Case "USER_INPUT"
												temp_id = DoRegTemp(dbkey, formgroup, commit_type)
												if inStr(temp_id, "LOAD_TERMINATED")> 0 then
													RegNumber = getValueFromTable(dbkey, formgroup, "reg_numbers", "reg_id",dup_id,"Reg_number")
													post_result="Compound is duplicate of :" & RegNumber & ". Adding to temp table failed: " & temp_id
												else
													markTempRecAsDup dbkey,formgroup,temp_id,Session("DuplicatesFound" & dbkey & formgroup) 
													RegNumber = getValueFromTable(dbkey, formgroup, "reg_numbers", "reg_id",dup_id,"Reg_number")
													post_result ="Duplicate- " & "temp_id=" & temp_id  & "-" & "Reg Number" & ":" & RegNumber
												end if
											Case Else
												post_result = "unrecognized duplicate action in post - process aborted"
										end select
									else 
										if bDups = True and bMultiDups = True then
											Select Case UCase(reg_parameter)
											Case "UNIQUE_DEL_TEMP"
												post_result = "Multiple Duplicates: " & "dup reg_id:" & duplicates_found 
											Case "OVERRIDE" 
												'register compound even if it is a duplicates  and return registry number
												tableorder = Application("Full_Commit_Table_Order")
												Session("tempUniqueID" & dbkey)="NO_TEMP_TABLE"
												'stop
												commit_numbers = DoCommit(dbkey, formgroup, tableorder, Session("tempUniqueID" & dbkey), "", "full_commit", RegConn)
												temp_array = split(commit_numbers, ":", -1)
												reg_number = temp_array(0)
												if inStr(reg_number,"failed")>0 then
													temp_id = DoRegTemp(dbkey, formgroup, "full_commit")
													if inStr(temp_id, "LOAD_TERMINATED")> 0 then
														post_result="Reg Failed. Add to Temp failed: " & temp_id
													else
														post_result = "Reg Failed. Compound Added to Temp: " & temp_id
													end if
												else
													if request("Return_All_Reg_Data") = "true" then
														post_result = "NEW_COMPOUND:" & commit_numbers
													else
														post_result = "New Compound: "  & reg_number 
													end if
												end if
											Case Else
												temp_id = DoRegTemp(dbkey, formgroup, commit_type)
												if inStr(temp_id, "LOAD_TERMINATED")> 0 then
													post_result="Reg Failed. Add to Temp failed: " & temp_id
												else
													markTempRecAsDup dbkey,formgroup,temp_id,duplicates_found
													post_result = "Multiple Duplicates: " & "temp_id=" & temp_id  & "dup reg_id:" & duplicates_found & " record added to temporary table."
												end if
											end select

										else
											
											'stop
											'no duplicates found, or no duplicate actions is required per post request. commit and get reg_number
											tableorder = Application("Full_Commit_Table_Order")
											Session("tempUniqueID" & dbkey)="NO_TEMP_TABLE"
											commit_numbers = DoCommit(dbkey, formgroup, tableorder, Session("tempUniqueID" & dbkey), "", "full_commit", RegConn)
											temp_array = split(commit_numbers, ":", -1)
											reg_number = temp_array(0)
											batch_number = temp_array(1)
											if inStr(reg_number,"failed")>0 then
												temp_id = DoRegTemp(dbkey, formgroup, "full_commit")
												if inStr(temp_id, "LOAD_TERMINATED")> 0 then
													post_result="Reg Failed. Add to Temp failed: " & temp_id
												else
													post_result = "Reg Failed. Compound Added to Temp: " & temp_id
												end if
											else
												if request("Return_All_Reg_Data") = "true" then
													post_result = "NEW_COMPOUND:" & commit_numbers
												else
													post_result = reg_number  
												end if
											end if
										end if
									end if
								
								else
										'stop
										temp_id = DoRegTemp(dbkey, formgroup, commit_type)
										if inStr(temp_id, "LOAD_TERMINATED")> 0 then
											post_result="Reg Failed. Add to Temp failed: " & temp_id
										else
											post_result ="Invalid or unspecified Project: Record added to temp table - " & "temp_id=" & temp_id 
										end if
								end if 
								
								if CBool(Application("PROJECT_LEVEL_ROW_SECURITY")) = true then
									Session("UserName" & dbkey) = Session("storeSessionUser" & dbkey)
									Session("UserID" & dbkey) = Session("storeSessionPWD" & dbkey)
								end if
							Case "GUI_TABLE_LOOKUPS"
								'format: listname:show|hide,name
								GUI_TABLES_STRING=""
								
								'COMPOUND_TYPE TABLE
								
								if CBool(Application("COMPOUND_TYPES_USED")) = True then
									COMPOUND_TYPE_LIST= "SHOW"
									COMPOUND_TYPE_LIST_NAME= getLabelName("temporary_structures.compound_type")
									if Not COMPOUND_TYPE_LIST_NAME <> "" then
										COMPOUND_TYPE_LIST_NAME = "STRUCTURE COMMENTS"
									end if
								else
									COMPOUND_TYPE_LIST= "HIDE"
									COMPOUND_TYPE_LIST_NAME = ""
								end if
								GUI_TABLES_STRING =  "COMPOUND_TYPE:" & COMPOUND_TYPE_LIST & ":" & COMPOUND_TYPE_LIST_NAME
							
								'NOTEBOOKS_TABLE
								
								if CBool(Application("NOTEBOOK_USED"))=True AND CBool(Application("NOTEBOOK_LOOKUP")) = True then
									NOTEBOOKS_LIST= "SHOW"
									NOTEBOOKS_LIST_NAME= getLabelName("temporary_structures.notebook_number")
									if Not NOTEBOOKS_LIST_NAME <> "" then
										NOTEBOOKS_LIST_NAME = "NOTEBOOK"
									end if
								else
									NOTEBOOKS_LIST= "HIDE"
									NOTEBOOKS_LIST_NAME = ""
								end if
										GUI_TABLES_STRING = GUI_TABLES_STRING &  "," & "NOTEBOOKS:" & NOTEBOOKS_LIST & ":" & NOTEBOOKS_LIST_NAME

								'SALTS_TABLE
								if (UCase(Application("BATCH_LEVEL"))="SALT" AND CBool(Application("SALTS_USED")) = True) then
									SALTS_LIST = "SHOW"
									SALTS_LIST_NAME = getLabelName("temporary_structures.salt_code")
									if Not SALTS_LIST_NAME <> "" then
										SALTS_LIST_NAME = "SALTS"
									end if
								else
									SALTS_LIST = "HIDE"
									SALTS_LIST_NAME = ""
								end if
								
									GUI_TABLES_STRING = GUI_TABLES_STRING &  "," & "SALTS:" & SALTS_LIST & ":" & SALTS_LIST_NAME
							
								'SOLVATES TABLE
								'no need to ever show solvates any more since this is only used for autofill
									SOLVATES_LIST = "HIDE"
									SOLVATES_LIST_NAME = ""
								
									GUI_TABLES_STRING = GUI_TABLES_STRING &  "," & "SOLVATES:" & SOLVATES_LIST & ":" & SOLVATES_LIST_NAME
								
								'PROJECTS AND BATCH_PROJECTS TABLE
								
								PROJECTS_LIST = "SHOW"
								
								if CBool(Application("PROJECTS_NAMED_OWNER")) = True then
									PROJECTS_LIST_NAME = "OWNER"
									if CBool(Application("BATCH_PROJECTS_USED")) = True then
										BATCH_PROJECTS_LIST_NAME = "PROJECT"
									end if
									if CBool(Application("BATCH_PROJECTS_USED")) = True then
										BATCH_PROJECTS_LIST = "SHOW"
									else
										BATCH_PROJECTS_LIST = "HIDE"
									end if
								else
									PROJECTS_LIST_NAME=getLabelName("temporary_structures.project_id")
									if Not PROJECTS_LIST_NAME <> "" then
										PROJECTS_LIST_NAME="PROJECT"
									end if
									BATCH_PROJECTS_LIST_NAME = "BATCH_PROJECT"
									BATCH_PROJECTS_LIST_NAME =getLabelName("temporary_structures.batch_project_id")
									if Not BATCH_PROJECTS_LIST_NAME <> "" then
										BATCH_PROJECTS_LIST_NAME = "BATCH_PROJECT"
									end if
									if CBool(Application("BATCH_PROJECTS_USED")) = True then
										BATCH_PROJECTS_LIST = "SHOW"
									else
										BATCH_PROJECTS_LIST = "HIDE"
									end if
								end if
							
								GUI_TABLES_STRING = GUI_TABLES_STRING &  "," & "PROJECTS:" & PROJECTS_LIST & ":" & PROJECTS_LIST_NAME
								GUI_TABLES_STRING = GUI_TABLES_STRING &  "," & "BATCH_PROJECTS:" & BATCH_PROJECTS_LIST & ":" & BATCH_PROJECTS_LIST_NAME
							
								SEQUENCE_LIST = "SHOW"
								SEQUENCE_LIST_NAME=getLabelName("temporary_structures.sequence_internal_id")
								if not SEQUENCE_LIST_NAME <> "" then
									SEQUENCE_LIST_NAME = "SEQUENCE"
								end if
								GUI_TABLES_STRING = GUI_TABLES_STRING &  "," & "SEQUENCE:" & SEQUENCE_LIST & ":" & SEQUENCE_LIST_NAME
								
								If CBool(Application("NOTEBOOK_LOOKUP")) = true then
									SCIENTIST_LIST = "HIDE"
								else
									SCIENTIST_LIST = "SHOW"
								end if
								SCIENTIST_LIST_NAME=getLabelName("temporary_structures.scientist_id")
								GUI_TABLES_STRING = GUI_TABLES_STRING &  "," & "SCIENTIST_ID:" & SCIENTIST_LIST & ":" & SCIENTIST_LIST_NAME
								
								post_result=GUI_TABLES_STRING
								
							Case "GUI_HIDE_FIELDS"
								post_result = APPLICATION("GUI_FIELDS_TO_HIDE") & "," & APPLICATION("DERIVED_FIELDS")
								post_result = Replace(post_result, ",MW,", ",")  ' remove this since it is a "virtual field" and doesn't appear in temporary_structures
								post_result = Replace(post_result, ",FORMULA,", ",") ' remove this since it is a "virtual field" and doesn't appear in temporary_structures 
							
							'SYAN added on 2/8/2005 to fix CSBR-50934
							Case "REG_BULK_UPDATE"
								'stop
								post_result = BulkUpdate
							'End of SYAN modification
							
							Case ELSE
								post_result = "no_request_found"
								
							
						end select
						
					end if 'if UCase(reg_privileges) = "AUTHENTICATE" then
				else 'isValidAction
					post_result = "invalid privileges"
				end if
		else 'isValidUser
			post_result = "invalid username or password"
		
		end if
'logAction("outpostInterface" & Timer())
		' Return results to requestor 
		Response.Write post_result 
		
		'Response.flush


'DGB  To improve performance of API calls from WebService
' we allow the webservice to request that the session be
' terminated immediately, since it will not be reused.
if Request("killsession")="1" then  session.Abandon



function MyTrue(theVal)
Dim theReturn
theReturn=False
select case VarType(theVal)
case vbString
	if UCase(theVal)="TRUE" Then theReturn=True
case vbInteger
	if theVal=1 Then theReturn=True
case vbLong
	if theVal=1 Then theReturn=True
case vbBoolean
	if theVal=True Then theReturn=True
case else
end select
MyTrue=theReturn
end function

function DoValidateAction(dbkey, reg_method, reg_parameter)
	return_val = 0
	Select case UCase(reg_method)
		case "REG_TEMP_GUI"
			if Session("Add_Compound_Temp" & dbkey) = True then
				return_val = 1
			end if
		case "EDIT_TEMP"
			if (Session("EDIT_COMPOUND_TEMP" & dbkey) or Session("EDIT_BATCH_TEMP" & dbkey) or Session("EDIT_SALT_TEMP" & dbkey) or Session("EDIT_IDENTIFIERS_TEMP" & dbkey)) then
				return_val = 1
			end if
		case "DB_INFO"
			if Session("Search_Reg" & dbkey) = True then
				return_val = 1
			end if
		case "GUI_TABLE_LOOKUPS"
			if Session("Search_Reg" & dbkey) = True then
				return_val = 1
			end if
		case "GUI_HIDE_FIELDS"
			if Session("Search_Reg" & dbkey) = True then
				return_val = 1
			end if
		case "GET_REQUIRED_FIELDS"
			if Session("Search_Reg" & dbkey) = True then
				return_val = 1
			end if
		case "GET_REG"
			if Session("Search_Reg" & dbkey) = True then
				return_val = 1
			end if
		case "REG_PERM"
			if Session("Register_Temp" & dbkey) = True then
				return_val = 1
			end if
		'SYAN added on 2/9/2005 to fix CSBR-50934
		case "REG_BULK_UPDATE"
			if Session("Register_Temp" & dbkey) = True then
				return_val = 1
			end if
		'End of SYAN modification
		case "REG_TEMP"
			Select case UCase(reg_parameter)
				case "ADD_COMPOUND"
					if Session("Add_Compound_Temp" & dbkey) = True then
						return_val = 1
					end if
				case "ADD_BATCH"
					if Session("Add_Batch_Temp" & dbkey) = True then
						return_val = 1
					end if

				case "ADD_SALT"
					if Session("Add_Salt_Temp" & dbkey) = True then
						return_val = 1
					end if

				case "ADD_IDENTIFIER"
					if Session("Add_Identifiers_Temp" & dbkey) = True then
						return_val = 1
					end if
				case "AUTHENTICATE"
					if Session("Add_Compound_Temp" & dbkey) = True then
						return_val = 1
					end if
			End Select
					
		Case "SEARCH"
			if Session("Search_Reg" & dbkey) = True then
				return_val = 1
			end if
		
		
		
	end select
	DoValidateAction = return_val

end function

Sub SetRegDefaultvalues(dbkey,formgroup)

	if CBool(Application("USE_GUI_DEFAULTS_IN_API")) = true then
		fieldList = getTempTableFieldNames(dbkey, formgroup)
		temp_array= split(fieldList, ";", -1)
		for i = 0 to UBound(temp_array)
		
			temp_array2 = split(temp_array(i), ":", -1)
			
			If Not Session("SearchData" & "temporary_structures." &  temp_array2(1) & dbkey & formgroup) <> "" then
				Session("SearchData" & "temporary_structures." & temp_array2(1) & dbkey & formgroup) = getDefaultValue(temp_array2(1))
				Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "temporary_structures." & temp_array2(1) & ";" & "X")
			end if
		next		
	end if
End sub

Sub SetRegPermSpecificItems(dbkey, formgroup)
	if Not Session("SearchData" & "Temporary_structures.Entry_Person_Id" & dbkey & formgroup)<>"" then
		DBMSUser_ID = Session("CurrentUser" & dbkey)		
		if Session("LstDBMUserID") <> DBMSUser_ID then
			PersonID = getValueFromTable(dbkey, formgroup,"People", "User_ID",DBMSUser_ID,"Person_ID")
			Session("LstDBMUserID") = DBMSUser_ID
			Session("LstPersonID") = PersonID
		else
			PersonID = Session("LstPersonID")
		end if	
		Session("SearchData" & "Temporary_Structures.Entry_Person_Id" & dbkey & formgroup)=PersonID
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Entry_Person_Id;1")
	end if
	if Not Session("SearchData" & "Temporary_structures.Entry_Date" & dbkey & formgroup)<>"" then
		Session("SearchData" & "Temporary_Structures.Entry_Date" & dbkey & formgroup)=Date()
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Entry_Date;8")
	end if 
	
	if Not Session("SearchData" & "Temporary_structures.Scientist_ID" & dbkey & formgroup)<>"" then
		if CBOOL(Application("NOTEBOOK_LOOKUP")) = True then
			Notebook_Number = Session("SearchData" & "TEMPORARY_STRUCTURES.NOTEBOOK_NUMBER" & dbkey & formgroup)
			if Session("LatNotebookNumber") <> NotebookNumber then
				User_Code = getValueFromTable(dbkey, formgroup,"notebooks", "notebook_number", Notebook_Number, "user_code")
				Session("LstNotebookNumber") = NotebookNumber
				Session("LstUserCode") = UserCode
			else
				User_Code = Session("LstUserCode")	
			End if
			Session("SearchData" & "Temporary_structures.Scientist_ID" & dbkey & formgroup) = User_Code
			Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Scientist_ID;1")
		else
			DBMSUser_ID = Session("CurrentUser" & dbkey)
			if Session("LstDBMUserID") <> DBMSUser_ID then
				PersonID = getValueFromTable(dbkey, formgroup,"People", "User_ID",DBMSUser_ID,"Person_ID")
				Session("LstDBMUserID") = DBMSUser_ID
				Session("LstPersonID") = PersonID
			else
				PersonID = Session("LstPersonID")
			end if		
			Session("SearchData" & "Temporary_structures.Scientist_ID" & dbkey & formgroup) =PersonID
			Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Scientist_ID;1")
		end if
	end if	
End Sub


function getDefaultValueAPI(field)
	'yes this is silly but there are too many places this was called and it is too risky to edit all that code. This is a better
	'solution for this release.
	theReturn = ""
	getDefaultValueAPI = theReturn
end function


'for reg_temp and reg_perm values that can be left unspecified in the post, set the default values
Sub SetDataIntegrityDefaults(dbkey, formgroup)
	
	if Not Session("SearchData" & "Temporary_Structures.Scientist_ID" & dbkey & formgroup) <> "" then
		theDefaultValue = getDefaultValueAPI("Temporary_Structures.Scientist_ID")
		if theDefaultValue <> "" then
			Session("SearchData" & "Temporary_Structures.Scientist_ID" & dbkey & formgroup)=theDefaultValue
		else
			Session("SearchData" & "Temporary_Structures.Scientist_ID" & dbkey & formgroup)="1"
		end if
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Scientist_ID;1")
	end if
	if Not Session("SearchData" & "Temporary_Structures.Project_ID" & dbkey & formgroup) <> "" then
		theDefaultValue = getDefaultValueAPI("Temporary_Structures.Project_ID")
		if theDefaultValue <> "" then
			Session("SearchData" & "Temporary_Structures.Project_ID" & dbkey & formgroup)=theDefaultValue
		else
			Session("SearchData" & "Temporary_Structures.Project_ID" & dbkey & formgroup)="1"
		end if
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Project_ID;1")
	end if
	if Not Session("SearchData" & "Temporary_Structures.Batch_Project_ID" & dbkey & formgroup) <> "" then
		theDefaultValue = getDefaultValueAPI("Temporary_Structures.Batch_Project_ID")
		if theDefaultValue <> "" then
			Session("SearchData" & "Temporary_Structures.Batch_Project_ID" & dbkey & formgroup)=theDefaultValue
		else
			Session("SearchData" & "Temporary_Structures.Batch_Project_ID" & dbkey & formgroup)="1"
		end if
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Batch_Project_ID;1")
	end if
	
	if Not Session("SearchData" & "Temporary_Structures.Compound_Type" & dbkey & formgroup) <> "" then
		theDefaultValue = getDefaultValueAPI("Temporary_Structures.Compound_Type")
		if theDefaultValue <> "" then
			Session("SearchData" & "Temporary_Structures.Compound_Type" & dbkey & formgroup)=theDefaultValue
		else
			Session("SearchData" & "Temporary_Structures.Compound_Type" & dbkey & formgroup)="1"
		end if
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Compound_Type;1")

	end if
	
	if Not Session("SearchData" & "Temporary_Structures.Notebook_Number" & dbkey & formgroup) <> "" then
		theDefaultValue = getDefaultValueAPI("Temporary_Structures.Notebook_Number")
		if theDefaultValue <> "" then
			Session("SearchData" & "Temporary_Structures.Notebook_Number" & dbkey & formgroup)=theDefaultValue
		else
			Session("SearchData" & "Temporary_Structures.Notebook_Number" & dbkey & formgroup)="1"
		end if
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Notebook_Number;1")

	end if
	if Not Session("SearchData" & "Temporary_Structures.Salt_Code" & dbkey & formgroup) <> "" then
		theDefaultValue = getDefaultValueAPI("Temporary_Structures.Salt_Code")
		if theDefaultValue <> "" then
			Session("SearchData" & "Temporary_Structures.Salt_Code" & dbkey & formgroup)=theDefaultValue
		else
			Session("SearchData" & "Temporary_Structures.Salt_Code" & dbkey & formgroup)="1"
		end if
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Salt_Code;1")

	end if
	if Not Session("SearchData" & "Temporary_Structures.Sequence_ID" & dbkey & formgroup) <> "" then
		theDefaultValue = getDefaultValueAPI("Temporary_Structures.Sequence_ID")
		if theDefaultValue <> "" then
			Session("SearchData" & "Temporary_Structures.Sequence_ID" & dbkey & formgroup)=theDefaultValue
		else
			Session("SearchData" & "Temporary_Structures.Sequence_ID" & dbkey & formgroup)="1"
		end if
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Sequence_ID;1")

	end if
	
	if Not Session("SearchData" & "Temporary_Structures.Solvate_ID" & dbkey & formgroup) <> "" then
		theDefaultValue = getDefaultValueAPI("Temporary_Structures.Solvate_ID")
		if theDefaultValue <> "" then
			Session("SearchData" & "Temporary_Structures.Solvate_ID" & dbkey & formgroup)=theDefaultValue
		else
			Session("SearchData" & "Temporary_Structures.Solvate_ID" & dbkey & formgroup)="1"
		end if
		Session("SearchData" & "Relational" & dbkey & formgroup) = AddToString(Session("SearchData" & "Relational" & dbkey & formgroup), "Temporary_Structures.Solvate_ID;1")

	end if

end sub

Function getDupHandlingSetting(ByVal dbkey, ByVal formgroup, ByVal reg_parameter)

	if Application("CHEMLOADER_DUP_HANDLING") = "" then
		Application.Lock
		Application("CHEMLOADER_DUP_HANDLING")=GetINIValue( "optional", "REGISTRATION", "CHEMLOADER_DUP_HANDLING", "web_app", "cfserver")
		if (Application("CHEMLOADER_DUP_HANDLING")="INIEmpty" or Application("CHEMLOADER_DUP_HANDLING") = "NULL" or Application("CHEMLOADER_DUP_HANDLING") = "") then
			Application("CHEMLOADER_DUP_HANDLING")=reg_parameter
		end if
		Application.UnLock
	end if
	getDupHandlingSetting=Application("CHEMLOADER_DUP_HANDLING")
End Function

Function getReturnFieldsDefault()
	'defualt return fields
	getReturnFieldsDefault = "reg_numbers.reg_number"
end function

Function getRegParameterDefault(reg_method)
		'defualt reg_parameter
	select case UCase(reg_method)
		case "REG_TEMP"
			base64string = Session("SearchData" & "Temporary_Structures.Structure" & dbkey & formgroup)
			if base64string <> "" then
				theVal = "ADD_COMPOUND"
			else
				theVal = "ADD_BATCH"
			end if
			
		case "REG_PERM"
			theVal = "USER_INPUT"
	end select

getRegParameterDefault = theVal
end function

Function AddToString(inputstr,item_to_add)
	if inputstr <> "" then
		newString = inputstr & "," & item_to_add
	else
		newString = item_to_add
	end if
	AddToString = newString
end function

function getStructure(struc_id)
			dbkey = "reg"
			formgroup = "base_form_group"
			return_format = request("return_format")
			if not return_format <> "" then 
				return_format = "cdx"
			end if
			embedded = request("return_embedded")
			if not embedded <> "" then 
				embedded= "true"
			end if
			If Not UCase(return_format) = "MOLFILE" then
				Set RegConn = getRegConn(dbkey, formgroup)
				sql = "SELECT BASE64_CDX FROM Structures WHERE cpd_internal_id=" & struc_id
				Set RS = RegConn.Execute(sql)
				if Not (RS.BOF and RS.EOF) then
					Base64Str = RS("BASE64_CDX")
				else
					Base64Str = ""
				end if
				CloseRS(RS)
				'CloseConn(DataConn)
			end if
			myDirHTTP =Application("TempFileDirectoryHTTP" & dbkey) & "structuresStructure"  & "_" & struc_id & "." & return_format
			Select Case UCase(return_format)
				Case "GIF"
					if Len(Base64Str) > 0 then
						myDir = Application("TempFileDirectory" & dbkey)  & "Structures" & "BASE64_CDX" & "_" & struc_id &  "." & "cdx"
						If not isObject(Application("myDecoder"))then
							Set Application("myDecoder") = Server.CreateObject("Base64Decode.Decode")
						End If
							decodesuccess = Application("myDecoder").Decode(Base64Str, myDir)
					else
						decodesuccess= false
					end if	
					if decodesuccess = true then				
						gifHeight = 200 
						gifWidth = 200 
						'ConvertCDXtoGIF write to tempdir a gif file of the form TableNameFieldName_uniqueid_gifWidthXgifHeight.gif
						ConvertCDXtoGIF dbkey, "Structures", "BASE64_CDX", struc_id, gifWidth, gifHeight					
						myDirHTTP = Application("TempFileDirectoryHTTP" & dbkey) & "Structures" & "BASE64_CDX" & "_" &  struc_id & "_" & gifWidth & "x" & gifHeight & "." & "gif"
						if MyTrue(embedded) then
							returnstring= "<IMG src=""" & myDirHTTP & """ align=baseline border=0>"	
						else
							returnstring= myDirHTTP
						end if	
					end if
			
				Case "CDX"
					existingConnection = ""
					if Len(Base64Str) > 0 then
						myDir = Application("TempFileDirectory" & dbkey)  & "Structures" & "BASE64_CDX" & "_" & struc_id &  "." & "cdx"
						If not isObject(Application("myDecoder"))then
							Set Application("myDecoder") = Server.CreateObject("Base64Decode.Decode")
						End If
							decodesuccess = Application("myDecoder").Decode(Base64Str, myDir)
					else
						decodesuccess= false
					end if
							
					if MyTrue(embedded) then
						dataurl = "data:chemical/x-cdx;base64," & Base64Str
						if detectIE() then
							dataurl = " dataurl='" & Server.URLEncode(dataurl) & "'"
						else
							dataurl = " dataurl='" & Server.HTMLEncode(dataurl) & "'"
						end if
						blankpath = Application("TempFileDirectoryHTTP" & dbkey)   &   "mt.cdx"
						returnstring = "<script language=""Javascript"">"
						returnstring = returnstring  & " var cd_plugin_threshold=" & Application("CD_PLUGIN_THRESHOLD")
						returnstring = returnstring  & " </script>"
						returnstring = returnstring  & " <script language=""JavaScript"" src= ""/cfserverasp/source/chemdraw.js""></script>"
						returnstring = returnstring  & " <script language=""JavaScript"">  cd_includeWrapperFile(""/cfserverasp/source/"")</script>"
						returnstring = returnstring  & " <script language = ""JavaScript"">"
						returnstring = returnstring  & " var embedString = ""<embed name='cdpstructure' src='" & blankpath & "' "  & dataurl & " align='baseline' border='3' width='350' height='300' id='1' type='chemical/x-cdx' viewonly='true'>"";"
						returnstring = returnstring  & " cd_insertObjectStr(embedString)"
						returnstring = returnstring  & " </script>"
					else
						returnstring= myDir
					end if
				Case "MOLFILE"
					myDirHTTP =Application("TempFileDirectoryHTTP" & dbkey) & "structuresStructure"  & "_" & struc_id & "." & "mol"
					existingConnection = ""
					CSDOGetChemData dbkey, "", "Structures", "Structure", struc_id, "mol", existingConnection
					returnstring= myDirHTTP
				Case Else
					returnstring="format not supported"
							
			end Select
			
			getStructure = returnstring
end function

'SYAN added on 11/19/2004 to fix CSBR-49046
Function IsAppUser(dbkey, formgroup, userName)
	returnVal = false
	
	Set Conn = GetCS_SecurityConnection(dbKey)
	Set Cmd = GetCommand(Conn, "{CALL CS_SECURITY.MANAGE_USERS.GETUSERS(?)}", adCmdText)
	Set RS = Server.CreateObject("adodb.recordset")
	
	Cmd.Parameters.Append Cmd.CreateParameter("PPRIVTABLENAME",200, 1, 100, "CHEM_REG_PRIVILEGES")
	Cmd.Properties ("PLSQLRSet") = TRUE  
	On error resume next
	Set RS = Cmd.Execute
	Cmd.Properties ("PLSQLRSet") = FALSE
	
	If err.number <> 0 then
		returnVal = false
		err.clear
	else
		If Not (RS.EOF AND RS.BOF) then
			RS.MoveFirst
			While Not RS.EOF
				If UCase(RS("USERNAME")) = UCase(userName) then
					returnVal = True
				End if
				RS.MoveNext
			Wend
		end if
	end if
	
	Set RS = Nothing
		
	IsAppUser = returnVal

End function
'End of SYAN modification

'SYAN added on 2/8/2005 to fix CSBR-50934
Function BulkUpdate
	'stop
	Dim regNumber, batchNumber
	Dim fieldArray
	Dim i
	Dim action
	Dim sql, conn, cmd, RS
	Dim returnVal
	
	regNumber = ""
	
	batchId = cstr(request("BATCHES.BATCH_INTERNAL_ID"))
	regNumber = cstr(request("BATCHES.REG_NUMBER"))
	batchNumber = cstr(request("BATCHES.BATCH_NUMBER"))
	

	
	if batchID <> "" then
		action = "UPDATE_BATCH"
		useBatchID = true
	elseif regNumber <> "" then
		useRegNum = true
		if IsNumeric(batchNumber) then
			action = "UPDATE_BATCH"
		else
			action = "CREATE_BATCH"
		end if
	else
		returnVal =  "No valid bacth identifier found. Check the mapping for REG_NUMBER AND BATCH_NUMBER or for BATCH_INTERNAL ID"
	end if

		Session("UserName" & dbkey) = Application("REG_USERNAME")
		Session("UserID" & dbkey) = Application("REG_PWD")
	
		Set RegConn= GetRegConn(dbkey, formgroup)
		if RegConn.State=0 then 
			DoLoggedOutMsg()
		end if
	
		Set RS = Server.CreateObject("ADODB.Recordset")
		Set cmd = Server.CreateObject("adodb.command")
	
		sql = "SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'BATCHES'"
		cmd.ActiveConnection = RegConn
		cmd.CommandType = adCmdText
		cmd.CommandText = sql
		on error resume next
		RS.Open cmd

		if not (RS.BOF and RS.EOF) then
			RS.MoveFirst
			while not RS.EOF 
				fields = fields & RS("COLUMN_NAME") & ","
				RS.MoveNext
			wend
		end if

		RS.Close
	
		fields = left(fields, len(fields) - 1) 'get rid of the extra comma at the end
		fieldArray = Split(fields, ",")
	
	
	if useRegNum then 
		sql = "SELECT REG_ID, CPD_INTERNAL_ID FROM REG_NUMBERS WHERE ROOT_NUMBER = ?"
		cmd.CommandText = sql
		cmd.Parameters.Append cmd.CreateParameter("pRegNumber", adVarChar, adParamInput, len(regNumber), regNumber) 
		RS.Open cmd
				
		if not (RS.BOF and RS.EOF) then
			RS.MoveFirst
			regID = RS("REG_ID")
			cpdInternalID = RS("CPD_INTERNAL_ID")
		else 
			BulkUpdate = "Update batch failed. Reg_ID could not be resolved from given RegNumber. Error: " & err.number & " " & err.Description
			exit function ' ===> Exit Point
		end if
				
		RS.Close
		cmd.Parameters.Delete "pRegNumber"
	End if		

	select case action
		case "UPDATE_BATCH"
			
			if useRegNum then
				
				sql = "SELECT * FROM BATCHES WHERE REG_INTERNAL_ID = ? AND BATCH_NUMBER = ?"
					
				
				cmd.Parameters.Append cmd.CreateParameter("pRegID", adInteger, adParamInput, , regID) 
				cmd.Parameters.Append cmd.CreateParameter("pBatchNumber", adInteger, adParamInput, , batchNumber) 
			Else
				sql = "SELECT * FROM BATCHES WHERE BATCH_INTERNAL_ID = ?"
				cmd.Parameters.Append cmd.CreateParameter("pbatchID", adInteger, adParamInput, , batchID)
			End if
			
				cmd.CommandText = sql
				RS.LockType= 3
				RS.CursorType=1
				RS.Open cmd
			
			if RS.BOF and RS.EOF then
				BulkUpdate = "Update batch failed. Batch_Internal_ID (" & batchID  & ") could not be matched."
				exit function ' ===> Exit Point
			end if
					
			for i = 0 to UBound(fieldArray)
				value = request("BATCHES." & fieldArray(i))
						
				
				if not (IsNull(value) or IsEmpty(value)) then
					on error resume next	
					RS(fieldArray(i)).Value = value
					if err.number <> 0 then
						if InStr(err.Description, "Accessor") > 0 then 
							err.Clear
						else
							BulkUpdate = "Update batch failed. Error: " & err.number & " " & err.Description
							exit function ' ===> Exit Point
						end if
					end if		
				end if
			next
					
			RS.Update
			RS.Close

			
			if cmd.parameters.count = 2 then cmd.Parameters.Delete(1)
			cmd.Parameters.Delete(0)
					
			if err.number = 0 then
				returnVal = "Batch updated. "
			else
				BulkUpdate = "Update batch failed. Error: " & err.number & " " & err.Description
				Exit function '====> EXIT POINT
			end if
				
		case "CREATE_BATCH"
		
			'stop	
			sql = "SELECT MAX(BATCH_NUMBER) AS CURRENT_BATCH_NUMBER FROM BATCHES WHERE REG_INTERNAL_ID=?"
			cmd.CommandText = sql
			cmd.Parameters.Append cmd.CreateParameter("pRegID", adInteger, adParamInput, , regID)
			RS.Open cmd
						
			currentBatchNumber = RS("CURRENT_BATCH_NUMBER")
					
			if IsNull(currentBatchNumber) then
				nextBatchNumber = 1
			else
				nextBatchNumber = CLng(currentBatchNumber) + 1
			end if
						
			RS.Close
			cmd.Parameters.Delete "pRegID"
			
			'SYAN modified on 12/5/2005 to fix CSBR-59965
			'sql = "INSERT INTO BATCHES (CPD_INTERNAL_ID, BATCH_NUMBER) VALUES (?,?) RETURNING ROWID INTO ?"
			sql = "INSERT INTO BATCHES (CPD_INTERNAL_ID, REG_INTERNAL_ID, BATCH_NUMBER) VALUES (?, ?, ?) RETURNING ROWID INTO ?"
			'End of SYAN modification
			
			RegConn.BeginTrans
					
			cmd.CommandText = sql
			cmd.Parameters.Append cmd.CreateParameter("pCPDInternalID", adInteger, adParamInput, , cpdInternalID)
			cmd.Parameters.Append cmd.CreateParameter("pRegID", adInteger, adParamInput, , regID)
			cmd.Parameters.Append cmd.CreateParameter("pNextBatchNumber", adInteger, adParamInput, , nextBatchNumber)
			cmd.Parameters.Append cmd.CreateParameter("pRowID", adVarChar, adParamOutput, 20)
			on error resume next
			cmd.execute
					
			rowID = cmd.Parameters("pRowID").value
					
			cmd.Parameters.Delete "pCPDInternalID"
			cmd.Parameters.Delete "pRegID"
			cmd.Parameters.Delete "pNextBatchNumber"
			cmd.Parameters.Delete "pRowID"
					
			sql = "SELECT * FROM BATCHES WHERE ROWID = ?"
			cmd.CommandText = sql
			cmd.Parameters.Append cmd.CreateParameter("pRowID", adVarChar, adParamInput, len(rowID) , rowID)

			on error resume next
			RS.LockType= 3
			RS.CursorType=1
			RS.Open cmd
						
			for i = 0 to UBound(fieldArray)
				'if fieldArray(i) = "BP" or fieldArray(i) = "MP" then
					'stop
				'end if
				value = request("BATCHES." & fieldArray(i))
						
				on error resume next
				if not (IsNull(value) or IsEmpty(value)) then
					RS(fieldArray(i)).Value = value
				end if
			next

			cmd.Parameters.Delete "pRowID"

			RS.Update
			RS.Close
			
			'SYAN added on 10/7/2005 to fix CSBR-59965
			'stop
			sql = "UPDATE REG_NUMBERS SET LAST_BATCH_NUMBER = ? WHERE REG_ID = ?"
										
			cmd.CommandText = sql
			cmd.Parameters.Append cmd.CreateParameter("pLastBatchNumber", adInteger, adParamInput, , nextBatchNumber)
			cmd.Parameters.Append cmd.CreateParameter("pRegID", adInteger, adParamInput, , regID)
			on error resume next
			cmd.execute
			'End of SYAN modification
			
			if err.number = 0 then
				RegConn.CommitTrans
			else
				RegConn.RollBackTrans
			end if
					
			if err.number = 0 then
				returnVal = "Batch created. "
			else
				returnVal = "Create batch failed. Error: " & err.number & " " & err.Description
			end if

			cmd.Parameters.Delete "pRowID"
		
	end select
	
	BulkUpdate = returnVal
	
End Function

'End of SYAN modification

'<!----------------------------- Error Handler --------------------------------->

'If Err Then HandleError dbkey, formgroup, "", "", err.number, err.description
%>
