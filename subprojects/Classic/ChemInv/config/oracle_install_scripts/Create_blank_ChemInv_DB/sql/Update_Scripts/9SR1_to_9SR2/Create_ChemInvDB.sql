-- Copyright Cambridgesoft Corp 2001-2005 all rights reserved
-- This script creates empty ChemInv database tables

-- NOTE THIS SCRIPT MUST BE RUN FROM THE COMMAND LINE VERSION OF SQLPLUS
-- This script will not run from SQLPlus Worksheet

-- Create Global temporary tables used by stored procedures
CREATE GLOBAL TEMPORARY TABLE TempIDs (
	id NUMBER NOT NULL,
	PRIMARY KEY(ID))
	ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE StoredProcedureErrors(
	error_msg VARCHAR2(255))
	ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE TempBarcodes(
	barcode VARCHAR2(50))
	ON COMMIT DELETE ROWS;

CREATE GLOBAL TEMPORARY TABLE CLOBS(
	theCLOB CLOB)
	ON COMMIT DELETE ROWS;

@@globals.sql

--Create new table DB_FORMGROUP
create table DB_FORMGROUP (
	FORMGROUP_ID NUMBER(8,0) not null,
	FORMGROUP_NAME VARCHAR2(50) not null,
	USER_ID VARCHAR2(100), 
	IS_PUBLIC VARCHAR2(1) not null,
	DESCRIPTION VARCHAR2(254),
	BASE_TABLE_ID NUMBER(8,0),
	CREATED_DATE DATE not null, 
	constraint PK_FORMGROUP 
		primary key (FORMGROUP_ID) 
	)
;

INSERT INTO DB_FORMGROUP (FORMGROUP_ID, FORMGROUP_NAME, IS_PUBLIC, DESCRIPTION, CREATED_DATE) VALUES
						 (1, 'base_form_group', '1', 'Substance Search', sysdate);
INSERT INTO DB_FORMGROUP (FORMGROUP_ID, FORMGROUP_NAME, IS_PUBLIC, DESCRIPTION, CREATED_DATE) VALUES
						 (2, 'containers_np_form_group', '1', 'Container Search', sysdate);
INSERT INTO DB_FORMGROUP (FORMGROUP_ID, FORMGROUP_NAME, IS_PUBLIC, DESCRIPTION, CREATED_DATE) VALUES
						 (3, 'gs_form_group', '1', 'Global Search', sysdate);
INSERT INTO DB_FORMGROUP (FORMGROUP_ID, FORMGROUP_NAME, IS_PUBLIC, DESCRIPTION, CREATED_DATE) VALUES
						 (4, 'plates_form_group', '1', 'Plate Search', sysdate);
INSERT INTO DB_FORMGROUP (FORMGROUP_ID, FORMGROUP_NAME, IS_PUBLIC, DESCRIPTION, CREATED_DATE) VALUES
						 (5, 'plate_compounds_form_group', '1', 'Plate Compound Search', sysdate);
commit;						 						 						 
						 
-- Create new table INV_PICKLISTS
CREATE TABLE INV_PICKLISTS (
	PickList_ID NUMBER(8,0),
	PickList_Display VARCHAR2(50),
	PickList_Domain NUMBER(3,0),
	CONSTRAINT PickList_PK 
		primary key (PickList_ID,PickList_Domain) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- Create new table INV_API_ERRORS.
CREATE TABLE "INV_API_ERRORS"(
	"ERROR_ID" NUMBER(9) NOT NULL, 
	"ERROR_TEXT" VARCHAR2(255) NOT NULL
	)
; 

-- Create new table INV_UNIT_TYPES. 
CREATE TABLE "INV_UNIT_TYPES"(
	"UNIT_TYPE_ID" NUMBER(4) NOT NULL,
	"UNIT_TYPE_NAME" VARCHAR2(50) NOT NULL, 
    CONSTRAINT "INV_UNIT_TYPES_PK" 
		PRIMARY KEY("UNIT_TYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName  
	)
;     

-- Create new table INV_UNITS.
CREATE TABLE "INV_UNITS"(
	"UNIT_ID" NUMBER(4) NOT NULL,
	"UNIT_TYPE_ID_FK" NUMBER(4),
	"CONVERSION_RATIO" NUMBER, 
  "UNIT_ABREVIATION" VARCHAR2(50),
  "UNIT_NAME" VARCHAR2(50), 
  CONSTRAINT "INV_UNITS_PK" 
		PRIMARY KEY("UNIT_ID") USING INDEX TABLESPACE &&indexTableSpaceName, 
  CONSTRAINT "INV_UNIT_TYPES_UNITS_FK" 
		FOREIGN KEY("UNIT_TYPE_ID_FK") 
		REFERENCES "INV_UNIT_TYPES"("UNIT_TYPE_ID")
	)
; 

-- index the inv_units table
CREATE INDEX UNIT_TYPE_ID_FK_IDX ON INV_UNITS(UNIT_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;    

-- Create new table INV_OWNERS
CREATE TABLE INV_OWNERS (
  "OWNER_ID"	VARCHAR2(50) NOT NULL,
  "DESCRIPTION" VARCHAR2(255) NOT NULL,
  PRIMARY KEY (owner_id) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- Create new table INV_PHYSICAL_STATE.  
CREATE TABLE "INV_PHYSICAL_STATE"(
	"PHYSICAL_STATE_ID" NUMBER(4) NOT NULL,
  "PHYSICAL_STATE_NAME" VARCHAR2(50), 
  CONSTRAINT "INV_PHYSICAL_STATE_PK" 
		PRIMARY KEY("PHYSICAL_STATE_ID") USING INDEX TABLESPACE &&indexTableSpaceName 
	)
; 

-- Create new table INV_STATES.
CREATE TABLE "INV_STATES"(
	"STATE_ID" NUMBER(4) NOT NULL,
	"COUNTRY_ID_FK" NUMBER(4),
	"STATE_NAME" VARCHAR2(255),
	"STATE_ABBREVIATION" VARCHAR2(20),
    CONSTRAINT "INV_STATES_PK"
		PRIMARY KEY("STATE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;
  
-- Create new table INV_COUNTRY.
CREATE TABLE "INV_COUNTRY"(
	"COUNTRY_ID" NUMBER(4) NOT NULL,
	"COUNTRY_NAME" VARCHAR2(255),
    CONSTRAINT "INV_COUNTRIES_PK"
		PRIMARY KEY("COUNTRY_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- Create new table INV_ADDRESS.
CREATE TABLE "INV_ADDRESS"(
	"ADDRESS_ID" NUMBER(4) NOT NULL,
  "CONTACT_NAME" VARCHAR2(255),
	"ADDRESS1" VARCHAR2(255),
	"ADDRESS2" VARCHAR2(255),
	"ADDRESS3" VARCHAR2(255),
	"ADDRESS4" VARCHAR2(255),
	"CITY" VARCHAR2(255),
	"STATE_ID_FK" NUMBER(4),
	"COUNTRY_ID_FK" NUMBER(4),
	"ZIP" VARCHAR2(20),
	"FAX"  VARCHAR2(255),
	"PHONE" VARCHAR2(255),
	"EMAIL" VARCHAR2(255),
  CONSTRAINT "INV_ADDRESS_PK"
		PRIMARY KEY("ADDRESS_ID") USING INDEX TABLESPACE &&indexTableSpaceName,
  CONSTRAINT "INV_ADDRESS_STATEID_FK" 
		FOREIGN KEY("STATE_ID_FK") 
		REFERENCES "INV_STATES"("STATE_ID")
    ON DELETE SET NULL,
  CONSTRAINT "INV_ADDRESS_COUNTRYID_FK" 
		FOREIGN KEY("COUNTRY_ID_FK") 
		REFERENCES "INV_COUNTRY"("COUNTRY_ID")
    ON DELETE SET NULL
	)
;

-- index the inv_address table
CREATE INDEX INV_ADDRESS_STATEIDFK_IDX ON INV_ADDRESS(STATE_ID_FK) TABLESPACE &&indexTableSpaceName;    
CREATE INDEX INV_ADDRESS_COUNTRYIDFK_IDX ON INV_ADDRESS(COUNTRY_ID_FK) TABLESPACE &&indexTableSpaceName;    

-- Create new table INV_SUPPLIERS.  
CREATE TABLE "INV_SUPPLIERS"(
	"SUPPLIER_ID" NUMBER(4) NOT NULL,
	"SUPPLIER_NAME" VARCHAR2(255),
	"SUPPLIER_SHORT_NAME" VARCHAR2(50),
	"SUPPLIER_CODE" VARCHAR2(50), 
	"SUPPLIER_FACILITY_NAME" VARCHAR2(255),
	"SUPPLIER_ADDRESS_ID_FK" NUMBER(4),
  "IS_OFFICIAL_SUPPLIER" NUMBER(1) DEFAULT 0,
  "RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
  CONSTRAINT "INV_SUPPLIERS_PK" 
		PRIMARY KEY("SUPPLIER_ID") USING INDEX TABLESPACE &&indexTableSpaceName,  
  CONSTRAINT "INV_SUPPLIERS_ISOFFICIAL_CHK"
	  CHECK (IS_OFFICIAL_SUPPLIER IN (0,1)),
  CONSTRAINT "INV_SUPPLIERS_ADDRESSID_FK" 
		FOREIGN KEY("SUPPLIER_ADDRESS_ID_FK") 
		REFERENCES "INV_ADDRESS"("ADDRESS_ID")
    ON DELETE SET NULL
	)
; 

-- index the inv_suppliers table
CREATE INDEX INV_SUPPLIERS_ADDRESS_IDX ON INV_SUPPLIERS(SUPPLIER_ADDRESS_ID_FK) TABLESPACE &&indexTableSpaceName;


-- Create new table INV_LOCATION_TYPES.  
CREATE TABLE "INV_LOCATION_TYPES"(
	"LOCATION_TYPE_ID" NUMBER(4) NOT NULL, 
	"LOCATION_TYPE_NAME" VARCHAR2(50) NOT NULL, 
  CONSTRAINT "INV_LOCATION_TYPES_PK" 
		PRIMARY KEY("LOCATION_TYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName  
	)
; 

-- Create new table INV_LOCATIONS.
CREATE TABLE "INV_LOCATIONS"(
	"LOCATION_ID" NUMBER(9) NOT NULL,
	"PARENT_ID" NUMBER(9), 
	"DESCRIPTION" VARCHAR2(255), 
	"LOCATION_TYPE_ID_FK" NUMBER(9) NOT NULL, 
	"LOCATION_NAME" VARCHAR2(50) NOT NULL, 
	"LOCATION_DESCRIPTION" VARCHAR2(255), 
	"LOCATION_BARCODE" VARCHAR2(50) NOT NULL,
	"OWNER_ID_FK" VARCHAR2(30), 
	"ALLOWS_CONTAINERS" VARCHAR2(1),
	"ADDRESS_ID_FK" NUMBER(4),
	"RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
  CONSTRAINT "INV_LOCATIONS_PK" 
		PRIMARY KEY("LOCATION_ID") USING INDEX  TABLESPACE &&indexTableSpaceName,  
  CONSTRAINT "INV_LOCATIONS_ADDRESSID_FK"
		FOREIGN KEY("ADDRESS_ID_FK")
		REFERENCES "INV_ADDRESS"("ADDRESS_ID") 
    ON DELETE SET NULL,
	CONSTRAINT "INV_LOC_LOC_FK" 
		FOREIGN KEY("PARENT_ID") 
		REFERENCES "INV_LOCATIONS"("LOCATION_ID") 
		ON DELETE CASCADE, 
  CONSTRAINT "INV_LOC_LOC_TYPES_FK" 
		FOREIGN KEY("LOCATION_TYPE_ID_FK") 
		REFERENCES "INV_LOCATION_TYPES"("LOCATION_TYPE_ID") 	 
); 

-- index the inv_locations table
CREATE INDEX INV_LOCATIONS_OWNER_IDX ON INV_LOCATIONS(OWNER_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX LOCATION_TYPE_ID_FK_IDX ON INV_LOCATIONS(LOCATION_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;     
CREATE INDEX INV_LOCATIONS_IDX1 ON INV_LOCATIONS(LOCATION_ID ASC, PARENT_ID ASC) TABLESPACE &&indexTableSpaceName; 
CREATE INDEX INV_LOCATIONS_ADDRESS_IDX ON INV_LOCATIONS(ADDRESS_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_LOCATIONS_PARENTID_IDX ON INV_LOCATIONS(PARENT_ID) TABLESPACE &&indexTableSpaceName;


-- Create new table INV_CONTAINER_TYPES.
CREATE TABLE "INV_CONTAINER_TYPES"(
    "CONTAINER_TYPE_ID" NUMBER(4) NOT NULL, 
    "CONTAINER_TYPE_NAME" VARCHAR2(50), 
    CONSTRAINT "INV_CONTAINER_TYPES_PK" 
		PRIMARY KEY("CONTAINER_TYPE_ID") USING INDEX  TABLESPACE &&indexTableSpaceName  
	)
; 

-- Create new table INV_CONTAINER_STATUS. 
CREATE TABLE "INV_CONTAINER_STATUS"(
    "CONTAINER_STATUS_ID" NUMBER(4) NOT NULL, 
    "CONTAINER_STATUS_NAME" VARCHAR2(50), 
    "CONTAINER_STATUS_DESC" VARCHAR2(255), 
    CONSTRAINT "INV_CONTAINER_STATUS_PK" 
		PRIMARY KEY("CONTAINER_STATUS_ID") USING INDEX TABLESPACE &&indexTableSpaceName  
	)
; 

-- Create new table INV_COMPOUNDS  
CREATE TABLE "INV_COMPOUNDS"(
	"COMPOUND_ID" NUMBER(9) NOT NULL, 
	"MOL_ID" NUMBER(9), 
	"CAS" VARCHAR2(15), 
	"ACX_ID" VARCHAR2(15), 
	"SUBSTANCE_NAME" VARCHAR2(255) NOT NULL,
	"BASE64_CDX" CLOB,
	"MOLECULAR_WEIGHT" NUMBER, 
	"DENSITY" NUMBER DEFAULT 1 NOT NULL,
	"CLOGP" NUMBER,
    	"ROTATABLE_BONDS" NUMBER(9,0),
    	"TOT_POL_SURF_AREA" NUMBER,
    	"HBOND_ACCEPTORS" NUMBER(9,0),
    	"HBOND_DONORS" NUMBER(9,0),
	"ALT_ID_1" VARCHAR2(255),
	"ALT_ID_2" VARCHAR2(255),
	"ALT_ID_3" VARCHAR2(255),
	"ALT_ID_4" VARCHAR2(255), 
    "ALT_ID_5" VARCHAR2(255),
    "CONFLICTING_FIELDS"  VARCHAR2(2000),
    "RID" NUMBER(12) NOT NULL,
    "CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL,
    "TIMESTAMP" DATE DEFAULT sysdate NOT NULL,  
    CONSTRAINT "INV_COMPOUNDS_PK" 
		PRIMARY KEY("COMPOUND_ID") USING INDEX TABLESPACE &&indexTableSpaceName  
	)
	LOB (BASE64_CDX) STORE AS(
		DISABLE STORAGE IN ROW NOCACHE PCTVERSION 10
		TABLESPACE &&lobsTableSpaceName
		STORAGE (INITIAL &&lobB64cdx NEXT &&lobB64cdx)
	)		
; 

-- index the inv_compounds table
CREATE INDEX INV_COMPOUNDS_CAS_IDX ON INV_COMPOUNDS(CAS ASC) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_COMPOUNDS_ACXID_IDX ON INV_COMPOUNDS(ACX_ID ASC) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_COMPOUNDS_SN_IDX ON INV_COMPOUNDS(SUBSTANCE_NAME ASC) TABLESPACE &&indexTableSpaceName;

-- Create new table INV_SOLVENTS
CREATE TABLE "INV_SOLVENTS"(
	"SOLVENT_ID" NUMBER(10) NOT NULL, 
    	"SOLVENT_NAME" VARCHAR2(200) NOT NULL, 
	"COMPOUND_ID_FK" NUMBER(10), 
	CONSTRAINT "INV_SOLVENTS_COMPOUND_ID_FK" 
		FOREIGN KEY("COMPOUND_ID_FK") 
		REFERENCES "INV_COMPOUNDS"("COMPOUND_ID"), 
	CONSTRAINT "INV_SOLVENTS_PK" 
		PRIMARY KEY("SOLVENT_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;  
CREATE INDEX INV_SOLVENTS_COMPOUNDID_IDX ON INV_SOLVENTS(COMPOUND_ID_FK) TABLESPACE &&indexTableSpaceName;

-- Create new table INV_SYNONYMS.
CREATE TABLE "INV_SYNONYMS"(
	"SYNONYM_ID" NUMBER(9) NOT NULL, 
	"COMPOUND_ID_FK" NUMBER(9) NOT NULL, 
	"SUBSTANCE_NAME" VARCHAR2(255) NOT NULL, 
  "RID" NUMBER(12) NOT NULL,  
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
  CONSTRAINT "INV_SYNONYMS_PK" 
		PRIMARY KEY("SYNONYM_ID") USING INDEX,  
  CONSTRAINT "INV_SYNONYM_NAME_U" 
		UNIQUE("COMPOUND_ID_FK", "SUBSTANCE_NAME") USING INDEX TABLESPACE &&indexTableSpaceName, 
  CONSTRAINT "INV_SYN_COMPOUND_FK" 
		FOREIGN KEY("COMPOUND_ID_FK") 
		REFERENCES "INV_COMPOUNDS"("COMPOUND_ID")
    ON DELETE CASCADE
	)
; 
    
-- Create new table INV_CONTAINERS.
CREATE TABLE "INV_CONTAINERS"(
	"CONTAINER_ID" NUMBER(9) NOT NULL, 
	"LOCATION_ID_FK" NUMBER(9) NOT NULL, 
	"COMPOUND_ID_FK" NUMBER(9),
	"PARENT_CONTAINER_ID_FK" NUMBER(9) NULL, 
	"REG_ID_FK" NUMBER(9),
	"BATCH_NUMBER_FK" NUMBER(9),
  "FAMILY" NUMBER(9),
	"CONTAINER_NAME" VARCHAR2(255) NOT NULL, 
	"CONTAINER_DESCRIPTION" VARCHAR2(255), 
  "QTY_MAX" NUMBER NOT NULL, 
  "QTY_INITIAL" NUMBER NOT NULL, 
  "QTY_REMAINING" NUMBER NOT NULL, 
  "QTY_MINSTOCK" NUMBER, 
  "QTY_MAXSTOCK" NUMBER, 
  "WELL_NUMBER" NUMBER(4), 
  "WELL_ROW" VARCHAR2(3), 
  "WELL_COLUMN" VARCHAR2(3), 
  "DATE_EXPIRES" DATE, 
  "DATE_CREATED" DATE NOT NULL, 
  "CONTAINER_TYPE_ID_FK" NUMBER(4) NOT NULL, 
  "PURITY" NUMBER, 
  "SOLVENT_ID_FK" NUMBER(4), 
  "CONCENTRATION" NUMBER, 
  "UNIT_OF_MEAS_ID_FK" NUMBER(4), 
  "UNIT_OF_WGHT_ID_FK" NUMBER(4), 
  "UNIT_OF_CONC_ID_FK" NUMBER(4), 
  "GRADE" VARCHAR2(255), 
  "WEIGHT" NUMBER, 
  "UNIT_OF_PURITY_ID_FK" NUMBER(4), 
  "TARE_WEIGHT" NUMBER, 
  "OWNER_ID_FK" VARCHAR2(50), 
  "CONTAINER_COMMENTS" VARCHAR2(2000), 
  "STORAGE_CONDITIONS" VARCHAR2(2000),
  "HANDLING_PROCEDURES" VARCHAR2(2000),
  "ORDERED_BY_ID_FK" VARCHAR2(50), 
  "DATE_ORDERED" DATE, 
  "DATE_RECEIVED" DATE, 
	"DATE_CERTIFIED" DATE,
	"DATE_APPROVED" DATE,
  "LOT_NUM" VARCHAR2(50), 
  "CONTAINER_STATUS_ID_FK" NUMBER(4) NOT NULL, 
  "RECEIVED_BY_ID_FK" VARCHAR2(50), 
  "FINAL_WGHT" NUMBER, 
  "NET_WGHT" NUMBER, 
  "QTY_AVAILABLE" NUMBER, 
  "QTY_RESERVED" NUMBER, 
  "PHYSICAL_STATE_ID_FK" NUMBER(4), 
  "CURRENT_USER_ID_FK" VARCHAR2(50) NOT NULL, 
  "SUPPLIER_ID_FK" NUMBER(4), 
  "SUPPLIER_CATNUM" VARCHAR2(50), 
  "DATE_PRODUCED" DATE, 
  "CONTAINER_COST" NUMBER(9, 2), 
  "UNIT_OF_COST_ID_FK" NUMBER(4), 
  "DEF_LOCATION_ID_FK" NUMBER(9) NOT NULL, 
  "BARCODE" VARCHAR2(50) NOT NULL, 
  "PO_NUMBER" VARCHAR2(50), 
  "REQ_NUMBER" VARCHAR2(50),
  "DENSITY" NUMBER, 
  "UNIT_OF_DENSITY_ID_FK" NUMBER(4), 
  "PO_LINE_NUMBER" NUMBER(4),
  "FIELD_1" VARCHAR2(2000),
  "FIELD_2" VARCHAR2(2000),
  "FIELD_3" VARCHAR2(2000),
  "FIELD_4" VARCHAR2(2000),
  "FIELD_5" VARCHAR2(2000),
  "FIELD_6" VARCHAR2(2000),
  "FIELD_7" VARCHAR2(2000),
  "FIELD_8" VARCHAR2(2000),
  "FIELD_9" VARCHAR2(2000),
  "FIELD_10" VARCHAR2(2000),
  "DATE_1" DATE,
  "DATE_2" DATE,
  "DATE_3" DATE,
  "DATE_4" DATE,
  "DATE_5" DATE,
  "RID" NUMBER(10) NOT NULL, 
  "CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
  "TIMESTAMP" DATE DEFAULT sysdate NOT NULL,  
  CONSTRAINT "INV_CONTAINERS_PK" 
		PRIMARY KEY("CONTAINER_ID") USING INDEX  TABLESPACE &&indexTableSpaceName, 
  CONSTRAINT "INV_CONT_BARCODE_U" 
		UNIQUE("BARCODE") USING INDEX  TABLESPACE &&indexTableSpaceName, 
  CONSTRAINT "INV_CONT_COMPOUNDS_FK" 
		FOREIGN KEY("COMPOUND_ID_FK") 
		REFERENCES "INV_COMPOUNDS"("COMPOUND_ID"),
	CONSTRAINT "INV_CONT_CURRUSERID_FK"
  	FOREIGN KEY("CURRENT_USER_ID_FK")
    REFERENCES "PEOPLE"("USER_ID"),
  CONSTRAINT "INV_CONT_PARENTCONT_FK" 
		FOREIGN KEY("PARENT_CONTAINER_ID_FK") 
		REFERENCES "INV_CONTAINERS"("CONTAINER_ID"),	 
  CONSTRAINT "INV_CONT_CONT_STATUS_FK" 
		FOREIGN KEY("CONTAINER_STATUS_ID_FK") 
		REFERENCES "INV_CONTAINER_STATUS"("CONTAINER_STATUS_ID"), 
  CONSTRAINT "INV_CONT_CONT_TYPES_FK" 
		FOREIGN KEY("CONTAINER_TYPE_ID_FK") 
		REFERENCES "INV_CONTAINER_TYPES"("CONTAINER_TYPE_ID"), 
  CONSTRAINT "INV_CONT_DEFLOCATION_FK" 
		FOREIGN KEY("DEF_LOCATION_ID_FK") 
		REFERENCES "INV_LOCATIONS"("LOCATION_ID"),  
  CONSTRAINT "INV_CONT_PHYSICAL_STATE_FK" 
		FOREIGN KEY("PHYSICAL_STATE_ID_FK") 
		REFERENCES "INV_PHYSICAL_STATE"("PHYSICAL_STATE_ID"), 
  CONSTRAINT "INV_CONT_QTYMAX_CHK"
		CHECK(QTY_MAX > 0),
	CONSTRAINT "INV_CONT_OVERSIZE_CHK" 
		CHECK(QTY_REMAINING <= QTY_MAX),
	CONSTRAINT "INV_CONT_QTY_AVAIL_CHK" 
		CHECK(QTY_AVAILABLE >= 0),
	CONSTRAINT "INV_CONT_QTY_REMAIN_CHK" 
		CHECK(QTY_REMAINING >= 0),	   
  CONSTRAINT "INV_CONT_SUPPLIERS_FK" 
		FOREIGN KEY("SUPPLIER_ID_FK") 
		REFERENCES "INV_SUPPLIERS"("SUPPLIER_ID"), 
  CONSTRAINT "INV_CONT_UNITOFCONC_FK" 
		FOREIGN KEY("UNIT_OF_CONC_ID_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID"), 
  CONSTRAINT "INV_CONT_UNITOFMEAS_FK" 
		FOREIGN KEY("UNIT_OF_MEAS_ID_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID"), 
  CONSTRAINT "INV_CONT_UNITOFPURITY_FK" 
		FOREIGN KEY("UNIT_OF_PURITY_ID_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID"),
	CONSTRAINT "INV_CONT_OWNER_ID_FK" 
		FOREIGN KEY("OWNER_ID_FK") 
		REFERENCES "INV_OWNERS"("OWNER_ID"),	
	CONSTRAINT "INV_CONT_LOCATIONS_FK" 
		FOREIGN KEY("LOCATION_ID_FK") 
		REFERENCES "INV_LOCATIONS"("LOCATION_ID") 
		ON DELETE CASCADE, 
  CONSTRAINT "INV_CONT_UNITOFWGHT_FK" 
		FOREIGN KEY("UNIT_OF_WGHT_ID_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID"),
  CONSTRAINT "INV_CONT_SOLVENTS_FK" 
		FOREIGN KEY("SOLVENT_ID_FK") 
		REFERENCES "INV_SOLVENTS"("SOLVENT_ID")
	)
; 

-- index the inv_containers table
CREATE INDEX inv_containers_req_idx ON inv_containers(req_number asc) TABLESPACE &&indexTableSpaceName;
CREATE INDEX inv_containers_owner_idx ON inv_containers(owner_id_fk asc) TABLESPACE &&indexTableSpaceName;
CREATE INDEX inv_containers_received_idx ON inv_containers(date_received asc) TABLESPACE &&indexTableSpaceName;
CREATE INDEX inv_containers_catnum_idx ON inv_containers(supplier_id_fk asc, supplier_catnum asc) TABLESPACE &&indexTableSpaceName;
CREATE INDEX inv_containers_ponum_idx ON inv_containers(po_number asc, po_line_number asc) TABLESPACE &&indexTableSpaceName;
CREATE INDEX container_location_id_fk_idx ON inv_containers (location_id_fk) TABLESPACE &&indexTableSpaceName; 
CREATE INDEX containers_compound_id_fk_idx ON inv_containers (compound_id_fk) TABLESPACE &&indexTableSpaceName; 
CREATE INDEX container_status_id_fk_idx ON inv_containers(container_status_id_fk) TABLESPACE &&indexTableSpaceName;
CREATE INDEX container_type_id_fk_idx ON inv_containers(container_type_id_fk) TABLESPACE &&indexTableSpaceName;
CREATE INDEX def_location_id_fk_idx ON inv_containers(def_location_id_fk) TABLESPACE &&indexTableSpaceName;
CREATE INDEX physical_state_id_fk_idx ON inv_containers(physical_state_id_fk) TABLESPACE &&indexTableSpaceName;
CREATE INDEX unit_of_conc_id_fk_idx ON inv_containers(unit_of_conc_id_fk) TABLESPACE &&indexTableSpaceName;
CREATE INDEX unit_of_meas_id_fk_idx ON inv_containers(unit_of_meas_id_fk) TABLESPACE &&indexTableSpaceName;
CREATE INDEX unit_of_purity_id_fk_idx ON inv_containers(unit_of_purity_id_fk) TABLESPACE &&indexTableSpaceName;
CREATE INDEX unit_of_wght_id_fk_idx ON inv_containers(unit_of_wght_id_fk) TABLESPACE &&indexTableSpaceName;
CREATE INDEX inv_containesr_curruserid_idx ON inv_containers(CURRENT_USER_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_CONTAINER_CHECKIN_DETAILS
CREATE TABLE "INV_CONTAINER_CHECKIN_DETAILS"(
	"CHECKIN_DETAILS_ID" NUMBER(16) NOT NULL,
  "CONTAINER_ID_FK" NUMBER(9) NOT NULL,
	"USER_ID_FK" VARCHAR2(50), 
  "FIELD_1" VARCHAR2(2000),
  "FIELD_2" VARCHAR2(2000),
  "FIELD_3" VARCHAR2(2000),
  "FIELD_4" VARCHAR2(2000),
  "FIELD_5" VARCHAR2(2000),
  "FIELD_6" VARCHAR2(2000),
  "FIELD_7" VARCHAR2(2000),
  "FIELD_8" VARCHAR2(2000),
  "FIELD_9" VARCHAR2(2000),
  "FIELD_10" VARCHAR2(2000),
  "DATE_1" DATE,
  "DATE_2" DATE,
  "DATE_3" DATE,
  "RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
  CONSTRAINT "INV_CON_CHECKIN_CONTAINERID_FK" 
		FOREIGN KEY("CONTAINER_ID_FK") 
		REFERENCES "INV_CONTAINERS"("CONTAINER_ID") 
		ON DELETE CASCADE, 
	CONSTRAINT "INV_CON_CHECKIN_USERID_FK"
  	FOREIGN KEY("USER_ID_FK")
    REFERENCES "PEOPLE"("USER_ID"),
  CONSTRAINT "INV_CON_CHECKIN_DETAILS_PK" 
		PRIMARY KEY("CHECKIN_DETAILS_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;
CREATE INDEX INV_CONCCHKIN_CONTAINERID_IDX ON INV_CONTAINER_CHECKIN_DETAILS(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_CONCCHKIN_USERID_IDX ON INV_CONTAINER_CHECKIN_DETAILS(USER_ID_FK) TABLESPACE &&indexTableSpaceName;


-- Create table INV_RESERVATION_TYPES.
CREATE TABLE "INV_RESERVATION_TYPES"(
    "RESERVATION_TYPE_ID" NUMBER(4) NOT NULL, 
    "RESERVATION_TYPE_NAME" VARCHAR2(50), 
    CONSTRAINT "INV_RESERVATION_TYPES_PK" 
		PRIMARY KEY("RESERVATION_TYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName  
	)
; 

-- Create new table INV_RESERVATIONS.
CREATE TABLE "INV_RESERVATIONS"(
	"RESERVATION_ID" NUMBER(9) NOT NULL, 
	"CONTAINER_ID_FK" NUMBER(9), 
	"USER_ID_FK" VARCHAR2(50), 
	"QTY_RESERVED" NUMBER, 
	"DATE_RESERVED" DATE, 
  "RESERVATION_TYPE_ID_FK" NUMBER(4), 
  "IS_ACTIVE" NUMBER(1), 
  "CANCELLED_BY_ID_FK" VARCHAR2(50), 
  CONSTRAINT "INV_RESERVATIONS_PK" 
		PRIMARY KEY("RESERVATION_ID") USING INDEX TABLESPACE &&indexTableSpaceName, 
	CONSTRAINT "INV_RESV_USERID_FK"
  	FOREIGN KEY("USER_ID_FK")
    REFERENCES "PEOPLE"("USER_ID"),
  CONSTRAINT "INV_RESV_CONTAINERS_FK" 
		FOREIGN KEY("CONTAINER_ID_FK") 
		REFERENCES "INV_CONTAINERS"("CONTAINER_ID") 
		ON DELETE CASCADE, 
  CONSTRAINT "INV_RESV_RESV_TYPES_FK" 
		FOREIGN KEY("RESERVATION_TYPE_ID_FK") 
		REFERENCES "INV_RESERVATION_TYPES"("RESERVATION_TYPE_ID")
	)
; 
CREATE INDEX INV_RESERVATIONS_USERID_IDX ON INV_RESERVATIONS(USER_ID_FK) TABLESPACE &&indexTableSpaceName;

-- index the inventory_reservations table
CREATE INDEX CONTAINER_ID_FK_IDX ON INV_RESERVATIONS(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX RESERVATION_TYPE_ID_FK_IDX ON INV_RESERVATIONS(RESERVATION_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_EXCLUDE_CONTAINER_TYPES
CREATE TABLE "INV_EXCLUDE_CONTAINER_TYPES"(
    "CONTAINER_TYPE_ID_FK" NUMBER(9), 
    "LOCATION_ID_FK" NUMBER(9) NOT NULL, 
    CONSTRAINT "EX_CON_TYPE_FK" 
		FOREIGN KEY("CONTAINER_TYPE_ID_FK") 
		REFERENCES "INV_CONTAINER_TYPES"("CONTAINER_TYPE_ID")
		ON DELETE CASCADE, 
    CONSTRAINT "EX_CON_TYPE_FK2" 
		FOREIGN KEY("LOCATION_ID_FK") 
		REFERENCES "INV_LOCATIONS"("LOCATION_ID")
		ON DELETE CASCADE
	)
; 

-- index INV_EXCLUDE_CONTAINER_TYPES
CREATE INDEX XCL_CONTAINER_TYPE_ID_FK_IDX ON INV_EXCLUDE_CONTAINER_TYPES(CONTAINER_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX XCL_LOCATION_ID_FK_IDX ON INV_EXCLUDE_CONTAINER_TYPES(LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_URL
CREATE TABLE "INV_URL"(
    "URL_ID" NUMBER(9) NOT NULL, 
    "FK_VALUE" VARCHAR2(30) NOT NULL, 
    "TABLE_NAME" VARCHAR2(30) NOT NULL,
    "FK_NAME" VARCHAR2(30) NOT NULL, 
    "URL" VARCHAR2(2000), 
    "LINK_TXT" VARCHAR2(2000), 
    "IMAGE_SRC" VARCHAR2(2000), 
    "IMAGE" BLOB, 
    "SORT_ORDER" NUMBER(4), 
    "URL_TYPE" VARCHAR2(50),
    "RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL
	)
; 

-- create table INV_ALLOWED_CTYPES
CREATE TABLE "INV_ALLOWED_CTYPES"(
    "CONTAINER_TYPE_ID_FK" NUMBER(4) NOT NULL,
    "LOCATION_TYPE_ID_FK" NUMBER(4) NOT NULL
	)
;

-- create table INV_PLATE_TYPES
CREATE TABLE "INV_PLATE_TYPES"(
	"PLATE_TYPE_ID" NUMBER(9) NOT NULL, 
	"PLATE_TYPE_NAME" VARCHAR2(50), 
    "MAX_FREEZE_THAW" NUMBER(4), 
    CONSTRAINT "INV_PLATE_TYPES_PK" 
		PRIMARY KEY("PLATE_TYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- create table INV_ALLOWED_LTYPES
CREATE TABLE "INV_ALLOWED_LTYPES"(
    "PARENT_LTYPE_ID_FK" NUMBER(4) NOT NULL,
    "CHILD_LTYPE_ID_FK" NUMBER(4) NOT NULL
	)
;

-- create table INV_ALLOWED_PTYPES
CREATE TABLE "INV_ALLOWED_PTYPES"(
	"PLATE_TYPE_ID_FK" NUMBER(9) NOT NULL,
	"LOCATION_ID_FK" NUMBER(9) NOT NULL,
	CONSTRAINT PTYPES_LOCATIONS_FK
		FOREIGN KEY (LOCATION_ID_FK)
		REFERENCES INV_LOCATIONS (LOCATION_ID)
		ON DELETE CASCADE,
	CONSTRAINT PTYPES_PLATE_TYPE_FK
		FOREIGN KEY (PLATE_TYPE_ID_FK)
		REFERENCES INV_PLATE_TYPES (PLATE_TYPE_ID)
		ON DELETE CASCADE
	)
;
CREATE INDEX INV_ALWD_PTYPES_LOCATIONID_IDX ON INV_ALLOWED_PTYPES(LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_ALWD_PTYPES_PTYPEID_IDX ON INV_ALLOWED_PTYPES(PLATE_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_BARCODE_DESC
CREATE TABLE "INV_BARCODE_DESC"(
	"BARCODE_DESC_ID" NUMBER(4) NOT NULL, 
	"BARCODE_DESC_NAME" VARCHAR2(50), 
	"PREFIX" VARCHAR2(10), 
	"PFX_SEPARATOR" varchar2(3),
	"SUFFIX" VARCHAR2(10), 
	"SFX_SEPARATOR" varchar2(3),
	"RUN_START" NUMBER(16), 
	"RUN_INCREMENT" number(15,0),
    	"RUN_END" NUMBER(16), 
	"NUMBER_SIZE" NUMBER(3), 
	"PAD_CHARACTER" CHAR(1),
    CONSTRAINT "INV_BARCODE_DESC_PK" 
		PRIMARY KEY("BARCODE_DESC_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;  

-- create table INV_ESET_TYPE
CREATE TABLE "INV_ESET_TYPE"(
	"ESET_TYPE_ID" NUMBER(9) NOT NULL, 
	"ESET_TYPE_NAME" VARCHAR2(255) NOT NULL, 
    "IS_USER_VISIBLE" VARCHAR2(1) NOT NULL, 
    CONSTRAINT "INV_ESET_TYPE_PK" 
		PRIMARY KEY("ESET_TYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;  

-- create table INV_ENUMERATION_SET
CREATE TABLE "INV_ENUMERATION_SET"(
	"ESET_ID" NUMBER(9) NOT NULL, 
	"ESET_NAME" VARCHAR2(255) NOT NULL, 
    "ESET_TYPE_ID_FK" NUMBER(9) NOT NULL,
    CONSTRAINT ESET_ESET_TYPE_FK
		FOREIGN KEY (ESET_TYPE_ID_FK)
		REFERENCES INV_ESET_TYPE (ESET_TYPE_ID)
		ON DELETE CASCADE, 
    CONSTRAINT "INV_ENUMERATION_SET_PK" 
		PRIMARY KEY("ESET_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- create table INV_ENUMERATION
CREATE TABLE "INV_ENUMERATION"(
	"ENUM_ID" NUMBER(9) NOT NULL, 
	"ENUM_VALUE" VARCHAR2(255) NOT NULL, 
	"ESET_ID_FK" NUMBER(9) NOT NULL,
	CONSTRAINT ENUM_ESET_FK
		FOREIGN KEY (ESET_ID_FK)
		REFERENCES INV_ENUMERATION_SET (ESET_ID)
		ON DELETE CASCADE, 
    CONSTRAINT "INV_ENUMERATION_PK" 
		PRIMARY KEY("ENUM_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;
CREATE INDEX INV_ENUMERATION_ESETID_IDX ON INV_ENUMERATION(ESET_ID_FK) TABLESPACE &&indexTableSpaceName;


-- create table INV_ENUM_VALUES
CREATE TABLE "INV_ENUM_VALUES"(
	"ENUM_ID_FK" NUMBER(9) NOT NULL, 
	"VALUE" VARCHAR2(255), 
	"LOOKUPSQL" VARCHAR2(4000),
	CONSTRAINT ENUM_VALUES_ENUM_FK
		FOREIGN KEY (ENUM_ID_FK)
		REFERENCES INV_ENUMERATION (ENUM_ID)
		ON DELETE CASCADE
	)
;

-- create table INV_GRID_FORMAT
CREATE TABLE "INV_GRID_FORMAT"(
	"GRID_FORMAT_ID" NUMBER(9) NOT NULL, 
	"GRID_FORMAT_TYPE_FK" NUMBER(9), 
	"NAME" VARCHAR2(50), 
	"DESCRIPTION" VARCHAR2(255), 
	"ROW_COUNT" NUMBER(6) NOT NULL, 
	"COL_COUNT" NUMBER(6) NOT NULL, 
	"ROW_PREFIX" VARCHAR2(50), 
	"COL_PREFIX" VARCHAR2(50), 
	"ROW_USE_LETTERS" NUMBER(1), 
  "COL_USE_LETTERS" NUMBER(1), 
  "NAME_SEPARATOR" VARCHAR2(1), 
  "NUMBER_START_CORNER" NUMBER(9), 
  "NUMBER_DIRECTION" NUMBER(9), 
	"ZERO_PADDING_COUNT" NUMBER(4),
  CONSTRAINT "INV_GRID_FORMAT_PK" 
		PRIMARY KEY("GRID_FORMAT_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- create table INV_GRID_FILL_TEMPLATE
CREATE TABLE "INV_GRID_FILL_TEMPLATE"(
    "GRID_FILL_TEMPLATE_ID" NUMBER(9) NOT NULL, 
    "FILL_START_CORNER" NUMBER(9) NOT NULL, 
    "FILL_DIRECTION" NUMBER(9) NOT NULL, 
    "FILL_ALTERNATING" NUMBER(1) NOT NULL, 
    CONSTRAINT "INV_GRID_FILL_TEMPLATE_PK" 
    PRIMARY KEY("GRID_FILL_TEMPLATE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;        

-- create table INV_GRID_POSITION
CREATE TABLE "INV_GRID_POSITION"(
	"GRID_POSITION_ID" NUMBER(9) NOT NULL, 
	"GRID_FORMAT_ID_FK" NUMBER(9) NOT NULL, 
    "GRID_FILL_TEMPLATE_ID_FK" NUMBER(9), 
    "ROW_INDEX" NUMBER(6) NOT NULL, 
    "COL_INDEX" NUMBER(6) NOT NULL, 
    "ROW_NAME" VARCHAR2(50), 
    "COL_NAME" VARCHAR2(50), 
    "SORT_ORDER" NUMBER(6) NOT NULL, 
    "NAME" VARCHAR2(50),
    CONSTRAINT GRID_POSITION_FORMAT_FK
		FOREIGN KEY (GRID_FORMAT_ID_FK)
		REFERENCES INV_GRID_FORMAT (GRID_FORMAT_ID)
		ON DELETE CASCADE, 
    CONSTRAINT "INV_GRID_POSITION_PK" 
		PRIMARY KEY("GRID_POSITION_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

CREATE INDEX GP_GRID_FORMAT_ID_FK ON INV_GRID_POSITION(GRID_FORMAT_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_PHYSICAL_PLATE
CREATE TABLE "INV_PHYSICAL_PLATE"(
	"PHYS_PLATE_ID" NUMBER(9) NOT NULL, 
	"PHYS_PLATE_NAME" VARCHAR2(50), 
    "SUPPLIER_ID_FK" NUMBER(4) NOT NULL, 
    "GRID_FORMAT_ID_FK" NUMBER(9) NOT NULL, 
    "IS_PRE_BARCODED" VARCHAR2(1) NOT NULL, 
    "WELL_CAPACITY" NUMBER, "CAPACITY_UNIT_ID_FK" NUMBER(9), 
    "IS_ACTIVE" VARCHAR2(1), 
    CONSTRAINT "INV_PHSYPLATE_SUPPID_FK" 
		FOREIGN KEY("SUPPLIER_ID_FK") 
		REFERENCES "INV_SUPPLIERS"("SUPPLIER_ID"), 
    CONSTRAINT "INV_PHYSPLATE_GRIDF_FK" 
		FOREIGN KEY("GRID_FORMAT_ID_FK") 
		REFERENCES "INV_GRID_FORMAT"("GRID_FORMAT_ID")
		ON DELETE CASCADE, 
    CONSTRAINT "INV_PHYSPLATE_UNITID_FK" 
		FOREIGN KEY("CAPACITY_UNIT_ID_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID"), 
    CONSTRAINT "INV_PHYSICAL_PLATE_PK" 
		PRIMARY KEY("PHYS_PLATE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- index the physical_plate table
CREATE INDEX SUPPLIER_ID_FK_IDX ON INV_PHYSICAL_PLATE(SUPPLIER_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX GRID_FORMAT_ID_FK_IDX ON INV_PHYSICAL_PLATE(GRID_FORMAT_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX CAPACITY_UNIT_ID_FK_IDX ON INV_PHYSICAL_PLATE(CAPACITY_UNIT_ID_FK) TABLESPACE &&indexTableSpaceName;    

-- create table INV_PLATE_FORMAT
CREATE TABLE "INV_PLATE_FORMAT"(
	"PLATE_FORMAT_ID" NUMBER(9) NOT NULL, 
	"PHYS_PLATE_ID_FK" NUMBER(9) NOT NULL, 
    "PLATE_FORMAT_NAME" VARCHAR2(50), "IS_ACTIVE" VARCHAR2(1), 
    CONSTRAINT "INV_PFORMAT_PHYSPLATE_FK" 
		FOREIGN KEY("PHYS_PLATE_ID_FK") 
		REFERENCES "INV_PHYSICAL_PLATE"("PHYS_PLATE_ID"), 
    CONSTRAINT "INV_PLATE_FORMAT_PK" 
		PRIMARY KEY("PLATE_FORMAT_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- index the inv_plate_format table
CREATE INDEX PHYS_PLATE_ID_FK_IDX ON INV_PLATE_FORMAT(PHYS_PLATE_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_PLATES
CREATE TABLE "INV_PLATES"(
	"PLATE_ID" NUMBER(9) NOT NULL, 
	"LOCATION_ID_FK" NUMBER(16), 
	"CONTAINER_ID_FK" NUMBER(16), 
 	"PLATE_TYPE_ID_FK" NUMBER(9) NOT NULL, 
 	"PLATE_FORMAT_ID_FK" NUMBER(9) NOT NULL, 
	"PLATE_BARCODE" varchar2(32) NOT NULL,  
	"PLATE_NAME" VARCHAR2(50),
 	"STATUS_ID_FK" NUMBER(9) NOT NULL, 
 	"GROUP_NAME" VARCHAR2(50), 
 	"LIBRARY_ID_FK" NUMBER(9),
 	"FT_CYCLES" NUMBER(4,0), 
 	"WEIGHT" NUMBER, 
 	"WEIGHT_UNIT_FK" NUMBER(9), 
 	"QTY_INITIAL" NUMBER, 
 	"QTY_REMAINING" NUMBER, 
 	"QTY_UNIT_FK" NUMBER(9), 
 	"SOLVENT" VARCHAR2(255), 
 	"CONCENTRATION" NUMBER, 
 	"CONC_UNIT_FK" NUMBER(9), 
 	"DATE_CREATED" DATE,
	"SUPPLIER_BARCODE" VARCHAR2(50),  
  "SUPPLIER_SHIPMENT_CODE" VARCHAR2(50), 
  "SUPPLIER_SHIPMENT_NUMBER" NUMBER(9,0),
  "SUPPLIER_SHIPMENT_DATE" DATE,
	"SOLVENT_ID_FK" NUMBER(9),
	"SOLVENT_VOLUME" NUMBER, 
	"SOLVENT_VOLUME_INITIAL" NUMBER,
  "SOLVENT_VOLUME_UNIT_ID_FK" NUMBER(9), 
  "SOLUTION_VOLUME" NUMBER,
  "MOLAR_AMOUNT" NUMBER,
  "MOLAR_UNIT_FK" NUMBER(9,0),
  "MOLAR_CONC" NUMBER, 
	"WELL_CAPACITY" NUMBER,
	"WELL_CAPACITY_UNIT_ID_FK" NUMBER(9),
  "AMOUNTS_DIFFER" NUMBER(1,0),
  "SUPPLIER" VARCHAR2(50),
  "PLATE_EXISTS" NUMBER(1,0),
	"IS_PLATE_MAP" NUMBER(1,0),
	"PLATE_MAP_ID_FK" NUMBER(9,0),
	"PURITY" NUMBER,
	"PURITY_UNIT_FK" NUMBER(9,0),
	"FIELD_1" VARCHAR2(2000), 
	"FIELD_2" VARCHAR2(2000),
	"FIELD_3" VARCHAR2(2000), 
	"FIELD_4" VARCHAR2(2000), 
	"FIELD_5" VARCHAR2(2000), 
	"DATE_1" DATE, 
	"DATE_2" DATE,
  CONSTRAINT "INV_PLATES_CUID_FK" 
		FOREIGN KEY("CONC_UNIT_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID"), 
  CONSTRAINT "INV_PLATES_PFORMAT_FK" 
		FOREIGN KEY("PLATE_FORMAT_ID_FK") 
		REFERENCES "INV_PLATE_FORMAT"("PLATE_FORMAT_ID"), 
  CONSTRAINT "INV_PLATES_PTYPE_FK" 
		FOREIGN KEY("PLATE_TYPE_ID_FK") 
		REFERENCES "INV_PLATE_TYPES"("PLATE_TYPE_ID"), 
  CONSTRAINT "INV_PLATES_WUID_FK" 
		FOREIGN KEY("WEIGHT_UNIT_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID"),
  CONSTRAINT PLATE_LOCATION_FK
		FOREIGN KEY (LOCATION_ID_FK)
		REFERENCES "INV_LOCATIONS" (LOCATION_ID)
		ON DELETE CASCADE,
  CONSTRAINT PLATE_QTY_UNIT_FK
		FOREIGN KEY (QTY_UNIT_FK)
		REFERENCES "INV_UNITS" (UNIT_ID),
  CONSTRAINT PLATE_MOLAR_UNIT_FK
		FOREIGN KEY (MOLAR_UNIT_FK)
		REFERENCES "INV_UNITS" (UNIT_ID),	
  CONSTRAINT "PLATE_SOLVENT_UNIT_FK" 
		FOREIGN KEY("SOLVENT_VOLUME_UNIT_ID_FK")
	 	REFERENCES "INV_UNITS"("UNIT_ID"),
	CONSTRAINT "INV_PLATES_SOLVENTID_FK"
  	FOREIGN KEY("SOLVENT_ID_FK")
    REFERENCES "INV_SOLVENTS"("SOLVENT_ID"),    
  CONSTRAINT "PLATE_WELL_CAPACITY_UNIT_FK" 
		FOREIGN KEY("WELL_CAPACITY_UNIT_ID_FK")
	 	REFERENCES "INV_UNITS"("UNIT_ID"),
  CONSTRAINT "INV_PLATES_BARCODE_U" 
		UNIQUE("PLATE_BARCODE") USING INDEX TABLESPACE &&indexTableSpaceName,
  CONSTRAINT "INV_PLATES_PK" 
		PRIMARY KEY("PLATE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- index the inv_plates table
CREATE INDEX CONC_UNIT_FK_IDX ON INV_PLATES(CONC_UNIT_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATE_FORMAT_ID_FK_IDX ON INV_PLATES(PLATE_FORMAT_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATE_TYPE_ID_FK_IDX ON INV_PLATES(PLATE_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATE_WEIGHT_UNIT_FK_IDX ON INV_PLATES(WEIGHT_UNIT_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATE_LOCATION_ID_FK_IDX ON INV_PLATES(LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATE_QTY_UNIT_FK_IDX ON INV_PLATES(QTY_UNIT_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATE_MOLAR_UNIT_FKIDX ON INV_PLATES(MOLAR_UNIT_FK) TABLESPACE &&indexTableSpaceName;   
CREATE INDEX PLATE_LIBRARY_ID_FK_IDX ON INV_PLATES(LIBRARY_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATE_SOLVENT_ID_FK_IDX ON INV_PLATES(SOLVENT_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATE_STATUS_ID_FK_IDX ON INV_PLATES(STATUS_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_GRID_STORAGE
CREATE TABLE "INV_GRID_STORAGE"(
	"GRID_STORAGE_ID" NUMBER(9) NOT NULL,
	"GRID_FORMAT_ID_FK" NUMBER(9) NOT NULL, 
    "LOCATION_ID_FK" NUMBER(16), 
    "CONTAINER_ID_FK" NUMBER(16), 
    "PLATE_ID_FK" NUMBER(16), 
    CONSTRAINT "INV_GRIDSTOR_GRIDFORMAT_FK" 
		FOREIGN KEY("GRID_FORMAT_ID_FK") 
		REFERENCES "INV_GRID_FORMAT"("GRID_FORMAT_ID")
		ON DELETE CASCADE, 
    CONSTRAINT "INV_GRIDSTOR_LOCATIONID_FK" 
		FOREIGN KEY("LOCATION_ID_FK") 
		REFERENCES "INV_LOCATIONS"("LOCATION_ID")
		ON DELETE CASCADE, 
    CONSTRAINT "INV_GRIDSTOR_PLATEID" 
		FOREIGN KEY("PLATE_ID_FK") 
		REFERENCES "INV_PLATES"("PLATE_ID"), 
    CONSTRAINT "INV_GRID_STORAGE_PK" 
    PRIMARY KEY("GRID_STORAGE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;  

-- index the grid_storage table
CREATE INDEX STORAGE_GRID_FORMAT_ID_FK_IDX ON INV_GRID_STORAGE(GRID_FORMAT_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX STORAGE_LOCATION_ID_FK_IDX ON INV_GRID_STORAGE(LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX STORAGE_PLATE_ID_FK_IDX ON INV_GRID_STORAGE(PLATE_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_PLATE_ACTIONS
CREATE TABLE "INV_PLATE_ACTIONS"(
	"PLATE_ACTION_ID" NUMBER(9) NOT NULL, 
    "PLATE_ACTION_NAME" VARCHAR2(50) NOT NULL,  
    CONSTRAINT "INV_PLATE_ACTIONS_PK" 
		PRIMARY KEY("PLATE_ACTION_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- create table INV_PLATE_HISTORY
CREATE TABLE "INV_PLATE_HISTORY"(
	"PLATE_HISTORY_ID" NUMBER(9) NOT NULL, 
	"PLATE_ID_FK" NUMBER(9) NOT NULL, 
    "PLATE_HISTORY_DATE" DATE NOT NULL, 
    "PLATE_ACTION_ID_FK" NUMBER(9) NOT NULL, 
    "FROM_LOCATION_ID_FK" NUMBER(9,0),
	"TO_LOCATION_ID_FK" NUMBER(9,0),
	"IS_FT_INCREMENTED" NUMBER(1,0), 
    "DESCRIPTION" VARCHAR2(255), 
    CONSTRAINT "INV_PHISTORY_PACTION_FK" 
		FOREIGN KEY("PLATE_ACTION_ID_FK") 
			REFERENCES "INV_PLATE_ACTIONS"("PLATE_ACTION_ID"), 
    CONSTRAINT "INV_PHISTORY_PLATEID_FK" 
		FOREIGN KEY("PLATE_ID_FK") 
			REFERENCES "INV_PLATES"("PLATE_ID")
			ON DELETE CASCADE,
	CONSTRAINT PHIST_FROM_LOC_FK
		FOREIGN KEY (FROM_LOCATION_ID_FK)
		REFERENCES INV_LOCATIONS (LOCATION_ID)
		ON DELETE CASCADE,
	CONSTRAINT PHIST_TO_LOC_FK
		FOREIGN KEY (TO_LOCATION_ID_FK)
		REFERENCES INV_LOCATIONS (LOCATION_ID)
		ON DELETE CASCADE,
    CONSTRAINT "INV_PLATE_HISTORY_PK" 
		PRIMARY KEY("PLATE_HISTORY_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- index the INV_PLATE_HISTORY table
CREATE INDEX HISTORY_PLATE_ACTION_ID_FK_IDX ON INV_PLATE_HISTORY(PLATE_ACTION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX HISTORY_PLATE_ID_FK_IDX ON INV_PLATE_HISTORY(PLATE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX HISTORY_FROM_LOC_FK_IDX ON INV_PLATE_HISTORY(FROM_LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX HISTORY_TO_LOC_FK_IDX ON INV_PLATE_HISTORY(TO_LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_WELLS
CREATE TABLE "INV_WELLS"(
	"WELL_ID" NUMBER(16) NOT NULL, 
	"WELL_FORMAT_ID_FK" NUMBER(9), 
	"PLATE_ID_FK" NUMBER(9), 
	"PLATE_FORMAT_ID_FK" NUMBER(9), 
 	"GRID_POSITION_ID_FK" NUMBER(9), 
 	"WEIGHT" NUMBER, 
 	"WEIGHT_UNIT_FK" NUMBER(9), 
 	"QTY_INITIAL" NUMBER, 
 	"QTY_REMAINING" NUMBER, 
 	"QTY_UNIT_FK" NUMBER(9), 
 	"SOLVENT_ID_FK" NUMBER(9), 
	"SOLVENT_VOLUME" NUMBER, 
	"SOLVENT_VOLUME_INITIAL" NUMBER,
 	"SOLVENT_VOLUME_UNIT_ID_FK" NUMBER(9), 
  "SOLUTION_VOLUME" NUMBER,
 	"CONCENTRATION" NUMBER, 
 	"CONC_UNIT_FK" NUMBER(9),
 	"MOLAR_AMOUNT" NUMBER,
 	"MOLAR_UNIT_FK" NUMBER(9,0),
 	"MOLAR_CONC" NUMBER,
	"FIELD_1" VARCHAR2(2000), 
	"FIELD_2" VARCHAR2(2000),
	"FIELD_3" VARCHAR2(2000), 
	"FIELD_4" VARCHAR2(2000), 
	"FIELD_5" VARCHAR2(2000), 
	"DATE_1" DATE, 
	"DATE_2" DATE,
  CONSTRAINT "INV_WELLS_GRIDPOS_FK" 
		FOREIGN KEY("GRID_POSITION_ID_FK") 
		REFERENCES "INV_GRID_POSITION"("GRID_POSITION_ID"), 
  CONSTRAINT "INV_WELLS_PFORMAT_FK" 
		FOREIGN KEY("PLATE_FORMAT_ID_FK") 
		REFERENCES "INV_PLATE_FORMAT"("PLATE_FORMAT_ID"), 
  CONSTRAINT "WELLS_PLATES_FK"
		FOREIGN KEY (PLATE_ID_FK)
		REFERENCES "INV_PLATES"("PLATE_ID")
		ON DELETE CASCADE,
  CONSTRAINT "WELLS_CONC_UNIT_FK"
		FOREIGN KEY ("CONC_UNIT_FK")
		REFERENCES "INV_UNITS"("UNIT_ID"),
  CONSTRAINT "WELLS_MOLAR_UNIT_FK"
		FOREIGN KEY ("MOLAR_UNIT_FK")
		REFERENCES "INV_UNITS"("UNIT_ID"),
  CONSTRAINT "WELLS_QTY_UNIT_FK"
		FOREIGN KEY ("QTY_UNIT_FK")
		REFERENCES "INV_UNITS"("UNIT_ID"),
  CONSTRAINT "WELLS_WEIGHT_UNIT_FK"
		FOREIGN KEY ("WEIGHT_UNIT_FK")
		REFERENCES "INV_UNITS"("UNIT_ID"),		
  CONSTRAINT "WELLS_SOLVENTUNITID_FK" 
		FOREIGN KEY("SOLVENT_VOLUME_UNIT_ID_FK")
	 	REFERENCES "INV_UNITS"("UNIT_ID"),
  CONSTRAINT "WELLS_SOLVENTID_FK" 
		FOREIGN KEY("SOLVENT_ID_FK") 
		REFERENCES "INV_SOLVENTS"("SOLVENT_ID"),
  CONSTRAINT "INV_WELLS_PK" 
		PRIMARY KEY("WELL_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- index the INV_WELLS table
CREATE INDEX WELLS_GRID_POSITION_ID_FK_IDX ON INV_WELLS(GRID_POSITION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX WELLS_WELLS_PLATES_FK_IDX ON INV_WELLS(PLATE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX WELLS_CONC_UNIT_FK_IDX ON INV_WELLS(CONC_UNIT_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX WELLS_MOLAR_UNIT_FK_IDX ON INV_WELLS(MOLAR_UNIT_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX WELLS_QTY_UNIT_FK_IDX ON INV_WELLS(QTY_UNIT_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX WELLS_WEIGHT_UNIT_FK_IDX ON INV_WELLS(WEIGHT_UNIT_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX WELLS_PLATE_FORMAT_FK_IDX ON INV_WELLS (PLATE_FORMAT_ID_FK) TABLESPACE &&indexTableSpaceName; 
CREATE INDEX WELLS_WELL_FORMAT_ID_FK_IDX ON INV_WELLS (WELL_FORMAT_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_WELL_COMPOUNDS
CREATE TABLE "INV_WELL_COMPOUNDS"(
	WELL_COMPOUND_ID NUMBER(9) NOT NULL,
  WELL_ID_FK NUMBER(9) NOT NULL,
	COMPOUND_ID_FK NUMBER(9),
  REG_ID_FK NUMBER(9),
  BATCH_NUMBER_FK NUMBER(9),
  CONSTRAINT "INV_WELL_COMPOUNDS_PK" 
		PRIMARY KEY("WELL_COMPOUND_ID") USING INDEX TABLESPACE &&indexTableSpaceName, 
  CONSTRAINT "INV_WELLCMPD_COMPOUNDID_FK" 
		FOREIGN KEY("COMPOUND_ID_FK") 
		REFERENCES "INV_COMPOUNDS"("COMPOUND_ID"),
  CONSTRAINT "INV_WELLCMPD_WELLID_FK" 
		FOREIGN KEY("WELL_ID_FK") 
		REFERENCES "INV_WELLS"("WELL_ID")
    ON DELETE CASCADE
  );
-- index the INV_WELL_COMPOUNDS table  
CREATE INDEX IWC_COMPOUND_ID_FK_IDX ON INV_WELL_COMPOUNDS(COMPOUND_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX IWC_WELL_ID_FK_IDX ON INV_WELL_COMPOUNDS(WELL_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_GRID_ELEMENT
CREATE TABLE "INV_GRID_ELEMENT"(
	"GRID_ELEMENT_ID" NUMBER(9) NOT NULL, 
	"GRID_POSITION_ID_FK" NUMBER(9) NOT NULL, 
  "GRID_STORAGE_ID_FK" NUMBER(9) NOT NULL, 
  "BARCODE_ID" NUMBER(16), 
  "LOCATION_ID_FK" NUMBER(16), 
  "CONTAINER_ID_FK" NUMBER(16), 
  "PLATE_ID_FK" NUMBER(16), 
  "WELL_ID_FK" NUMBER(16), 
  CONSTRAINT "INV_GRIDELM_GRIDPOS" 
		FOREIGN KEY("GRID_POSITION_ID_FK") 
		REFERENCES "INV_GRID_POSITION"("GRID_POSITION_ID")
		ON DELETE CASCADE, 
  CONSTRAINT "INV_GRIDELM_LOCATIONID_FK" 
		FOREIGN KEY("LOCATION_ID_FK") 
		REFERENCES "INV_LOCATIONS"("LOCATION_ID")
		ON DELETE CASCADE, 
  CONSTRAINT "INV_GRIDELM_PLATEID_FK" 
		FOREIGN KEY("PLATE_ID_FK") 
		REFERENCES "INV_PLATES"("PLATE_ID")
    ON DELETE CASCADE, 
  CONSTRAINT "INV_GRIDELM_WELLID_FK" 
		FOREIGN KEY("WELL_ID_FK") 
		REFERENCES "INV_WELLS"("WELL_ID")
    ON DELETE CASCADE, 
  CONSTRAINT "INV_GRID_ELM_STOTAGE" 
		FOREIGN KEY("GRID_STORAGE_ID_FK") 
		REFERENCES "INV_GRID_STORAGE"("GRID_STORAGE_ID") 
		ON DELETE CASCADE,
  CONSTRAINT "INV_GRID_ELEMENT_PK" 
  	PRIMARY KEY("GRID_ELEMENT_ID") USING INDEX TABLESPACE &&indexTableSpaceName  
	)
; 

-- index the INV_GRID_ELEMENT table
CREATE INDEX GRID_POSITION_ID_FK_IDX ON INV_GRID_ELEMENT(GRID_POSITION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX GRID_LOCATION_ID_FK_IDX ON INV_GRID_ELEMENT(LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX GRID_PLATE_ID_FK_IDX ON INV_GRID_ELEMENT(PLATE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX WELL_ID_FK_IDX ON INV_GRID_ELEMENT(WELL_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX GRID_STORAGE_ID_FK_IDX ON INV_GRID_ELEMENT(GRID_STORAGE_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_REQUEST_TYPES
CREATE TABLE "INV_REQUEST_TYPES"(
	"REQUEST_TYPE_ID" NUMBER(4) NOT NULL,
	"REQUEST_TYPE_NAME" VARCHAR2(50) NOT NULL,
    CONSTRAINT "INV_REQUEST_TYPES_PK"
		PRIMARY KEY("REQUEST_TYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName);

-- create table INV_REQUEST_STATUS    
CREATE TABLE "INV_REQUEST_STATUS"(
	"REQUEST_STATUS_ID" NUMBER(4) NOT NULL,
	"REQUEST_STATUS_NAME" VARCHAR2(50) NOT NULL,
    CONSTRAINT "INV_REQUEST_STATUS_PK"
		PRIMARY KEY("REQUEST_STATUS_ID") USING INDEX TABLESPACE &&indexTableSpaceName);

-- create table INV_REQUESTS 
CREATE TABLE "INV_REQUESTS"(
	"REQUEST_ID" NUMBER(9) NOT NULL, 
	"CONTAINER_ID_FK" NUMBER(9) NOT NULL, 
	"USER_ID_FK" VARCHAR2(30) NOT NULL, 
	"DATE_REQUIRED" DATE, 
	"DATE_DELIVERED" DATE, 
	"DELIVERED_BY_ID_FK" VARCHAR2(10), 
	"QTY_REQUIRED" NUMBER NOT NULL, 
	"DELIVERY_LOCATION_ID_FK" NUMBER(9) NOT NULL, 
  "REQUEST_COMMENTS" VARCHAR2(4000), 
	"REQUEST_TYPE_ID_FK" NUMBER(4) NOT NULL,
	"REQUEST_STATUS_ID_FK" NUMBER(4) NOT NULL,
	"CONTAINER_TYPE_ID_FK" NUMBER(4),
	"NUMBER_CONTAINERS" NUMBER(4),
	"QUANTITY_LIST" VARCHAR2(1000),
	"SHIP_TO_NAME" VARCHAR2(255),
	"DECLINE_REASON" VARCHAR2(1000),
  "EXPENSE_CENTER" VARCHAR2(255),
  "RID" NUMBER(10) NOT NULL, 
  "CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
  "TIMESTAMP" DATE DEFAULT sysdate NOT NULL, 
  CONSTRAINT "INV_REQUESTS_REQUESTTYPE_FK"
		FOREIGN KEY("REQUEST_TYPE_ID_FK")
		REFERENCES "INV_REQUEST_TYPES"("REQUEST_TYPE_ID"),
	CONSTRAINT "INV_REQUESTS_USERID_FK"
  	FOREIGN KEY("USER_ID_FK")
    REFERENCES "PEOPLE"("USER_ID"),
  CONSTRAINT "INV_REQUESTS_REQUESTSTATUS_FK"
		FOREIGN KEY("REQUEST_STATUS_ID_FK")
		REFERENCES "INV_REQUEST_STATUS"("REQUEST_STATUS_ID"),
  CONSTRAINT "INV_REQUESTS_LOC_ID_FK" 
		FOREIGN KEY("DELIVERY_LOCATION_ID_FK") 
		REFERENCES "INV_LOCATIONS"("LOCATION_ID")
    ON DELETE SET NULL, 
	CONSTRAINT "INV_REQUESTS_PK" 
		PRIMARY KEY("REQUEST_ID") USING INDEX TABLESPACE &&indexTableSpaceName,  
  CONSTRAINT "INV_REQUESTS_CONTAINER_ID_FK" 
		FOREIGN KEY("CONTAINER_ID_FK") 
		REFERENCES "INV_CONTAINERS"("CONTAINER_ID") 
		ON DELETE CASCADE
	)
;
-- index the INV_REQUESTS table
CREATE INDEX DELIVERY_LOCATION_ID_FK_IDX ON INV_REQUESTS(DELIVERY_LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX REQUEST_TYPE_ID_FK_IDX ON INV_REQUESTS(REQUEST_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX REQUEST_STATUS_ID_FK_IDX ON INV_REQUESTS(REQUEST_STATUS_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX IREQUESTS_CONTAINER_ID_FK_IDX ON INV_REQUESTS(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX INV_REQUESTS_USERID_IDX ON INV_REQUESTS(USER_ID_FK) TABLESPACE &&indexTableSpaceName;

-- Create table INV_REQUEST_SAMPLES
CREATE TABLE INV_REQUEST_SAMPLES(
	REQUEST_ID_FK NUMBER(16),
	CONTAINER_ID_FK NUMBER(16),
	PRIMARY KEY(REQUEST_ID_FK, CONTAINER_ID_FK),
	CONSTRAINT "INV_REQSAMPLES_REQUESTID_FK"
		FOREIGN KEY("REQUEST_ID_FK")
	  REFERENCES "INV_REQUESTS"("REQUEST_ID")
    ON DELETE CASCADE,
	CONSTRAINT "INV_REQSAMPLES_CONTAINERID_FK"
		FOREIGN KEY("CONTAINER_ID_FK")
	  REFERENCES "INV_CONTAINERS"("CONTAINER_ID")
    ON DELETE CASCADE)
  ORGANIZATION INDEX;    
CREATE INDEX INV_REQSAMPLES_CONTAINERID_IDX ON INV_REQUEST_SAMPLES(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;
  
-- create table INV_ORDER_STATUS    
CREATE TABLE "INV_ORDER_STATUS"(
	"ORDER_STATUS_ID" NUMBER(4) NOT NULL,
	"ORDER_STATUS_NAME" VARCHAR2(50) NOT NULL,
    CONSTRAINT "INV_ORDER_STATUS_PK"
		PRIMARY KEY("ORDER_STATUS_ID") USING INDEX TABLESPACE &&indexTableSpaceName);

-- create table INV_ORDERS    
CREATE TABLE INV_ORDERS (
	"ORDER_ID" NUMBER(9) NOT NULL,
	"DELIVERY_LOCATION_ID_FK" NUMBER(9) NOT NULL,
	"SHIP_TO_NAME" VARCHAR2(255) NOT NULL,
	"ORDER_STATUS_ID_FK" NUMBER(4) NOT NULL,
  "SHIPPING_CONDITIONS" VARCHAR2(255),
	"DATE_CREATED" DATE,
	"DATE_SHIPPED" DATE,
	"DATE_RECEIVED" DATE,  
	"CANCEL_REASON" VARCHAR2(1000),
  "RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
  CONSTRAINT "INV_ORDERS_ORDERSTATUS_FK"
		FOREIGN KEY("ORDER_STATUS_ID_FK")
		REFERENCES "INV_ORDER_STATUS"("ORDER_STATUS_ID") ON DELETE CASCADE,  
  CONSTRAINT "INV_ORDERS_LOCATIONID_FK"
		FOREIGN KEY("DELIVERY_LOCATION_ID_FK")
		REFERENCES "INV_LOCATIONS"("LOCATION_ID") ON DELETE CASCADE,
  CONSTRAINT "INV_ORDERS_PK"
		PRIMARY KEY("ORDER_ID") USING INDEX TABLESPACE &&indexTableSpaceName);

CREATE INDEX IORDERS_DELIVERY_LOC_ID_FK_IDX ON INV_ORDERS(DELIVERY_LOCATION_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX ORDER_STATUS_ID_FK_IDX ON INV_ORDERS(ORDER_STATUS_ID_FK) TABLESPACE &&indexTableSpaceName;

-- create table INV_ORDER_CONTAINERS      
CREATE TABLE INV_ORDER_CONTAINERS(
	ORDER_ID_FK NUMBER(16),
	CONTAINER_ID_FK NUMBER(16),
	"RID" NUMBER(10) NOT NULL, 
	"CREATOR" VARCHAR2(30) DEFAULT RTRIM(user) NOT NULL, 
	"TIMESTAMP" DATE DEFAULT sysdate NOT NULL,   
	PRIMARY KEY(ORDER_ID_FK, CONTAINER_ID_FK),
	CONSTRAINT "INV_ORDERCON_ORDERID_FK"
		FOREIGN KEY("ORDER_ID_FK")
    REFERENCES "INV_ORDERS"("ORDER_ID")	
    ON DELETE CASCADE,
	CONSTRAINT "INV_ORDERCON_CONTAINERID_FK"
		FOREIGN KEY("CONTAINER_ID_FK")
	  REFERENCES "INV_CONTAINERS"("CONTAINER_ID")
  	ON DELETE CASCADE)
  ORGANIZATION INDEX;
CREATE INDEX INV_ORDERCON_CONTAINERID ON INV_ORDER_CONTAINERS(CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;
 
-- Create new table INV_REPORTTYPES.
CREATE TABLE INV_REPORTTYPES (
	REPORTTYPE_ID NUMBER(6,0) NOT NULL,
	REPORTTYPEDESC VARCHAR2(255) NULL, 
	CONSTRAINT "INV_REPORTTYPES_PK" 
		PRIMARY KEY ("REPORTTYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
; 

-- Create new table INV_REPORTS.
CREATE TABLE INV_REPORTS (
	ID NUMBER(6,0) NOT NULL,
	REPORTDISPLAYNAME VARCHAR2(255) NULL,
	REPORTNAME VARCHAR2(255) NULL,
	REPORTTYPE_ID NUMBER(6,0) NULL, 
	REPORTSQL CLOB,
	REPORT_DESC VARCHAR2(2000),
	QUERYNAME VARCHAR2(255),
	CONSTRAINT "INV_REPORTS_PK" 
		PRIMARY KEY ("ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
; 

-- Create new table INV_REPORTFORMATS.
CREATE TABLE INV_REPORTFORMATS (
	ID NUMBER(6,0) NOT NULL,
	FORMATDISPLAYNAME VARCHAR2(255) NULL,
	REPORTFORMAT VARCHAR2(5) NULL,
	AVAILABLE CHAR(1) NULL, 
	CONSTRAINT "INV_REPORTFORMATS_PK" 
		PRIMARY KEY ("ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
; 

-- Create new table INV_REPORTPARAMS
CREATE TABLE INV_REPORTPARAMS (REPORT_ID number NOT NULL,
	PARAMNAME varchar2(255) NOT NULL,
  PARAMDISPLAYNAME varchar2(255) NOT NULL,
  ISREQUIRED number,
	PARAMTYPE varchar2(10) NOT NULL);

-- Create inv_user_properties table
CREATE TABLE "INV_USER_PROPERTIES"(
	"USER_ID_FK" VARCHAR2(30) NOT NULL, 
	"PROPERTYNAME" VARCHAR2(50) NOT NULL, 
  "PROPERTYVALUE" VARCHAR2(4000),
  "TIME_STAMP" DATE DEFAULT sysdate NOT NULL,  
  CONSTRAINT "INV_USER_PROPERTIES_PK" 
		PRIMARY KEY("USER_ID_FK", "PROPERTYNAME") USING INDEX TABLESPACE &&indexTableSpaceName);     

-- Create inv_ehs_cas_substance table
CREATE TABLE "INV_EHS_CAS_SUBSTANCE"(
    "EHS_CAS_SUBSTANCE_ID" NUMBER(5) NOT NULL, 
    "SUBSTANCE_NAME" VARCHAR2(500) NOT NULL, 
    "CAS" VARCHAR2(15) NOT NULL, 
    "CAS_INTERNAL" VARCHAR2(15) NOT NULL, 
    "EHS_GROUP_1" VARCHAR2(10), 
    "EHS_GROUP_2" VARCHAR2(10), 
    "EHS_GROUP_3" VARCHAR2(10), 
    "HEALTH" NUMBER(1), 
    "FLAMMABILITY" NUMBER(1), 
    "REACTIVITY" NUMBER(1), 
    "IS_SENSITIZER" NUMBER(1) DEFAULT 0 NOT NULL, 
    "IS_REFRIGERATED" NUMBER(1) DEFAULT 0 NOT NULL, 
    "PACKING_GROUP" NUMBER(1), 
    "UN_NUMBER" NUMBER(4), 
    "IARC_CARCINOGEN" VARCHAR2(10), 
    "EU_CARCINOGEN" VARCHAR2(50), 
    "IS_OSHA_CARCINOGEN" NUMBER(1) DEFAULT 0 NOT NULL, 
    "ACGIH_CARCINOGEN_CATEGORY" VARCHAR2(2), 
    "CUSTOM_1" VARCHAR2(50), 
    "CUSTOM_2" VARCHAR2(50), 
    "CUSTOM_3" VARCHAR2(50), 
    "CUSTOM_4" VARCHAR2(50), 
    "CUSTOM_5" VARCHAR2(50), 
    "CUSTOM_6" VARCHAR2(50), 
    "CUSTOM_7" VARCHAR2(50), 
    "CUSTOM_8" VARCHAR2(50), 
    "CUSTOM_9" VARCHAR2(50), 
    "CUSTOM_10" VARCHAR2(50), 
    CONSTRAINT "EHS_CAS_HEALTH_CHK" 
		CHECK(Health BETWEEN 0 AND 4), 
    CONSTRAINT "EHS_CAS_FLAM_CHK" 
		CHECK(Flammability BETWEEN 0 AND 4), 
    CONSTRAINT "EHS_CAS_REAC_CHK" 
		CHECK(Reactivity BETWEEN 0 AND 4), 
    CONSTRAINT "EHS_CAS_PACK_CHK" 
		CHECK(packing_Group BETWEEN 1 AND 3), 
    CONSTRAINT "EHS_CAS_ACGIH_CHK" 
		CHECK(ACGIH_Carcinogen_Category IN ('A1', 'A2')), 
    CONSTRAINT "EHS_CAS_PK" 
		PRIMARY KEY("EHS_CAS_SUBSTANCE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
; 

-- index the EHS_CAS_Substance table
CREATE UNIQUE INDEX EHS_CAS_AK_IDX ON inv_EHS_CAS_Substance (CAS_Internal ASC) TABLESPACE &&indexTableSpaceName;
    
-- Create table inv_ehs_catnum_substance
CREATE TABLE "INV_EHS_CATNUM_SUBSTANCE"(
    "EHS_CATNUM_SUBSTANCE_ID" NUMBER(5) NOT NULL, 
    "SUPPLIER_ID_FK" NUMBER(4) NOT NULL, 
    "SUPPLIER_CATNUM" VARCHAR2(50) NOT NULL, 
    "SUPPLIER_CATNUM_INTERNAL" VARCHAR2(50) NOT NULL, 
    "SUBSTANCE_NAME" VARCHAR2(500) NOT NULL, 
    "CAS" VARCHAR2(15) NOT NULL, 
    "CAS_INTERNAL" VARCHAR2(15) NOT NULL, 
    "EHS_GROUP_1" VARCHAR2(10), 
    "EHS_GROUP_2" VARCHAR2(10), 
    "EHS_GROUP_3" VARCHAR2(10), 
    "HEALTH" NUMBER(1), 
    "FLAMMABILITY" NUMBER(1), 
    "REACTIVITY" NUMBER(1), 
    "IS_SENSITIZER" NUMBER(1) DEFAULT 0 NOT NULL, 
    "IS_REFRIGERATED" NUMBER(1) DEFAULT 0 NOT NULL, 
    "PACKING_GROUP" NUMBER(1), 
    "UN_NUMBER" NUMBER(4), 
    "IARC_CARCINOGEN" VARCHAR2(10), 
    "EU_CARCINOGEN" VARCHAR2(50), 
    "IS_OSHA_CARCINOGEN" NUMBER(1) DEFAULT 0 NOT NULL, 
    "ACGIH_CARCINOGEN_CATEGORY" VARCHAR2(2), 
    CONSTRAINT "EHS_CATNUM_HEALTH_CHK" 
		CHECK(Health BETWEEN 0 AND 4), 
    CONSTRAINT "EHS_CATNUM_FLAM_CHK" 
		CHECK(Flammability BETWEEN 0 AND 4), 
    CONSTRAINT "EHS_CATNUM_REAC_CHK" 
		CHECK(Reactivity BETWEEN 0 AND 4), 
    CONSTRAINT "EHS_CATNUM_PACK_CHK" 
		CHECK(packing_Group BETWEEN 1 AND 3), 
    CONSTRAINT "EHS_CATNUM_ACGIH_CHK" 
		CHECK(ACGIH_Carcinogen_Category IN ('A1', 'A2')), 
    CONSTRAINT "EHS_CAT_SUPPLIER_U1" 
		UNIQUE("SUPPLIER_ID_FK", 
				"SUPPLIER_CATNUM") USING INDEX TABLESPACE &&indexTableSpaceName,  
    CONSTRAINT "EHS_CATNUM_SUPPLIER_U2" 
		UNIQUE("SUPPLIER_ID_FK", 
			   "SUPPLIER_CATNUM_INTERNAL") USING INDEX TABLESPACE &&indexTableSpaceName, 
    CONSTRAINT "EHS_CATNUM_PK" 
		PRIMARY KEY("EHS_CATNUM_SUBSTANCE_ID")
	)
;

-- Index the EHS_catNum table
CREATE INDEX EHS_CatNum_Supplier_FK_IDX ON inv_EHS_CatNum_Substance(supplier_id_fk ASC) TABLESPACE &&indexTableSpaceName;

-- create table inv_EHS_substances
CREATE TABLE "INV_EHS_SUBSTANCES"(
    "EHS_SUBSTANCE_ID" NUMBER(5) NOT NULL, 
    "SUBSTANCE_NAME" VARCHAR2(1000), 
    "CAS" VARCHAR2(15), 
    "CAS_INTERNAL" VARCHAR2(15), 
    "IS_OSHA_CARCINOGEN" NUMBER(1) DEFAULT 0 NOT NULL, 
    "OSHA_THRESHOLD_PLANNING_QUAN" NUMBER(5), 
    "INTERNAL_MAX_QUANTITY_POUNDS" NUMBER(5), 
    "INTERNAL_MAX_QUAN_CUBIC_FEET" NUMBER(5), 
    "EPA_THRESHOLD_PLANNING_QUAN" NUMBER(5), 
    "EPA_NOTIFICATION_RQMT_QUAN" NUMBER(5), 
    "ACGIH_CARCINOGEN_CATEGORY" VARCHAR2(2), 
    "IS_DEA_CONTROLLED" NUMBER(1) DEFAULT 0 NOT NULL, 
    CONSTRAINT "EHS_SUBSTANCES_ACGIH_CHK" 
		CHECK(ACGIH_Carcinogen_Category IN ('A1', 'A2')), 
    CONSTRAINT "EHS_SUBSTANCES_CASNAME_CHK" 
		CHECK(NOT(substance_Name IS NULL AND CAS IS NULL)), 
    CONSTRAINT "EHS_SUBSTANCES_PK" 
		PRIMARY KEY("EHS_SUBSTANCE_ID") USING INDEX  TABLESPACE &&indexTableSpaceName
	)
; 
     
-- Create table inv_unit_conversion
CREATE TABLE "INV_UNIT_CONVERSION"(
    "FROM_UNIT_ID_FK" NUMBER(4) NOT NULL, 
    "TO_UNIT_ID_FK" NUMBER(4) NOT NULL, 
    "CONVERSION_FACTOR" NUMBER(25, 15) NOT NULL,    
    CONSTRAINT "INV_UNIT_CONV_UNIT_ID_FK1" 
		FOREIGN KEY("FROM_UNIT_ID_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID") 
		ON DELETE CASCADE,
    CONSTRAINT "INV_UNIT_CONV_UNIT_ID_FK2" 
		FOREIGN KEY("TO_UNIT_ID_FK") 
		REFERENCES "INV_UNITS"("UNIT_ID") 
		ON DELETE CASCADE,
    CONSTRAINT "UNIT_CONVERSION_PK" 
		PRIMARY KEY("FROM_UNIT_ID_FK", "TO_UNIT_ID_FK") USING INDEX TABLESPACE &&indexTableSpaceName
); 

-- Index the inv_unit_conversion table
CREATE INDEX Unit_Conversion_from_idx ON inv_Unit_Conversion (from_unit_id_fk ASC) TABLESPACE &&indexTableSpaceName;
CREATE INDEX Unit_Conversion_to_idx ON inv_Unit_Conversion(to_unit_id_fk ASC) TABLESPACE &&indexTableSpaceName;
    
-- Create table inv_container_orders
CREATE TABLE "INV_CONTAINER_ORDER"(
	"CONTAINER_ID" NUMBER(9) NOT NULL, 
	"DUE_DATE" DATE NOT NULL, 
	"PROJECT_NO" VARCHAR2(8) NOT NULL, 
	"JOB_NO" VARCHAR2(4) NOT NULL, 
    "ISRUSHORDER" NUMBER(1) NOT NULL, 
    "DELIVERY_LOCATION_ID_FK" NUMBER(9) NOT NULL, 
    "NEW_SUPPLIER_NAME" VARCHAR2(50), 
    "NEW_SUPPLIER_CONTACT" VARCHAR2(30), 
    "NEW_SUPPLIER_PHONE" VARCHAR2(30), 
    "NEW_SUPPLIER_FAX" VARCHAR2(30), 
    "ORDER_SOURCE" NUMBER, 
    "CONTAINER_ORDER_REASON_ID_FK" NUMBER(1), 
    "REASON_IF_OTHER" VARCHAR2(255), 
    "OWNER_ID_FK" NUMBER(4), 
    CONSTRAINT "CONTAINER_ORDERS_PK" 
		PRIMARY KEY("CONTAINER_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
; 

-- index the container_orders table
CREATE INDEX Order_Delivery_FK_IDX ON inv_Container_Order (delivery_location_id_fk ASC) TABLESPACE &&indexTableSpaceName;
CREATE INDEX Order_reason_FK_IDX ON inv_Container_Order (container_order_reason_id_fk ASC) TABLESPACE &&indexTableSpaceName;
CREATE INDEX Order_ownwer_FK_IDX ON inv_Container_Order (owner_id_fk ASC) TABLESPACE &&indexTableSpaceName;


-- Create table inv_container_order_reason
CREATE TABLE "INV_CONTAINER_ORDER_REASON"(
    "CONTAINER_ORDER_REASON_ID" NUMBER(1) NOT NULL, 
    "NAME" VARCHAR2(30) NOT NULL, 
    "SORT_ORDER" NUMBER(1) NOT NULL, 
    CONSTRAINT "ORDER_REASON_PK" 
		PRIMARY KEY("CONTAINER_ORDER_REASON_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;


-- Create inv_project_job_info table
CREATE TABLE INV_PROJECT_JOB_INFO (
  PROJECT_NO VARCHAR2(8) NOT NULL,
  PROJECT_DESCRIPTION VARCHAR2(50) NOT NULL,
  JOB_NO VARCHAR2(4) NOT NULL,
  JOB_DESCRIPTION VARCHAR2(50) NOT NULL,
  PRIMARY KEY(PROJECT_NO, JOB_NO) USING INDEX TABLESPACE &&indexTableSpaceName
  )
;

-- Create the custom_chem_order table
CREATE TABLE CUSTOM_CHEM_ORDER (
       ORD_LINE             NUMBER(18) NOT NULL,
       REGISTERED           VARCHAR2(1) NOT NULL,
       DUE_DATE             VARCHAR2(10) NOT NULL,
       RUSH                 NUMBER(1) DEFAULT 0 NOT NULL,
       CATALOG_NO           VARCHAR2(32) NOT NULL,
       CATALOG_COST         NUMBER(15,4) DEFAULT 0 NOT NULL,
       NUM_BOTTLES          NUMBER(10,2) NOT NULL,
       AMT_BOTTLE           NUMBER(10,2) NOT NULL,
       UOM                  VARCHAR2(5) NOT NULL,
       SCIENTIST            VARCHAR2(20) NULL,
       VENDOR_NO            VARCHAR2(8) NOT NULL,
       site                 VARCHAR2(255),
       COMMENTS             VARCHAR2(255) NULL,
       ITEM_NO              VARCHAR2(32) NOT NULL,
       NAME                 VARCHAR2(255) NOT NULL,
       STATUS               VARCHAR2(1) NULL,
       STATUS_DESC          VARCHAR2(500) NULL,
       PROJECT_NO           VARCHAR2(8) NOT NULL,
       PRIMARY KEY (ORD_LINE) USING INDEX TABLESPACE &&indexTableSpaceName
	)
;


-- Create custom_acx_st_vendors table
CREATE TABLE "CUSTOM_ACX_ST_VENDORS"(
	"ACX" NUMBER(4) NOT NULL, 
	"NAME" VARCHAR2(255) NOT NULL, 
	"ST" VARCHAR2(8) NOT NULL, 
    CONSTRAINT "CUSTOM_ACX_ST_VENDORS_PK" 
		PRIMARY KEY("ACX") USING INDEX  TABLESPACE &&indexTableSpaceName
	)
; 

-- Create the inv_xslts table
CREATE TABLE "INV_XSLTS" (
	XSLT_ID NUMBER(4) PRIMARY KEY USING INDEX  TABLESPACE &&indexTableSpaceName,
	XSLT CLOB,
	XSLT_NAME VARCHAR2(200)
	)
	LOB (XSLT) STORE AS(
	DISABLE STORAGE IN ROW
	TABLESPACE &&lobsTableSpaceName
	NOCACHE
	CHUNK 2K
	PCTVERSION 10
	STORAGE(INITIAL &&lobXML NEXT &&lobXML));


-- Create the inv_xmldoc_types table
CREATE TABLE "INV_XMLDOC_TYPES"(
    	"XMLDOC_TYPE_ID" NUMBER(4) NOT NULL, 
	"TYPE_NAME" VARCHAR2(100), 
	CONSTRAINT "INV_XMLDOC_TYPE_PK" 
		PRIMARY KEY("XMLDOC_TYPE_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	);

-- Create the inv_xmldocs table
CREATE TABLE "INV_XMLDOCS"(
    	"XMLDOC_ID" NUMBER(4) NOT NULL, 
    	"XMLDOC" CLOB, "NAME" VARCHAR2(200),
    	"XMLDOC_TYPE_ID_FK" NUMBER(4),
    	CONSTRAINT "INV_XMLDOCS_PK" 
		PRIMARY KEY("XMLDOC_ID") USING INDEX TABLESPACE &&indexTableSpaceName,
    	CONSTRAINT "INV_XMLDOCS_XMLDOCTYPEID_FK" 
		FOREIGN KEY("XMLDOC_TYPE_ID_FK") 
	    	REFERENCES "INV_XMLDOC_TYPES"("XMLDOC_TYPE_ID")) 
		LOB (XMLDOC) STORE AS(
		DISABLE STORAGE IN ROW
		TABLESPACE &&lobsTableSpaceName
		NOCACHE
		CHUNK 2K
		PCTVERSION 10
		STORAGE(INITIAL &&lobXML NEXT &&lobXML));

-- Create table INV_PLATE_PARENT 
CREATE TABLE INV_PLATE_PARENT (
	PARENT_PLATE_ID_FK NUMBER(16),
	CHILD_PLATE_ID_FK NUMBER(16),
	PRIMARY KEY(PARENT_PLATE_ID_FK, CHILD_PLATE_ID_FK),
	CONSTRAINT "INV_PLATE_PARENT_PARENTIDFK_FK"
		FOREIGN KEY("PARENT_PLATE_ID_FK")
	    REFERENCES "INV_PLATES"("PLATE_ID")
    	ON DELETE CASCADE,
	CONSTRAINT "INV_PLATE_PARENT_CHILDIDFK_FK"
		FOREIGN KEY("CHILD_PLATE_ID_FK")
	    REFERENCES "INV_PLATES"("PLATE_ID")
    	ON DELETE CASCADE)
  	ORGANIZATION INDEX;
CREATE INDEX INV_PLATE_PARENT_CHILDID_IDX ON INV_PLATE_PARENT(CHILD_PLATE_ID_FK) TABLESPACE &&indexTableSpaceName;    
    
-- create table INV_WELL_PARENT
CREATE TABLE INV_WELL_PARENT (
	PARENT_WELL_ID_FK NUMBER(16),
	CHILD_WELL_ID_FK NUMBER(16),
	PRIMARY KEY(PARENT_WELL_ID_FK, CHILD_WELL_ID_FK),
	CONSTRAINT "INV_WELL_PARENT_PARENTIDFK_FK"
		FOREIGN KEY("PARENT_WELL_ID_FK")
	    REFERENCES "INV_WELLS"("WELL_ID")
    	ON DELETE CASCADE,
	CONSTRAINT "INV_WELL_PARENT_CHILDIDFK_FK"
		FOREIGN KEY("CHILD_WELL_ID_FK")
	    REFERENCES "INV_WELLS"("WELL_ID")
    	ON DELETE CASCADE)
	ORGANIZATION INDEX;   
CREATE INDEX INV_WELL_PARENT_CHILDID_IDX ON INV_WELL_PARENT(CHILD_WELL_ID_FK) TABLESPACE &&indexTableSpaceName;       

-- create table INV_DATA_MAPS
CREATE TABLE "INV_DATA_MAPS" (
	"DATA_MAP_ID" NUMBER(16),
  "DATA_MAP_NAME" VARCHAR2(50) NOT NULL,
  "DATA_MAP_TYPE_ID_FK" NUMBER(16) NOT NULL,
  "DATA_MAP_COMMENTS" VARCHAR2(2000) NOT NULL,
  "NUM_HEADER_ROWS" NUMBER(4),
  "NUM_COLUMNS" NUMBER(4) NOT NULL,
  "COLUMN_DELIMITER" VARCHAR2(3) NOT NULL,
	"USE_WELL_COORDINATES" NUMBER(1) DEFAULT 0 NOT NULL,  
  CONSTRAINT "INV_DATA_MAPS_TYPEID_FK" 
		FOREIGN KEY("DATA_MAP_TYPE_ID_FK") 
		REFERENCES "INV_ENUMERATION"("ENUM_ID"),
  CONSTRAINT INV_DATA_MAPS_UQ UNIQUE (DATA_MAP_NAME),
	PRIMARY KEY("DATA_MAP_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;
CREATE INDEX INV_DATA_MAPS_TYPEIDFK_IDX ON INV_DATA_MAPS(DATA_MAP_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;
  
-- create table INV_MAP_FIELDS  
CREATE TABLE "INV_MAP_FIELDS" (
		"MAP_FIELD_ID" NUMBER(16),
    "DISPLAY_NAME" VARCHAR2(50) NOT NULL,
    "TABLE_NAME" VARCHAR2(30),
    "COLUMN_NAME" VARCHAR2(30),
    PRIMARY KEY("MAP_FIELD_ID") USING INDEX TABLESPACE &&indexTableSpaceName
	)
;

-- create table INV_DATA_MAPPINGS
CREATE TABLE "INV_DATA_MAPPINGS" (
  "DATA_MAP_ID_FK" NUMBER(16),
  "MAP_FIELD_ID_FK" NUMBER(16),
  "COLUMN_NUMBER" NUMBER(4),
	PRIMARY KEY("DATA_MAP_ID_FK", "MAP_FIELD_ID_FK"),
	CONSTRAINT "INV_DATA_MAPPINGS_DATAMAPID_FK"
		FOREIGN KEY("DATA_MAP_ID_FK")
	    REFERENCES "INV_DATA_MAPS"("DATA_MAP_ID")
    	ON DELETE CASCADE,
	CONSTRAINT "INV_DATA_MAPPINGS_MFIELDID_FK"
		FOREIGN KEY("MAP_FIELD_ID_FK")
	    REFERENCES "INV_MAP_FIELDS"("MAP_FIELD_ID")
    	ON DELETE CASCADE
 	) ORGANIZATION INDEX
;

--create additional indices
CREATE INDEX PARENT_CONTAINER_ID_FK_IDX ON INV_CONTAINERS(PARENT_CONTAINER_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX SOLVENT_ID_FK_IDX ON INV_CONTAINERS(SOLVENT_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX ENUM_ID_FK_IDX ON INV_ENUM_VALUES(ENUM_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX ESET_TYPE_ID_FK_IDX ON INV_ENUMERATION_SET(ESET_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX PLATEWELLCAPACITY_UNIT_FK_IDX ON INV_PLATES(WELL_CAPACITY_UNIT_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX WELLS_SOLVENTID_FK_IDX ON INV_WELLS(SOLVENT_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX SOLVENT_VOLUME_UNIT_ID_FK_IDX ON INV_WELLS(SOLVENT_VOLUME_UNIT_ID_FK) TABLESPACE &&indexTableSpaceName;
CREATE INDEX XMLDOCS_XMLDOCTYPEID_FK_IDX ON INV_XMLDOCS(XMLDOC_TYPE_ID_FK) TABLESPACE &&indexTableSpaceName;

--create sequences
create sequence MOLID_SEQ INCREMENT BY 1 START WITH 1;
create sequence SEQ_INV_Compounds INCREMENT BY 1 START WITH 1;
create sequence SEQ_INV_Synonyms INCREMENT BY 1 START WITH 1;
create sequence SEQ_INV_Containers INCREMENT BY 1 START WITH 1;
create sequence SEQ_INV_CONTAINER_TYPES INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_Locations INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_LOCATION_TYPES INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_UNITS INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_UNIT_TYPES INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_SUPPLIERS INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_PHYSICAL_STATE INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_RESERVATIONS INCREMENT BY 1 START WITH 1;
create sequence SEQ_INV_REQUESTS INCREMENT BY 1 START WITH 1;
create sequence SEQ_INV_GRID_FORMAT INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_GRID_FILL_TEMPLATE INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_GRID_STORAGE INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_GRID_POSITION INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_GRID_ELEMENT INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_ENUMERATION INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_ENUMERATION_SET INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_ESET_TYPE INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_PHYSICAL_PLATE INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_PLATE_FORMAT INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_PLATE_TYPES INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_PLATES INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_WELLS INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_PLATE_HISTORY INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_PLATE_ACTIONS INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_BARCODE INCREMENT BY 1 START WITH 1000;
create sequence SEQ_INV_BARCODE_DESC INCREMENT BY 1 START WITH 1000;
create sequence SEQ_URL INCREMENT BY 1 START WITH 1;
create sequence SEQ_INV_EHS_CAS_Substance INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
create sequence SEQ_INV_EHS_CatNum_Substance INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
create sequence Custom_CHEM_ORD_LINE_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 1.0E9 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_CONTAINER_STATUS INCREMENT BY 1 START WITH 1000 MAXVALUE 1.0E28 MINVALUE 1 NOCYCLE ;
CREATE SEQUENCE SEQ_INV_XSLTS INCREMENT BY 1 START WITH 1 MAXVALUE 1.0E28 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SEQ_INV_XMLDOCS INCREMENT BY 1 START WITH 1 MAXVALUE 1.0E28 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SEQ_INV_XMLDOC_TYPE INCREMENT BY 1 START WITH 1 MAXVALUE 1.0E28 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SEQ_INV_SOLVENTS INCREMENT BY 1 START WITH 1 MAXVALUE 1.0E28 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SEQ_INV_RESERVATION_TYPES INCREMENT BY 1 START WITH 10 MAXVALUE 1.0E28 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SEQ_INV_REPORTTYPES INCREMENT BY 1 START WITH 10 MAXVALUE 1.0E28 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
CREATE SEQUENCE SEQ_INV_REPORTS INCREMENT BY 1 START WITH 1000;
CREATE SEQUENCE SEQ_INV_COUNTRY INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_STATES INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_ADDRESS INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_REQUEST_TYPES INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_REQUEST_STATUS INCREMENT BY 1 START WITH 1000 MAXVALUE 99999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_ORDER_STATUS INCREMENT BY 1 START WITH 1000 MAXVALUE 999999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_ORDERS INCREMENT BY 1 START WITH 1000;
CREATE SEQUENCE SEQ_INV_CON_CHECKIN_DETAILS INCREMENT BY 1 START WITH 1000;
CREATE SEQUENCE SEQ_INV_WELL_COMPOUNDS INCREMENT BY 1 START WITH 1000;
CREATE SEQUENCE SEQ_INV_OWNERS INCREMENT BY 1 START WITH 1000 MAXVALUE 999999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_DATA_MAPS INCREMENT BY 1 START WITH 1000 MAXVALUE 999999 MINVALUE 1 NOCYCLE NOCACHE ORDER;
CREATE SEQUENCE SEQ_INV_MAP_FIELDS INCREMENT BY 1 START WITH 1000 MAXVALUE 999999 MINVALUE 1 NOCYCLE NOCACHE ORDER;

commit;

-- this package is necessary for some of the triggers to compile correctly
@@packages\pkg_barcodes_def.sql;
@@packages\pkg_barcodes_Body.sql;

-- Create/Recreate user-defined triggers for all the newly create and changed tables.
-- Create table level triggers for table Inv_Locations.
CREATE OR REPLACE TRIGGER "TRG_INV_LOCATIONS_ID" 
    BEFORE INSERT 
    ON "INV_LOCATIONS" 
    FOR EACH ROW 
    begin
		if :new.Location_ID is null then
			select seq_Inv_Locations.nextval into :new.Location_id from dual;
		end if;
		if :new.Location_Barcode is null then
			select :new.Location_id into :new.Location_Barcode from dual;
		end if;
	end;
/

-- Create table level triggers for table Inv_Containers.
@@triggers\trg_inv_containers_id.sql
@@triggers\trg_inv_containers_family_bu.sql
/

-- Create table level triggers for table Inv_Compounds.
CREATE OR REPLACE TRIGGER "TRG_INV_COMPOUNDS_ID" 
    BEFORE INSERT 
    ON "INV_COMPOUNDS" 
    FOR EACH ROW 
    begin
		if :new.Compound_ID is null then
			select seq_Inv_Compounds.nextval into :new.compound_id from dual;
		end if;
		if :new.MOL_ID is null then
			SELECT MOLID_SEQ.NEXTVAL INTO :NEW.MOL_ID FROM DUAL;
		end if;
end;
/

-- Create table level triggers for table Inv_Synonyms.
CREATE OR REPLACE TRIGGER "TRG_INV_SYNONYMS_ID" 
    BEFORE INSERT 
    ON "INV_SYNONYMS" 
    FOR EACH ROW 
    begin
		if :new.Synonym_ID is null then
			select seq_Inv_Synonyms.nextval into :new.Synonym_id from dual;
		end if;
end;
/

-- Create table level triggers for table Inv_Container_Types.
CREATE OR REPLACE TRIGGER "TRG_INV_CONTAINER_TYPES" 
    BEFORE INSERT 
    ON "INV_CONTAINER_TYPES" 
    FOR EACH ROW 
    begin
		if :new.Container_type_ID is null then
			select seq_inv_Container_types.nextval into :new.Container_type_id from dual;
		end if;
end;
/

-- Create table level triggers for table Inv_Location_Types.
CREATE OR REPLACE TRIGGER "TRG_INV_LOCATION_TYPES" 
    BEFORE INSERT 
    ON "INV_LOCATION_TYPES" 
    FOR EACH ROW 
    begin
		if :new.Location_type_ID is null then
			select seq_inv_location_types.nextval into :new.location_type_id from dual;
		end if;
end;
/

-- Create table level triggers for table Inv_Physical_State.
CREATE OR REPLACE TRIGGER "TRG_INV_PHYSICAL_STATE" 
    BEFORE INSERT 
    ON "INV_PHYSICAL_STATE" 
    FOR EACH ROW 
    begin
		if :new.Physical_state_ID is null then
			select seq_Inv_Physical_State.nextval into :new.Physical_State_id from dual;
		end if;
end;
/

-- Create table level triggers for table Inv_Suppliers.
CREATE OR REPLACE TRIGGER "TRG_INV_SUPPLIERS" BEFORE 
    INSERT 
    ON "INV_SUPPLIERS" 
    FOR EACH ROW 
    begin
		if :new.Supplier_ID is null then
			select seq_Inv_Suppliers.nextval into :new.Supplier_id from dual;
		end if;
end;
/

-- Create table level triggers for table Inv_Units.
CREATE OR REPLACE TRIGGER "TRG_INV_UNITS" BEFORE 
    INSERT 
    ON "INV_UNITS" 
    FOR EACH ROW 
    begin
		if :new.unit_ID is null then
			select seq_Inv_units.nextval into :new.unit_id from dual;
		end if;
end;
/

create or replace trigger TRG_BARCODE_DESC BEFORE INSERT ON INV_BARCODE_DESC FOR EACH ROW 
begin
if :new.BARCODE_DESC_ID is null then
  select SEQ_INV_BARCODE_DESC.nextval into :new.BARCODE_DESC_ID from dual;
end if;
end;
/

create or replace trigger TRG_GRID_FORMAT_ID BEFORE INSERT ON INV_GRID_FORMAT FOR EACH ROW 
begin
if :new.GRID_FORMAT_ID is null then
  select SEQ_INV_GRID_FORMAT.nextval into :new.GRID_FORMAT_ID from dual;
end if;
end;
/

create or replace trigger TRG_GRID_FILL_TEMPLATE BEFORE INSERT ON INV_GRID_FILL_TEMPLATE FOR EACH ROW 
begin
if :new.GRID_FILL_TEMPLATE_ID is null then
  select SEQ_INV_GRID_FILL_TEMPLATE.nextval into :new.GRID_FILL_TEMPLATE_ID from dual;
end if;
end;
/

create or replace trigger TRG_GRID_STORAGE_ID BEFORE INSERT ON INV_GRID_STORAGE FOR EACH ROW 
begin
if :new.GRID_STORAGE_ID is null then
  select SEQ_INV_GRID_STORAGE.nextval into :new.GRID_STORAGE_ID from dual;
end if;
end;
/

create or replace trigger TRG_GRID_POSITION_ID BEFORE INSERT ON INV_GRID_POSITION FOR EACH ROW 
begin
if :new.GRID_POSITION_ID is null then
  select SEQ_INV_GRID_POSITION.nextval into :new.GRID_POSITION_ID from dual;
end if;
end;
/

create or replace trigger TRG_GRID_ELEMENT_ID BEFORE INSERT ON INV_GRID_ELEMENT FOR EACH ROW 
begin
if :new.GRID_ELEMENT_ID is null then
  select SEQ_INV_GRID_ELEMENT.nextval into :new.GRID_ELEMENT_ID from dual;
end if;
end;
/

create or replace trigger TRG_ENUM_ID BEFORE INSERT ON INV_ENUMERATION FOR EACH ROW 
begin
if :new.ENUM_ID is null then
  select SEQ_INV_ENUMERATION.nextval into :new.ENUM_ID from dual;
end if;
end;
/

create or replace trigger TRG_ESET_ID BEFORE INSERT ON INV_ENUMERATION_SET FOR EACH ROW 
begin
if :new.ESET_ID is null then
  select SEQ_INV_ENUMERATION_SET.nextval into :new.ESET_ID from dual;
end if;
end;
/

create or replace trigger TRG_ESET_TYPE_ID BEFORE INSERT ON INV_ESET_TYPE FOR EACH ROW 
begin
if :new.ESET_TYPE_ID is null then
  select SEQ_INV_ESET_TYPE.nextval into :new.ESET_TYPE_ID from dual;
end if;
end;
/

create or replace trigger TRG_PHYS_PLATE_ID BEFORE INSERT ON INV_PHYSICAL_PLATE FOR EACH ROW 
begin
if :new.PHYS_PLATE_ID is null then
  select SEQ_INV_PHYSICAL_PLATE.nextval into :new.PHYS_PLATE_ID from dual;
end if;
end;
/

create or replace trigger TRG_PLATE_FORMAT_ID BEFORE INSERT ON INV_PLATE_FORMAT FOR EACH ROW 
begin
if :new.PLATE_FORMAT_ID is null then
  select SEQ_INV_PLATE_FORMAT.nextval into :new.PLATE_FORMAT_ID from dual;
end if;
end;
/

create or replace trigger TRG_PLATE_TYPE_ID BEFORE INSERT ON INV_PLATE_TYPES FOR EACH ROW 
begin
if :new.PLATE_TYPE_ID is null then
  select SEQ_INV_PLATE_TYPES.nextval into :new.PLATE_TYPE_ID from dual;
end if;
end;
/

@@triggers\trg_plate_id.sql
/

create or replace trigger TRG_WELL_ID BEFORE INSERT ON INV_WELLS FOR EACH ROW 
begin
if :new.WELL_ID is null then
  select SEQ_INV_WELLS.nextval into :new.WELL_ID from dual;
end if;
end;
/

create or replace trigger TRG_PLATE_HISTORY_ID BEFORE INSERT ON INV_PLATE_HISTORY FOR EACH ROW 
begin
if :new.PLATE_HISTORY_ID is null then
  select SEQ_INV_PLATE_HISTORY.nextval into :new.PLATE_HISTORY_ID from dual;
end if;
end;
/

create or replace trigger TRG_PLATE_ACTION_ID BEFORE INSERT ON INV_PLATE_ACTIONS FOR EACH ROW 
begin
if :new.PLATE_ACTION_ID is null then
  select SEQ_INV_PLATE_ACTIONS.nextval into :new.PLATE_ACTION_ID from dual;
end if;
end;
/

CREATE OR REPLACE TRIGGER "TRG_INV_URL" BEFORE INSERT ON "INV_URL" FOR EACH ROW begin
if :new.URL_ID is null then
	select seq_URL.nextval into :new.URL_id from dual;
end if;
end;
/

CREATE OR REPLACE TRIGGER TRG_INV_EHS_CatNum_bi0 BEFORE INSERT
ON INV_EHS_CatNum_Substance
FOR EACH ROW
BEGIN
    :NEW.CAS_Internal := TRANSLATE(UPPER(:NEW.CAS),
                                   Constants.cCASTranslation1, Constants.cCASTranslation2);
    :NEW.supplier_catnum_Internal := TRANSLATE(UPPER(:NEW.supplier_catnum),
                                               Constants.cCatNumTranslation1, Constants.cCatNumTranslation2);
END;
/

CREATE OR REPLACE TRIGGER TRG_INV_EHS_CatNum_bu0 BEFORE UPDATE
ON INV_EHS_CatNum_Substance
FOR EACH ROW
WHEN (NEW.CAS <> OLD.CAS OR NEW.supplier_catnum <> OLD.supplier_catnum)
BEGIN
    :NEW.CAS_Internal := TRANSLATE(UPPER(:NEW.CAS),
                                   Constants.cCASTranslation1, Constants.cCASTranslation2);
    :NEW.supplier_catnum_Internal := TRANSLATE(UPPER(:NEW.supplier_catnum),
                                               Constants.cCatNumTranslation1, Constants.cCatNumTranslation2);
END;
/

CREATE OR REPLACE TRIGGER TRG_INV_EHS_Substances_bi0 BEFORE INSERT
ON inv_EHS_Substances
FOR EACH ROW
BEGIN
    :NEW.CAS_Internal := TRANSLATE(UPPER(:NEW.CAS), 
                                   Constants.cCASTranslation1, Constants.cCASTranslation2);
END;
/

CREATE OR REPLACE TRIGGER TRG_INV_EHS_Substances_bu0 BEFORE UPDATE
ON INV_EHS_Substances
FOR EACH ROW
WHEN (new.CAS <> old.CAS)
BEGIN
    :NEW.CAS_Internal := TRANSLATE(UPPER(:NEW.CAS), 
                                   Constants.cCASTranslation1, Constants.cCASTranslation2);
END;
/

CREATE OR REPLACE TRIGGER TRG_INV_EHS_CAS_bi0 BEFORE INSERT
ON INV_EHS_CAS_Substance
FOR EACH ROW
BEGIN
    :NEW.CAS_Internal := TRANSLATE(UPPER(:NEW.CAS), 
                                   Constants.cCASTranslation1, Constants.cCASTranslation2);
END;
/

CREATE OR REPLACE TRIGGER TRG_INV_EHS_CAS_bu0 BEFORE UPDATE
ON INV_EHS_CAS_Substance
FOR EACH ROW
WHEN (new.CAS <> old.CAS)
BEGIN
    :NEW.CAS_Internal := TRANSLATE(UPPER(:NEW.CAS), 
                                   Constants.cCASTranslation1, Constants.cCASTranslation2);
END;
/

-- Create table level triggers for table Inv_Container_Status.
CREATE OR REPLACE TRIGGER "TRG_INV_CONTAINER_STATUS" 
    BEFORE INSERT 
    ON "INV_CONTAINER_STATUS" 
    FOR EACH ROW 
    begin
		if :new.Container_Status_ID is null then
			select seq_Inv_Container_Status.nextval into :new.Container_Status_ID from dual;
		end if;
	end;
/

CREATE OR REPLACE TRIGGER TRG_XSLT BEFORE INSERT
    ON INV_XSLTS
    FOR EACH ROW 
begin
  if :new.XSLT_ID is null then
    select SEQ_INV_XSLTS.nextval into :new.XSLT_ID from dual;
  end if;
end;
/
CREATE OR REPLACE TRIGGER TRG_XMLDOCS
    BEFORE INSERT
    ON "INV_XMLDOCS"
    FOR EACH ROW 
begin
  if :new.XMLDOC_ID is null then
    select SEQ_INV_XMLDOCS.nextval into :new.XMLDOC_ID from dual;
  end if;
end;                                                      
/
CREATE OR REPLACE TRIGGER TRG_XMLDOC_TYPE
    BEFORE INSERT
    ON "INV_XMLDOC_TYPES"
    FOR EACH ROW 
begin
  if :new.XMLDOC_TYPE_ID is null then
    select SEQ_INV_XMLDOC_TYPE.nextval into :new.XMLDOC_TYPE_ID from dual;
  end if;
end;    
/
CREATE OR REPLACE TRIGGER TRG_SOLVENTS 
    BEFORE INSERT 
    ON INV_SOLVENTS 
    FOR EACH ROW 
begin
  if :new.SOLVENT_ID is null then
    select SEQ_INV_SOLVENTS.nextval into :new.SOLVENT_ID from dual;
  end if;
end;  
/
CREATE OR REPLACE TRIGGER TRG_RESERVATION_TYPES 
    BEFORE INSERT 
    ON INV_RESERVATION_TYPES 
    FOR EACH ROW 
begin
  if :new.RESERVATION_TYPE_ID is null then
    select SEQ_INV_RESERVATION_TYPES.nextval into :new.RESERVATION_TYPE_ID from dual;
  end if;
end;  
/
CREATE OR REPLACE TRIGGER TRG_REPORTTYPES
    BEFORE INSERT 
    ON INV_REPORTTYPES
    FOR EACH ROW 
begin
  if :new.REPORTTYPE_ID is null then
    select SEQ_INV_REPORTTYPES.nextval into :new.REPORTTYPE_ID from dual;
  end if;
end;  
/
CREATE OR REPLACE TRIGGER TRG_INV_REQUESTS
    BEFORE INSERT 
    ON INV_REQUESTS
    FOR EACH ROW 
begin
  if :new.REQUEST_ID is null then
    select SEQ_INV_REQUESTS.nextval into :new.REQUEST_ID from dual;
  end if;
end;  
/
CREATE OR REPLACE TRIGGER TRG_INV_UNIT_TYPES
    BEFORE INSERT 
    ON INV_UNIT_TYPES
    FOR EACH ROW 
begin
  if :new.UNIT_TYPE_ID is null then
    select SEQ_INV_UNIT_TYPES.nextval into :new.UNIT_TYPE_ID from dual;
  end if;
end;  
/
-- Create table level triggers for table INV_COUNTRY.
CREATE OR REPLACE TRIGGER "TRG_INV_COUNTRY_ID"
    BEFORE INSERT
    ON "INV_COUNTRY"
    FOR EACH ROW
    begin
		if :new.Country_ID is null then
			select seq_Inv_Country.nextval into :new.Country_ID from dual;
		end if;
end;
/
-- Create table level triggers for table INV_STATES.
CREATE OR REPLACE TRIGGER "TRG_INV_STATES_ID"
    BEFORE INSERT
    ON "INV_STATES"
    FOR EACH ROW
    begin
		if :new.State_ID is null then
			select seq_Inv_States.nextval into :new.State_id from dual;
		end if;
end;
/
-- Create table level triggers for table INV_ADDRESS.
CREATE OR REPLACE TRIGGER "TRG_INV_ADDRESS_ID"
    BEFORE INSERT
    ON "INV_ADDRESS"
    FOR EACH ROW
    begin
		if :new.Address_ID is null then
			select seq_Inv_Address.nextval into :new.Address_id from dual;
		end if;
end;
/
-- Create table level triggers for table INV_REQUEST_TYPES.
CREATE OR REPLACE TRIGGER "TRG_INV_REQUEST_TYPE_ID"
    BEFORE INSERT
    ON "INV_REQUEST_TYPES"
    FOR EACH ROW
    begin
		if :new.REQUEST_TYPE_ID is null then
			select seq_INV_REQUEST_TYPES.nextval into :new.REQUEST_TYPE_ID from dual;
		end if;
end;
/
-- Create table level triggers for table INV_REQUEST_STATUS.
CREATE OR REPLACE TRIGGER "TRG_INV_REQUEST_STATUS_ID"
    BEFORE INSERT
    ON "INV_REQUEST_STATUS"
    FOR EACH ROW
    begin
		if :new.REQUEST_STATUS_ID is null then
			select seq_INV_REQUEST_STATUS.nextval into :new.REQUEST_STATUS_ID from dual;
		end if;
end;
/
-- Create table level triggers for table INV_ORDER_STATUS.
CREATE OR REPLACE TRIGGER "TRG_INV_ORDER_STATUS_ORDRSTSID"
    BEFORE INSERT
    ON "INV_ORDER_STATUS"
    FOR EACH ROW
    begin
		if :new.ORDER_STATUS_ID is null then
			select seq_INV_ORDER_STATUS.nextval into :new.ORDER_STATUS_ID from dual;
		end if;
end;
/
-- Create table level triggers for table INV_ORDERS.
CREATE OR REPLACE TRIGGER "TRG_INV_ORDERS_ORDER_ID"
    BEFORE INSERT
    ON "INV_ORDERS"
    FOR EACH ROW
    begin
		if :new.ORDER_ID is null then
			select seq_INV_ORDERS.nextval into :new.ORDER_ID from dual;
		end if;
end;
/

-- Create table level triggers for table INV_CONTAINER_CHECKIN_DETAILS.
CREATE OR REPLACE TRIGGER "TRG_INV_CON_CHECKIN_DET_CDID"
    BEFORE INSERT
    ON "INV_CONTAINER_CHECKIN_DETAILS"
    FOR EACH ROW
    begin
		if :new.CHECKIN_DETAILS_ID is null then
			select seq_INV_CON_CHECKIN_DETAILS.nextval into :new.CHECKIN_DETAILS_ID from dual;
		end if;
end;
/
-- Create table level triggers for table INV_WELL_COMPOUNDS.
CREATE OR REPLACE TRIGGER "TRG_INV_WELL_COMPOUNDS" 
    BEFORE INSERT 
    ON "INV_WELL_COMPOUNDS" 
    FOR EACH ROW 
    begin
		if :new.WELL_COMPOUND_ID is null then
			select seq_inv_well_compounds.nextval into :new.well_compound_id from dual;
		end if;
end;
/
-- Create table level triggers for table INV_OWNERS
CREATE OR REPLACE TRIGGER "TRG_INV_OWNERS" 
    BEFORE INSERT 
    ON "INV_OWNERS" 
    FOR EACH ROW 
    begin
		if :new.OWNER_ID is null then
			select seq_inv_owners.nextval into :new.owner_id from dual;
		end if;
end;
/
-- Create table level triggers for table INV_DATA_MAPS
CREATE OR REPLACE TRIGGER "TRG_INV_DATA_MAPS" 
    BEFORE INSERT 
    ON "INV_DATA_MAPS" 
    FOR EACH ROW 
    begin
		if :new.DATA_MAP_ID is null then
			select SEQ_INV_DATA_MAPS.nextval INTO :new.DATA_MAP_ID from dual;
		end if;
end;
/
-- Create table level triggers for table INV_MAP_FIELDS
CREATE OR REPLACE TRIGGER "TRG_INV_MAP_FIELDS" 
    BEFORE INSERT 
    ON "INV_MAP_FIELDS" 
    FOR EACH ROW 
    begin
		if :new.MAP_FIELD_ID is null then
			select SEQ_INV_MAP_FIELDS.nextval INTO :new.MAP_FIELD_ID from dual;
		end if;
end;
/


