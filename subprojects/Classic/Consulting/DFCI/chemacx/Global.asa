<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cs_security/cs_security_login_utils_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cs_security/cs_security_utils_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/ado.inc" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/server_const_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/manage_queries.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/manage_user_settings_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/app_startup_vbs.asp" -->
<SCRIPT LANGUAGE="vbscript" RUNAT="server">
'Copyright 1998-2001, CambridgeSoft Corp., All Rights Reserved
'declare globals for applicatiion functions
Dim APP_INI_ERRORS
Dim DB_INI_ERRORS
Dim vid_debug
vid_debug = false
cowsFile = "cows"
'******************************** Subscriptions *********************************************
' Variables to control webSite access via CSWebUsers Account system
Dim  bUseCSWebUserAccounts		  
Dim  CSWebUsersDBConnStr
Dim bDebugPrint
Dim gServiceID
 
bUseCSWebUserAccounts = false ' Enforces the use of CSWebUsers accounts system
CSWebUsersDBConnStr = "Provider= SQLOLEDB; Data Source=172.17.1.18,1433; Network Library=DBMSSOCN; Initial Catalog=csWebUsers; User Id=cows2000; Password=cambridgesoft"
bDebugPrint = false
gServiceID = 10  '  ServiceID 10 is ChemACX Pro

on error resume next
Set INIVAR= Server.CreateObject("cowsUtils.cowsini") 
if err.number > 0 then RaiseAppError "cowsUtils didn't initialize", err.number, err.description
on error goto 0

'**************************
'Functions and Subs occuring when a user Application starts and ends
'Main functions:
'	Application_OnStart	Runs once when the first page of your application is run For the first time by any user
'	Application_OnEnd		Runs once when the web server shuts down
Sub Application_OnStart
	Application("appkey") = "chemacx"
	Application("UseCSWebUserAccounts") =  bUseCSWebUserAccounts
	Application("CSWebUsers_ServiceID") =  gServiceID
	Application("gui_fields_to_hide") = "Substance.CsNum"
	'set application values find in cows.ini file
	Application("ServerDrive")= GetINIValue( "required", "GLOBALS", "SERVER_DRIVE", "cows", cowsFile)
	Application("ServerRoot")= GetINIValue( "required", "GLOBALS", "SERVER_DIR", "cows", cowsFile)
	Application("DocumentRoot")= GetINIValue( "required", "GLOBALS", "DOC_ROOT", "cows", cowsFile)
	Application("COWSRoot")= GetINIValue( "required", "GLOBALS", "COWS_ROOT", "cows", cowsFile)
	'!DGB! debug change
	if vid_debug then
		Application("COWSRoot")=""
	End if
	Application("COWSVersion") = GetINIValue( "required", "GLOBALS", "COWS_VERSION", "cows", cowsFile)
	
	Application("NumberCurrentUsers") = 0
	'exit application if errors where found in the above variables
	'create global objects used for searching
	CreateGlobalAppObjects()
	
	'Get all inivalues for the web application
	GetAppINIValues()
	GetConfigINIValues()
	if Not APP_INI_ERRORS <> ""  then 
	
		'create application temp directory
		CreateAppDir()

		'get db information and set values to application objects
		GetAllDBINIValues()
		
		if Not DB_INI_ERRORS <> ""  then 
			SetINIDate("app")
			'Initialize the hitlist tables. If they are not found they are created.
			AppInitialize()
			CreateShopCartTable Application("appkey"),"base_form_group"
		else
			'set app_ini_errors to db_ini errors so session_onstart will do the write thing and abandon the session.
			APP_INI_ERRORS=DB_INI_ERRORS
			'mark app for reload.The application on_start will not run again until the next user stasrts a session. Seeing that
			'the cfserver.ini dates have changed from what is in Application("iniDate" & app) will call for running all the routines in app_onstart again.
			'however error checking will continue and the app will not start if all the errors are not cleare.
			MarkForReload("app")
		end if
	else
		MarkForReload("app")
	end if
	
End Sub

Sub AppInitialize()
	AppInitAllTables()
	GetACXDBVersion()
	If bUseCSWebUserAccounts then
		ResetAllConcurrentUserCounters CSWebUsersDBConnStr, gServiceID
	End if
End Sub

'get server globals from [GLOBALS] section in application cfserver.ini file 
Sub GetAppINIValues()
	Application("AppPath")= Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot") & "\" & Application("COWSRoot") & "\" & Application("appkey")
	Application("CODirPath")= Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot") & "\" & Application("COWSRoot") & "\"
	Application("logPath") = Application("ServerDrive") & "\"&  Application("ServerRoot") & "\" &  Application("DocumentRoot") & "\" 

	'!DGB! debug change
	if vid_debug then
		Application("AppPath")= Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot") & "\" & Application("appkey")
		Application("CODirPath")= Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot")
	End if
	Application("AppPathHTTP")= "/" & Application("appkey")
	Application("mainwindow")=GetINIValue( "option", "GLOBALS", "MAIN_WINDOW", "web_app", "cfserver")
	if Application("mainwindow") = "" then
		Application("mainwindow") = "top.frames[""main""]"
	end if
	if Application("mainwindow") = "no_frames" then
		Application("mainwindow") = "self"
	end if
	Application("nav_bar_window")=GetINIValue( "optional", "GLOBALS", "NAV_BAR_WINDOW", "web_app", "cfserver")
	if Application("nav_bar_window") = "" then
		Application("nav_bar_window") = "top.frames[""navbar""]"
	end if
	if Application("nav_bar_window") = "no_frames" then
		Application("nav_bar_window") = "self"
	end if
	Application("user_info_window")=GetINIValue( "optional", "GLOBALS", "USER_INFO_WINDOW", "web_app", "cfserver")
	if Application("user_info_window") = "" then
		Application("user_info_window") = "top.frames[""userinfo""]"
	end if
	if Application("user_info_window") = "no_frames" then
		Application("user_info_window") = "self"
	end if
	Application("BODY_BACKGROUND") = GetINIValue( "required", "GLOBALS", "USERWINDOWBACKGROUND", "web_app", "cfserver")
	Application("TempDirName") = GetINIValue( "required", "GLOBALS", "TEMP_DIR_NAME", "web_app", "cfserver")
	Application("TempDirFullPath") = GetINIValue( "required", "GLOBALS", "TEMP_DIR_PATH", "web_app", "cfserver")
	Application("ServerSource") =Application("ServerDrive") & "\" & Application("ServerRoot") & "\" & Application("COWSRoot") & "\cows_source\cfserverasp\source"
	Application("AppTempDirPath")= Application("TempDirFullPath")& "\" & Application("appkey")
	Application("AppTempDirPathHTTP") = "/" & Application("TempDirName") & "/" & Application("appkey")
	Application("DBNames") = GetINIValue( "required", "GLOBALS", "DB_Names", "web_app", "cfserver")
	Application("NavButtonGifPath") = GetINIValue( "required", "GLOBALS", "NAV_BUTTONS_GIF_PATH", "web_app", "cfserver")
	Application("GlobalSearchDBs") = GetINIValue( "optional", "GLOBALS", "GLOBAL_SEARCH_DBS", "web_app", "cfserver")
	Application("GlobalBaseDB")=GetINIValue( "optional", "GLOBALS", "GLOBAL_SEARCH_BASE_DB", "web_app", "cfserver")
	Application("CDX_CACHING")=GetINIValue( "optional", "GLOBALS", "CDX_CACHING", "web_app", "cfserver")
	if Application("CDX_CACHING")= "INIEmpty" then Application("CDX_CACHING")="true"
	'set to default if the entry is not in the ini file
	
	Application("DISPLAY_GIFS_ONLY_LIST_NS")=GetINIValue( "optional", "GLOBALS", "DISPLAY_GIFS_ONLY_LIST_NS", "web_app", "cfserver")
	if Application("DISPLAY_GIFS_ONLY_LIST_NS")= "INIEmpty" then Application("DISPLAY_GIFS_ONLY_LIST_NS")=0
	Application("DISPLAY_GIFS_ONLY_FORM_NS")=GetINIValue( "optional", "GLOBALS", "DISPLAY_GIFS_ONLY_FORM_NS", "web_app", "cfserver")
	if Application("DISPLAY_GIFS_ONLY_FORM_NS")= "INIEmpty" then Application("DISPLAY_GIFS_ONLY_FORM_NS")=0
	Application("DISPLAY_GIFS_ONLY_LIST_IE")=GetINIValue( "optional", "GLOBALS", "DISPLAY_GIFS_ONLY_LIST_IE", "web_app", "cfserver")
	if Application("DISPLAY_GIFS_ONLY_LIST_IE")= "INIEmpty" then Application("DISPLAY_GIFS_ONLY_LIST_IE")=0
	Application("DISPLAY_GIFS_ONLY_FORM_IE")=GetINIValue( "optional", "GLOBALS", "DISPLAY_GIFS_ONLY_FORM_IE", "web_app", "cfserver")
	if Application("DISPLAY_GIFS_ONLY_FORM_IE")= "INIEmpty" then Application("DISPLAY_GIFS_ONLY_FORM_IE")=0

	' note this disables prefernces for all other form_groups
	'at this time you can set preferences globally for the entire application, when preferences are shown in other places, the ini files values
	'get blown away. Having preference set for each formgroup causes session timeouts, since there are too many cookies created.
	Application("CHEMACXCOM_CODE")=GetINIValue( "optional", "GLOBALS", "CHEMACXCOM_CODE", "web_app", "cfserver")
	'set to default if the entry is not in the ini file
	if Application("CHEMACXCOM_CODE")= "INIEmpty" then Application("CHEMACXCOM_CODE")=0
	
	Application("UserWindowBackground")=GetINIValue( "optional", "GLOBALS", "UserWindowBackground", "web_app", "cfserver")
	'set to default if the entry is not in the ini file
	if Application("UserWindowBackground")= "INIEmpty" then Application("UserWindowBackground")="/CFServerAsp/Source/graphics/Fine_Speckled.gif="

	
	
	Application("APP_TYPE")=GetINIValue( "optional", "GLOBALS", "APP_TYPE", "web_app", "cfserver")
	'set to default if the entry is not in the ini file
	
	if Application("APP_TYPE")= "INIEmpty" then Application("APP_TYPE")=""
	'LJB 4/19 'add and admin required flag 
	Application("ADMIN_REQUIRED")=GetINIValue( "optional", "GLOBALS", "ADMIN_REQUIRED", "web_app", "cfserver")
	'set to default if the entry is not in the ini file

	if Application("ADMIN_REQUIRED")= "INIEmpty" then Application("ADMIN_REQUIRED")=""
		
	If UCase(Application("APP_TYPE")) = "CHEMACX" then
		Application("CHEMACX_USERNAME") =GetINIValue( "required", "CHEMACX", "CHEMACX_USERNAME", "web_app", "cfserver")
		Application("CHEMACX_PWD")=GetINIValue( "required", "CHEMACX", "CHEMACX_PWD", "web_app", "cfserver")
		'Application("DBA_USERNAME")=GetINIValue( "required", "CHEMACX", "DBA_USERNAME", "web_app", "cfserver")
		'Application("DBA_PWD")=GetINIValue( "required", "CHEMACX", "DBA_PWD", "web_app", "cfserver")
		'Application("SEC_USERNAME")=GetINIValue( "required", "CHEMACX", "SEC_USERNAME", "web_app", "cfserver")
		'Application("SEC_PWD")=GetINIValue( "required", "CHEMACX", "SEC_PWD", "web_app", "cfserver")
		'Application("ORA_SQLLDRPATH") = GetINIValue( "required", "CHEMACX", "ORA_SQLLDRPATH", "web_app", "cfserver")
		'Application("ORA_SERVICENAME")=GetINIValue( "required", "CHEMACX", "ORA_SERVICENAME", "web_app", "cfserver")
		Application("PRIV_TABLE_NAME")=GetINIValue( "required", "CHEMACX", "PRIV_TABLE_NAME", "web_app", "cfserver")
	End if
	GetSecurityINIValues()
End Sub

'close global objects
Sub CleanUp()
	'close cowsutil global object
	if isObject(INIVAR) then
		Set INIVAR = Nothing
	end if
End Sub

'create chemfinder, lockit and base64 objects
Sub CreateGlobalAppObjects()
	if APP_INI_ERRORS <> "" then exit sub
	on error resume next
	'create the object that decodes cdx fiels encoded in base64 that are submitted from a form
	Set Application("myDecoder") = Server.CreateObject("Base64Decode.Decode")
	'exit application if errors where found in the above variables
	if err.number > 0 then RaiseAppError "Base64Decode Error", err.number, err.description
	on error goto 0
End Sub

Sub CreateAppDir()
	if APP_INI_ERRORS <> "" then exit sub
	'on error resume next
	Set apptempdir = Server.CreateObject("Scripting.FileSystemObject")
	'check to see if the application temporary directory exists, if not, create it and add appropriate files.

	if Application("CDX_CACHING") = "false" then
		If  apptempdir.FolderExists(Application("AppTempDirPath")) then
		apptempdir.DeleteFolder(Application("AppTempDirPath"))
		end if
	end if
	If not apptempdir.FolderExists(Application("AppTempDirPath")) then
		apptempdir.CreateFolder(Application("AppTempDirPath"))
	end if
	if err.number > 0 then RaiseAppError "App dir not created", err.number, err.description
		apptempdir = ""
	Set apptempdir = Nothing
End Sub
'get datbase specific values and create necessary Application variables

Sub GetAllDBINIValues()
	Dim dbnamestring 
	Dim DBNames 
	Dim currentDB
	'get web form directories from ini file to establish the Application("dbcount")
	DBNames = Application("DBNames")
	dbnamestring = Split(DBNames, ",", -1)
	'start getting the information from the inifile based on the number of database in the web appliciaton
	for i = 0 to UBound(dbnamestring)
		currentDB = dbnamestring(i)
		'start getting values from ini file
		'on error resume next
		GetSingleDB(currentDB)
	next 'i for a db
	'set dates for ini files
End Sub
		
Sub GetSingleDB(currentDB)
	GetGlobalInfoValues(currentDB)
	GetTableGroupInfo(currentDB)
	GetFieldMapGroupInfo(currentDB)
	GetChemConnGroupInfo(currentDB)
	GetADOConnGroupInfo(currentDB)
	'open objects and test connections
	if NOT DB_INI_ERRORS <> "" then CheckADOConnectInfo(currentDB)
	if NOT DB_INI_ERRORS <> "" then GetTableRecordCounts(currentDB)
	if NOT DB_INI_ERRORS <> "" then  CreateDBTempDir(currentDB)
	
	if NOT DB_INI_ERRORS <> "" then
		Application("DBLoaded" & currentDB) = True
		 SetINIDate(currentDB)
	else
		Application("DBLoaded" & currentDB) = False
		MarkForReload(currentDB) 'set stored ini date to nothing so next reload will be forced
		CreateLog(currentDB)
	end if


End Sub

Function GetLiveConnection (ByVal connection_name, ByVal currentDB)
		conn_info_array = Application(connection_name & currentDB)
		conn_type=conn_info_array(0)
		conn_string=conn_info_array(1)
		conn_conn_timeout=conn_info_array(2)
		conn_command_timeout=conn_info_array(3)
		conn_username=conn_info_array(4)
		conn_password=conn_info_array(5)
		if conn_type = "NULL" or conn_type = "" or conn_type= "OLEDB" then
			full_conn_string = conn_string & "; " & conn_username & "; " & conn_password		
		else
			full_conn_string = conn_type & "=" & conn_string & "; " & conn_username & "; " & conn_password		
		end if				
		Set DataConn=Server.CreateObject("ADODB.Connection")
		DataConn.ConnectionTimeout = conn_conn_timeout
		DataConn.CommandTimeout = conn_command_timeout
		on error resume next
		DataConn.Open full_conn_string
		Set GetLiveConnection = DataConn	
End Function

' Sets global variables with ACX and MSDX Database versions from DB version table.
' called from applicaiton startup.
Sub GetACXDBVersion()
	Dim MSDXVersion
	Dim ACXVersion

	Set myConn = GetNewConnection("chemacx", "base_form_group", "base_connection")
	sql = "SELECT Version.ACXVersion, Version.MSDXVersion FROM Version"
	Set RS = myConn.Execute(sql)
	if err.number > 0 then
		ACXVersion = "N/A"
		MSDXVersion = "N/A"
		Set DataConn = Nothing
		myConn.Close
		Set RS = Nothing		
	else
		if Not (RS.BOF AND RS.EOF)then
			ACXVersion= RS.Fields("ACXVersion").value
			MSDXVersion= RS.Fields("MSDXVersion").value
			RS.Close
		else
			ACXVersion = "N/A"
			MSDXVersion = "N/A"
		end if
		Set RS = Nothing
		myConn.Close
		Set DataConn = Nothing
	End if
	Application("ACXDBVersion")= ACXVersion
	Application("MSDXDBVersion")= MSDXVersion
	
End Sub

Sub GetTableRecordCounts(currentDB)
	if Application("LoginRequired" & currentDB) = 0 then
		Table_groups_str=Application("TableGroups" & currentDB)
		table_groups_array = split(Table_groups_str, ",", -1)
		for i = 0 to UBound(table_groups_array)
			myCount=0
			theCount=0
			table_group_name = Trim(table_groups_array(i))
			TableGroupArray=Application(table_group_name & currentDB)
			basetable = TableGroupArray(0)
			
			TableArray = Application(basetable & currentDB)
			ADOConnName = TableArray(9)
			on error resume next
			Set DataConn = GetNewConnection(currentDB, "base_form_group", ADOConnName)
			'Set RS = Server.CreateObject("ADODB.Recordset")
			sql = "Select Count(*) From " & basetable
			Set RS = DataConn.Execute(sql)
			if err.number > 0 then
				theCount = 0
				Set DataConn = Nothing
				DataConn.Close
				Set RS = Nothing
				
			else
				if Not (RS.BOF AND RS.EOF)then
					RS.MoveFirst
					theCount=RS.Fields(0)
					RS.Close
				else
					theCount = 0
				end if
				Set RS = Nothing
				DataConn.Close
				Set DataConn = Nothing
			End if
			Application(basetable & "RecordCount" & currentDB) = theCount
			if i = 0 then 
				Application("DBRecordCount" & currentDB) = theCount
			end if
		next 'i
	else
		Application("DBRecordCount" & currentDB) = ""
	end if
End sub


Sub GetADOConnGroupInfo(ByVal currentDB)
		ADOconnections_str = GetINIValue( "required", "GLOBALS", "ADO_CONNECTION_NAMES", "web_app", currentDB)
		Application("ADOconnections_str") = ADOconnections_str
		ADOconnection_array = split(ADOconnections_str, ",", -1)
		for i = 0 to UBound(ADOconnection_array)
			conn_name = Trim(ADOconnection_array(i))
			Application(conn_name & currentDB) = BuildConnInfo(conn_name, currentDB)
		next 'i
End Sub

Sub CheckADOConnectInfo(currentDB)
		ADOconnections_str = Application("ADOconnections_str")
		ADOconnection_array = split(ADOconnections_str, ",", -1)
		for i = 0 to UBound(ADOconnection_array)
			conn_name = Trim(ADOconnection_array(i))
			GetConnection conn_name, currentDB
		next	
End Sub
Sub GetTableGroupInfo(ByVal currentDB)
		table_groups_str = GetINIValue( "required", "GLOBALS", "TABLE_GROUPS", "web_app", currentDB)
		Application("TableGroups" & currentDB) = table_groups_str
		table_groups_array = split(Table_groups_str, ",", -1)
		for i = 0 to UBound(table_groups_array)
			table_group_name = Trim(table_groups_array(i))
			Application(table_group_name & currentDB) = BuildTableGroup(table_group_name, currentDB)					
		next 'i
End Sub

Function BuildTableGroup(ByVal table_group_name, ByVal currentDB)

		BaseTable=GetINIValue( "required",  UCase(table_group_name), "BASE_TABLE", "web_app", currentDB)
		MolTable=GetINIValue( "required", UCase(table_group_name), "MOLECULE_TABLE", "web_app", currentDB)
		SQLOrder=GetINIValue( "required",  UCase(table_group_name), "TABLE_SQL_ORDER", "web_app", currentDB)
		Dim TableGroupArray
		ReDim TableGroupArray(2)
		TableGroupArray(0) = BaseTable
		TableGroupArray(1) = MolTable
		TableGroupArray(2) = SQLOrder
		BuildTableGroup= TableGroupArray
End Function

Sub GetFieldMapGroupInfo(ByVal currentDB)
		field_map_groups_str = GetINIValue( "required", "GLOBALS", "FIELD_MAP_GROUPS", "web_app", currentDB)
		if field_map_groups_str = "NULL" then field_map_groups_str = ""
		Application("FieldMapGroups" & currentDB) = field_map_groups_str
		field_map_groups_array = split(field_map_groups_str, ",", -1)
		for i = 0 to UBound(field_map_groups_array)
			field_map_group_name = Trim(field_map_groups_array(i))
			Application(field_map_group_name & currentDB) = BuildFieldMapGroup(field_map_group_name, currentDB)					
		next 'i
End Sub

Function BuildFieldMapGroup(ByVal field_map_group_name, ByVal currentDB)

		StructureMap=GetINIValue( "required",  UCase(field_map_group_name), "STRUC_FIELD_MAP", "web_app", currentDB)
		MWMap=GetINIValue( "required", UCase(field_map_group_name), "MW_FIELD_MAP", "web_app", currentDB)
		FormulaMap=GetINIValue( "required",  UCase(field_map_group_name), "FORMULA_FIELD_MAP", "web_app", currentDB)
		
		for j = 1 to 100
		on error resume next
			Map = GetINIValue( "optional",  UCase(field_map_group_name), "OTHER_FIELD_MAP" & j, "web_app", currentDB)
			if j>8 AND  Map = "NULL" then
				exit for
			else
				if Map = "NULL" then Map = ""
				if Map_Comb <> "" then
					Map_Comb= Map_Comb & ":" & Map
				else
					Map_Comb= Map
				end if
			end if
		err.clear()
		next
		OtherFieldMap = Map_Comb
		
		Dim FieldMapGroupArray
		ReDim FieldMapGroupArray(3)
		FieldMapGroupArray(0) = StructureMap
		FieldMapGroupArray(1) = FormulaMap
		FieldMapGroupArray(2) = MWMap
		FieldMapGroupArray(3) = OtherFieldMap
		
		
		BuildFieldMapGroup= FieldMapGroupArray		
		
End Function


Sub GetChemConnGroupInfo(ByVal currentDB)
		CHEMconnections_str = GetINIValue( "required", "GLOBALS", "CHEM_CONNECTION_NAMES", "web_app", currentDB)
		Application("CHEMconnections_str" & currentDB)=CHEMconnections_str
		CHEMconnection_array = split(CHEMconnections_str, ",", -1)
		for i = 0 to UBound(CHEMconnection_array)
			conn_name = Trim(CHEMconnection_array(i))
			Application(conn_name & currentDB) = BuildChemInfo(conn_name, currentDB)	
		next 'i
End Sub


Sub GetGlobalInfoValues(currentDB)
		'Standard DB Variables
		Application("AboutWindow" & currentDB)=GetINIValue( "required", "GLOBALS", "ABOUT_WINDOW", "web_app", currentDB)
		Application("DisplayName" & currentDB)=GetINIValue( "required", "GLOBALS", "DISPLAY_NAME", "web_app", currentDB)
		' IRL Application("CFW_Instance" & currentDB) =GetINIValue( "required", "GLOBALS", "CFW_INSTANCE", "web_app", currentDB)
		Application("MaxHits" & currentDB) =  GetINIValue( "required", "GLOBALS", "MAXHITS", "web_app", currentDB)
		Application("DataBaseType" & currentDB) =  GetINIValue( "required", "GLOBALS", "DB_TYPE", "web_app", currentDB)
		Application("DBRecordCount" & currentDB) = GetINIValue( "required", "GLOBALS", "DB_RECORD_COUNT", "web_app", currentDB)
		Application("Prefs")=Application("AppPathHTTP") & "/prefs.asp"
		Application("About")=Application("AppPathHTTP") & "/about.asp"
		Application("HelpFile")=Application("AppPathHTTP") & "/help/help.asp"
		Application("NavBar")= Application("AppPathHTTP") & "/navbar.asp"
		

		'DEFAULT FORM PATHS 
		Application("DBPathHTTP" & currentDB) =Application("AppPathHTTP") & "/" & currentDB 
		Application("ActionForm" & currentDB)= Application("DBPathHTTP" & currentDB) & "/" &  currentDB &  "_action.asp"

		
		'get values for input and result forms for form groups - this includes reg system flags
		formgroups_str =  GetINIValue( "required", "GLOBALS", "FORM_GROUPS", "web_app", currentDB)
		form_group_array = split(formgroups_str, ",", -1)
		'DGB remember the formgroup list
		Application("form_group_array") = form_group_array

		for i = 0 to UBound(form_group_array)
			form_group_name = Trim(form_group_array(i))
			GetFormGroupValues form_group_name, currentDB
		next 'i
		
	
		
		'get table values
		tables_str= GetINIValue( "required", "GLOBALS", "TABLE_ALIASES", "web_app", currentDB)
		if Instr(UCase(tables_str), "ADD_LINES")>0 then
			tables_str=AppendToINIStr("GLOBALS", currentDB, tables_str,"TABLE_ALIASES" )
		end if
		Application("TableNames" & currentDB) = tables_str
		table_names_array = split(tables_str, ",", -1)

		for i = 0 to UBound(table_names_array)
			table_name = Trim(table_names_array(i))
			Application(table_name & currentDB) = GetTableValues(table_name, currentDB)	
		next 'i


		'get predefined subform lookups

		subform_view_str= GetINIValue( "optional", "GLOBALS", "SUBFORM_VIEW_NAMES", "web_app", currentDB)
		subform_view_names_array = split(subform_view_str, ",", -1)
		for i = 0 to UBound(subform_view_names_array)
			subform_view = Trim(subform_view_names_array(i))
			Application("SubFormView" & subform_view & currentDB) = GetSubFormViewValues(subform_view, currentDB)	
		next 'i
		
		'EXPORT HITS values that can be output using the export file feature
		Application("ExportHits" & currentDB)= Application("AppPathHTTP") & "/export_hits.asp"

		
		'TEMP FILE DIRECTORIES set paths to form tempdirectories
		Application("TempFileDirectory" & currentDB) =   Application("AppTempDirPath") & "\" & currentDB & "Temp\"
		Application("TempFileDirectoryHTTP" & currentDB) =  Application("AppTempDirPathHTTP") & "/" & currentDB & "Temp/"	
End Sub

Function BuildChemInfo(ByVal chem_conn_name, ByVal currentDB)

		StrucEngine=GetINIValue( "required",  UCase(chem_conn_name), "STRUC_ENGINE", "web_app", currentDB)
		StrucFormName=GetINIValue( "required", UCase(chem_conn_name), "STRUC_FORM_NAME", "web_app", currentDB)
		StrucFormPath= Application("AppPath") & "\" & currentDB & "\cfwforms\"  & StrucFormName
		BaseFromPath=StrucFormPath
		StrucDBpath=GetINIValue( "required",  UCase(chem_conn_name), "STRUC_DB_PATH", "web_app", currentDB)
		StrucTableName=GetINIValue( "required", UCase(chem_conn_name), "STRUC_TABLE_NAME", "web_app", currentDB)
		Application("StrucDBPath") = StrucDBpath
		'make sure forms can be opened and db is connected
		Dim ChemConnArray
		ReDim ChemConnArray(6)
		ChemConnArray(0) = StrucEngine
		ChemConnArray(1) = StrucFormName
		ChemConnArray(2) = StrucFormPath
		ChemConnArray(3) = StrucDBpath
		ChemConnArray(4) = StrucTableName
		ChemConnArray(5) = BaseFromPath
		'return array
		BuildChemInfo= ChemConnArray
End Function


Function BuildConnInfo(ByVal ado_conn_name, ByVal currentDB)
	conntype = GetINIValue( "required", UCase(ado_conn_name), "CONN_TYPE", "web_app", currentDB)
	conn_string = GetINIValue( "required", UCase(ado_conn_name), "CONNECTION_STRING", "web_app", currentDB)
	conn_conn_timeout = GetINIValue( "required", UCase(ado_conn_name), "CONNECTION_TIMEOUT", "web_app", currentDB)
	conn_command_timout = GetINIValue( "required", UCase(ado_conn_name), "COMMAND_TIMEOUT", "web_app", currentDB)
	conn_username = GetINIValue( "optional", UCase(ado_conn_name), "CONNECTION_USERNAME", "web_app", currentDB)
	conn_password = GetINIValue( "optional", UCase(ado_conn_name), "CONNECTION_PASSWORD", "web_app", currentDB)
	conn_dbms = GetINIValue( "optional", UCase(ado_conn_name), "DBMS", "web_app", currentDB)
	Application("UserIDKeyword") = GetINIValue( "optional", UCase(ado_conn_name), "USERID_KEYWORD", "web_app", currentDB)
	Application("PWDKeyword") = GetINIValue( "optional", UCase(ado_conn_name), "PWD_KEYWORD", "web_app", currentDB)
	if conn_dbms = "INIEmpty" then 
		conn_dbms = "ACCESS"
	end if
	
	'SYAN added on 4/6/2004 to remember what type of database the main db is
	if UCase(currentDB) = UCase(Application("GlobalBaseDB")) then
		Application("BASE_DBMS") = UCase(conn_dbms)
	end if
	Application("DBMS" & currentDB) = UCase(conn_dbms)
	'End of SYAN modification
	
	Application("DBMS") = UCase(conn_dbms)
	
	'The access driver considers the word size as a keyword so it needs to be escaped
	'SYAN added on 4/6/2004 to remember what type of database the main db is
	If conn_dbms = "ORACLE" then
		Application("ProductSizeFieldName" & currentDB) = """SIZE"""
	Else
		Application("ProductSizeFieldName" & currentDB)= "[Size]"
	End if
	
	'create array
	
	'Start LJB 4/19 get Admin password/username for table modification/deletions
		if Application("ADMIN_REQUIRED")="1" then
		'check to see if it is already poplulated -this may alrady have been grabbed from the Apptype section of the cfserver.ini file
			if Not Application("REG_USERNAME") <> "" then
				Application("REG_USERNAME") = GetINIValue( "optional", "GLOBALS", "REG_USERNAME", "web_app", "cfserver")
			end if
			if Not  Application("REG_PWD")<> "" then
				Application("REG_PWD") = GetINIValue( "optional", "GLOBALS", "REG_PWD", "web_app", "cfserver")
			end if
		else
			if Not Application(UCase(currentDB) & "_USERNAME") <> "" then
				Application(UCase(currentDB) & "_USERNAME")=  GetINIValue( "optional", "GLOBALS", currentDB & "_USERNAME", "web_app", "cfserver")
			end if
			if Not  Application(UCase(currentDB) & "_PWD")<> "" then
				'SYAN modified on 4/7/2004 to get the password
				'Application(UCase(currentDB) & "_PWD") =  GetINIValue( "optional", "GLOBALS", currentDB & "_USERNAME", "web_app", "cfserver")
				Application(UCase(currentDB) & "_PWD") =  GetINIValue( "optional", "GLOBALS", currentDB & "_PWD", "web_app", "cfserver")
			end if
		end if
	'End LJB 4/19 additions
	
	Dim ConnArray
	ReDim ConnArray(7)
	ConnArray(0) = conntype
	ConnArray(1) = conn_string
	ConnArray(2) = conn_conn_timeout
	ConnArray(3) = conn_command_timeout
	ConnArray(4) = conn_username
	ConnArray(5) = conn_password
	ConnArray(6) = conn_dbms
	'return array
	BuildConnInfo= ConnArray
End Function

Function AppendToINIStr(ByVal section_name,ByVal currentDB, ByVal inputStr,ByVal key_name)
	Dim finalRelFields, NewEntry,AppendedStr,tempArray,tempArray2,theCount,lineIdent,tempINIEntry,NumAdditional
	if key_name = "OTHER_FIELD_MAP" then
		StrSeparator = ":"
		ItemSeparator = ","
	else
		StrSeparator = ","
		ItemSeparator = ";"
	end if
	tempArray = Split(inputStr, StrSeparator, -1)
	theCount = UBound(tempArray)
	lineIdent = tempArray(theCount)
	newArray = Split(lineIdent, ItemSeparator, -1)
	NumAdditional = newArray(1)
	if Not NumAdditional <> "" then 
		NumAdditional = 0
		finalRelfields = Replace(inputStr, StrSeparator & lineIdent, " ")
	end if
	if NumAdditional > 0 then
		For i = 1 to NumAdditional
			NewEntry =GetINIValue("optional",  UCase(section_name), UCase(key_name) & i, "web_app", currentDB)
			if AppendedStr <> "" then
				AppendedStr = AppendedStr & "," & NewEntry
			Else
				AppendedStr = NewEntry
			End if
		Next 'i
	finalRelfields = Replace(inputStr, lineIdent, AppendedStr)
	End if
	
	AppendToINIStr = finalRelFields

End Function

'set file paths for currentDB
Sub GetFormGroupValues(form_group_name, currentDB)
	InputFormPath =GetINIValue("required", UCase(form_group_name), "INPUT_FORM_PATH", "web_app", currentDB)
	InputFormMode =GetINIValue("required",  UCase(form_group_name), "INPUT_FORM_MODE", "web_app", currentDB)
	ResultFormPath =GetINIValue("required",  UCase(form_group_name), "RESULT_FORM_PATH", "web_app", currentDB)
	ResultFormMode =GetINIValue("required",  UCase(form_group_name), "RESULT_FORM_MODE", "web_app", currentDB)
	RelFields =GetINIValue("required",  UCase(form_group_name), "SEARCHABLE_ADO_FIELDS", "web_app", currentDB)
	if Instr(UCase(RelFields), "ADD_LINES")>0 then
		RelFields=AppendToINIStr(form_group_name, currentDB, RelFields,"SEARCHABLE_ADO_FIELDS" )
	end if
	if RelFields = "NULL" then RelFields = ""
		PluginValue =GetINIValue("required",  UCase(form_group_name), "PLUGIN_VALUE", "web_app", currentDB)
	if PluginValue = "NULL" then PluginValue = "False"
		FormGroupFlag=GetINIValue("required",  UCase(form_group_name), "FORM_GROUP_FLAG", "web_app", currentDB)
	if FormGroupFlag = "NULL" then FormGroupFlag = "NULL"
		StructureFields = GetINIValue("required",  UCase(form_group_name), "STRUCTURE_FIELDS", "web_app", currentDB)
	if StructureFields = "NULL" then StructureFields = ""
		MWFields = GetINIValue("required", UCase(form_group_name), "MW_FIELDS", "web_app", currentDB)
	if MWFields = "NULL" then MWFields = ""
		FormulaFields = GetINIValue("required",  UCase(form_group_name), "FORMULA_FIELDS", "web_app", currentDB)
	if FormulaFields = "NULL" then FormulaFields = ""
		SDFileFields = GetINIValue("required",  UCase(form_group_name), "SDFILE_FIELDS", "web_app", currentDB)
	if SDFileFields = "NULL" then SDFileFields = ""
		TableGroup=GetINIValue("required",  UCase(form_group_name), "TABLE_GROUP", "web_app", currentDB)
	if TableGroup = "NULL" then TableGroup = "base_table_group"
		RequiredFields=GetINIValue("required",  UCase(form_group_name), "REQUIRED_FIELDS", "web_app", currentDB)
	if RequiredFields = "NULL" then RequiredFields = ""
			NumListView=GetINIValue("required",  UCase(form_group_name), "NUM_LIST_VIEW", "web_app", currentDB)
	if NumListView = "NULL" then NumListView = 5
	

	Dim formgrouparray(15)
	formgrouparray(0)=RelFields
	formgrouparray(1)=InputFormPath
	formgrouparray(2)=ResultFormPath
	formgrouparray(3)=InputFormMode
	formgrouparray(4)=ResultFormMode
	formgrouparray(5)=PluginValue
	formgrouparray(6)=FormGroupFlag
	formgrouparray(7)=StructureFields
	formgrouparray(8)=MWFields
	formgrouparray(9)=FormulaFields
	formgrouparray(10)=SDFileFields
	formgrouparray(11)="NULL"
	formgrouparray(12)=TableGroup
	formgrouparray(13)=RequiredFields
	formgrouparray(14)=NumListView
	
	Application(form_group_name & currentDB) = formgrouparray
	
	Select Case formgroupflag
	Case "GLOBAL_SEARCH"
		Application(form_group_name & currentDB & "FieldMapGroup")=GetINIValue("required",  UCase(form_group_name), "FIELD_MAP_GROUP", "web_app", currentDB)
	Case "REG_COMMIT"
		Application(form_group_name & currentDB & "FieldMapGroup")=GetINIValue("required",  UCase(form_group_name), "FIELD_MAP_GROUP", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_MOLTABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegTempBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_TEMP_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegTempMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_TEMP_MOLTABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegBatchTable") =  GetINIValue( "required", UCase(form_group_name), "REG_BATCH_TABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegDuplicatesTable") =  GetINIValue( "required", UCase(form_group_name), "REG_DUPLICATES_TABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderFullCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_FULL_COMMIT", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderPartialCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_PARTIAL_COMMIT", "web_app", currentDB)	
	Case "REG_TEMP"
		Application(form_group_name & currentDB & "RegTempBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_TEMP_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegTempMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_TEMP_MOLTABLE", "web_app", currentDB)
	Case "COMMIT"
		Application(form_group_name & currentDB & "FieldMapGroup")=GetINIValue("required",  UCase(form_group_name), "FIELD_MAP_GROUP", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_MOLTABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegBatchTable") =  GetINIValue( "required", UCase(form_group_name), "REG_BATCH_TABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegDuplicatesTable") =  GetINIValue( "required", UCase(form_group_name), "REG_DUPLICATES_TABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderFullCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_FULL_COMMIT", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderPartialCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_PARTIAL_COMMIT", "web_app", currentDB)
	Case "ADD_RECORD"
		Application(form_group_name & currentDB & "RegCommitBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_MOLTABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderFullCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_FULL_COMMIT", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderPartialCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_PARTIAL_COMMIT", "web_app", currentDB)

	Case "INDEX_SEARCH"
		Application(form_group_name & currentDB & "IndexDB") =  GetINIValue( "required", UCase(form_group_name), "INDEX_DB", "web_app", currentDB)

	Case "SINGLE_SEARCH"

	End Select
	
End Sub


'get the values for each table for the currentDB and set the HIGHESTPRIORITY variable for creating priority list
Function GetTableValues(ByVal table_name, ByVal currentDB)
		'actual table name
		TableRealName = GetINIValue( "required", UCase(table_name), "TABLE_NAME", "web_app", currentDB)
		'ado related values
		RelFields=GetINIValue( "required",  UCase(table_name), "RELATIONAL_FIELDS", "web_app", currentDB)
		if Instr(UCase(RelFields), "ADD_LINES")>0 then
			RelFields=AppendToINIStr(form_group_name, currentDB, RelFields,"RELATIONAL_FIELDS" )
		end if
		PrimaryKey=GetINIValue( "required",  UCase(table_name), "PRIMARY_KEY", "web_app", currentDB)
		SQLSyntax=GetINIValue( "required", UCase(table_name), "SQL_SYNTAX", "web_app", currentDB)
		SelectKeyWord=GetINIValue( "required",  UCase(table_name), "SELECT_KEYWORD", "web_app", currentDB)
		SelectAdditional=GetINIValue( "required",  UCase(table_name), "SELECT_ADDITIONAL", "web_app", currentDB)
		SelectJoin=GetINIValue( "required",  UCase(table_name), "SELECT_JOIN", "web_app", currentDB)
		SelectLinks=GetINIValue( "required", UCase(table_name), "SELECT_LINKS", "web_app", currentDB)
		InterTables=GetINIValue( "required",  UCase(table_name), "INTER_TABLES", "web_app", currentDB)
		'chemfinder related values
		ChemConnection = GetINIValue( "required", UCase(table_name), "CHEM_CONNECTION", "web_app", currentDB)
		StrucFieldID=GetINIValue( "required",  UCase(table_name), "STRUC_FIELD_ID", "web_app", currentDB)

		ADOConnection =GetINIValue( "required", UCase(table_name), "ADO_CONNECTION", "web_app", currentDB)
		'create array.  
		
		Dim TableArray
		ReDim TableArray(15)
	
		
		TableArray(0) = TableRealName 
		TableArray(1) = RelFields
		TableArray(2) = PrimaryKey
		TableArray(3) = SQLSyntax
		TableArray(4) = SelectKeyWord
		TableArray(5) = SelectJoin
		TableArray(6) = SelectLinks
		TableArray(7) = SelectAdditional
		TableArray(8) = InterTables
		TableArray(9) = ADOConnection
		TableArray(10) = ChemConnection
		TableArray(11) = StrucFieldID

		
		GetTableValues = TableArray
		if Application("RelationalFields" & currentDB) <> "" then
			Application("RelationalFields" & currentDB) = Application("RelationalFields" & currentDB) & "," & RelFields
		else
			Application("RelationalFields" & currentDB) = RelFields
		end if


End Function

Function GetSubFormViewValues(ByVal subform_view_name, ByVal currentDB)
		if subform_view_name = "NULL" or subform_view_name = "" then exit function
		SelectStatement = GetINIValue( "required", UCase(subform_view_name), "SELECT_STATEMENT", "web_app", currentDB)
		ADOConnection=GetINIValue( "required", UCase(subform_view_name), "ADO_CONNECTION", "web_app", currentDB)
		
		'create array
		Dim SubFormViewArray
		ReDim SubFormViewArray(1)
		SubFormViewArray(0) =SelectStatement 
		SubFormViewArray(1) = ADOConnection
		
		'return array
		GetSubFormViewValues = SubFormViewArray
End Function




'create temporary directories for each dbase  in web applicaiton
Sub CreateDBTempDir(ByVal currentDB)

	Dim tempdir
	Set dbtempdir= Server.CreateObject("Scripting.FileSystemObject")
	tempdir = Application("TempFileDirectory" & currentDB)
	on error resume next
	If Not dbtempdir.FolderExists(tempdir) then
		dbtempdir.CreateFolder(tempdir)
		dbtempdir.CopyFile Application("AppPath")& "\graphics\nostructure.cdx", tempdir
		dbtempdir.CopyFile Application("AppPath")& "\graphics\nostructure.gif", tempdir
		dbtempdir.CopyFile Application("AppPath")& "\graphics\0.gif", tempdir
		dbtempdir.CopyFile Application("AppPath")& "\graphics\mt.cdx", tempdir
	end if
	if err.number > 0 then RaiseDBError "DB Temp dir not created ",err.number, err.description
	on error goto 0
	on error resume next
	If Not dbtempdir.FolderExists(tempdir & "Sessiondir") then
		dbtempdir.CreateFolder(tempdir & "Sessiondir")
	end if
		if err.number > 0 then RaiseDBError "The SessionDir directory for " & currentDB & " was not created ",err.number, err.description
	dbtempdir = ""
	Set dbtempdir = Nothing
End Sub

Sub MarkForReload(ByVal currentDB)
	Application("iniDate" & currentDB)= ""
End Sub


Sub SetINIDate(ByVal currentDB)
if currentDB = "app" then
	Application("inipath") = Application("AppPath")  & "\config\" & "cfserver.ini"
else
	Application("inipath") = Application("AppPath")  & "\config\" & currentDB &".ini"
end if
	Set fileobject = Server.CreateObject("Scripting.FileSystemObject")
	Set inifile =fileobject.GetFile(Application("inipath"))
	Application("iniDate" & currentdb) = inifile.DateLastModified
	fileobject = ""
	inifile = ""
	Set fileobject = Nothing
End Sub


Function GetINIDate(ByVal currentDB)
	if currentDB = "app" then
		Application("inipath") = Application("AppPath")  & "\config\" & "cfserver.ini"
	else
		Application("inipath") = Application("AppPath")  & "\config\" & currentDB &".ini"
	end if
	Set fileobject = Server.CreateObject("Scripting.FileSystemObject")
	Set inifile =fileobject.GetFile(Application("inipath"))
	GetINIDate = inifile.DateLastModified
	fileobject = ""
	inifile = ""
	Set fileobject = Nothing
End Function

Sub CheckINIDates(currentDB)
	currentINIDate = GetINIDate(currentDB)
	storedINIDate = Application("iniDate" & currentDB)
	if Not(currentINIDate = storedINIdate) then
		Application.Lock
			GetSingleDB(currentDB)
		Application.UnLock
	end if
End Sub


Sub CheckAppDates()
	currentINIDate = GetINIDate("app")
	storedINIDate = Application("iniDate" & "app")
	if Not(currentINIDate = storedINIdate) then
	Application.Lock
			'Get all inivalues for the web application
			
			GetAppINIValues()
			'exit application if errors where found in the above variables
			if APP_INI_ERRORS <> ""  then exit sub
	
			'create application temp directory
			CreateAppDir()
			'exit application if errors where found in the above variables
			if APP_INI_ERRORS <> ""  then exit sub

			'get db information and set values to application objects
			GetAllDBINIValues()
			SetINIDate("app")
		Application.UnLock
	end if
End Sub



'close application objects when app is unloaded
Sub Application_OnEnd
	'make sure that chemfinder quits and object disappears
	on error resume next
	dbnamestring = Split(Application("DBNames"), ",", -1)
	For i = 0 to UBound(dbnamestring)
		dbkey = dbnamestring(i)	
		' IRL CloseCFWObjects(dbkey)
		' IRL CloseLockitObjects(dbkey)
	next
	'end get rid of chemfinder
	Set inivar= Nothing
	Set Application("myDecoder") = Nothing
	Application("NumberCurrentUsers") = 0

End Sub

'**************************
'Functions and Subs occuring when a user Session starts and ends
'Main functions:
 '	Session_OnStart	Runs once when a new user accesses a page in the webserver
'	Session_OnEnd		Runs once the user logs off or the session timesout
'**************************
Sub Session_OnStart
	' For some strange reason session_onstart event fires the very first
	' time a page is requested even if it it set to be sessionless. 
	' The following line forces an exit for sessionless pages.
	if NOT IsObject(Session) then exit sub
	Session("StartTime") = Cstr(Now())
	if APP_INI_ERRORS <> ""  then
		call AppLoadFailure()
		
		exit sub
	else
		if Application("LastAppLoadFailed") = true then
			LoadApp()
		end if
		if NOT DB_INI_ERRORS <> "" then
			Application.Lock
				Application("NumberCurrentUsers") = Application("NumberCurrentUsers") + 1
			Application.Unlock
			dbnamestring = Split(Application("DBNames"), ",", -1)
			'start getting the information based on the number of database in the web appliciaton
			For i = 0 to UBound(dbnamestring)
				dbkey = dbnamestring(i)
				if i = 0 then firstdb= dbkey
				CheckAppDates()
				CheckINIDates(dbkey)
				
				'get each set of values for db's 
				'create session directories based on session.sessionid	
				CreateUserDir dbkey 
				'if errors have occured in the temp dir creating exit the application since it is a problem in the ini file
				if APP_INI_ERRORS <> ""  then
					call AppLoadFailure()
					exit sub
				else
					Application.Lock
						Application("LastAppLoadFailed") = false
					Application.UnLock
				end if
			next 'i get next database entry 
		CleanUP()
		else
			call AppLoadFailure()
			exit sub
		end if
		
	end if
	'!DGB! 09/03 Initialize hitlist session variables w/o reading ini
		form_group_array = Application("form_group_array")
		for j= 0 to UBound(form_group_array)
			Session("BaseRShitlistID" & dbkey & form_group_array(j))=0
			Session("RefinehitlistID" & dbkey & form_group_array(j)) = 0
		next

	if Application("UseCSSecurityApp")="1" then
	'!DGB! Enable cookie based authentication
	
		'SYAN changed it on 4/8/2004. Do AuthenticateUserFromRequest for every db such that 
		'the session variables for username and password are set correctly for both main db and secondary db
		'Call AuthenticateUserFromRequest(firstdb)
		for i = 0 to UBound(dbnamestring)
			if i > 0 and UCase(Application("DBMS" & dbnamestring(i))) <> "ORACLE" then 'secondary db is not oracle
				'do not AuthenticateUserFromRequest
				'For some reason if main base is Oracle, secondary is Access, only works when not 
				'AuthenticateUserFromRequest for the second database.
				'I can't spend more time to figure out why now.
			else
				'But is second one is Oracle, needs to call the function to get username and password stored 
				'in session variables.
				Call AuthenticateUserFromRequest(dbnamestring(i))
			end if
		next
		'End of SYAN modification
		
		if Session("UserValidated" & firstdb) = 1 then Session("CurrentUser" & firstdb) = Session("UserName" & firstdb)

		' css credentials
		Session("CSSUserName" & firstdb) = Session("UserName" & firstdb)
		Session("CSSUserID" & "chemacx") = Session("UserID" & firstdb)
		' for access csscredentials and ado credentials are different
		if Ucase(Application("base_connection" & firstdb)(6)) <> "ORACLE" then
			Session("UserName" & firstdb) = ""
			Session("UserID" & firstdb) = ""
			' for access cs_security chemacx privileges are not checked.  Everyone gets them
			Session("Browse_ACXChemACX") = true
			Session("Buy_ACXChemACX") = true
		End if
	else
		Session("UserValidated" & dbkey) = 1
		Session("Browse_ACXChemACX") = true
		Session("Buy_ACXChemACX") = true
		if Ucase(Application("base_connection" & firstdb)(6)) = "ORACLE" then
			Session("UserName" & firstdb) = Application("CHEMACX_USERNAME")
			Session("UserID" & firstdb) = Application("CHEMACX_PWD")
		End if
			
	end if
	
	' Manage Subscription cookies
	If bUseCSWebUserAccounts then
		CheckSubscriptions()
	Else
		Session("okOnService_" & gServiceID) = true
		Session("okOnService_1") = true
	End if
End Sub

Sub LoadApp()
	GetAppINIValues()
	'exit application if errors where found in the above variables
	if APP_INI_ERRORS <> ""  then exit sub

	'create application temp directory
	CreateAppDir()
	'exit application if errors where found in the above variables
	if APP_INI_ERRORS <> ""  then exit sub

	'get db information and set values to application objects
	GetAllDBINIValues()
	
	if DB_INI_ERRORS <> ""  then exit sub
	SetINIDate("app")
	'Initialize the hitlist tables. If they are not found they are created.
	AppInitialize()
End Sub


Sub AppLoadFailure()
		DB_INI_ERRORS = APP_INI_ERRORS
		dbStr = Split(Application("DBNames"), ",", -1)
		firstDB = dbStr(0)
		if DB_INI_ERRORS <> "" then 
			'this may be that someone had a load failure, returned to the chemoffice page and clicked the link again without fixing the error.
			'in this case no errors would be reported - but the app is still in fialure mode since Application("LastAppLoadFailed") = true
			CreateLog(firstDB)
		end if
		APP_INI_ERRORS=""
		DB_INI_ERRORS=""
		MarkForReload("app")
		Application.Lock
				Application("LastAppLoadFailed") = true
		Application.UnLock
		Session.Abandon
		'logpath = Application("logpath")& firstDB & "log.html"
		response.redirect "/chemoffice/" &  firstDB & "log.html"
		
		
End Sub


'create user sessiondirectory in the application dbtemp directory
Sub CreateUserDir(ByVal currentDB)
	if APP_INI_ERRORS <> "" then exit sub

	Dim sessdir
	Set sessiontemp_dir = Server.CreateObject("Scripting.FileSystemObject")
	on error resume next

	sessdir = Application("TempFileDirectory" & currentDB) & "Sessiondir"  & "\" & Session.sessionid
	If Not sessiontemp_dir.FolderExists(sessdir) then
		sessiontemp_dir.CreateFolder(sessdir)
	End if
	if err.number > 0 then
			RaiseDBError "User Session Dir not created", err.number, err.description
	end if
	sessiontemp_dir = ""
	Set sessiontemp_dir = Nothing
End Sub

'delect user sessiondirectory in the application dbtemp directory
Sub DeleteUserDir(ByVal currentDB)
	if DB_INI_ERRORS <> "" then exit sub

	Dim sessdir
	Set sessiontemp_dir = Server.CreateObject("Scripting.FileSystemObject")
	on error resume next
	sessdir = Application("TempFileDirectory" & currentDB) & "Sessiondir"  & "\" & Session.sessionid
	If  sessiontemp_dir.FolderExists(sessdir) then
		sessiontemp_dir.DeleteFolder(sessdir)
	End if
	if err.number > 0 then
			RaiseError "User Session Dir not deleted", "", ""
	end if
	sessiontemp_dir = ""
	Set sessiontemp_dir = Nothing
End Sub

'clean up when session ends by timeout or user hitting log off button
Sub Session_OnEnd
	Dim dbkey
	' Decrement concurrent user counter
	if Session("SubscriptionID")> 0  then
		Application.Lock
			Application("CurrentSubscriptionUsers") = ChangeConcurrentUserCounter(CSWebUsersDBConnStr, Session("SubscriptionID"),gServiceID, -1)
		Application.UnLock
	End if
	
	on error resume next
	dbnamestring = Split(Application("DBNames"), ",", -1)
	'start getting the information based on the number of database in the web appliciaton
	For i = 0 to UBound(dbnamestring) 
		dbkey = dbnamestring(i)
		DeleteUserDir dbkey
	Next 'next database name
	SessInitAllTables()
	CleanUP()
End Sub



	
'**********************************************************************
'****** LOGGING routines
'**********************************************************************
Sub LogAction(ByVal inputstr)
		on error goto 0
		filepath = Application("ServerDrive") & "\" & Application("ServerRoot") & "\cfwlog.txt"
		Set fs = Server.CreateObject("Scripting.FileSystemObject")
		Set a = fs.OpenTextFile(filepath, 8, True)  
		a.WriteLine Now & ": " & inputstr
		a.WriteLine " "
		a.close
End Sub

'Creates log of app and db errors on startup. Default location is /inetpub/ so their are not read only problems.
Sub CreateLog(currentDB)
	
	returnpage ="/chemoffice.asp"
	on error resume next
		filepath = Application("logpath") & "\chemoffice\" & currentdb & "log.html"
		Set fs = Server.CreateObject("Scripting.FileSystemObject")
		Set a = fs.CreateTextFile(filepath,True)  
		a.WriteLine Now & ": "& DB_INI_ERRORS & "<br>"
		a.WriteLine "<a href=" & quotedstring(returnpage) & ">" & "return to Chemoffice Webserver main page" & "</a>"
		a.close
		Set fs = Nothing
		Set a = Nothing
		a = ""
		fs = ""
End Sub


'**********************************************************************
'****** UTILITY routines
'**********************************************************************


'add errors to Applicaiton("Errors") object for later output
Sub RaiseAPPError(info1, info2, info3)
	fullerror = "<table  cellpadding = ""4"" cellspacing = ""4"" border = ""0"" align = ""top""><tr><td valign = ""top"" width = ""250"">" & info1 & "</td><td width = ""500"" valign = ""top"">" & info2  & " " & info3 & "</td></tr></table>"
	if APP_INI_ERRORS <> ""  then
		APP_INI_ERRORS = APP_INI_ERRORS & fullerror
	else
		APP_INI_ERRORS= "<table border = ""0"" align ""top""><tr><td width = ""800""><h3>The web Application was unable to Load due to the following errors</h3></td></tr><tr><td width = ""150""><strong>Error Message</strong></td></tr></table>" & fullerror
	end if
	fullerror = "<table  cellpadding = ""4"" cellspacing = ""4"" border = ""0"" align = ""top""><tr><td valign = ""top"" width = ""250"">" & errname & "</td><td width = ""250"" valign = ""top"">" & errnumber  & " " & errdescription & "</td></tr></table>"
	err.clear()
end Sub

Sub RaiseDBError(info1, info2, info3)
	
	fullerror = "<table  cellpadding = ""4"" cellspacing = ""4"" border = ""0"" align = ""top""><tr><td valign = ""top"" width = ""250"">" & info1 & "</td><td width = ""500"" valign = ""top"">" & info2  & " " & info3 & "</td></tr></table>"
	if DB_INI_ERRORS <> ""  then
		DB_INI_ERRORS = DB_INI_ERRORS & fullerror
	else
		DB_INI_ERRORS= "<table border = ""0"" align ""top""><tr><td width = ""800""><h3>The web Application was unable to Load due to the following errors</h3></td></tr><tr><td width = ""150""><strong>Error Message</strong></td></tr></table>" & fullerror
	end if
	err.clear()
	
end Sub

'put double quotes around an input string
Function QuotedString(varTemp)
	If IsNull(varTemp) Then
		QuotedString = Chr(34) & Chr(34)
	Else
		QuotedString = Chr(34) & CStr(varTemp) & Chr(34)
	End If
End Function


Function checkPath(thepath)
	Set theFile = Server.CreateObject("Scripting.FileSystemObject")
	if theFile.FileExists(thepath) = True then
		checkPath = True
	else
		checkPath = false
	end if
	Set theFile = Nothing
	theFile = ""
End function


Function GetTimeStamp()
	MyTime = Now()
	MyDay = Date()
	date_stamp=Month(MyDate) & Day(MyDate) & Year(MyDate) & Hour(MyTime) & Minute(MyTime)
	GetTimeStamp = date_stamp
End Function

Function GetINIValue(ByVal allowempty, ByVal theSection, ByVal theKeyname, ByVal INIType, ByVal ININame )
	on error resume next
	Select Case INIType
		Case "cows"
				inivalue = INIVAR.VBGetPrivateProfileString(Trim(theSection), Trim(theKeyname), ININame & ".ini")
			if inivalue = "INIEmpty" then
				emptyval = "ini file: winnt/" & ININame & ".ini. <br>"
			End if
		Case "web_app"
			Application("inipath") = Application("AppPath")  & "\config\" & ININame &".ini"
			inivalue = INIVAR.VBGetPrivateProfileString(Trim(theSection), Trim(theKeyname), Application("inipath"))
			if Trim(inivalue) = "" then inivalue = "INIEmpty"
			if inivalue = "INIEmpty" then
				emptyval = "ini file:  /config/" & ININame & ".ini. <br>" 
			End if
			
	End Select
	if inivalue = "INIEmpty" then
		Select case allowempty
			case "required"
				RaiseDBError "A required entry in the ini file is missing. ", emptyval , " SECTION:  " & theSection & "<br> KEY:  "& theKeyname
			case "optional"
				inivalue = ""
		End select
	end if

	GetINIValue = Trim(inivalue)
	
End Function


'**********************************************************************
'****** ACX routines
'**********************************************************************

Sub GetConfigINIValues()
	Application("NP_Search") = GetIniValue("optional", "APPLICATION", "NP_SEARCH", "web_app", "acxconfig")
	Application("SHOW_MSDX_LOOKUP_LINK") = GetIniValue("optional", "MSDX", "SHOW_MSDX_LOOKUP_LINK", "web_app", "acxconfig")
	Application("msdxURL") = GetIniValue("required", "MSDX", "MSDX_URL", "web_app", "acxconfig")
	Application("msdxLinkText") = GetIniValue("required", "MSDX", "MSDX_LINK_TEXT", "web_app", "acxconfig")
	Application("msdxLinkTitle") = GetIniValue("required", "MSDX", "MSDX_LINK_TITLE", "web_app", "acxconfig")
	Application("msdxACXIDKeywd") = GetIniValue("required", "MSDX", "MSDX_ACXID_KEYWD", "web_app", "acxconfig")
	Application("msdxCASKeywd") = GetIniValue("required", "MSDX", "MSDX_CAS_KEYWD", "web_app", "acxconfig")
	Application("msdxSupplierIDKeywd") = GetIniValue("required", "MSDX", "MSDX_SUPPLIERID_KEYWD", "web_app", "acxconfig")
	Application("msdxSupplierCatNumKeywd") = GetIniValue("required", "MSDX", "MSDX_SUPPLIERCATNUM_KEYWD", "web_app", "acxconfig")
	Application("tabWhereField") = GetIniValue("optional", "TABS", "FIELD_IN_SUPPLIER_TABLE", "web_app", "acxconfig")
	Application("tab1WhereValue") = GetIniValue("optional", "TABS", "TAB1_VALUES", "web_app", "acxconfig")
	Application("tab3WhereValue") = GetIniValue("optional", "TABS", "TAB3_VALUES", "web_app", "acxconfig")
	Application("tab1GifName") = GetIniValue("optional", "TABS", "TAB1_GIF_ROOTNAME", "web_app", "acxconfig")
	Application("tab2GifName") = GetIniValue("optional", "TABS", "TAB2_GIF_ROOTNAME", "web_app", "acxconfig")
	Application("tab3GifName") = GetIniValue("optional", "TABS", "TAB3_GIF_ROOTNAME", "web_app", "acxconfig")
	Application("tab1OptionText") = GetIniValue("optional", "TABS", "TAB1_OPTION_TEXT", "web_app", "acxconfig")
	Application("tab2OptionText") = GetIniValue("optional", "TABS", "TAB2_OPTION_TEXT", "web_app", "acxconfig")
	Application("tab3OptionText") = GetIniValue("optional", "TABS", "TAB3_OPTION_TEXT", "web_app", "acxconfig")
	Application("usepricerobot") = GetIniValue("optional", "ROBOT", "USE_PRICE_ROBOT", "web_app", "acxconfig")
	Application("listpriceField") = GetIniValue("optional", "PRICING", "LISTPRICE_FIELD_IN_PACKAGE_TABLE", "web_app", "acxconfig")
	Application("priceField") = GetIniValue("optional", "PRICING", "PRICE_FIELD_IN_PACKAGE_TABLE", "web_app", "acxconfig")
	Application("currencySymbolField") = GetIniValue("optional", "PRICING", "CSYMBOL_FIELD_IN_PACKAGE_TABLE", "web_app", "acxconfig")
	Application("RegisterFromACX")=GetIniValue("optional", "CHEMREG", "REGISTER_FROM_ACX", "web_app", "acxconfig")
	Application("RegServer")=GetIniValue("optional", "CHEMREG", "REG_SERVER_NAME", "web_app", "acxconfig")
	Application("orderAtACXcom") = GetIniValue("optional", "SHOPPINGCART", "ORDER_AT_ACXCOM", "web_app", "acxconfig")
	Application("requestQuote") = GetIniValue("optional", "SHOPPINGCART", "REQUEST_QUOTE", "web_app", "acxconfig")
	Application("exportToExcel") = GetIniValue("optional", "SHOPPINGCART", "EXPORT_TO_EXCEL", "web_app", "acxconfig")
	Application("ExcelTemplate") = GetIniValue("optional", "SHOPPINGCART", "EXCEL_TEMPLATE", "web_app", "acxconfig")
	Application("exportToWord") = GetIniValue("optional", "SHOPPINGCART", "EXPORT_TO_WORD", "web_app", "acxconfig")
	Application("SendToChemInv") = GetIniValue("optional", "SHOPPINGCART", "EXPORT_TO_CHEMINV", "web_app", "acxconfig")
	Application("addToCartWithoutPrice") = LCase(GetIniValue("optional", "SHOPPINGCART", "ADD_WITHOUT_PRICE", "web_app", "acxconfig"))
	Application("showListPrice") = LCase(GetIniValue("optional", "SHOPPINGCART", "SHOW_LISTPRICE", "web_app", "acxconfig"))
	Application("SaveShopCartToDB") = LCase(GetIniValue("optional", "SHOPPINGCART", "SAVE_IN_DB", "web_app", "acxconfig"))
	Application("NPinputForm") = GetIniValue("optional", "ALTFILES", "NP_INPUTFORM", "web_app", "acxconfig")
	Application("acxprod_display") = GetIniValue("optional", "ALTFILES", "ACXPROD_DISPLAY", "web_app", "acxconfig")
	Application("acxDbVersion") = GetIniValue("optional", "DB", "ACX_DB_VERSION", "web_app", "acxconfig")
	Application("supplierSelector") = GetIniValue("optional", "ALTFILES", "SUPPLIER_SELECTOR", "web_app", "acxconfig")
	Application("bLogSearches") = GetIniValue("optional", "SEARCHLOG", "LOG_SEARCHES", "web_app", "acxconfig")
	Application("SearchLogDbConnStr") = GetIniValue("optional", "SEARCHLOG", "SEARCH_LOG_DB_CONNSTR", "web_app", "acxconfig")
End Sub

Sub CheckSubscriptions()
	Dim ErrorCode 
	Session("okOnService_" & gServiceID) = false
	Session("okOnService_1") = false
	Session("SubscriptionID") = 0
	Session("CSWebUsers_UserName") = ""
	
	' Check Access to pay service
	Call IsBrowserSubscribed(gServiceID, True)
	if bDebugPrint then Response.Write "ServiceAccessCode_" & gServiceID & "= " & Session("ServiceAccessCode_" & gServiceID)
	
	ErrorCode = Session("ServiceAccessCode_" & gServiceID)	
	Select Case ErrorCode
		Case 1  ' Browser is authorized
			Session("okOnService_" & gServiceID) = True
			Session("okOnService_1") = True
			Exit sub
		Case 0  ' No credentials available
			Exit sub				
		Case -1, -2, -7  'ServiceAccess Error 
			session.Abandon
			Response.Redirect "https://accounts.cambridgesoft.com/ErrorHandler/ServiceAccessErrors.cfm?ServiceID=" & gServiceID & "&ErrorCode=" & ErrorCode	
		Case -3, -4  'Bad Credentials, need to authenticate
			session.Abandon
			Response.Redirect "https://accounts.cambridgesoft.com/login.cfm?promptsid=true&ServiceID=" & gServiceID	
		Case -5, -6  'Credentials Not valid on service
			' since the user has valid credentials default to free service
			Session("okOnService_1") = True
	End Select	 
End sub

'**********************************************************************************************
' This function decides whether a Browser is subscribed to a  given service based on its cookie 
' credentials.  It first tries to authenticate based on a subscriptionID on the request, then via 
' subscriptionId cookie, and finally via user name and userid cookies.
' There is also an option which does not authenticate the user on any particular service, but only
' simply checks for the existence of a valid user account or subscriptionid.  
' A session variable called Session("ServiceAccessCode_" & pServiceID) is set to one of the folowing values:
'  1 = Browser is authorized
'  0 = No credentials available to authenticate the browser
' -1 = Expired corporate subscription 
' -2 = Expired user subscription
' -3 = Unknown Subscription ID
' -4 = Unknown user credentials
' -5 = Subscription ID not valid on this service
' -6 = User not subscribed to this service
' -7 = Exceeded concurrent user limit on subscription
Sub IsBrowserSubscribed(pServiceID, pAuthenticateService)
	Dim IsSubscribed
	Dim SubscriberID
	Dim UserName
	Dim UserID 
	
	IsSubscribed = False
	Session("ServiceAccessCode_" & pServiceID) = 0
		
	' Try to authenticate via subscriber id
	SubscriptionID = GetSubscriptionID() 'gets subscriber id passed in the request object 
	if bDebugPrint then Response.Write "SubscriptionID = " & SubscriptionID & "<BR>"
	If SubscriptionID > 0 then
		Call AuthenticateSubscriber(CSWebUsersDBConnStr, SubscriptionID, pServiceID, pAuthenticateService)
		if Session("ServiceAccessCode_" & pServiceID) = 1 then
			IsSubscribed = True
			Session("SubscriptionID") = SubscriptionID
			Application.Lock	
				' Increment concurrent user counter
				Application("CurrentSubscriptionUsers") = ChangeConcurrentUserCounter(CSWebUsersDBConnStr, SubscriptionID, pServiceID, 1) 
			Application.UnLock
		End if
	End if

	' Try to authenticate from username cookie
	If Not IsSubscribed then
		UserInfoExists = CheckUserInfo()	'checks to see if the userinfo exists
		if bDebugPrint then Response.Write "UName Cookie= " & UserInfoExists & "<BR>"
		If UserInfoExists then
			UserName = Request.Cookies("UserName")
			UserID = Request.Cookies("UserID")
			Call AuthenticateUser(CSWebUsersDBConnStr, UserName, UserID, pServiceID, pAuthenticateService)
			if Session("ServiceAccessCode_" & pServiceID) = 1 then
				Session("CSWebUsers_UserName") = UserName
			End if
		End if
	End if
End Sub

'**********************************************************************************************
'This function Checks for the existence of the Username and UserID cookies which are used
'for authentication.
function CheckUserInfo()
	If Len(Request.Cookies("UserName")) > 0 and Len(Request.Cookies("UserID")) > 0 then
		CheckUserInfo = True
	Else
		CheckUserInfo = False
	End If	
End function

'**********************************************************************************************
'This function Checks for the existence of the subscriber id cookie or request variable used
'for authentication.
function GetSubscriptionID()
	Dim  SubscriptionID
	SubscriptionID = 0
	If Request.QueryString("SubscriptionID")> 0 then
		SubscriptionID = Request.QueryString("SubscriptionID")
	Elseif Len(Request.Cookies("SubscriptionID" & gServiceID)) > 0 then
		SubscriptionID = Request.Cookies("SubscriptionID" & gServiceID)
	End if	
	GetSubscriptionID	= SubscriptionID
End function

'**********************************************************************************************
'This function calls the appropriate Service checking based on the authenticate service variable
Sub AuthenticateUser(ConnStr, UserName, UserID, ServiceID, AuthenticateService)
	
	If AuthenticateService then
		Session("ServiceAccessCode_" & ServiceID) = CheckServiceAccess(ConnStr, UserName, UserID, ServiceID)
	Else
		Session("ServiceAccessCode_" & ServiceID) = CheckUser(ConnStr, UserName, UserID)
	End If 
End Sub


'**********************************************************************************************
'This function calls the appropriate Service checking based on the authenticate service variable
Sub AuthenticateSubscriber(ConnStr, SubscriptionID, ServiceID, AuthenticateService)
	
	If AuthenticateService then
		Session("ServiceAccessCode_" & ServiceID) = CheckSubscriberAccess(ConnStr, SubscriptionID, ServiceID)
	Else
		Session("ServiceAccessCode_" & ServiceID) = CheckSubscriber(ConnStr, SubscriptionID)
	End If 
End Sub


'**********************************************************************************************
'This function authenticates a user for a  particular service
function CheckServiceAccess(ConnStr, UserName, UserID, ServiceID)

	Set cmdCheckServiceAccess = Server.CreateObject("ADODB.Command")
	
	With cmdCheckServiceAccess
		.ActiveConnection = ConnStr
		.CommandText = "CS_CheckServiceAccess"
		
		.CommandType = AdCmdStoredProc
		
		.Parameters.Append .CreateParameter ("RETURN_VALUE", adInteger, adParamReturnValue)
		.Parameters.Append .CreateParameter ("@UserName", adVarChar, adParamInput, 100)
		.Parameters.Append .CreateParameter ("@UserID", adInteger, adParamInput)	
		.Parameters.Append .CreateParameter ("@ServiceID", adInteger, adParamInput)
		.Parameters.Append .CreateParameter ("@Status", adInteger, adParamOutput)
		
		.Parameters("@UserName") = UserName
		.Parameters("@UserID") = UserID 
		.Parameters("@ServiceID") = ServiceID

		.Execute lngRecs, adExecuteNoRecords
		
		CheckServiceAccess = .Parameters("@Status")
		If bDebugPrint then Response.Write "ServiceAccessCode_" & ServiceID & " = " & .Parameters("@Status") & "<BR>"
	End With
end function


'**********************************************************************************************
'This function authenticates the validity of a subscription ID.  On success it writes subscriptionId cookie
function CheckSubscriberAccess(ConnStr, SubscriptionID, ServiceID)

	Set cmdCheckServiceAccess = Server.CreateObject("ADODB.Command")
	
	With cmdCheckServiceAccess
		.ActiveConnection = ConnStr
		.CommandText = "CS_CheckSubscriptionAccess"
		
		.CommandType = AdCmdStoredProc
		
		.Parameters.Append .CreateParameter ("RETURN_VALUE", adInteger, adParamReturnValue)
		.Parameters.Append .CreateParameter ("@SubscriptionID", adInteger, adParamInput)	
		.Parameters.Append .CreateParameter ("@ServiceID", adInteger, adParamInput)
		.Parameters.Append .CreateParameter ("@Status", adInteger, adParamOutput)
		
		.Parameters("@SubscriptionID") = SubscriptionID
		.Parameters("@ServiceID") = ServiceID
		
	
		.Execute lngRecs, adExecuteNoRecords
		
		if .Parameters("@Status") = 1 then
			Response.Cookies("SubscriptionID" & gServiceID) = SubscriptionID
			Response.Cookies("SubscriptionID" & gServiceID).Domain = "cambridgesoft.com"
			Response.Cookies("SubscriptionID" & gServiceID).Path = "/"
			Response.Cookies("SubscriptionID" & gServiceID).Expires = DateAdd("y", 30, Now)
		End if
		CheckSubscriberAccess = .Parameters("@Status")
	End With
End function

'**********************************************************************************************
'This function checks to see if someone is a real user or not
function CheckUser(ConnStr, UserName, UserID)

	Set cmdCheckUser = Server.CreateObject("ADODB.Command")
	With cmdCheckUser
		.ActiveConnection = ConnStr
		.CommandText = "CS_CheckUser"
		
		.CommandType = AdCmdStoredProc
		
		
		
		.Parameters.Append .CreateParameter ("RETURN_VALUE", adInteger, adParamReturnValue)
		.Parameters.Append .CreateParameter ("@UserName", adVarChar, adParamInput, 100)
		.Parameters.Append .CreateParameter ("@UserID", adInteger, adParamInput)	
		.Parameters.Append .CreateParameter ("@Status", adInteger, adParamOutput)
		
		
		.Parameters("@UserName") = UserName
		.Parameters("@UserID") = UserID 
	
		.Execute lngRecs, adExecuteNoRecords
		
		CheckUser = .Parameters("@Status")
	End With
End function

'**********************************************************************************************
'This function checks to see if someone is a real user or not
function CheckSubscriber(ConnStr, SubscriptionID)

	Set cmdCheckUser = Server.CreateObject("ADODB.Command")
	With cmdCheckUser
		.ActiveConnection = ConnStr
		.CommandText = "CS_CheckSubscriptionIDExists"
	
		.CommandType = AdCmdStoredProc
		
		.Parameters.Append .CreateParameter ("RETURN_VALUE", adInteger, adParamReturnValue)
		.Parameters.Append .CreateParameter ("@SubscriptionID", adInteger, adParamInput)	
		.Parameters.Append .CreateParameter ("@Status", adInteger, adParamOutput)
		
		.Parameters("@SubscriptionID") = SubscriptionID 
		
		.Execute lngRecs, adExecuteNoRecords
		If .Parameters("@Status") > 0 then
			CheckSubscriber = 1
		Else	
			CheckSubscriber = 0
		End if	 
	End With
End function


'**********************************************************************************************
'This function increments the concurrent user counter for a given subscriptionID/serviceID
function IncrementConcurrentUserCounter(ConnStr, SubscriptionID, ServiceID)

	Set cmd = Server.CreateObject("ADODB.Command")
	With cmd
		.ActiveConnection = ConnStr
		.CommandText = "CS_SubscriptionUserAdd"
		
		.CommandType = AdCmdStoredProc
		
		.Parameters.Append .CreateParameter ("RETURN_VALUE", adInteger, adParamReturnValue)
		.Parameters.Append .CreateParameter ("@SubscriptionID", adInteger, adParamInput)	
		.Parameters.Append .CreateParameter ("@ServiceID", adInteger, adParamOutput)
		
		.Parameters("@SubscriptionID") = SubscriptionID 
		.Parameters("@ServiceID") = ServiceID
		
		.Execute lngRecs, adExecuteNoRecords
		
		IncrementConcurrentUserCounter = lngRecs 
	End With
End function

'**********************************************************************************************
'This function changes the concurrent user counter for a given subscriptionID/serviceID
function ChangeConcurrentUserCounter(ConnStr, SubscriptionID, ServiceID, value)

	Set cmd = Server.CreateObject("ADODB.Command")
	With cmd
		.ActiveConnection = ConnStr
		.CommandText = "CS_ChangeConcurrentUserCounter"
		
		.CommandType = AdCmdStoredProc
		
		.Parameters.Append .CreateParameter ("RETURN_VALUE", adInteger, adParamReturnValue)
		.Parameters.Append .CreateParameter ("@SubscriptionID", adInteger, adParamInput)	
		.Parameters.Append .CreateParameter ("@ServiceID", adInteger, adParamInput)
		.Parameters.Append .CreateParameter ("@value", adInteger, adParamInput)
		.Parameters.Append .CreateParameter ("@CurrentUsers", adInteger, adParamOutput)
		.Parameters("@SubscriptionID") = SubscriptionID 
		.Parameters("@ServiceID") = ServiceID
		.Parameters("@value") = value
		
		.Execute lngRecs, adExecuteNoRecords
		
		ChangeConcurrentUserCounter =  .Parameters("@CurrentUsers")
	End With
End function


'**********************************************************************************************
'This function decrements the concurrent user counter for a given subscriptionID/serviceID
function ResetAllConcurrentUserCounters(ConnStr, ServiceID)

	Set cmd = Server.CreateObject("ADODB.Command")
	With cmd
		.ActiveConnection = ConnStr
		.CommandText = "CS_ResetAllConcurrentUserCounters"
		
		.CommandType = AdCmdStoredProc
		
		.Parameters.Append .CreateParameter ("RETURN_VALUE", adInteger, adParamReturnValue)	
		.Parameters.Append .CreateParameter ("@ServiceID", adInteger, adParamInput)
		.Parameters("@ServiceID") = ServiceID
		.Execute lngRecs, adExecuteNoRecords
		
		ResetAllConcurrentUserCounters = lngRecs 
	End With
End function

Sub CreateShopCartTable(dbkey,formgroup)
	Dim Cmd
	Dim sql
	Dim conn
	
	Set conn =GetNewConnection(dbkey, formgroup, "base_connection")
	
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = Conn
	
	sql = "SELECT csuserName from shoppingcart where 1=0"
	Cmd.CommandText = sql
	on error resume next
	Cmd.Execute
	if err.number <> 0 then
		err.Clear		
		Cmd.CommandType = adCmdText
		DBMSTYPE = GetUserSettingsSQLSyntax(dbkey, formgroup)
		Select Case(DBMSTYPE)

			Case "ORACLE"
					
					sql = "CREATE TABLE SHOPPINGCART ( " & _
					"	CSUSERNAME VARCHAR2(50) NOT NULL, " & _
					"	WDDXPACKET CLOB NULL, " & _
					"	LASTUPDATE DATE NULL, " & _
					"	constraint PK_SHOPCART primary key (CSUSERNAME))"
					
					Cmd.CommandText = sql
					Cmd.Execute
					 
					GrantOnCoreTableToAllRoles dbkey, Conn, "SHOPPINGCART"
					
					
				Case "ACCESS"
				
					sql = "CREATE TABLE SHOPPINGCART ( " & _
					"	CSUSERNAME CHAR(50) constraint pk_shopcart PRIMARY KEY, " & _
					"	WDDXPACKET MEMO NULL, " & _
					"	LASTUPDATE DATETIME NULL)" 
					
					Cmd.CommandText = sql
					Cmd.Execute
		End Select
		if err.number <> 0 or Conn.Errors.Count > 0 then
			Logaction("ShopCart table not created" & err.number & err.Description)
		end if
	end if	
	Set Cmd = Nothing
End Sub

</script>
