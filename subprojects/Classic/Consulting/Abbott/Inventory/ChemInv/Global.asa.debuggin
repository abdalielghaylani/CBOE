<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cs_security/cs_security_login_utils_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/cs_security/cs_security_utils_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/ado.inc" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/server_const_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/manage_user_settings_vbs.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/manage_queries.asp" -->
<!--#INCLUDE VIRTUAL = "/cfserverasp/source/app_startup_vbs.asp" -->
<OBJECT RunAt="Server" Scope="Application" Id="editable_tables_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="custom_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="custom_plate_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="custom_well_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="custom_checkin_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="custom_request_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="req_custom_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="req_custom_plate_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="req_custom_well_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="req_custom_checkin_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="req_custom_request_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="alt_ids_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="req_alt_ids_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="unique_alt_ids_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Application" Id="reg_fields_dict" ProgID="Scripting.Dictionary"></OBJECT>

<OBJECT RunAt="Server" Scope="Session" Id="multiSelect_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Session" Id="plate_multiSelect_dict" ProgID="Scripting.Dictionary"></OBJECT>
<OBJECT RunAt="Server" Scope="Session" Id="PostRelay_dict" ProgID="Scripting.Dictionary"></OBJECT>

<SCRIPT LANGUAGE="vbscript" RUNAT="server">
'Copyright 1998-2002, CambridgeSoft Corp., All Rights Reserved
Dim APP_INI_ERRORS
Dim DB_INI_ERRORS
Dim vid_debug

vid_debug = false
cowsFile = "cows"
on error resume next
Set INIVAR= Server.CreateObject("cowsUtils.cowsini") 
if err.number > 0 then RaiseAppError "cowsUtils didn't initialize", err.number, err.description
on error goto 0
'**************************
'Functions and Subs occuring when a user Application starts and ends
'Main functions:
'	Application_OnStart	Runs once when the first page of your application is run For the first time by any user
'	Application_OnEnd		Runs once when the web server shuts down
Sub Application_OnStart

	Application("appkey") = "cheminv"
	Application("appTitle") = "Inventory Enterprise"

	'set application values find in cows.ini file
	Application("ServerDrive")= GetINIValue( "required", "GLOBALS", "SERVER_DRIVE", "cows", cowsFile)
	Application("ServerRoot")= GetINIValue( "required", "GLOBALS", "SERVER_DIR", "cows", cowsFile)
	Application("DocumentRoot")= GetINIValue( "required", "GLOBALS", "DOC_ROOT", "cows", cowsFile)
	Application("COWSRoot")= GetINIValue( "optional", "GLOBALS", "COWS_ROOT", "cows", cowsFile)
	'!DGB! debug change
	if vid_debug then
		Application("COWSRoot")=""
	End if
	Application("COWSVersion") = GetINIValue( "required", "GLOBALS", "COWS_VERSION", "cows", cowsFile)
	Application("NumberCurrentUsers") = 0
	
	' Read the servers plugin threshold
	Application("CD_PLUGIN_THRESHOLD")=GetINIValue( "optional", "GLOBALS", "CD_PLUGIN_THRESHOLD", "chemoffice", "chemoffice")
	if (Application("CD_PLUGIN_THRESHOLD")="INIEmpty" or Application("CD_PLUGIN_THRESHOLD") = "NULL" or Application("CD_PLUGIN_THRESHOLD") = "") then
		Application("CD_PLUGIN_THRESHOLD")="5.1"
	end if
	Application("CD_PLUGIN_DOWNLOAD_PATH")=GetINIValue( "optional", "GLOBALS", "CD_PLUGIN_DOWNLOAD_PATH", "chemoffice", "chemoffice")
	if (Application("CD_PLUGIN_DOWNLOAD_PATH")="INIEmpty" or Application("CD_PLUGIN_DOWNLOAD_PATH") = "NULL" or Application("CD_PLUGIN_DOWNLOAD_PATH") = "") then
		Application("CD_PLUGIN_DOWNLOAD_PATH")="/chemoffice/chemoffice_download.asp"
	end if	

	'exit application if errors where found in the above variables
	'create global objects used for searching
	CreateGlobalAppObjects()
	
	LogAction("--------------- START LOGGING TIME ------------------------")
	
	'Get all inivalues for the web application
	startTime = Now()
	GetAppINIValues()
	LogAction("GetAppINIValues:" & DateDiff("s",startTime,Now()))

	startTime = Now()
	GetConfigINIValues()
	LogAction("GetConfigINIValues:" & DateDiff("s",startTime,Now()))
	if Not APP_INI_ERRORS <> ""  then 
	
		'create application temp directory
		startTime = Now()
		CreateAppDir()
		LogAction("CreateAppDir:" & DateDiff("s",startTime,Now()))

		'get db information and set values to application objects
		
		startTime = Now()
		GetAllDBINIValues()
		LogAction("GetAllDBINIValues:" & DateDiff("s",startTime,Now()))
		
		if Not DB_INI_ERRORS <> ""  then 
			SetINIDate("app")

			startTime = Now()
			SetDbFormgroupTable()
			LogAction("SetDbFormgroup:" & DateDiff("s",startTime,Now()))
			GetAPIErrorTable()

			startTime = Now()
			Application("ContainerFieldMap") = GetContainerFieldMap()
			LogAction("ContainerFieldMap:" & DateDiff("s",startTime,Now()))

			startTime = Now()
			Application("PlateFieldMap") = GetPlateFieldMap()	
			LogAction("PlateFieldMap:" & DateDiff("s",startTime,Now()))

			startTime = Now()
			Application("WellFieldMap") = GetWellFieldMap()
			LogAction("WellFieldMap:" & DateDiff("s",startTime,Now()))
			'Initialize the hitlist tables. If they are not found they are created.
			
			startTime = Now()
			AppInitialize()
			LogAction("AppInitialize:" & DateDiff("s",startTime,Now()))
			
			startTime = Now()
			Application("BatchFieldMap") = GetBatchFieldMap()
			LogAction("BatchFieldMap:" & DateDiff("s",startTime,Now()))
			
		else
			'set app_ini_errors to db_ini errors so session_onstart will do the write thing and abandon the session.
			APP_INI_ERRORS=DB_INI_ERRORS
			'mark app for reload.The application on_start will not run again until the next user stasrts a session. Seeing that
			'the cfserver.ini dates have changed from what is in Application("iniDate" & app) will call for running all the routines in app_onstart again.
			'however error checking will continue and the app will not start if all the errors are not cleare.
			MarkForReload("app")
		end if
	else
		MarkForReload("app")
	end if
	
	LogAction("--------------- END LOGGING TIME ------------------------")
	
End Sub

Sub AppInitialize()

	AppInitAllTables()
	
	' Load Reg fields and comments into reg_fields_dict
	if Application("RegServerName") <> "NULL" then
		LoadRegFieldsDict()
	End if

	
End Sub

'get server globals from [GLOBALS] section in application cfserver.ini file 
Sub GetAppINIValues()
	Application("AppPath")= Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot") & "\" & Application("COWSRoot") & "\" & Application("appkey")
	Application("CODirPath")= Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot") & "\" & Application("COWSRoot") & "\"
	Application("logPath") = Application("ServerDrive") & "\"&  Application("ServerRoot") & "\" &  Application("DocumentRoot") & "\" 

	'!DGB! debug change
	if vid_debug then
		Application("AppPath")= Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot") & "\" & Application("appkey")
		Application("CODirPath")= Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot")
	End if
	Application("AppPathHTTP")= "/" & Application("appkey")
	
	Application("mainwindow")=GetINIValue( "optional", "GLOBALS", "MAIN_WINDOW", "web_app", "cfserver")
	if Application("mainwindow") = "" then
		Application("mainwindow") = "top.frames[""main""]"
	end if
	if Application("mainwindow") = "no_frames" then
		Application("mainwindow") = "self"
	end if
	Application("nav_bar_window")=GetINIValue( "optional", "GLOBALS", "NAV_BAR_WINDOW", "web_app", "cfserver")
	if Application("nav_bar_window") = "" then
		Application("nav_bar_window") = "top.frames[""navbar""]"
	end if
	if Application("nav_bar_window") = "no_frames" then
		Application("nav_bar_window") = "self"
	end if
	Application("user_info_window")=GetINIValue( "optional", "GLOBALS", "USER_INFO_WINDOW", "web_app", "cfserver")
	if Application("user_info_window") = "" then
		Application("user_info_window") = "top.frames[""userinfo""]"
	end if
	if Application("user_info_window") = "no_frames" then
		Application("user_info_window") = "self"
	end if
	Application("BODY_BACKGROUND") = GetINIValue( "required", "GLOBALS", "USERWINDOWBACKGROUND", "web_app", "cfserver")
	Application("TempDirName") = GetINIValue( "required", "GLOBALS", "TEMP_DIR_NAME", "web_app", "cfserver")
	Application("TempDirFullPath") = GetINIValue( "required", "GLOBALS", "TEMP_DIR_PATH", "web_app", "cfserver")
	Application("ServerSource") =Application("ServerDrive") & "\" & Application("ServerRoot") & "\" & Application("COWSRoot") & "\cows_source\cfserverasp\source"
	Application("AppTempDirPath")= Application("TempDirFullPath")& "\" & Application("appkey")
	Application("AppTempDirPathHTTP") = "/" & Application("TempDirName") & "/" & Application("appkey")
	Application("Date_Format") = GetINIValue("required", "GLOBALS", "DATE_FORMAT", "web_app", "cfserver")
	Select Case Application("Date_Format")
		Case "8"
			Application("Date_Format_String") = "MM/DD/YYYY"
		Case "9"
			Application("Date_Format_String") = "DD/MM/YYYY"
		Case "10"
			Application("Date_Format_String") = "YYYY/MM/DD"
	End Select
	
	Application("NavButtonGifPath") = GetINIValue( "required", "GLOBALS", "NAV_BUTTONS_GIF_PATH", "web_app", "cfserver")
	' Global database support is toggled from invconfig.ini
	'Application("AllowGlobalSearch") = CBool( lcase(GetIniValue("optional", "APPLICATION", "ALLOW_GLOBAL_SEARCH", "web_app", "invconfig")) = "true")
	Application("RegServerName") = GetIniValue("optional", "CHEMREG", "REG_SERVER_NAME", "web_app", "invconfig")
	Application("ACXServerName") = GetIniValue("optional", "CHEMACX", "ACX_SERVER_NAME", "web_app", "invconfig")
	Application("InvServerName") = GetIniValue("optional", "APPLICATION", "INV_SERVER_NAME", "web_app", "invconfig")
	Application("DBNames") = GetINIValue( "required", "GLOBALS", "DB_Names", "web_app", "cfserver")
	Application("GlobalSearchDBs") = GetINIValue( "optional", "GLOBALS", "GLOBAL_SEARCH_DBS", "web_app", "cfserver")
	if Application("RegServerName") <> "NULL" then
		Application("DBNames") = Application("DBNames") & ",invreg"
		Application("GlobalSearchDBs") = Application("GlobalSearchDBs") & ",invreg"
	End if
	if Application("ACXServerName") <> "NULL" then
		Application("DBNames") = Application("DBNames") & ",invacx"
		Application("GlobalSearchDBs") = Application("GlobalSearchDBs") & ",invacx"
	End if
	
	Application("GlobalBaseDB")=GetINIValue( "optional", "GLOBALS", "GLOBAL_SEARCH_BASE_DB", "web_app", "cfserver")
	Application("CDX_CACHING")=GetINIValue( "optional", "GLOBALS", "CDX_CACHING", "web_app", "cfserver")
	if Application("CDX_CACHING")= "INIEmpty" then Application("CDX_CACHING")="true"
	'!DGB! 09/17/01 enforce concurrent user limit
	Application("MaxUsers") = GetINIValue( "optional", "GLOBALS", "PARTITION_THRESH", "web_app", "cfserver")
	'set to default if the entry is not in the ini file
	
	Application("DISPLAY_GIFS_ONLY_LIST_NS")=GetINIValue( "optional", "GLOBALS", "DISPLAY_GIFS_ONLY_LIST_NS", "web_app", "cfserver")
	if Application("DISPLAY_GIFS_ONLY_LIST_NS")= "INIEmpty" then Application("DISPLAY_GIFS_ONLY_LIST_NS")=0
	Application("DISPLAY_GIFS_ONLY_FORM_NS")=GetINIValue( "optional", "GLOBALS", "DISPLAY_GIFS_ONLY_FORM_NS", "web_app", "cfserver")
	if Application("DISPLAY_GIFS_ONLY_FORM_NS")= "INIEmpty" then Application("DISPLAY_GIFS_ONLY_FORM_NS")=0
	Application("DISPLAY_GIFS_ONLY_LIST_IE")=GetINIValue( "optional", "GLOBALS", "DISPLAY_GIFS_ONLY_LIST_IE", "web_app", "cfserver")
	if Application("DISPLAY_GIFS_ONLY_LIST_IE")= "INIEmpty" then Application("DISPLAY_GIFS_ONLY_LIST_IE")=0
	Application("DISPLAY_GIFS_ONLY_FORM_IE")=GetINIValue( "optional", "GLOBALS", "DISPLAY_GIFS_ONLY_FORM_IE", "web_app", "cfserver")
	if Application("DISPLAY_GIFS_ONLY_FORM_IE")= "INIEmpty" then Application("DISPLAY_GIFS_ONLY_FORM_IE")=0

	Application("UserWindowBackground")=GetINIValue( "optional", "GLOBALS", "UserWindowBackground", "web_app", "cfserver")
	'set to default if the entry is not in the ini file
	if Application("UserWindowBackground")= "INIEmpty" then Application("UserWindowBackground")="/CFServerAsp/Source/graphics/Fine_Speckled.gif="

	Application("APP_TYPE")=GetINIValue( "optional", "GLOBALS", "APP_TYPE", "web_app", "cfserver")
	'set to default if the entry is not in the ini file
	
	if Application("APP_TYPE")= "INIEmpty" then Application("APP_TYPE")=""
	'LJB 4/19 'add and admin required flag 
	Application("ADMIN_REQUIRED")=GetINIValue( "optional", "GLOBALS", "ADMIN_REQUIRED", "web_app", "cfserver")
	'set to default if the entry is not in the ini file
	
	if Application("ADMIN_REQUIRED")= "INIEmpty" then Application("ADMIN_REQUIRED")=""
		
	If UCase(Application("APP_TYPE")) = "CHEMINV" then
		Application("ORASCHEMANAME") =GetINIValue( "required", "CHEMINV", "ORASCHEMANAME", "web_app", "cfserver")
		Application("CHEMINV_USERNAME") =GetINIValue( "required", "CHEMINV", "CHEMINV_USERNAME", "web_app", "cfserver")
		Application("CHEMINV_PWD")=GetINIValue( "required", "CHEMINV", "CHEMINV_PWD", "web_app", "cfserver")
		Application("INVREG_USERNAME") =GetINIValue( "required", "CHEMINV", "INVREG_USERNAME", "web_app", "cfserver")
		Application("INVREG_PWD")=GetINIValue( "required", "CHEMINV", "INVREG_PWD", "web_app", "cfserver")
		Application("INVACX_USERNAME") =GetINIValue( "required", "CHEMINV", "INVACX_USERNAME", "web_app", "cfserver")	
		Application("INVACX_PWD")=GetINIValue( "optional", "CHEMINV", "INVACX_PWD", "web_app", "cfserver")
		Application("DBA_USERNAME")=GetINIValue( "required", "CHEMINV", "DBA_USERNAME", "web_app", "cfserver")
		Application("DBA_PWD")=GetINIValue( "required", "CHEMINV", "DBA_PWD", "web_app", "cfserver")
		Application("SEC_USERNAME")=GetINIValue( "required", "CHEMINV", "SEC_USERNAME", "web_app", "cfserver")
		Application("SEC_PWD")=GetINIValue( "required", "CHEMINV", "SEC_PWD", "web_app", "cfserver")
		Application("ORA_SQLLDRPATH") = GetINIValue( "required", "CHEMINV", "ORA_SQLLDRPATH", "web_app", "cfserver")
		Application("ORA_SERVICENAME")=GetINIValue( "required", "CHEMINV", "ORA_SERVICENAME", "web_app", "cfserver")
		Application("PRIV_TABLE_NAME")=GetINIValue( "required", "CHEMINV", "PRIV_TABLE_NAME", "web_app", "cfserver")
		Application("TABLES_WITH_BASE64_CDX") =GetINIValue( "required", "CHEMINV", "TABLES_WITH_BASE64_CDX", "web_app", "cfserver")
	End if
	GetSecurityINIValues()

	'Grant select on reg tables
	'if Application("RegServerName") <> "NULL" then
	'	ConnStr = "FILE NAME=" & Application("CS_SECURITY_UDL_PATH") & ";User ID=" & Application("SEC_USERNAME") & ";Password=" & Application("SEC_PWD")
	'	Set Conn = Server.CreateObject("ADODB.Connection")
	'	SQL = "DECLARE vCount number; BEGIN SELECT count(*) into vCount FROM all_tab_privs WHERE table_schema = 'REGDB' AND table_name = 'STRUCTURES' AND GRANTEE='CHEMINVDB2'; IF vCount = 0 THEN execute immediate 'GRANT select ON regdb.reg_numbers TO cheminvdb2,inv_browser'; execute immediate 'GRANT select on regdb.structures to cheminvdb2,inv_browser'; execute immediate 'GRANT select ON regdb.batches TO cheminvdb2,inv_browser'; execute immediate 'GRANT select ON regdb.alt_ids TO cheminvdb2,inv_browser';  execute immediate 'GRANT select ON regdb.compound_molecule TO cheminvdb2,inv_browser'; END IF; END;"
	'	Conn.Open ConnStr
	'	Conn.Execute SQL
	'End if
	
	
End Sub




'close global objects
Sub CleanUp()
	'close cowsutil global object
	if isObject(INIVAR) then
		Set INIVAR = Nothing
	end if
End Sub

'create chemfinder, lockit and base64 objects
Sub CreateGlobalAppObjects()
	if APP_INI_ERRORS <> "" then exit sub
	on error resume next
	'create the object that decodes cdx fiels encoded in base64 that are submitted from a form
	Set Application("myDecoder") = Server.CreateObject("Base64Decode.Decode")
	'exit application if errors where found in the above variables
	if err.number > 0 then RaiseAppError "Base64Decode Error", err.number, err.description
	on error goto 0
End Sub


Sub CreateAppDir()
	if APP_INI_ERRORS <> "" then exit sub
	on error resume next
	Set apptempdir = Server.CreateObject("Scripting.FileSystemObject")
	'check to see if the application temporary directory exists, if not, create it and add appropriate files.
	if Application("CDX_CACHING") = "false" then
		If  apptempdir.FolderExists(Application("AppTempDirPath")) then
			apptempdir.DeleteFolder(Application("AppTempDirPath"))
		end if
	end if
	If not apptempdir.FolderExists(Application("AppTempDirPath")) then
		apptempdir.CreateFolder(Application("AppTempDirPath"))
	end if
	if err.number > 0 then RaiseAppError "App dir not created", err.number, err.description
		apptempdir = ""
	Set apptempdir = Nothing
End Sub
'get datbase specific values and create necessary Application variables

Sub GetAllDBINIValues()
	Dim dbnamestring 
	Dim DBNames 
	Dim currentDB
	'get web form directories from ini file to establish the Application("dbcount")
	DBNames = Application("DBNames")
	dbnamestring = Split(DBNames, ",", -1)
	'start getting the information from the inifile based on the number of database in the web appliciaton
	for i = 0 to UBound(dbnamestring)
		LogAction("CurrentDB:" & currentDB)
		currentDB = dbnamestring(i)
		'start getting values from ini file
		'on error resume next
		GetSingleDB(currentDB)
		LogAction("After GetSingleDB:" & currentDB)
		'DB_INI_ERRORS = ""
	next 'i for a db
	
	'set dates for ini files
End Sub
		
Sub GetSingleDB(currentDB)
	LogAction("GetGlobalInfoValues:")
	GetGlobalInfoValues(currentDB)
	LogAction("GetTableGroup:")
	GetTableGroupInfo(currentDB)
	LogAction("GetFieldMapGroup:")
	GetFieldMapGroupInfo(currentDB)
	LogAction("GetChemConnGroup:")
	GetChemConnGroupInfo(currentDB)
	LogAction("GetADOConnGroup:")
	GetADOConnGroupInfo(currentDB)
	
	LogAction("After GetADOConnGroup:")
	'open objects and test connections
	if NOT DB_INI_ERRORS <> "" then CheckADOConnectInfo(currentDB)
	LogAction("After CheckADOConnectInfo(currentDB)")
	if NOT DB_INI_ERRORS <> "" then GetTableRecordCounts(currentDB)
	LogAction("After GetTableRecordCounts(currentDB)")
	if NOT DB_INI_ERRORS <> "" then  CreateDBTempDir(currentDB)
	LogAction("After CreateDBTempDir(currentDB)")
	
	if NOT DB_INI_ERRORS <> "" then
		Application("DBLoaded" & currentDB) = True
		 SetINIDate(currentDB)
	else
		Application("DBLoaded" & currentDB) = False
		LogAction("MarkForReload")
		MarkForReload(currentDB) 'set stored ini date to nothing so next reload will be forced
		LogAction("CreateLog")
		CreateLog(currentDB)
	end if
End Sub

Function GetLiveConnection (ByVal connection_name, ByVal currentDB)
		conn_info_array = Application(connection_name & currentDB)
		conn_type=conn_info_array(0)
		conn_string=conn_info_array(1)
		conn_conn_timeout=conn_info_array(2)
		conn_command_timeout=conn_info_array(3)
		conn_username=conn_info_array(4)
		conn_password=conn_info_array(5)
		if conn_type = "NULL" or conn_type = "" or conn_type= "OLEDB" then
			full_conn_string = conn_string & "; " & conn_username & "; " & conn_password		
		else
			full_conn_string = conn_type & "=" & conn_string & "; " & conn_username & "; " & conn_password		
		end if				
		Set DataConn=Server.CreateObject("ADODB.Connection")
		DataConn.ConnectionTimeout = conn_conn_timeout
		DataConn.CommandTimeout = conn_command_timeout
		on error resume next
		DataConn.Open full_conn_string
		Set GetLiveConnection = DataConn	
End Function



Sub GetTableRecordCounts(currentDB)
	if Application("LoginRequired" & currentDB) = 0 then
		Table_groups_str=Application("TableGroups" & currentDB)
		table_groups_array = split(Table_groups_str, ",", -1)
		LogAction(Table_groups_str)
		for i = 0 to UBound(table_groups_array)
			myCount=0
			theCount=0
			table_group_name = Trim(table_groups_array(i))
			TableGroupArray=Application(table_group_name & currentDB)
			
			basetable = TableGroupArray(0)
			TableArray = Application(basetable & currentDB)
			ADOConnName = TableArray(9)
			on error resume next
			Set DataConn = GetNewConnection(currentDB, "base_form_group", ADOConnName)
			'Set RS = Server.CreateObject("ADODB.Recordset")
			sql = "Select Count(*) From " & basetable
			LogAction(uCase(basetable) & ": " & sql)
			
			if basetable <> "inv_vw_reg_batches" then
			Set RS = DataConn.Execute(sql)
			
			if err.number > 0 then
				theCount = 0
				Set DataConn = Nothing
				DataConn.Close
				Set RS = Nothing
				
			else
				if Not (RS.BOF AND RS.EOF)then
					RS.MoveFirst
					theCount=RS.Fields(0)
					RS.Close
				else
					theCount = 0
				end if
				Set RS = Nothing
				DataConn.Close
				Set DataConn = Nothing
			End if
			end if
			Application(basetable & "RecordCount" & currentDB) = theCount
			if i = 0 then 
				Application("DBRecordCount" & currentDB) = theCount
			end if
		next 'i
	else
		Application("DBRecordCount" & currentDB) = ""
	end if
End sub


Sub GetADOConnGroupInfo(ByVal currentDB)
		ADOconnections_str = GetINIValue( "required", "GLOBALS", "ADO_CONNECTION_NAMES", "web_app", currentDB)
		Application("ADOconnections_str") = ADOconnections_str
		LogAction("ADOconnections_str:" & ADOconnections_str)
		ADOconnection_array = split(ADOconnections_str, ",", -1)
		for i = 0 to UBound(ADOconnection_array)
			conn_name = Trim(ADOconnection_array(i))
			LogAction("conn_name:" & conn_name)
			Application(conn_name & currentDB) = BuildConnInfo(conn_name, currentDB)
		next 'i
End Sub

Sub CheckADOConnectInfo(currentDB)
		ADOconnections_str = Application("ADOconnections_str")
		ADOconnection_array = split(ADOconnections_str, ",", -1)
		for i = 0 to UBound(ADOconnection_array)
			conn_name = Trim(ADOconnection_array(i))
			GetConnection conn_name, currentDB
		next	
End Sub
Sub GetTableGroupInfo(ByVal currentDB)
		table_groups_str = GetINIValue( "required", "GLOBALS", "TABLE_GROUPS", "web_app", currentDB)
		Application("TableGroups" & currentDB) = table_groups_str
		table_groups_array = split(Table_groups_str, ",", -1)
		for i = 0 to UBound(table_groups_array)
			table_group_name = Trim(table_groups_array(i))
			Application(table_group_name & currentDB) = BuildTableGroup(table_group_name, currentDB)					
		next 'i
End Sub

Function BuildTableGroup(ByVal table_group_name, ByVal currentDB)

		BaseTable=GetINIValue( "required",  UCase(table_group_name), "BASE_TABLE", "web_app", currentDB)
		MolTable=GetINIValue( "required", UCase(table_group_name), "MOLECULE_TABLE", "web_app", currentDB)
		SQLOrder=GetINIValue( "required",  UCase(table_group_name), "TABLE_SQL_ORDER", "web_app", currentDB)
		Dim TableGroupArray
		ReDim TableGroupArray(2)
		TableGroupArray(0) = BaseTable
		TableGroupArray(1) = MolTable
		TableGroupArray(2) = SQLOrder
		BuildTableGroup= TableGroupArray
End Function

Sub GetFieldMapGroupInfo(ByVal currentDB)
		field_map_groups_str = GetINIValue( "required", "GLOBALS", "FIELD_MAP_GROUPS", "web_app", currentDB)
		if field_map_groups_str = "NULL" then field_map_groups_str = ""
		Application("FieldMapGroups" & currentDB) = field_map_groups_str
		field_map_groups_array = split(field_map_groups_str, ",", -1)
		for i = 0 to UBound(field_map_groups_array)
			field_map_group_name = Trim(field_map_groups_array(i))
			Application(field_map_group_name & currentDB) = BuildFieldMapGroup(field_map_group_name, currentDB)					
		next 'i
End Sub

Function BuildFieldMapGroup(ByVal field_map_group_name, ByVal currentDB)

		StructureMap=GetINIValue( "required",  UCase(field_map_group_name), "STRUC_FIELD_MAP", "web_app", currentDB)
		MWMap=GetINIValue( "required", UCase(field_map_group_name), "MW_FIELD_MAP", "web_app", currentDB)
		FormulaMap=GetINIValue( "required",  UCase(field_map_group_name), "FORMULA_FIELD_MAP", "web_app", currentDB)
		
		for j = 1 to 100
		on error resume next
			Map = GetINIValue( "optional",  UCase(field_map_group_name), "OTHER_FIELD_MAP" & j, "web_app", currentDB)
			if j>8 AND  Map = "NULL" then
				exit for
			else
				if Map = "NULL" then Map = ""
				if Map_Comb <> "" then
					Map_Comb= Map_Comb & ":" & Map
				else
					Map_Comb= Map
				end if
			end if
		err.clear()
		next
		OtherFieldMap = Map_Comb
		
		Dim FieldMapGroupArray
		ReDim FieldMapGroupArray(3)
		FieldMapGroupArray(0) = StructureMap
		FieldMapGroupArray(1) = FormulaMap
		FieldMapGroupArray(2) = MWMap
		FieldMapGroupArray(3) = OtherFieldMap
		
		
		BuildFieldMapGroup= FieldMapGroupArray		
		
End Function


Sub GetChemConnGroupInfo(ByVal currentDB)
		CHEMconnections_str = GetINIValue( "required", "GLOBALS", "CHEM_CONNECTION_NAMES", "web_app", currentDB)
		Application("CHEMconnections_str" & currentDB)=CHEMconnections_str
		CHEMconnection_array = split(CHEMconnections_str, ",", -1)
		for i = 0 to UBound(CHEMconnection_array)
			conn_name = Trim(CHEMconnection_array(i))
			Application(conn_name & currentDB) = BuildChemInfo(conn_name, currentDB)	
		next 'i
End Sub



Function checkPath(thepath)
	Set theFile = Server.CreateObject("Scripting.FileSystemObject")
	if theFile.FileExists(thepath) = True then
		checkPath = True
	else
		checkPath = false
	end if
	Set theFile = Nothing
	theFile = ""
End function


Function GetTimeStamp()
	MyTime = Now()
	MyDay = Date()
	date_stamp=Month(MyDate) & Day(MyDate) & Year(MyDate) & Hour(MyTime) & Minute(MyTime)
	GetTimeStamp = date_stamp
End Function



Sub GetGlobalInfoValues(currentDB)
		'Standard DB Variables
		Application("AboutWindow" & currentDB)=GetINIValue( "required", "GLOBALS", "ABOUT_WINDOW", "web_app", currentDB)
		Application("DisplayName" & currentDB)=GetINIValue( "required", "GLOBALS", "DISPLAY_NAME", "web_app", currentDB)
		Application("MaxHits" & currentDB) =  GetINIValue( "required", "GLOBALS", "MAXHITS", "web_app", currentDB)
		Application("DataBaseType" & currentDB) =  GetINIValue( "required", "GLOBALS", "DB_TYPE", "web_app", currentDB)
		Application("DBRecordCount" & currentDB) = GetINIValue( "required", "GLOBALS", "DB_RECORD_COUNT", "web_app", currentDB)
		Application("Prefs")=Application("AppPathHTTP") & "/prefs.asp"
		Application("About")=Application("AppPathHTTP") & "/about.asp"
		Application("HelpFile")=Application("AppPathHTTP") & "/help/help.asp"
		Application("NavBar")= Application("AppPathHTTP") & "/navbar.asp"
		
		'DEFAULT FORM PATHS 
		Application("DBPathHTTP" & currentDB) =Application("AppPathHTTP") & "/" & currentDB 
		Application("ActionForm" & currentDB)= Application("DBPathHTTP" & currentDB) & "/" &  currentDB &  "_action.asp"

		
		'get values for input and result forms for form groups - this includes reg system flags
		formgroups_str =  GetINIValue( "required", "GLOBALS", "FORM_GROUPS", "web_app", currentDB)
		form_group_array = split(formgroups_str, ",", -1)
		'DGB remember the formgroup list
		Application("form_group_array" & currentDB) = form_group_array
		for i = 0 to UBound(form_group_array)
			form_group_name = Trim(form_group_array(i))
			GetFormGroupValues form_group_name, currentDB
		next 'i
		
	
		
		'get table values
		tables_str= GetINIValue( "required", "GLOBALS", "TABLE_ALIASES", "web_app", currentDB)
		if Instr(UCase(tables_str), "ADD_LINES")>0 then
			tables_str=AppendToINIStr("GLOBALS", currentDB, tables_str,"TABLE_ALIASES" )
		end if
		Application("TableNames" & currentDB) = tables_str
		table_names_array = split(tables_str, ",", -1)

		for i = 0 to UBound(table_names_array)
			table_name = Trim(table_names_array(i))
			Application(table_name & currentDB) = GetTableValues(table_name, currentDB)	
		next 'i


		'get predefined subform lookups

		subform_view_str= GetINIValue( "optional", "GLOBALS", "SUBFORM_VIEW_NAMES", "web_app", currentDB)
		subform_view_names_array = split(subform_view_str, ",", -1)
		for i = 0 to UBound(subform_view_names_array)
			subform_view = Trim(subform_view_names_array(i))
			Application("SubFormView" & subform_view & currentDB) = GetSubFormViewValues(subform_view, currentDB)	
		next 'i
		
		'EXPORT HITS values that can be output using the export file feature
		Application("ExportHits" & currentDB)= Application("AppPathHTTP") & "/export_hits.asp"

		
		'TEMP FILE DIRECTORIES set paths to form tempdirectories
		Application("TempFileDirectory" & currentDB) =   Application("AppTempDirPath") & "\" & currentDB & "Temp\"
		Application("TempFileDirectoryHTTP" & currentDB) =  Application("AppTempDirPathHTTP") & "/" & currentDB & "Temp/"	
End Sub

Function BuildChemInfo(ByVal chem_conn_name, ByVal currentDB)

		StrucEngine=GetINIValue( "required",  UCase(chem_conn_name), "STRUC_ENGINE", "web_app", currentDB)
		StrucFormName=GetINIValue( "required", UCase(chem_conn_name), "STRUC_FORM_NAME", "web_app", currentDB)
		StrucFormPath= Application("AppPath") & "\" & currentDB & "\cfwforms\"  & StrucFormName
		BaseFromPath=StrucFormPath
		StrucDBpath=GetINIValue( "required",  UCase(chem_conn_name), "STRUC_DB_PATH", "web_app", currentDB)
		StrucTableName=GetINIValue( "required", UCase(chem_conn_name), "STRUC_TABLE_NAME", "web_app", currentDB)
		Application("StrucDBPath") = StrucDBpath
		'make sure forms can be opened and db is connected
		Dim ChemConnArray
		ReDim ChemConnArray(6)
		ChemConnArray(0) = StrucEngine
		ChemConnArray(1) = StrucFormName
		ChemConnArray(2) = StrucFormPath
		ChemConnArray(3) = StrucDBpath
		ChemConnArray(4) = StrucTableName
		ChemConnArray(5) = BaseFromPath
		'return array
		BuildChemInfo= ChemConnArray
End Function


Function BuildConnInfo(ByVal ado_conn_name, ByVal currentDB)
	conntype = GetINIValue( "required", UCase(ado_conn_name), "CONN_TYPE", "web_app", currentDB)
	conn_string = GetINIValue( "required", UCase(ado_conn_name), "CONNECTION_STRING", "web_app", currentDB)
	conn_conn_timeout = GetINIValue( "required", UCase(ado_conn_name), "CONNECTION_TIMEOUT", "web_app", currentDB)
	conn_command_timout = GetINIValue( "required", UCase(ado_conn_name), "COMMAND_TIMEOUT", "web_app", currentDB)
	conn_username = GetINIValue( "optional", UCase(ado_conn_name), "CONNECTION_USERNAME", "web_app", currentDB)
	conn_password = GetINIValue( "optional", UCase(ado_conn_name), "CONNECTION_PASSWORD", "web_app", currentDB)
	conn_dbms = GetINIValue( "optional", UCase(ado_conn_name), "DBMS", "web_app", currentDB)
	Application("UserIDKeyword") = GetINIValue( "optional", UCase(ado_conn_name), "USERID_KEYWORD", "web_app", currentDB)
	Application("PWDKeyword") = GetINIValue( "optional", UCase(ado_conn_name), "PWD_KEYWORD", "web_app", currentDB)
	if conn_dbms = "INIEmpty" then 
		conn_dbms = "ACCESS"
	end if
	'create array
	
	'Start LJB 4/19 get Admin password/username for table modification/deletions
		if Application("ADMIN_REQUIRED")="1" then
		'check to see if it is already poplulated -this may alrady have been grabbed from the Apptype section of the cfserver.ini file
			if Not Application("REG_USERNAME") <> "" then
				Application("REG_USERNAME") = GetINIValue( "optional", "GLOBALS", "REG_USERNAME", "web_app", "cfserver")
			end if
			if Not  Application("REG_PWD")<> "" then
				Application("REG_PWD") = GetINIValue( "optional", "GLOBALS", "REG_PWD", "web_app", "cfserver")
			end if
		else
			if Not Application(UCase(currentDB) & "_USERNAME") <> "" then
				Application(UCase(currentDB) & "_USERNAME")=  GetINIValue( "optional", "GLOBALS", currentDB & "_USERNAME", "web_app", "cfserver")
			end if
			if Not  Application(UCase(currentDB) & "_PWD")<> "" then
				Application(UCase(currentDB) & "_PWD") =  GetINIValue( "optional", "GLOBALS", currentDB & "_USERNAME", "web_app", "cfserver")
			end if
		end if
	'End LJB 4/19 additions
	
	Dim ConnArray
	ReDim ConnArray(7)
	ConnArray(0) = conntype
	ConnArray(1) = conn_string
	ConnArray(2) = conn_conn_timeout
	ConnArray(3) = conn_command_timeout
	ConnArray(4) = conn_username
	ConnArray(5) = conn_password
	ConnArray(6) = conn_dbms
	'return array
	BuildConnInfo= ConnArray
End Function

Function AppendToINIStr(ByVal section_name,ByVal currentDB, ByVal inputStr,ByVal key_name)
	Dim finalRelFields, NewEntry,AppendedStr,tempArray,tempArray2,theCount,lineIdent,tempINIEntry,NumAdditional
	if key_name = "OTHER_FIELD_MAP" then
		StrSeparator = ":"
		ItemSeparator = ","
	else
		StrSeparator = ","
		ItemSeparator = ";"
	end if
	tempArray = Split(inputStr, StrSeparator, -1)
	theCount = UBound(tempArray)
	lineIdent = tempArray(theCount)
	newArray = Split(lineIdent, ItemSeparator, -1)
	NumAdditional = newArray(1)
	if Not NumAdditional <> "" then 
		NumAdditional = 0
		finalRelfields = Replace(inputStr, StrSeparator & lineIdent, " ")
	end if
	if NumAdditional > 0 then
		For i = 1 to NumAdditional
			NewEntry =GetINIValue("optional",  UCase(section_name), UCase(key_name) & i, "web_app", currentDB)
			if AppendedStr <> "" then
				AppendedStr = AppendedStr & "," & NewEntry
			Else
				AppendedStr = NewEntry
			End if
		Next 'i
	finalRelfields = Replace(inputStr, lineIdent, AppendedStr)
	End if
	
	AppendToINIStr = finalRelFields

End Function

'set file paths for currentDB
Sub GetFormGroupValues(form_group_name, currentDB)

	InputFormPath =GetINIValue("required", UCase(form_group_name), "INPUT_FORM_PATH", "web_app", currentDB)
	InputFormMode =GetINIValue("required",  UCase(form_group_name), "INPUT_FORM_MODE", "web_app", currentDB)
	ResultFormPath =GetINIValue("required",  UCase(form_group_name), "RESULT_FORM_PATH", "web_app", currentDB)
	ResultFormMode =GetINIValue("required",  UCase(form_group_name), "RESULT_FORM_MODE", "web_app", currentDB)
	RelFields =GetINIValue("required",  UCase(form_group_name), "SEARCHABLE_ADO_FIELDS", "web_app", currentDB)
	if Instr(UCase(RelFields), "ADD_LINES")>0 then
		RelFields=AppendToINIStr(form_group_name, currentDB, RelFields,"SEARCHABLE_ADO_FIELDS" )
	end if
	if RelFields = "NULL" then RelFields = ""
		PluginValue =GetINIValue("required",  UCase(form_group_name), "PLUGIN_VALUE", "web_app", currentDB)
	if PluginValue = "NULL" then PluginValue = "False"
		FormGroupFlag=GetINIValue("required",  UCase(form_group_name), "FORM_GROUP_FLAG", "web_app", currentDB)
	if FormGroupFlag = "NULL" then FormGroupFlag = "NULL"
		StructureFields = GetINIValue("required",  UCase(form_group_name), "STRUCTURE_FIELDS", "web_app", currentDB)
	if StructureFields = "NULL" then StructureFields = ""
		MWFields = GetINIValue("required", UCase(form_group_name), "MW_FIELDS", "web_app", currentDB)
	if MWFields = "NULL" then MWFields = ""
		FormulaFields = GetINIValue("required",  UCase(form_group_name), "FORMULA_FIELDS", "web_app", currentDB)
	if FormulaFields = "NULL" then FormulaFields = ""
		SDFileFields = GetINIValue("required",  UCase(form_group_name), "SDFILE_FIELDS", "web_app", currentDB)
	if SDFileFields = "NULL" then SDFileFields = ""
		TableGroup=GetINIValue("required",  UCase(form_group_name), "TABLE_GROUP", "web_app", currentDB)
	if TableGroup = "NULL" then TableGroup = "base_table_group"
		RequiredFields=GetINIValue("required",  UCase(form_group_name), "REQUIRED_FIELDS", "web_app", currentDB)
	if RequiredFields = "NULL" then RequiredFields = ""
			NumListView=GetINIValue("required",  UCase(form_group_name), "NUM_LIST_VIEW", "web_app", currentDB)
	if NumListView = "NULL" then NumListView = 5
	
	Dim formgrouparray(15)
	formgrouparray(0)=RelFields
	formgrouparray(1)=InputFormPath
	formgrouparray(2)=ResultFormPath
	formgrouparray(3)=InputFormMode
	formgrouparray(4)=ResultFormMode
	formgrouparray(5)=PluginValue
	formgrouparray(6)=FormGroupFlag
	formgrouparray(7)=StructureFields
	formgrouparray(8)=MWFields
	formgrouparray(9)=FormulaFields
	formgrouparray(10)=SDFileFields
	formgrouparray(11)="NULL"
	formgrouparray(12)=TableGroup
	formgrouparray(13)=RequiredFields
	formgrouparray(14)=NumListView
	
	Application(form_group_name & currentDB) = formgrouparray
	
	Select Case formgroupflag
	Case "GLOBAL_SEARCH"
		Application(form_group_name & currentDB & "FieldMapGroup")=GetINIValue("required",  UCase(form_group_name), "FIELD_MAP_GROUP", "web_app", currentDB)
	Case "REG_COMMIT"
		Application(form_group_name & currentDB & "FieldMapGroup")=GetINIValue("required",  UCase(form_group_name), "FIELD_MAP_GROUP", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_MOLTABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegTempBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_TEMP_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegTempMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_TEMP_MOLTABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegBatchTable") =  GetINIValue( "required", UCase(form_group_name), "REG_BATCH_TABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegDuplicatesTable") =  GetINIValue( "required", UCase(form_group_name), "REG_DUPLICATES_TABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderFullCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_FULL_COMMIT", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderPartialCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_PARTIAL_COMMIT", "web_app", currentDB)	
	Case "REG_TEMP"
		Application(form_group_name & currentDB & "RegTempBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_TEMP_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegTempMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_TEMP_MOLTABLE", "web_app", currentDB)
	Case "COMMIT"
		Application(form_group_name & currentDB & "FieldMapGroup")=GetINIValue("required",  UCase(form_group_name), "FIELD_MAP_GROUP", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_MOLTABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegBatchTable") =  GetINIValue( "required", UCase(form_group_name), "REG_BATCH_TABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegDuplicatesTable") =  GetINIValue( "required", UCase(form_group_name), "REG_DUPLICATES_TABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderFullCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_FULL_COMMIT", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderPartialCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_PARTIAL_COMMIT", "web_app", currentDB)
	Case "ADD_RECORD"
		Application(form_group_name & currentDB & "RegCommitBaseTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_BASETABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "RegCommitMolTable") =  GetINIValue( "required", UCase(form_group_name), "REG_COMMIT_MOLTABLE", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderFullCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_FULL_COMMIT", "web_app", currentDB)
		Application(form_group_name & currentDB & "TableOrderPartialCommit") =  GetINIValue( "required", UCase(form_group_name), "TABLE_ORDER_PARTIAL_COMMIT", "web_app", currentDB)

	Case "INDEX_SEARCH"
		Application(form_group_name & currentDB & "IndexDB") =  GetINIValue( "required", UCase(form_group_name), "INDEX_DB", "web_app", currentDB)

	Case "SINGLE_SEARCH"

	End Select
	
End Sub


'get the values for each table for the currentDB and set the HIGHESTPRIORITY variable for creating priority list
Function GetTableValues(ByVal table_name, ByVal currentDB)
		'actual table name
		TableRealName = GetINIValue( "required", UCase(table_name), "TABLE_NAME", "web_app", currentDB)
		'ado related values
		RelFields=GetINIValue( "required",  UCase(table_name), "RELATIONAL_FIELDS", "web_app", currentDB)
		if Instr(UCase(RelFields), "ADD_LINES")>0 then
			RelFields=AppendToINIStr(form_group_name, currentDB, RelFields,"RELATIONAL_FIELDS" )
		end if
		PrimaryKey=GetINIValue( "required",  UCase(table_name), "PRIMARY_KEY", "web_app", currentDB)
		SQLSyntax=GetINIValue( "required", UCase(table_name), "SQL_SYNTAX", "web_app", currentDB)
		SelectKeyWord=GetINIValue( "required",  UCase(table_name), "SELECT_KEYWORD", "web_app", currentDB)
		SelectAdditional=GetINIValue( "required",  UCase(table_name), "SELECT_ADDITIONAL", "web_app", currentDB)
		SelectJoin=GetINIValue( "required",  UCase(table_name), "SELECT_JOIN", "web_app", currentDB)
		SelectLinks=GetINIValue( "required", UCase(table_name), "SELECT_LINKS", "web_app", currentDB)
		InterTables=GetINIValue( "required",  UCase(table_name), "INTER_TABLES", "web_app", currentDB)
		'chemfinder related values
		ChemConnection = GetINIValue( "required", UCase(table_name), "CHEM_CONNECTION", "web_app", currentDB)
		StrucFieldID=GetINIValue( "required",  UCase(table_name), "STRUC_FIELD_ID", "web_app", currentDB)

		ADOConnection =GetINIValue( "required", UCase(table_name), "ADO_CONNECTION", "web_app", currentDB)
		'create array.  
		
		Dim TableArray
		ReDim TableArray(15)
	
		
		TableArray(0) = TableRealName 
		TableArray(1) = RelFields
		TableArray(2) = PrimaryKey
		TableArray(3) = SQLSyntax
		TableArray(4) = SelectKeyWord
		TableArray(5) = SelectJoin
		TableArray(6) = SelectLinks
		TableArray(7) = SelectAdditional
		TableArray(8) = InterTables
		TableArray(9) = ADOConnection
		TableArray(10) = ChemConnection
		TableArray(11) = StrucFieldID

		
		GetTableValues = TableArray
		if Application("RelationalFields" & currentDB) <> "" then
			Application("RelationalFields" & currentDB) = Application("RelationalFields" & currentDB) & "," & RelFields
		else
			Application("RelationalFields" & currentDB) = RelFields
		end if


End Function

Function GetSubFormViewValues(ByVal subform_view_name, ByVal currentDB)
		if subform_view_name = "NULL" or subform_view_name = "" then exit function
		SelectStatement = GetINIValue( "required", UCase(subform_view_name), "SELECT_STATEMENT", "web_app", currentDB)
		ADOConnection=GetINIValue( "required", UCase(subform_view_name), "ADO_CONNECTION", "web_app", currentDB)
		
		'create array
		Dim SubFormViewArray
		ReDim SubFormViewArray(1)
		SubFormViewArray(0) =SelectStatement 
		SubFormViewArray(1) = ADOConnection
		
		'return array
		GetSubFormViewValues = SubFormViewArray
End Function




'create temporary directories for each dbase  in web applicaiton
Sub CreateDBTempDir(ByVal currentDB)

	Dim tempdir
	err.Clear
	Set dbtempdir= Server.CreateObject("Scripting.FileSystemObject")
	tempdir = Application("TempFileDirectory" & currentDB)
	on error resume next
	If Not dbtempdir.FolderExists(tempdir) then
		dbtempdir.CreateFolder(tempdir)
		dbtempdir.CopyFile Application("AppPath")& "\graphics\nostructure.cdx", tempdir
		dbtempdir.CopyFile Application("AppPath")& "\graphics\nostructure.gif", tempdir
		dbtempdir.CopyFile Application("AppPath")& "\graphics\0.gif", tempdir
		dbtempdir.CopyFile Application("AppPath")& "\graphics\mt.cdx", tempdir
	end if
	if err.number > 0 then RaiseDBError "DB Temp dir not created ",err.number, err.description
	on error resume next
	If Not dbtempdir.FolderExists(tempdir & "Sessiondir") then
		dbtempdir.CreateFolder(tempdir & "Sessiondir")
	end if
		if err.number > 0 then RaiseDBError "The SessionDir directory for " & currentDB & " was not created ",err.number, err.description
	dbtempdir = ""
	Set dbtempdir = Nothing
End Sub




Function GetINIValue(ByVal allowempty, ByVal theSection, ByVal theKeyname, ByVal INIType, ByVal ININame )
	on error resume next
	Select Case INIType
		Case "cows"
				inivalue = INIVAR.VBGetPrivateProfileString(Trim(theSection), Trim(theKeyname), ININame & ".ini")
			if inivalue = "INIEmpty" then
				emptyval = "ini file: winnt/" & ININame & ".ini. <br>"
			End if
		Case "web_app"
			Application("inipath") = Application("AppPath")  & "\config\" & ININame &".ini"
			inivalue = INIVAR.VBGetPrivateProfileString(Trim(theSection), Trim(theKeyname), Application("inipath"))
			if inivalue = "INIEmpty" then
				emptyval = "ini file:  /config/" & ININame & ".ini. <br>" 
			End if
		Case "chemoffice"
			chemoffice_path = Application("ServerDrive") & "\"&  Application("ServerRoot") & "\"  & Application("DocumentRoot") & "\" & Application("COWSRoot") & "\config\chemoffice.ini"
			inivalue = INIVAR.VBGetPrivateProfileString(Trim(theSection), Trim(theKeyname), Trim(chemoffice_path))
			if inivalue = "INIEmpty" then
				emptyval = "ini file: /chemoffice/" & ININame & ".ini. <br>"
			End if
	End Select
	if inivalue = "INIEmpty" then
		Select case allowempty
			case "required"
				RaiseDBError "A required entry in the ini file is missing. ", emptyval , " SECTION:  " & theSection & "<br> KEY:  "& theKeyname
			case "optional"
				inivalue = ""
		End select
	end if
	'if err.number > 0 then
		'RaiseDBError "ini problem "& err.number & " " & err.description, "" , "SECTION:  " & theSection & "<br> KEY:  "& theKeyname		
		'Exit Function
	'end if
	'upper case true/false
	ValueTemp = Trim(inivalue)
	if len(ValueTemp)>0 then
		if ucase(ValueTemp) = "TRUE" or ucase(ValueTemp) = "FALSE" then ValueTemp = ucase(ValueTemp)
	end if
	'GetINIValue = Trim(inivalue)
	GetINIValue = ValueTemp
End Function

Function GetINIValue3(ByVal allowempty, ByVal theSection, ByVal theKeyname, ByVal INIType, ByVal ININame, ByVal DefaultValue )
	on error resume next
	
	iniVal = GetINIValue(allowempty, theSection, theKeyname, INIType, ININame)
	if iniVal = "" then iniVal = DefaultValue
	
	GetINIVAlue3 = iniVal
End Function



Sub MarkForReload(ByVal currentDB)
	Application("iniDate" & currentDB)= ""
End Sub


Sub SetINIDate(ByVal currentDB)
if currentDB = "app" then
	Application("inipath") = Application("AppPath")  & "\config\" & "cfserver.ini"
else
	Application("inipath") = Application("AppPath")  & "\config\" & currentDB &".ini"
end if
	Set fileobject = Server.CreateObject("Scripting.FileSystemObject")
	Set inifile =fileobject.GetFile(Application("inipath"))
	Application("iniDate" & currentdb) = inifile.DateLastModified
	fileobject = ""
	inifile = ""
	Set fileobject = Nothing
End Sub


Function GetINIDate(ByVal currentDB)
	if currentDB = "app" then
		Application("inipath") = Application("AppPath")  & "\config\" & "cfserver.ini"
	else
		Application("inipath") = Application("AppPath")  & "\config\" & currentDB &".ini"
	end if
	Set fileobject = Server.CreateObject("Scripting.FileSystemObject")
	Set inifile =fileobject.GetFile(Application("inipath"))
	GetINIDate = inifile.DateLastModified
	fileobject = ""
	inifile = ""
	Set fileobject = Nothing
End Function

Sub CheckINIDates(currentDB)
	currentINIDate = GetINIDate(currentDB)
	storedINIDate = Application("iniDate" & currentDB)
	if Not(currentINIDate = storedINIdate) then
		Application.Lock
			' CloseCFWObjects(currentDB)
			' CloseLockitObjects(currentDB)
			GetSingleDB(currentDB)
		Application.UnLock
	end if
End Sub


Sub CheckAppDates()
	currentINIDate = GetINIDate("app")
	storedINIDate = Application("iniDate" & "app")
	if Not(currentINIDate = storedINIdate) then
	Application.Lock
			'Get all inivalues for the web application
			
			GetAppINIValues()
			'exit application if errors where found in the above variables
			if APP_INI_ERRORS <> ""  then exit sub
	
			'create application temp directory
			CreateAppDir()
			'exit application if errors where found in the above variables
			if APP_INI_ERRORS <> ""  then exit sub

			'get db information and set values to application objects
			GetAllDBINIValues()
			SetINIDate("app")
		Application.UnLock
	end if
End Sub

'add table specific information to an array accessed within sessions of the application

'add errors to Applicaiton("Errors") object for later output
Sub RaiseAPPError(info1, info2, info3)
	fullerror = "<table  cellpadding = ""4"" cellspacing = ""4"" border = ""0"" align = ""top""><tr><td valign = ""top"" width = ""250"">" & info1 & "</td><td width = ""500"" valign = ""top"">" & info2  & " " & info3 & "</td></tr></table>"
	if APP_INI_ERRORS <> ""  then
		APP_INI_ERRORS = APP_INI_ERRORS & fullerror
	else
		APP_INI_ERRORS= "<table border = ""0"" align ""top""><tr><td width = ""800""><h3>The web Application was unable to Load due to the following errors</h3></td></tr><tr><td width = ""150""><strong>Error Message</strong></td></tr></table>" & fullerror
	end if
	Application("APP_INI_ERRORS") = APP_INI_ERRORS
	err.clear()
end Sub

Sub RaiseDBError(info1, info2, info3)
	
	fullerror = "<table  cellpadding = ""4"" cellspacing = ""4"" border = ""0"" align = ""top""><tr><td valign = ""top"" width = ""250"">" & info1 & "</td><td width = ""500"" valign = ""top"">" & info2  & " " & info3 & "</td></tr></table>"
	if DB_INI_ERRORS <> ""  then
		DB_INI_ERRORS = DB_INI_ERRORS & fullerror
	else
		DB_INI_ERRORS= "<table border = ""0"" align ""top""><tr><td width = ""800""><h3>The web Application was unable to Load due to the following errors</h3></td></tr><tr><td width = ""150""><strong>Error Message</strong></td></tr></table>" & fullerror
	end if
	Application("DB_INI_ERRORS") = DB_INI_ERRORS
	err.clear()
end Sub

'put double quotes around an input string
Function QuotedString(varTemp)
	If IsNull(varTemp) Then
		QuotedString = Chr(34) & Chr(34)
	Else
		QuotedString = Chr(34) & CStr(varTemp) & Chr(34)
	End If
End Function





'close application objects when app is unloaded
Sub Application_OnEnd
	on error resume next
	Set inivar= Nothing
	Set Application("myDecoder") = Nothing
	Application("NumberCurrentUsers") = 0
End Sub


'**************************
'Functions and Subs occuring when a user Session starts and ends
'Main functions:
 '	Session_OnStart	Runs once when a new user accesses a page in the webserver
'	Session_OnEnd		Runs once the user logs off or the session timesout
'**************************

'create session directories and necessary variables for a user
Sub Session_OnStart
	' For some strange reason session_onstart event fires the very first
	' time a page is requested even if it it set to be sessionless. 
	' The following line forces an exit for sessionless pages.
	
	if NOT IsObject(Session) then exit sub

	if APP_INI_ERRORS <> ""  then
		call AppLoadFailure()
		
		exit sub
	else
		if Application("LastAppLoadFailed") = true then
			LoadApp()
		end if
		if NOT DB_INI_ERRORS <> "" then
			Application.Lock
				Application("NumberCurrentUsers") = Application("NumberCurrentUsers") + 1
			Application.Unlock
			dbnamestring = Split(Application("DBNames"), ",", -1)
			'start getting the information based on the number of database in the web appliciaton
			For i = 0 to UBound(dbnamestring)
				dbkey = dbnamestring(i)
				if i = 0 then firstdb= dbkey
				CheckAppDates()
				CheckINIDates(dbkey)
				If Application("ADMIN_REQUIRED")<> "1" then
					Session("UserValidated" & dbkey) = 1
				End if
				
				'get each set of values for db's 
				'create session directories based on session.sessionid	
				CreateUserDir dbkey 
				'if errors have occured in the temp dir creating exit the application since it is a problem in the ini file
				if APP_INI_ERRORS <> ""  then
					call AppLoadFailure()
					exit sub
				else
					Application.Lock
						Application("LastAppLoadFailed") = false
					Application.UnLock
				end if
			next 'i get next database entry 
		CleanUP()
		else
			call AppLoadFailure()
			exit sub
		end if
		
	end if
	'!DGB! 09/03 Initialize hitlist session variables w/o reading ini
		form_group_array = Application("form_group_array" & dbkey)
		for j= 0 to UBound(form_group_array)
			Session("BaseRShitlistID" & dbkey & form_group_array(j))=0
			Session("RefinehitlistID" & dbkey & form_group_array(j)) = 0
		next
	
	if Application("UseCSSecurityApp")="1" then
	'!DGB! Enable cookie based authentication
		'logaction Request.ServerVariables("URL")

		If instr(lcase(Request.ServerVariables("URL")),"/api/createplatexml.asp")>0 then
			Session("UserValidated" & firstdb) = 1		
		else
			Call AuthenticateUserFromRequest(firstdb)
		end if
		if Session("UserValidated" & firstdb) = 1 then Session("CurrentUser" & firstdb) = Session("UserName" & firstdb)

	end if
End Sub

Sub LoadApp()
	GetAppINIValues()
	'exit application if errors where found in the above variables
	if APP_INI_ERRORS <> ""  then exit sub

	'create application temp directory
	CreateAppDir()
	'exit application if errors where found in the above variables
	if APP_INI_ERRORS <> ""  then exit sub

	'get db information and set values to application objects
	GetAllDBINIValues()
	
	if DB_INI_ERRORS <> ""  then exit sub
	SetINIDate("app")
	'Initialize the hitlist tables. If they are not found they are created.
	AppInitialize()
End Sub


Sub AppLoadFailure()
		DB_INI_ERRORS = APP_INI_ERRORS
		dbStr = Split(Application("DBNames"), ",", -1)
		firstDB = dbStr(0)
		if DB_INI_ERRORS <> "" then 
			'this may be that someone had a load failure, returned to the chemoffice page and clicked the link again without fixing the error.
			'in this case no errors would be reported - but the app is still in fialure mode since Application("LastAppLoadFailed") = true
			CreateLog(firstDB)
		end if
		APP_INI_ERRORS=""
		DB_INI_ERRORS=""
		MarkForReload("app")
		Application.Lock
				Application("LastAppLoadFailed") = true
		Application.UnLock

		session.abandon
		'logpath = Application("logpath")& firstDB & "log.html"
		response.redirect "/chemoffice/" &  firstDB & "log.html"
		
		
End Sub


'create user sessiondirectory in the application dbtemp directory
Sub CreateUserDir(ByVal currentDB)
	if APP_INI_ERRORS <> "" then exit sub

	Dim sessdir
	Set sessiontemp_dir = Server.CreateObject("Scripting.FileSystemObject")
	on error resume next

	sessdir = Application("TempFileDirectory" & currentDB) & "Sessiondir"  & "\" & Session.sessionid
	If Not sessiontemp_dir.FolderExists(sessdir) then
		sessiontemp_dir.CreateFolder(sessdir)
	End if
	if err.number > 0 then
			RaiseDBError "User Session Dir not created", "Error: "  & err.number & ":" & err.source & ":" & err.description, "SD=" & Application("TempFileDirectory" & currentDB) & "Sessiondir"
	end if
	sessiontemp_dir = ""
	Set sessiontemp_dir = Nothing
End Sub

'delect user sessiondirectory in the application dbtemp directory
Sub DeleteUserDir(ByVal currentDB)
	if DB_INI_ERRORS <> "" then exit sub

	Dim sessdir
	Set sessiontemp_dir = Server.CreateObject("Scripting.FileSystemObject")
	on error resume next
	sessdir = Application("TempFileDirectory" & currentDB) & "Sessiondir"  & "\" & Session.sessionid
	If  sessiontemp_dir.FolderExists(sessdir) then
		sessiontemp_dir.DeleteFolder(sessdir)
	End if
	if err.number > 0 then
			RaiseError "User Session Dir not deleted", "", ""
	end if
	sessiontemp_dir = ""
	Set sessiontemp_dir = Nothing
End Sub

'clean up when session ends by timeout or user hitting log off button
Sub Session_OnEnd
	Set Session("TVNodes") = Nothing

	Application.Lock
		Application("NumberCurrentUsers") = Application("NumberCurrentUsers") - 1
	Application.Unlock
	Dim dbkey
	on error resume next
	dbnamestring = Split(Application("DBNames"), ",", -1)
	'start getting the information based on the number of database in the web appliciaton
	For i = 0 to UBound(dbnamestring) 
		dbkey = dbnamestring(i)
		DeleteUserDir dbkey
	Next 'next database name
	SessInitAllTables()
	CleanUP()
End Sub

Sub GetAPIErrorTable()
	Dim RS
	ConnStr = GetADOConnString(Application("appkey"), "base_form_group", "BASE_CONNECTION")	
	Set myAdoConn = CreateObject("ADODB.Connection")
	myAdoConn.Open ConnStr
	
	Sql = "SELECT Error_ID, Error_Text FROM inv_api_Errors" 
	Set RS = myAdoConn.Execute(Sql)
	
	While NOT RS.EOF
		Application(RS("Error_ID").value) = RS("Error_Text").value
		RS.MoveNext
	Wend
	myAdoConn.Close
	Set myAdoConn = Nothing
	Set RS = Nothing
End Sub

' Shows hides items from hitlistmanagement formgroup dropdown based on ini settings for
' global search integration and plate mangement
Sub SetDbFormgroupTable()
	Dim cmd
	Dim myAdoConn

	ConnStr = GetADOConnString(Application("appkey"), "base_form_group", "BASE_CONNECTION")	
	Set myAdoConn = Server.CreateObject("ADODB.Connection")
	Set cmd = Server.CreateObject("ADODB.Command")
	myAdoConn.Open ConnStr
	Sql = "update db_formgroup set is_public = ? where formgroup_name = ?"
	cmd.ActiveConnection = myAdoConn
	cmd.CommandType = 1
	cmd.CommandText = sql
	
	Cmd.Parameters.Append Cmd.CreateParameter("isPublic",200, 1, 1, null) 
	Cmd.Parameters.Append Cmd.CreateParameter("fgName",200, 1, 50, null)
	
	if Application("PLATES_ENABLED") then 
		showFormgroup = "1"    
	else
		showFormgroup = "0"
	end if
	
	cmd.Parameters("isPublic").Value = showFormgroup
	cmd.Parameters("fgName").Value = "plate_compounds_form_group"
	cmd.Execute

	cmd.Parameters("fgName").Value = "plates_form_group"
	cmd.Execute
	
	if InStr(1,Application("DBNames"),",") > 0 then 
		showFormgroup = "1"    
	else
		showFormgroup = "0"
	end if
	 
	cmd.Parameters("isPublic").Value = showFormgroup
	cmd.Parameters("fgName").Value = "gs_form_group"
	cmd.Execute
	
	set cmd = Nothing
	myAdoConn.close
	Set myAdoConn =  Nothing
End sub

'output information for logging purposes and debuggin
Sub LogAction(ByVal inputstr)
	on error resume next
		filepath = Application("AppPath")  & "\logfiles\" & Application("appkey") & "Applog.html"
		Set fs = Server.CreateObject("Scripting.FileSystemObject")
		Set a = fs.OpenTextFile(filepath, 8, True)  
		a.WriteLine Now & ": " & inputstr & "<br>"
		a.WriteLine " "
		a.close
End Sub

Sub CreateLog(currentDB)
	returnpage ="/chemoffice.asp"
	
	on error resume next
		filepath = Application("logpath") & "\chemoffice\" & currentdb & "log.html"
		Set fs = Server.CreateObject("Scripting.FileSystemObject")
		Set a = fs.CreateTextFile(filepath,True)  
		a.WriteLine Now & ": "& DB_INI_ERRORS & "<br>"
		a.WriteLine "<a href=" & quotedstring(returnpage) & ">" & "return to Chemoffice Webserver main page" & "</a>"
		a.close
		Set fs = Nothing
		Set a = Nothing
		a = ""
		fs = ""
End Sub

Sub GetConfigINIValues()
	Application("NP_Search") = GetIniValue("optional", "APPLICATION", "NP_SEARCH", "web_app", "invconfig")
	Application("DefRetireLocationID") = GetIniValue("optional", "APPLICATION", "DEFAULT_RETIRED_LOCATION", "web_app", "invconfig")
	Application("DefRetireStatusID") = GetIniValue("optional", "APPLICATION", "DEFAULT_RETIRED_STATUS", "web_app", "invconfig")
	Application("plDefRetireLocationID") = GetIniValue("optional", "APPLICATION", "PLATE_DEFAULT_RETIRED_LOCATION", "web_app", "invconfig")
	Application("plDefRetireStatusID") = GetIniValue("optional", "APPLICATION", "PLATE_DEFAULT_RETIRED_STATUS", "web_app", "invconfig")
	Application("plDefVolUnitID") = GetIniValue("optional", "APPLICATION", "PLATE_DEFAULT_VOL_UNIT", "web_app", "invconfig")
	Application("plDefMassUnitID") = GetIniValue("optional", "APPLICATION", "PLATE_DEFAULT_MASS_UNIT", "web_app", "invconfig")
	Application("plDefConcUnitID") = GetIniValue("optional", "APPLICATION", "PLATE_DEFAULT_CONC_UNIT", "web_app", "invconfig")
	Application("DefConStatusID") = GetIniValue("optional", "APPLICATION", "DEFAULT_CONTAINER_STATUS", "web_app", "invconfig")
	Application("ExpDateIncrement") = GetIniValue("optional", "APPLICATION", "EXPIRATION_DATE_INCREMENT", "web_app", "invconfig")
	Application("SPECIAL_LOCATIONS") = GetIniValue("optional", "APPLICATION", "SPECIAL_LOCATIONS", "web_app", "invconfig")
	Application("UseCustomTabFrameLinks") = GetIniValue("optional", "APPLICATION", "USE_CUSTOM_TAB_FRAME_LINKS", "web_app", "invconfig")
	Application("UseCustomListFrameLinks") = GetIniValue("optional", "APPLICATION", "USE_CUSTOM_LIST_FRAME_LINKS", "web_app", "invconfig")
	Application("UseCustomBannerFrameLinks") = GetIniValue("optional", "APPLICATION", "USE_CUSTOM_BANNER_FRAME_LINKS", "web_app", "invconfig")
	Application("UseCustomBrowserBannerFrameLinks") = GetIniValue("optional", "APPLICATION", "USE_CUSTOM_BROWSEBANNER_FRAME_LINKS", "web_app", "invconfig")
	Application("UseCustomSearchFormTabs") = GetIniValue("optional", "APPLICATION", "USE_CUSTOM_SEARCH_FORM_TABS", "web_app", "invconfig")
	Application("DisableCheckBoxesDuringRectification") = GetIniValue("optional", "APPLICATION", "DISABLE_CHECKBOXES_DURING_RECTIFICATION", "web_app", "invconfig")
	Application("AllowRequests") = GetIniValue("optional", "APPLICATION", "ALLOW_REQUESTS", "web_app", "invconfig")
	Application("ShowSplit") = GetIniValue("optional", "APPLICATION", "SHOW_SPLIT", "web_app", "invconfig")
	Application("ShowSample") = GetIniValue("optional", "APPLICATION", "SHOW_SAMPLE", "web_app", "invconfig")	
	Application("ShowCertify") = GetIniValue3("optional", "APPLICATION", "SHOW_CERTIFY", "web_app", "invconfig", "FALSE")	
	Application("ShowBatch") = GetIniValue3("optional", "APPLICATION", "SHOW_BATCH", "web_app", "invconfig", "FALSE")	
	Application("ShowRequestSample") = GetIniValue3("optional", "APPLICATION", "SHOW_REQUEST_SAMPLE", "web_app", "invconfig", "FALSE")
	Application("ShowCheckInDetails") = GetIniValue3("optional", "APPLICATION", "SHOW_CHECKIN_DETAILS", "web_app", "invconfig", "FALSE")
	Application("StatusCertified") = GetIniValue("optional", "APPLICATION", "STATUS_CERTIFIED", "web_app", "invconfig")	
	Application("StatusApproved") = GetIniValue("optional", "APPLICATION", "STATUS_APPROVED", "web_app", "invconfig")
	Application("StatusRequestedSamples") = GetIniValue("optional", "APPLICATION", "STATUS_REQUESTED_SAMPLES", "web_app", "invconfig")	
	Application("PLATES_ENABLED") = GetIniValue("optional", "APPLICATION", "ENABLE_PLATE_MANAGEMENT", "web_app", "invconfig")	
	Application("RequireBarcode") = GetIniValue("optional", "APPLICATION", "REQUIRE_BARCODE", "web_app", "invconfig")
	Application("PERSIST_AUTHENTICATION_COOKIES") = GetIniValue("optional", "APPLICATION", "PERSIST_AUTHENTICATION_COOKIES", "web_app", "invconfig")
	Application("RPT_PATH") = GetIniValue("optional", "REPORTS", "RPT_PATH", "web_app", "invconfig")
	Application("ReportDBPath") = GetIniValue("optional", "REPORTS", "REPORT_DB_PATH", "web_app", "invconfig")
	Application("ReportsHTTPPath") = GetIniValue("optional", "REPORTS", "REPORTS_HTTP_PATH", "web_app", "invconfig")
	Application("DefaultLabelReport") = GetIniValue("optional", "REPORTS", "DEFAULT_LABEL_REPORT", "web_app", "invconfig")
	Application("DefaultContainerSearchReport") = GetIniValue("optional", "REPORTS", "DEFAULT_CONTAINER_SEARCH_REPORT", "web_app", "invconfig")
	Application("DefaultLocationReport") = GetIniValue("optional", "REPORTS", "DEFAULT_LOCATION_REPORT", "web_app", "invconfig")
	Application("DefaultReportFormat") = GetIniValue("optional", "REPORTS", "DEFAULT_REPORT_FORMAT", "web_app", "invconfig")
	Application("bLogSearches") = GetIniValue("optional", "SEARCHLOG", "LOG_SEARCHES", "web_app", "invconfig")
	Application("SearchLogDbConnStr") = GetIniValue("optional", "SEARCHLOG", "SEARCH_LOG_DB_CONNSTR", "web_app", "invconfig")
	Application("RegServerName") = GetIniValue("optional", "CHEMREG", "REG_SERVER_NAME", "web_app", "invconfig")
	Application("RegContainersOnly") = GetIniValue("optional","CHEMREG","REG_CONTAINERS_ONLY", "web_app", "invconfig")
	Application("UseNotebookTable") = GetIniValue("optional", "CHEMREG", "USE_NOTEBOOK_TABLE", "web_app", "invconfig")
	Application("ACXServerName") = GetIniValue("optional", "CHEMACX", "ACX_SERVER_NAME", "web_app", "invconfig")
	Application("SHOW_ACX_LOOKUP_LINK") = GetIniValue("optional", "CHEMACX", "SHOW_ACX_LOOKUP_LINK", "web_app", "invconfig")
	Application("SHOW_MSDX_LOOKUP_LINK") = GetIniValue("optional", "CHEMACX", "SHOW_MSDX_LOOKUP_LINK", "web_app", "invconfig")
	Application("MSDX_LOOK_AHEAD") = GetIniValue("optional", "CHEMACX", "MSDX_LOOK_AHEAD", "web_app", "invconfig")
	Application("IMPORT_CONTAINER_PICKLIST_1_FIELD") = GetIniValue("optional", "CHEMACX", "IMPORT_CONTAINER_PICKLIST_1_FIELD", "web_app", "invconfig")
	Application("IMPORT_CONTAINER_PICKLIST_1_TITLE") = GetIniValue("optional", "CHEMACX", "IMPORT_CONTAINER_PICKLIST_1_TITLE", "web_app", "invconfig")
	Application("IMPORT_CONTAINER_PICKLIST_1_SQL") = GetIniValue("optional", "CHEMACX", "IMPORT_CONTAINER_PICKLIST_1_SQL", "web_app", "invconfig")
	Application("IMPORT_CONTAINER_PICKLIST_2_FIELD") = GetIniValue("optional", "CHEMACX", "IMPORT_CONTAINER_PICKLIST_2_FIELD", "web_app", "invconfig")
	Application("IMPORT_CONTAINER_PICKLIST_2_TITLE") = GetIniValue("optional", "CHEMACX", "IMPORT_CONTAINER_PICKLIST_2_TITLE", "web_app", "invconfig")
	Application("IMPORT_CONTAINER_PICKLIST_2_SQL") = GetIniValue("optional", "CHEMACX", "IMPORT_CONTAINER_PICKLIST_2_SQL", "web_app", "invconfig")
	Application("InvServerName") = GetIniValue("optional", "APPLICATION", "INV_SERVER_NAME", "web_app", "invconfig")
	Application("HideOtherTab") = GetIniValue("optional", "CUSTOM_FIELDS", "HIDE_TAB", "web_app", "invconfig")
	Application("OtherTabText") = GetIniValue("optional", "CUSTOM_FIELDS", "TAB_TEXT", "web_app", "invconfig")
	Application("OtherTabHelpText") = GetIniValue("optional", "CUSTOM_FIELDS", "TAB_POPUP_HELP", "web_app", "invconfig")

	'SYAN added 11/17/2003 to link to docmanager
	Application("SHOW_DOCMANAGER_LINK") = GetIniValue("optional", "DOCMANAGER", "SHOW_DOCMANAGER_LINK", "web_app", "invconfig")
	Application("DOCMANAGER_SERVER_NAME") = GetIniValue("optional", "DOCMANAGER", "DOCMANAGER_SERVER_NAME", "web_app", "invconfig")
	'End of SYAN modification


	' Editable Tables
	TablesStr = GetIniValue("optional", "APPLICATION", "EDITABLE_TABLES", "web_app", "invconfig")
	myarray = split(TablesStr, ",", -1)
	for i = 0 to UBound(myarray) 
		tempStr = myarray(i)
		templen = len(tempStr)
		colonpos = inStr(1, tempStr, ":")
		fName = left(tempStr, colonpos-1)
		ftext = mid(tempStr, colonpos+1)
		editable_tables_dict.Add Trim(fName), Trim(ftext)
	next	
	
	CustomFieldsStr = GetIniValue("optional", "CUSTOM_FIELDS", "CUSTOM_FIELDS", "web_app", "invconfig")
	myarray = split(CustomFieldsStr, ",", -1)
	for i = 0 to UBound(myarray) 
		tempStr = myarray(i)
		templen = len(tempStr)
		colonpos = inStr(1, tempStr, ":")
		semipos = inStr(1, tempStr, ";")
		fName = left(tempStr, colonpos-1)
		ftext = mid(tempStr, colonpos+1, semipos - colonpos-1)
		required = Cbool(right(tempStr, 1))
				
		custom_fields_dict.Add Trim(fName), Trim(ftext)
		if required then req_custom_fields_dict.Add Trim(fName), Trim(ftext)
	next
	
	Alt_IDsStr = GetIniValue("optional", "CUSTOM_FIELDS", "ALT_IDS", "web_app", "invconfig")
	myarray = split(Alt_IDsStr, ",", -1)
	for i = 0 to UBound(myarray) 
		brequired = false
		bunique = false
		tempStr = myarray(i)
		templen = len(tempStr)
		colonpos = inStr(1, tempStr, ":")
		semipos = inStr(1, tempStr, ";")
		fName = left(tempStr, colonpos-1)
		ftext = mid(tempStr, colonpos+1, semipos - colonpos-1)
		aftersemi = mid(tempStr, semipos+1, len(tempStr)- semipos)
		if inStr(1,aftersemi, "1") > 0 then brequired = true
		if inStr(1, aftersemi, "U") > 0 then bunique = true	
		alt_ids_dict.Add Trim(fName), Trim(ftext)
		if brequired then req_alt_ids_dict.Add Trim(fName), Trim(ftext)
		if bunique then unique_alt_ids_dict.Add Trim(fName), Trim(ftext)
	next
	
	' Plate Custom Fields
	CustomFieldsStr = GetIniValue("optional", "CUSTOM_FIELDS", "CUSTOM_PLATE_FIELDS", "web_app", "invconfig")
	myarray = split(CustomFieldsStr, ",", -1)
	for i = 0 to UBound(myarray) 
		tempStr = myarray(i)
		templen = len(tempStr)
		colonpos = inStr(1, tempStr, ":")
		semipos = inStr(1, tempStr, ";")
		fName = left(tempStr, colonpos-1)
		ftext = mid(tempStr, colonpos+1, semipos - colonpos-1)
		required = Cbool(right(tempStr, 1))
				
		custom_plate_fields_dict.Add Trim(fName), Trim(ftext)
		if required then req_custom_plate_fields_dict.Add Trim(fName), Trim(ftext)
	next	
	
	' Well Custom Fields
	CustomFieldsStr = GetIniValue("optional", "CUSTOM_FIELDS", "CUSTOM_WELL_FIELDS", "web_app", "invconfig")
	myarray = split(CustomFieldsStr, ",", -1)
	for i = 0 to UBound(myarray) 
		tempStr = myarray(i)
		templen = len(tempStr)
		colonpos = inStr(1, tempStr, ":")
		semipos = inStr(1, tempStr, ";")
		fName = left(tempStr, colonpos-1)
		ftext = mid(tempStr, colonpos+1, semipos - colonpos-1)
		required = Cbool(right(tempStr, 1))
				
		custom_well_fields_dict.Add Trim(fName), Trim(ftext)
		if required then req_custom_well_fields_dict.Add Trim(fName), Trim(ftext)
	next	
	
	' Custom CheckIn Fields
	CustomFieldsStr = GetIniValue("optional", "CUSTOM_FIELDS", "CUSTOM_CHECKIN_FIELDS", "web_app", "invconfig")
	myarray = split(CustomFieldsStr, ",", -1)
	for i = 0 to UBound(myarray)
		tempStr = myarray(i)
		templen = len(tempStr)
		colonpos = inStr(1, tempStr, ":")
		semipos = inStr(1, tempStr, ";")
		fName = left(tempStr, colonpos-1)
		ftext = mid(tempStr, colonpos+1, semipos - colonpos-1)
		required = Cbool(right(tempStr, 1))
				
		custom_checkin_fields_dict.Add Trim(fName), Trim(ftext)
		if required then req_custom_checkin_fields_dict.Add Trim(fName), Trim(ftext)
	next

	' Custom Request Fields
	CustomFieldsStr = GetIniValue("optional", "CUSTOM_FIELDS", "CUSTOM_REQUEST_FIELDS", "web_app", "invconfig")
	myarray = split(CustomFieldsStr, ",", -1)
	for i = 0 to UBound(myarray)
		tempStr = myarray(i)
		templen = len(tempStr)
		colonpos = inStr(1, tempStr, ":")
		semipos = inStr(1, tempStr, ";")
		fName = left(tempStr, colonpos-1)
		ftext = mid(tempStr, colonpos+1, semipos - colonpos-1)
		required = Cbool(right(tempStr, 1))
				
		custom_request_fields_dict.Add Trim(fName), Trim(ftext)
		if required then req_custom_request_fields_dict.Add Trim(fName), Trim(ftext)
	next

End Sub

Function GetContainerFieldMap()
	cf_count = custom_fields_dict.count
	ai_count = alt_ids_dict.count
	Dim fieldMapArray()
	ReDim fieldMapArray(cf_count + ai_count + 40, 2)
	
	' Container Field Names
	fieldMapArray(0,0) = "ACX_ID"
	fieldMapArray(1,0) = "AmountAvailable" 
	fieldMapArray(2,0) = "CAS" 
	fieldMapArray(3,0) = "Supplier_CATNUM"
	fieldMapArray(4,0) = "Container_Comments"
	fieldMapArray(5,0) = "Concentration_Text" 
	fieldMapArray(6,0) = "Barcode"
	fieldMapArray(7,0) = "ContainerCost"	 
	fieldMapArray(8,0) = "DATE_Created"
	fieldMapArray(9,0) = "Current_User_ID_FK"  
	fieldMapArray(10,0) = "Density_Text"
	fieldMapArray(11,0) = "Container_Description"
	fieldMapArray(12,0) = "DATE_Expires"
	fieldMapArray(13,0) = "Family"
	fieldMapArray(14,0) = "Grade"
	fieldMapArray(15,0) = "Container_ID" 
	fieldMapArray(16,0) = "Location_Name"
	fieldMapArray(17,0) = "Lot_Num"
	fieldMapArray(18,0) = "Qty_MaxStock_String" 
	fieldMapArray(19,0) = "Qty_MinStock_String" 
	fieldMapArray(20,0) = "Container_Name"	
	fieldMapArray(21,0) = "DATE_Ordered"
	fieldMapArray(22,0) = "Owner_ID_FK"
	fieldMapArray(23,0) = "Parent_container_barcode"
	fieldMapArray(24,0) = "PO_Line_Number"
	fieldMapArray(25,0) = "PO_Number"
	fieldMapArray(26,0) = "DATE_Produced"
	fieldMapArray(27,0) = "Purity_Text"  
	fieldMapArray(28,0) = "DATE_Received"
	fieldMapArray(29,0) = "Reg_Batch_ID"
	fieldMapArray(30,0) = "AmountRemaining" 
	fieldMapArray(31,0) = "Req_Number"
	fieldMapArray(32,0) = "ContainerSize"
	fieldMapArray(33,0) = "Solvent_ID_FK"
	fieldMapArray(34,0) = "Container_Status_Name" 
	fieldMapArray(35,0) = "Substance_Name"
	fieldMapArray(36,0) = "Supplier_Short_Name"
	fieldMapArray(37,0) = "Container_Type_Name"
	fieldMapArray(38,0) = "Weight_Text"
	fieldMapArray(39,0) = "Solvent_Name"
	fieldMapArray(40,0) = "Batch_ID_FK"
	index = 41
	For each Key in custom_fields_dict
	fieldMapArray(index, 0) = Key
	index = index + 1
	Next 
	For each Key in alt_ids_dict
	fieldMapArray(index, 0) = Key
	index = index + 1
	Next 
	
	' Default column widths	
	fieldMapArray(0,2) = 16
	fieldMapArray(1,2) = 12
	fieldMapArray(2,2) = 14
	fieldMapArray(2,2) = 12
	fieldMapArray(3,2) = 12
	fieldMapArray(4,2) = 12
	fieldMapArray(5,2) = 12
	fieldMapArray(6,2) = 16
	fieldMapArray(7,2) = 12
	fieldMapArray(8,2) = 16
	fieldMapArray(9,2) = 16
	fieldMapArray(10,2) = 12
	fieldMapArray(11,2) = 12
	fieldMapArray(12,2) = 16
	fieldMapArray(13,2) = 12
	fieldMapArray(14,2) = 12
	fieldMapArray(15,2) = 16
	fieldMapArray(16,2) = 22
	fieldMapArray(17,2) = 12 
	fieldMapArray(18,2) = 12
	fieldMapArray(19,2) = 12 
	fieldMapArray(20,2) = 18
	fieldMapArray(21,2) = 16  
	fieldMapArray(22,2) = 14     
	fieldMapArray(23,2) = 12
	fieldMapArray(24,2) = 12
	fieldMapArray(25,2) = 12
	fieldMapArray(26,2) = 16
	fieldMapArray(27,2) = 12   
	fieldMapArray(28,2) = 16
	fieldMapArray(29,2) = 12
	fieldMapArray(30,2) = 12
	fieldMapArray(31,2) = 12
	fieldMapArray(32,2) = 12
	fieldMapArray(33,2) = 12
	fieldMapArray(34,2) = 20
	fieldMapArray(35,2) = 24 
	fieldMapArray(36,2) = 18
	fieldMapArray(37,2) = 12
	fieldMapArray(38,2) = 12
	fieldMapArray(39,2) = 12
	fieldMapArray(40,2) = 12
	index = 41
	For each Key in custom_fields_dict
	fieldMapArray(index, 2) = 12
	index = index + 1
	Next 
	For each Key in alt_ids_dict
	fieldMapArray(index, 2) = 12
	index = index + 1
	Next 
	' Column header text
	fieldMapArray(0,1) = "ACX ID"
	fieldMapArray(1,1) = "Available" 
	fieldMapArray(2,1) = "CAS" 
	fieldMapArray(3,1) = "Catalog Num"
	fieldMapArray(4,1) = "Comments"
	fieldMapArray(5,1) = "Concentration" 
	fieldMapArray(6,1) = "Container ID"
	fieldMapArray(7,1) = "Cost"	 
	fieldMapArray(8,1) = "Created"
	fieldMapArray(9,1) = "Current User"  
	fieldMapArray(10,1) = "Density"
	fieldMapArray(11,1) = "Description"
	fieldMapArray(12,1) = "Exp Date"
	fieldMapArray(13,1) = "Family"
	fieldMapArray(14,1) = "Grade"
	fieldMapArray(15,1) = "Internal ID" 
	fieldMapArray(16,1) = "Location"
	fieldMapArray(17,1) = "Lot Number"
	fieldMapArray(18,1) = "MaxStock" 
	fieldMapArray(19,1) = "MinStock" 
	fieldMapArray(20,1) = "Name"	
	fieldMapArray(21,1) = "Ordered"
	fieldMapArray(22,1) = "Owner" 
	fieldMapArray(23,1) = "Parent Container" 
	fieldMapArray(24,1) = "PO Line Number"
	fieldMapArray(25,1) = "PO Number"
	fieldMapArray(26,1) = "Produced"
	fieldMapArray(27,1) = "Purity"  
	fieldMapArray(28,1) = "Received"
	fieldMapArray(29,1) = "RegBatchID"
	fieldMapArray(30,1) = "Remaining" 
	fieldMapArray(31,1) = "Req Number"
	fieldMapArray(32,1) = "Size"
	fieldMapArray(33,1) = "Solvent ID"
	fieldMapArray(34,1) = "Status" 
	fieldMapArray(35,1) = "Substance"
	fieldMapArray(36,1) = "Supplier"
	fieldMapArray(37,1) = "Type"
	fieldMapArray(38,1) = "Weight"
	fieldMapArray(39,1) = "Solvent"
	fieldMapArray(40,1) = "Batch ID"
	index = 41
	For each Key in custom_fields_dict
	fieldMapArray(index, 1) = custom_fields_dict.Item(Key)
	index = index + 1
	Next
	For each Key in alt_ids_dict
	fieldMapArray(index, 1) = alt_ids_dict.Item(Key)
	index = index + 1
	Next  
	
	'Change the following two lines to affect the default columns and column widths
	'for the screen reports.  The first line affects the Search Results screen.
	'The second line affects the Container List screen. 
	'Use a pipe delimited list of ColumnID:ColumnWidth values
	'ColumnID is the first index from fieldMapArray above
	'ColumnWidth is expressed in characters 
	'The columns originally shown are: Location, Name, CAS, Status, Supplier, Size, Remaining
	Application("ContainerReportColDef1") = "16:12|20:14|2:12|39:12|35:18|31:14|29:14"
	Application("ContainerReportColDef2") = "16:12|20:14|2:12|39:12|35:18|31:14|29:14"
	
	GetContainerFieldMap = fieldMapArray
End Function

Function GetPlateFieldMap()
	cf_count = custom_plate_fields_dict.count
	Dim fieldMapArray()
	ReDim fieldMapArray(cf_count + 12, 2)
	
	' Plate Field Names
	fieldMapArray(0,0) = "PLATE_BARCODE"
	fieldMapArray(1,0) = "CONCENTRATION_STRING" 
	fieldMapArray(2,0) = "DATE_CREATED" 
	fieldMapArray(3,0) = "FT_CYCLES" 
	fieldMapArray(4,0) = "GROUP_NAME"
	fieldMapArray(5,0) = "AMOUNT_INITIAL"
	fieldMapArray(6,0) = "LIBRARY"
	fieldMapArray(7,0) = "LOCATION_NAME"
	fieldMapArray(8,0) = "PLATE_ID" 
	fieldMapArray(9,0) = "PLATE_TYPE_NAME"
	fieldMapArray(10,0) = "PLATE_FORMAT_NAME"	 
	fieldMapArray(11,0) = "AMOUNT_REMAINING"
	fieldMapArray(12,0) = "SOLVENT_VOLUME_STRING"
	index = 13
	For each Key in custom_plate_fields_dict
		fieldMapArray(index, 0) = Key
		index = index + 1
	Next	

	' Default column widths	
	fieldMapArray(0,2) = 16
	fieldMapArray(1,2) = 10
	fieldMapArray(2,2) = 16
	fieldMapArray(3,2) = 10
	fieldMapArray(4,2) = 10
	fieldMapArray(5,2) = 12
	fieldMapArray(6,2) = 12
	fieldMapArray(7,2) = 12
	fieldMapArray(8,2) = 12
	fieldMapArray(9,2) = 12
	fieldMapArray(10,2) = 12
	fieldMapArray(11,2) = 12
	fieldMapArray(12,2) = 10
	index = 13
	For each Key in custom_plate_fields_dict
		fieldMapArray(index, 2) = 13
		index = index + 1
	Next	

	' Column header text
	fieldMapArray(0,1) = "Barcode"
	fieldMapArray(1,1) = "Concentration" 
	fieldMapArray(2,1) = "Created" 
	fieldMapArray(3,1) = "F/T Cycles" 
	fieldMapArray(4,1) = "Group Name"
	fieldMapArray(5,1) = "Initial"
	fieldMapArray(6,1) = "Library"
	fieldMapArray(7,1) = "Location" 
	fieldMapArray(8,1) = "Plate ID"
	fieldMapArray(9,1) = "Plate Type"
	fieldMapArray(10,1) = "Plate Format"
	fieldMapArray(11,1) = "Qty Remaining"	 
	fieldMapArray(12,1) = "Solvent Vol"	 
	index = 13
	For each Key in custom_plate_fields_dict
		fieldMapArray(index, 1) = custom_plate_fields_dict.Item(Key)
		index = index + 1
	Next
	
	'Change the following two lines to affect the default columns and column widths
	'for the screen reports.  The first line affects the Search Results screen.
	'The second line affects the Container List screen. 
	'Use a pipe delimited list of ColumnID:ColumnWidth values
	'ColumnID is the first index from fieldMapArray above
	'ColumnWidth is expressed in characters 
	'The columns originally shown are: Plate Format, Plate Type, Library, Qty Remaining, Solvent Volume, Concentration, F/T Cycles
	
	Application("PlateReportColDef1") = "10:20|9:12|6:12|11:12|12:10|1:12|4:10"
	Application("PlateReportColDef2") = "10:20|9:12|6:12|11:12|12:10|1:12|4:10"

	GetPlateFieldMap = fieldMapArray
End Function

Function GetWellFieldMap()
	cf_count = custom_well_fields_dict.count
	Dim fieldMapArray()
	ReDim fieldMapArray(cf_count + 10, 2)
	
	' Well Field Names
	fieldMapArray(0,0) = "WELL_ID"
	fieldMapArray(1,0) = "PLATE_BARCODE"
	fieldMapArray(2,0) = "GRID_POSITION_NAME" 
	fieldMapArray(3,0) = "COMPOUND_ID_FK" 
	fieldMapArray(4,0) = "REG_BATCH_ID"
	fieldMapArray(5,0) = "WELL_FORMAT"
	fieldMapArray(6,0) = "QTYREMAININGSTRING"
	fieldMapArray(7,0) = "CONCENTRATIONSTRING"
	fieldMapArray(8,0) = "SOLVENT" 
	fieldMapArray(9,0) = "PARENT_PLATE_BARCODES"
	fieldMapArray(10,0) = "PARENT_WELL_NAMES"	 
	index = 11
	For each Key in custom_well_fields_dict
		fieldMapArray(index, 0) = Key
		index = index + 1
	Next	

	' Default column widths	
	fieldMapArray(0,2) = 5
	fieldMapArray(1,2) = 15
	fieldMapArray(2,2) = 5
	fieldMapArray(3,2) = 10
	fieldMapArray(4,2) = 15
	fieldMapArray(5,2) = 12
	fieldMapArray(6,2) = 12
	fieldMapArray(7,2) = 12
	fieldMapArray(8,2) = 12
	fieldMapArray(9,2) = 15
	fieldMapArray(10,2) = 5
	index = 11
	For each Key in custom_well_fields_dict
		fieldMapArray(index, 2) = 12
		index = index + 1
	Next	

	' Column header text
	fieldMapArray(0,1) = "Well ID"
	fieldMapArray(1,1) = "Plate Barcode"
	fieldMapArray(2,1) = "Well Name" 
	fieldMapArray(3,1) = "Compound ID" 
	fieldMapArray(4,1) = "Reg Batch ID"
	fieldMapArray(5,1) = "Well Format"
	fieldMapArray(6,1) = "Qty Remaining"
	fieldMapArray(7,1) = "Concentration" 
	fieldMapArray(8,1) = "Solvent"
	fieldMapArray(9,1) = "Parent Plate"
	fieldMapArray(10,1) = "Parent Well"
	index = 11
	For each Key in custom_well_fields_dict
		fieldMapArray(index, 1) = custom_well_fields_dict.Item(Key)
		index = index + 1
	Next
	  
	
	'Change the following two lines to affect the default columns and column widths
	'for the screen reports. 
	'Use a pipe delimited list of ColumnID:ColumnWidth values
	'ColumnID is the first index from fieldMapArray above
	'ColumnWidth is expressed in characters 
	'The columns originally shown are: Plate Format, Plate Type, Library, Qty Remaining, Solvent Volume, Concentration, F/T Cycles
	
	Application("WellReportColDef1") = "1:15|2:5|3:12|4:12|5:12|6:12|7:12|8:12|9:15|10:12"

	GetWellFieldMap = fieldMapArray
End Function


Function GetBatchFieldMap()

	field_count = reg_fields_dict.count
	Dim fieldMapArray()
	ReDim fieldMapArray(field_count+6, 2)
	
	' Reg Field Names
	fieldMapArray(0,0) = "BATCHID" 
	fieldMapArray(1,0) = "QtyAvailable" 
	fieldMapArray(2,0) = "Batch_Field_1"
	fieldMapArray(3,0) = "Batch_Field_2"
	fieldMapArray(4,0) = "Batch_Field_3"
	fieldMapArray(5,0) = "Substance"
	index = 6
	For each Key in reg_fields_dict
		fieldMapArray(index, 0) = cStr(Key)
		index = index + 1
	Next	

	' Column header text
	fieldMapArray(0,1) = "Batch ID"
	fieldMapArray(1,1) = "Qty Available"
	fieldMapArray(2,1) = "A Number"
	fieldMapArray(3,1) = "Lot Number"
	fieldMapArray(4,1) = "Batch Field 3"
	fieldMapArray(5,1) = "Substance"
	index = 6
	For each Key in reg_fields_dict
		fieldMapArray(index, 1) = reg_fields_dict.Item(key)
		index = index + 1
	Next	

	' Default column widths	
	fieldMapArray(0,2) = 12
	fieldMapArray(1,2) = 12
	fieldMapArray(2,2) = 12
	fieldMapArray(3,2) = 12
	fieldMapArray(4,2) = 12
	fieldMapArray(5,2) = 16
	index = 6
	For each Key in reg_fields_dict
		fieldMapArray(index, 2) = 15
		index = index + 1
	Next	

	'Change the following two lines to affect the default columns and column widths
	'for the screen reports. 
	'Use a pipe delimited list of ColumnID:ColumnWidth values
	'ColumnID is the first index from fieldMapArray above
	'ColumnWidth is expressed in characters 
	'The columns originally shown are: Batch ID, QtyAvailable, Substance, Reg Number, Batch Number
	
	Application("BatchReportColDef1") = "1:15|2:15|3:12"

	GetBatchFieldMap = fieldMapArray

End Function


Sub LoadRegFieldsDict()

	Dim RS
	
	ConnStr = GetADOConnString(Application("appkey"), "base_form_group", "BASE_CONNECTION")	
	Set Conn = Server.CreateObject("ADODB.Connection")
	Conn.Open ConnStr
	
	SQL = "Select column_name, comments from USER_COL_COMMENTS Where table_name='INV_VW_REG_STRUCTURES' OR table_name='INV_VW_REG_BATCHES'"
	Set RS = Conn.Execute(SQL)
	While NOT RS.EOF
			
			delmtr = "::on"
			dictKey = RS("column_name")
			dictValue = RS("comments")
			keyPos = InStr(lCase(dictValue),delmtr)
			
			if keyPos > 1 then
				dictValue = left(dictValue, len(dictValue)-len(delmtr))
				if reg_fields_dict.Exists(dictKey) then
					reg_fields_dict.Remove(dictValue)
				end if
				reg_fields_dict.Add dictKey, dictValue
			end if

		RS.MoveNext
	Wend
	Conn.Close
	Set Conn = Nothing
	Set RS = Nothing
	
End Sub

Sub LogAction(ByVal inputstr)
		on error resume next
		filepath = Application("ServerDrive") & "\" & Application("ServerRoot") & "\cfwlog.txt"
		Set fs = Server.CreateObject("Scripting.FileSystemObject")
		Set a = fs.OpenTextFile(filepath, 8, True)  
		a.WriteLine Now & ": " & inputstr
		a.WriteLine " "
		a.close
End Sub


</script>
