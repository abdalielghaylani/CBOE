<SCRIPT LANGUAGE=vbscript RUNAT=Server>
'Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved
'DO NOT EDIT THIS FILE
'This file contains routines for manageing the db_query tables
'This file requires that ado.inc and server_const_vbs.asp be included in the calling page


Dim ManageQueriesConn
Dim bDebugManageQuerie
Dim OverrideManageQueries

bDebugManageQuerie = false


Function getCoreSchemaPrefix(dbkey, formgroup)
	DBMSTYPE = GetUserSettingsSQLSyntax(dbkey, formgroup)
	Select Case(UCase(DBMSTYPE))
		Case "ORACLE"
			if Not Application(dbkey & "_USERNAME") <> "" then
				theReturn = session("username" & dbkey)
			else
				theReturn= Application(dbkey & "_USERNAME")
			end if
		Case "SQL_SERVER","SQLSERVER"
			theReturn = ""
		case "ACCESS"
			theReturn = ""
	end select
	getCoreSchemaPrefix = theReturn
End Function 



'****************************************************************************************
'*	PURPOSE: set connection for user setitngs table 
'*	INPUT: dbkey,formgroup, SettingName, UserID, Setting_Value
'*	RESULT: sets global variable UserSettingConn
'****************************************************************************************

Sub GetManageQueriesConnection(ByVal dbkey, ByVal formgroup, ByVal conn_name)
		if OverrideManageQueries = true then exit sub
		if Not Application("ManageQueriesConnString" & dbkey) <> "" then	
			Application.Lock
				Application("ManageQueriesConnString" & dbkey) = GetUserSettingsConnString(dbkey, formgroup, conn_name)
			Application.UnLock
		End if
	
		if Not Application("ManageQueriesConnString" & dbkey) <> "" then exit sub
		Set ManageQueriesConn=Server.CreateObject("ADODB.Connection")
		'if IsObject(UserSettingConn) then
		'	Set ManageQueriesConn = UserSettingConn
		'else
			on error resume next
			ManageQueriesConn.ConnectionTimeout = conn_conn_timeout
			ManageQueriesConn.CommandTimeout = conn_command_timeout
			ManageQueriesConn.Open Application("ManageQueriesConnString" & dbkey)
			
			if err.number <> 0 then
				ManageQueriesConn.Close
				Set ManageQueriesConn = Nothing
				ManageQueriesConn = ""
				'logaction( "errors occurred in creating connection to db query table: " & err.number & err.Description)
				'err.Clear()
			End if
		'end if
		
End Sub

'****************************************************************************************
'*	PURPOSE: Check to see if user_settings table exists.    
'*	INPUT: dbkey and formgroup           			
'****************************************************************************************
Function CheckExistManageQueryTables(dbkey, formgroup)
	'if OverrideManageQueries = true then exit function
		Dim Cmd
		GetManageQueriesConnection dbkey, formgroup, "base_connection"
		DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
		if DB_QUERY_SCHEMA <> "" then
			DB_QUERY_SCHEMA = DB_QUERY_SCHEMA & "."
		end if
		On error resume next
		Set Cmd = Server.CreateObject("ADODB.COMMAND")
		Cmd.ActiveConnection = ManageQueriesConn
		Cmd.CommandType = adCmdText
		Cmd.CommandText = "SELECT USER_ID FROM " & DB_QUERY_SCHEMA & "DB_QUERY WHERE 1=0"
		Cmd.Execute
		Cmd.CommandText = "SELECT QUERY_ID FROM " & DB_QUERY_SCHEMA & "DB_QUERY_ITEM WHERE 1=0"
		Cmd.Execute
		if err.number = -2147217865 or inStr (UCase(err.Description), "DOES NOT EXIST")  then
			CheckExistManageQueryTables = false
		else
			CheckExistManageQueryTables = true
		end if
		Set Cmd = Nothing
		
	
End Function

'****************************************************************************************
'*	PURPOSE: Check to see if user_settings table exists.    
'*	INPUT: dbkey and formgroup           			
'****************************************************************************************

Function CheckFormgroupTableExists(dbkey, formgroup)
	'if OverrideManageQueries = true then exit sub
	 
	DB_QUERY_SCHEMA =  getCoreSchemaPrefix(dbkey, formgroup)
	if DB_QUERY_SCHEMA <> "" then
		DB_QUERY_SCHEMA = DB_QUERY_SCHEMA & "."
	end if
	dbms =  GetUserSettingsSQLSyntax(dbkey, formgroup)
	Dim Cmd
	GetManageQueriesConnection dbkey, formgroup, "base_connection"
	On error resume next
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = ManageQueriesConn
	Cmd.CommandType = adCmdText
	if UCase(dbms) = "ORACLE" then
		Cmd.CommandText = "SELECT FORMGROUP_ID FROM " & DB_QUERY_SCHEMA & "DB_FORMGROUP WHERE 1=0"
	else
		Cmd.CommandText = "SELECT  FORMGROUP_ID FROM DB_FORMGROUP WHERE 1=0"
	end if
	Cmd.Execute
	if err.number <> 0 then
		CheckFormgroupTableExists = false
	else
		CheckFormgroupTableExists= true
	end if
	Set Cmd = Nothing
End Function

'****************************************************************************************
'*	PURPOSE: Create Manage Query  table(s) 
'*	INPUT: dbkey and formgroup           			
'****************************************************************************************

Sub CreateManangeQueryTables(dbkey,formgroup)


	if OverrideManageQueries = true then exit sub
	Dim Cmd
	Dim sql
	on error resume next
	GetManageQueriesConnection dbkey, formgroup, "base_connection"
	
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = ManageQueriesConn
	ADOProvider = ManageQueriesConn.Provider
	Cmd.CommandType = adCmdText
	DBMSTYPE = GetUserSettingsSQLSyntax(dbkey, formgroup)
	Select Case(DBMSTYPE)

		Case "ORACLE"
				
				sql = "CREATE TABLE DB_QUERY ( " & _
				"	QUERY_ID NUMBER(10) not null, " & _
				"	SESSION_ID NUMBER (10), " & _
				"	QUERY_NAME VARCHAR2(255), " & _
				"	DESCRIPTION VARCHAR2(255), " & _
				"	IS_PUBLIC VARCHAR2(1) not null, " & _
				"	USER_ID VARCHAR2(30), " & _
				"	FORMGROUP VARCHAR2(255), " & _
				"	DBNAME VARCHAR2(255), " & _
				"	APPNAME VARCHAR2(255), " & _
				"	NUMBER_HITS NUMBER (10), " & _
				"	REC_DATE DATE, constraint PK_QUERY_ID primary key (QUERY_ID))"
				
				Cmd.CommandText = sql
				Cmd.Execute
		
				sql = "create sequence DB_QUERY_SEQ increment by 1 start with 1000"
				
				Cmd.CommandText = sql
				Cmd.Execute
						 
				GrantOnCoreTableToAllRoles dbkey, ManageQueriesConn, "DB_QUERY"
				
				
				sql = "CREATE TABLE DB_QUERY_ITEM ( " & _
				"	QUERY_ID NUMBER(10) not null, " & _
				"	FIELD_NAME VARCHAR2(255), " & _
				"	FIELD_VALUE VARCHAR2(255), " & _
				"	BASE64_CDX CLOB, " & _
				"	STRUC_SEARCH_TYPE VARCHAR2(255), " & _
				"	FIELD_TYPE VARCHAR2(255), " & _
				"	FIELD_VALUE_LRG CLOB, " & _
				"	DATA_TYPE VARCHAR2(255), " & _
				"   CONSTRAINT QUERY_ID_FK FOREIGN KEY (QUERY_ID) " &_
				"	REFERENCES DB_QUERY(QUERY_ID) " &_
				"	ON DELETE CASCADE," &_
				"	CONSTRAINT PK_QUERY_ITEM PRIMARY KEY(QUERY_ID, FIELD_NAME) )"
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				'Add foreignkey index
				sql = "CREATE INDEX FK_IDX_DB_QUERY_ITEM ON DB_QUERY_ITEM(QUERY_ID)"
				Cmd.CommandText = sql
				Cmd.Execute
				
				GrantOnCoreTableToAllRoles dbkey, ManageQueriesConn, "DB_QUERY_ITEM"
				
			Case "SQLSERVER", "SQL_SERVER"
			
			on error resume next
			
				 
				sql = "CREATE TABLE DB_QUERY " & _
				"	( " & _
				"	QUERY_ID int IDENTITY NOT NULL, " & _
				"	SESSION_ID int NULL, " & _
				"	QUERY_NAME varchar(255) NULL, " & _
				"	DESCRIPTION varchar(255) NULL, " & _
				"	IS_PUBLIC varchar(255) NULL, " & _
				"	USER_ID varchar(30) NULL, " & _
				"	FORMGROUP varchar(255) NULL, " & _
				"	DBNAME varchar(255) NULL, " & _
				"	APPNAME varchar(255) NULL, " & _
				"	NUMBER_HITS int NULL, " & _
				"	REC_DATE datetime NULL " & _
				"	)  ON [PRIMARY] " 
				Cmd.CommandText = sql
				Cmd.Execute
				
				sql = "ALTER TABLE DB_QUERY ADD CONSTRAINT " & _
				"	PK_Table1 PRIMARY KEY CLUSTERED  " & _
				"	( " & _
				"	Query_ID " & _
				"	) ON [PRIMARY] "
				Cmd.CommandText = sql
				Cmd.Execute
				
					sql = "CREATE TABLE DB_QUERY_ITEM ( " & _
				"	QUERY_ID INT not null, " & _
				"	FIELD_NAME VARCHAR(255), " & _
				"	FIELD_VALUE VARCHAR(255), " & _
				"	BASE64_CDX TEXT, " & _
				"	STRUC_SEARCH_TYPE VARCHAR(255), " & _
				"	FIELD_TYPE VARCHAR(255), " & _
				"	FIELD_VALUE_LRG TEXT, " & _
				"	DATA_TYPE VARCHAR(255), " &_
				"	CONSTRAINT QUERY_ID_FK FOREIGN KEY (QUERY_ID) " &_
						"	REFERENCES DB_QUERY(QUERY_ID) " &_
						"	ON DELETE CASCADE)"
						
				Cmd.CommandText = sql
				Cmd.Execute
				
				sql ="ALTER TABLE DB_QUERY_ITEM ADD CONSTRAINT" &_
					 " PK_DB_QUERY_ITEM PRIMARY KEY CLUSTERED " &_
					" (QUERY_ID,FIELD_NAME) ON [PRIMARY]"		
				Cmd.CommandText = sql
				Cmd.Execute
				
				'Add foreignkey index
				sql = "CREATE INDEX FK_IDX_DB_QUERY_ITEM ON DB_QUERY_ITEM(QUERY_ID)"
				Cmd.CommandText = sql
				Cmd.Execute
			Case "ACCESS"
			
				sql = "CREATE TABLE DB_QUERY(" & _
				"QUERY_ID COUNTER CONSTRAINT pkQueryID PRIMARY KEY,"  &_
				"SESSION_ID INT," & _
				"QUERY_NAME CHAR(255)," & _
				"DESCRIPTION CHAR(255)," & _
				"IS_PUBLIC CHAR(1) not null," & _
				"USER_ID CHAR(30)," & _
				"FORMGROUP CHAR(255)," & _
				"DBNAME CHAR(255)," & _
				"APPNAME CHAR(255)," & _
				"NUMBER_HITS INT," & _
				"REC_DATE DATETIME)"
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				sql = "CREATE INDEX PK_MANAGE_QUERIES"  &_
					" ON DB_QUERY (QUERY_ID)" 					
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				sql = "CREATE TABLE DB_QUERY_ITEM ( " & _
				"QUERY_ID INTEGER not null," & _
				"FIELD_NAME CHAR(255), " & _
				"FIELD_VALUE CHAR(255), " & _
				"BASE64_CDX MEMO, " & _
				"STRUC_SEARCH_TYPE CHAR(255), " & _
				"FIELD_TYPE CHAR(255), " & _
				"FIELD_VALUE_LRG MEMO, " & _
				"DATA_TYPE CHAR(255))"
				
			
				Cmd.CommandText = sql
				Cmd.Execute
			
				
				sql = " ALTER TABLE DB_QUERY_ITEM" &_
				"	ADD CONSTRAINT QUERY_ID_FK FOREIGN KEY (QUERY_ID) " &_
				"	REFERENCES DB_QUERY (QUERY_ID)" 
				' Note that ON DELETE CASCADE does not seem to work with ODBC driver
				' works fine with JET OLEDB driver but we need to support ODBC as well		
				if ADOProvider = "Microsoft.Jet.OLEDB.4.0" then
					sql = sql & " ON DELETE CASCADE"
				End if
				Cmd.CommandText = sql
				Cmd.Execute
				
				sql = "CREATE INDEX PK_DB_QUERY_ITEM"   &_
					"ON DB_QUERY_ITEM (QUERY_ID, FIELD_NAME)"  &_
					"WITH PRIMARY"
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				'Add foreignkey index
				sql = "CREATE INDEX FK_IDX_DB_QUERY_ITEM ON DB_QUERY_ITEM(QUERY_ID)"
				Cmd.CommandText = sql
				Cmd.Execute
				
	End Select
	if Not err.number <> 0 or Not ManageQueriesConn.Errors.Count > 0 then
		Application("MANAGE_QUERIES_TABLE_CHECKED")<> "done"
	else
		Logaction("QueryTables not created" & err.number & err.Description)
		
	end if
Set Cmd = Nothing
End Sub


'**************Manage Queries

Function getUserInfoFromDBQuery(dbkey, formgroup, username)

	
	DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
	If DB_QUERY_SCHEMA <> "" then
		DB_QUERY_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY"
	else
		DB_QUERY_TABLE = "DB_QUERY"
	end if
	if CBool(Application("ALLOW_PUBLIC_QUERIES")) = true then
		sql = "SELECT * " &_
			" FROM " & DB_QUERY_TABLE  &_
			" WHERE (" & DB_QUERY_TABLE & ".USER_ID='" & username & "'" & " OR " & DB_QUERY_TABLE & ".IS_PUBLIC='1')" &_
			" AND NOT " & DB_QUERY_TABLE & ".QUERY_NAME = 'HISTORY' AND " & DB_QUERY_TABLE & ".FORMGROUP='"& UCase(formgroup) & "'" &_
			
			" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'" &_
			" AND " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'" 
	else
		sql = "SELECT * " &_
			" FROM " & DB_QUERY_TABLE  &_
			" WHERE (" & DB_QUERY_TABLE & ".USER_ID='" & username & "')"  &_
			" AND NOT " & DB_QUERY_TABLE & ".QUERY_NAME = 'HISTORY' AND " & DB_QUERY_TABLE & ".FORMGROUP='"& UCase(formgroup) & "'" &_
			" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'" &_
			" AND " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'"

	end if
	getUserInfoFromDBQuery=sql
End Function

Function getUserInfoFromDBQueryALL(dbkey, formgroup, username)

	
	DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
	If DB_QUERY_SCHEMA <> "" then
		DB_QUERY_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY"
	else
		DB_QUERY_TABLE = "DB_QUERY"
	end if
	sql = "SELECT * " &_
		" FROM " & DB_QUERY_TABLE  &_
		" WHERE " & DB_QUERY_TABLE & ".USER_ID='" & username & "'"  &_
		"  AND " & DB_QUERY_TABLE & ".FORMGROUP='"& UCase(formgroup) & "'" &_
		" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'" &_
		" AND " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'"
	getUserInfoFromDBQueryALL=sql
End Function



Function getHistoryInfoFromDBQuery(dbkey, formgroup, username)
	DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
	If DB_QUERY_SCHEMA <> "" then
		DB_QUERY_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY"
		FORMGROUPS = DB_QUERY_SCHEMA & "." & "DB_FORMGROUP"
	else
		DB_QUERY_TABLE = "DB_QUERY"
		FORMGROUPS = "DB_FORMGROUP"
	end if
	if CheckFormgroupTableExists(dbkey, formgroup) then
		if Session("bypass_ini" & dbkey & formgroup) = true then 
			sql = "SELECT " & DB_QUERY_TABLE & ".*" & "," & FORMGROUPS & ".FORMGROUP_NAME AS FORM_NAME" &_
				" FROM " & DB_QUERY_TABLE & "," & FORMGROUPS &_
				" WHERE " & DB_QUERY_TABLE & ".USER_ID='" & username & "'"  &_
				" AND " & DB_QUERY_TABLE & ".QUERY_NAME ='HISTORY'" &_
				" AND " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'" & " AND " & DB_QUERY_TABLE & ".SESSION_ID is NULL" &_
				" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'" &_
				" AND " & DB_QUERY_TABLE & ".FORMGROUP='"& Ucase(formgroup) & "'" &_
				" AND " & DB_QUERY_TABLE & ".FORMGROUP=" &  FORMGROUPS & ".FORMGROUP_ID ORDER BY " & FORMGROUPS & ".FORMGROUP_NAME" 
		else
						sql = "SELECT " & DB_QUERY_TABLE & ".*" & "," & FORMGROUPS & ".FORMGROUP_NAME AS FORM_NAME" &_
				" FROM " & DB_QUERY_TABLE & "," & FORMGROUPS &_
				" WHERE " & DB_QUERY_TABLE & ".USER_ID='" & username & "'"  &_
				" AND " & DB_QUERY_TABLE & ".QUERY_NAME ='HISTORY'" &_
				" AND " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'" & " AND " & DB_QUERY_TABLE & ".SESSION_ID is NULL" &_
				" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'" &_
				" AND " & DB_QUERY_TABLE & ".FORMGROUP='"& Ucase(formgroup) & "'" &_
				" AND " & DB_QUERY_TABLE & ".FORMGROUP=" &  FORMGROUPS & ".FORMGROUP_NAME ORDER BY " & FORMGROUPS & ".FORMGROUP_NAME" 
		end if
	else
		sql = "SELECT " & DB_QUERY_TABLE & ".*" &_
			" FROM " & DB_QUERY_TABLE  &_
			" WHERE " & DB_QUERY_TABLE & ".USER_ID='" & username & "'"  &_
			" AND " & DB_QUERY_TABLE & ".QUERY_NAME ='HISTORY'" &_
			" AND " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'" & " AND " & DB_QUERY_TABLE & ".SESSION_ID is NULL" &_
			" AND " & DB_QUERY_TABLE & ".FORMGROUP='"& Ucase(formgroup) & "'" &_
			" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'"
	end if
	getHistoryInfoFromDBQuery=sql
End Function

Function getSessionInfoFromDBQueryALL(dbkey, formgroup, sessionid)
	
	DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
	If DB_QUERY_SCHEMA <> "" then
		DB_QUERY_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY"
		FORMGROUPS = DB_QUERY_SCHEMA & "." & "DB_FORMGROUP"
	else
		DB_QUERY_TABLE = "DB_QUERY"
		FORMGROUPS = "DB_FORMGROUP"
	end if
	if CheckFormgroupTableExists(dbkey, formgroup) then
		if Session("bypass_ini" & dbkey & formgroup) = true then
			sql = "SELECT " & DB_QUERY_TABLE & ".*" & "," & FORMGROUPS & ".FORMGROUP_NAME as FORM_NAME" &_
				" FROM " & DB_QUERY_TABLE & "," & FORMGROUPS &_
				" WHERE " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'" &_
				" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'" &_
				" AND " & DB_QUERY_TABLE & ".FORMGROUP=" &  FORMGROUPS & ".FORMGROUP_ID" &_
				" ORDER BY " & FORMGROUPS & ".FORMGROUP_NAME" 
		else
			sql = "SELECT " & DB_QUERY_TABLE & ".*" & "," & FORMGROUPS & ".FORMGROUP_NAME as FORM_NAME" &_
				" FROM " & DB_QUERY_TABLE & "," & FORMGROUPS &_
				" WHERE " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'" &_
				" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'" &_
				" AND " & DB_QUERY_TABLE & ".FORMGROUP=" &  FORMGROUPS & ".FORMGROUP_NAME" &_
				" ORDER BY " & FORMGROUPS & ".FORMGROUP_NAME" 
		end if
	else
		sql = "SELECT " & DB_QUERY_TABLE & ".*"  &_
			" FROM " & DB_QUERY_TABLE & "," & FORMGROUPS &_
			" WHERE " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'" &_
			" AND " & DB_QUERY_TABLE & ".DBNAME='"& dbkey & "'" &_
			" AND " & DB_QUERY_TABLE & ".APPNAME='"& Application("APPKEY") & "'" 
			
	end if
	getSessionInfoFromDBQueryALL=sql
End Function

Function doDeleteStoredQuery(dbkey, formgroup, queryid)
	DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
	If DB_QUERY_SCHEMA <> "" then
		DB_QUERY_ITEM_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY_ITEM"
	else
		DB_QUERY_ITEM_TABLE = "DB_QUERY_ITEM"
	end if
	If DB_QUERY_SCHEMA <> "" then
		DB_QUERY_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY"
	else
		DB_QUERY_TABLE = "DB_QUERY"
	end if
	GetManageQueriesConnection dbkey, formgroup, "base_connection"
	sql = "delete FROM " &  DB_QUERY_ITEM_TABLE & " WHERE QUERY_ID=" & queryid
	ManageQueriesConn.Execute(sql)
	
	sql = "delete FROM " & DB_QUERY_TABLE & " WHERE QUERY_ID=" & queryid
	ManageQueriesConn.Execute(sql)
	
	if err.number <> 0 then
		theReturn = "Error in doDeleteStoreQuery: " & err.number & err.Description
	else
		theReturn = ""
	end if
	Session("SavedQueriesExists" & dbkey & formgroup)=RemoveItemFromDelimetedList(Session("SavedQueriesExists" & dbkey & formgroup), queryid, ",")	
	
	doDeleteStoredQuery=theReturn
End Function 

Function doEditStoredQuery(dbkey, formgroup, queryid)
	DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
	If DB_QUERY_SCHEMA <> "" then
		DB_QUERY_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY"
	else
		DB_QUERY_TABLE = "DB_QUERY"
	end if
	GetManageQueriesConnection dbkey, formgroup, "base_connection"
	field_list = split(request("editable_fields"), ",", -1)
	sql = "Select * from " & DB_QUERY_TABLE & " WHERE QUERY_ID=" & queryid
	Set RS = Server.CreateObject("ADODB.RECORDSET")
	on error resume next
	RS.Open sql, ManageQueriesConn, dOpenKeyset,  adLockOptimistic
	if not (RS.eof and RS.bof) then
		RS("Session_id") = null
		for i = 0 to Ubound(field_list)
			RS(field_list(i)) = request(field_list(i))
		next
		RS.Update
		RS.Close
	end if
	if err.number <> 0 then
		theReturn = "Error in doRenameQuery: " & err.number & err.Description
	else
		theReturn = ""
	end if
	
	doEditStoredQuery=theReturn

End Function



Function doStoreQuery(dbkey, formgroup, query_name, sessionid, username, description, public_flag)
	on error resume next
	
		GetManageQueriesConnection dbkey, formgroup, "base_connection"
		if not username <> "" then
			getUserSettingsID dbkey, formgroup
			username = Session("USER_SETTINGS_ID" & dbkey)
		end if
		Set RS = Server.CreateObject("ADODB.Recordset")
		
		DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
		
		If DB_QUERY_SCHEMA <> "" then
			DB_QUERY_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY"
		else
			DB_QUERY_TABLE = "DB_QUERY"
		end if
		on error resume next
		DBMSTYPE = GetUserSettingsSQLSyntax(dbkey, formgroup)
		if UCase(DBMSTYPE) = "ORACLE" then
			sql = "Select " & DB_QUERY_SCHEMA & "." & "DB_QUERY_SEQ.NEXTVAL  theValue from dual"			
			Set RS = ManageQueriesConn.Execute(sql)
			queryid = RS("theValue")
			RS.Close
		end if
		Dim bIsHistory
		Dim bisSavedQuery
		
	
		if Application("EXPIRE_QUERY_HISTORY_DAYS") = 0 and query_name = "HISTORY" then
			sql = "select query_id from " & DB_QUERY_TABLE & " where query_name = 'HISTORY' and user_id = ? and dbname=? and formgroup=?"
			Set Cmd = Server.CreateObject("ADODB.COMMAND")
			Cmd.ActiveConnection = ManageQueriesConn
			Cmd.CommandType = adCmdText
			Cmd.CommandText = sql
			Cmd.Parameters.Append Cmd.CreateParameter("puser_id", 200, 1,Len(username)+1, username) 
			Cmd.Parameters.Append Cmd.CreateParameter("pdbname", 200, 1,Len(dbkey)+1, dbkey) 
			Cmd.Parameters.Append Cmd.CreateParameter("pformgroup", 200, 1,Len(formgroup)+1, formgroup) 
			RS.Open cmd
			If Not (RS.eof and RS.bof) then
				queryid = RS("query_id")
				doDeleteStoredQuery dbkey, formgroup, queryid
			RS.Close
			end if
		end if
		Set RS = Server.CreateObject("ADODB.RECORDSET")
		RS.Open DB_QUERY_TABLE, ManageQueriesConn, adOpenKeyset,  adLockOptimistic, adCmdtable 'get the right record with mol_id
		RS.AddNew
		if UCase(query_name) = "HISTORY" and sessionid <> "" then
			bIsHistory = true
			RS("query_name") = query_name
			RS("description") = Date() & ":" & Time()
			RS("IS_PUBLIC") = 0
			RS("user_id") = username
		else
			bSavedQuery = true
			RS("query_name") = query_name
			RS("description") = description
			RS("IS_PUBLIC") = public_flag
			RS("user_id") = username
		end if
		
		RS("dbname") = dbkey
		RS("appname") = Application("appkey")
		RS("rec_date") = Date()
		RS("formgroup") = UCase(formgroup) 'this can be a name or a number - it is varcar
		RS("number_hits") = Session("hitlistRecordCount" & dbkey & formgroup)
		if UCase(DBMSTYPE) = "ORACLE" then
			RS("query_id") = queryid
			RS.Update
		else
			RS.Update
			QueryID = RS("query_id")
		end if

		RS.Close
		if bIsHistory = true then
			if Session("QueryHistoryExists" & dbkey & formgroup) <> "" then
				Session("QueryHistoryExists" & dbkey & formgroup) =Session("QueryHistoryExists" & dbkey & formgroup) & "," & queryid
			else
				Session("QueryHistoryExists" & dbkey & formgroup) = queryid
			end if
		end if
		if bSavedQuery = true then
		
			if Session("SavedQueriesExists" & dbkey & formgroup) <> "" then
				Session("SavedQueriesExists" & dbkey & formgroup) =Session("SavedQueriesExists" & dbkey & formgroup) & "," & queryid
			else
				Session("SavedQueriesExists" & dbkey & formgroup) = queryid
				
			end if
		end if
		
		if err.number <> 0 then
			logaction(err.number & err.Description)
		end if
		If DB_QUERY_SCHEMA <> "" then
			DB_QUERY_ITEM_TABLE = DB_QUERY_SCHEMA & "." &  "DB_QUERY_ITEM"
		else
			DB_QUERY_ITEM_TABLE = "DB_QUERY_ITEM"
		end if
		RS.Open DB_QUERY_ITEM_TABLE, ManageQueriesConn, adOpenKeyset,  adLockOptimistic, adCmdTable 'get the right record with mol_id
		
		doStoreQueryItems dbkey, formgroup, "Identity", Session("SearchData" & "Identity" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "Similarity", Session("SearchData" & "Similarity" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "Exact", Session("SearchData" & "Exact" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "SubStructure", Session("SearchData" & "SubStructure" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "MolWeight", Session("SearchData" & "MolWeight" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "Formula", Session("SearchData" & "Formula" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "RelFields",  Session("SearchData" & "Relational" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "SORT_DIRECTION",  Session("SORT_DIRECTION" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "ORDER_BY",  Session("ORDER_BY" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
		doStoreQueryItems dbkey, formgroup, "CHILDTABLE_CRITERIA", Session("add_childtable_criteria" & dbkey & formgroup), ManageQueriesConn, RS, QueryID
			
			
		CloseRS(RS)
		CloseConn(ManageQueriesConn)
		if err.number <> 0 then
			theReturn = "Error in doStoreQuery for" & query_name & ": " & err.number & err.Description
			err.clear()
		else
			theReturn = ""
		end if
		
		doStoreQuery = theReturn
End Function

Sub doStoreQueryItems (dbkey,formgroup,store_type,input_str,ByRef DataConn,ByRef RS, QueryID)
	'split field array and then get data from form using addData sub
	fieldarray =  Split(input_str, ",", -1)
	Dim j
	for j = 0 to UBound(fieldarray)
		Select Case UCase(store_type)
		Case "RELFIELDS"
			relname = split(fieldarray(j), ";", -1)
			if Session("SearchData" & relname(0) & dbkey & formgroup) <> "" then
				RS.AddNew
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=relname(0)
				RS("FIELD_TYPE") = "RELATIONAL"
				RS("DATA_TYPE") = relname(1)
				'5/25 don't allow data greater then 256 characters
				if Not Len(Session("SearchData" & relname(0) & dbkey & formgroup)) > 254 then
					RS("FIELD_VALUE")=Session("SearchData" & relname(0) & dbkey & formgroup)
				else
					RS("FIELD_VALUE_LRG")=Session("SearchData" & relname(0) & dbkey & formgroup)
				end if
				RS.Update
			end if
		Case "SORT_DIRECTION"
			if Session("SORT_DIRECTION" & dbkey & formgroup) <> "" then
				RS.AddNew
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")="SORT_DIRECTION"
				RS("FIELD_TYPE") = "SORT_DIRECTION"
				RS("DATA_TYPE") = "0"
				RS("FIELD_VALUE")=Session("SORT_DIRECTION" & dbkey & formgroup)
				RS.Update
			end if
		Case "CHILDTABLE_CRITERIA"
			if Session("add_childtable_criteria" & dbkey & formgroup) <> "" then
				RS.AddNew
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")="CHILDTABLE_CRITERIA"
				RS("FIELD_TYPE") = "CHILDTABLE_CRITERIA"
				RS("DATA_TYPE") = "0"
				RS("FIELD_VALUE")=Session("add_childtable_criteria" & dbkey & formgroup)
				RS.Update
			end if
		
		Case "ORDER_BY"
			if Session("ORDER_BY" & dbkey & formgroup) <> "" then
				RS.AddNew
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")="ORDER_BY"
				RS("FIELD_TYPE") = "ORDER_BY"
				RS("DATA_TYPE") = "0"
				
				RS("FIELD_VALUE")=Session("ORDER_BY" & dbkey & formgroup)
				RS.Update
			end if
		Case "SIMILARITY"
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("STRUC_SEARCH_TYPE")="SIMILARITY"
				RS("FIELD_TYPE") = "STRUCTURE"
				RS("BASE64_CDX") = Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if
		Case "IDENTITY"
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("STRUC_SEARCH_TYPE")="IDENTITY"
				RS("FIELD_TYPE") = "STRUCTURE"
				RS("BASE64_CDX") = Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if	
		Case "EXACT"
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("STRUC_SEARCH_TYPE")="EXACT"
				RS("FIELD_TYPE") = "STRUCTURE"
				RS("BASE64_CDX") = Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if
		
		Case "SUBSTRUCTURE"
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
				RS.AddNew	
					RS("QUERY_ID")=QueryID
					RS("FIELD_NAME")=fieldarray(j)
					RS("STRUC_SEARCH_TYPE")="SUBSTRUCTURE"
					RS("FIELD_TYPE") = "STRUCTURE"
					RS("BASE64_CDX") = Session("SearchData" & fieldarray(j) & dbkey & formgroup)
				RS.Update
			end if
			
		Case "MOLWEIGHT"
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
				RS.AddNew	
					RS("QUERY_ID")=QueryID
					RS("FIELD_NAME")=fieldarray(j)
					RS("FIELD_TYPE") = "MOLWEIGHT"
					RS("FIELD_VALUE")=Session("SearchData" & fieldarray(j) & dbkey & formgroup)
				RS.Update
			end if
		Case "FORMULA"
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
				RS.AddNew	
					RS("QUERY_ID")=QueryID
					RS("FIELD_NAME")=fieldarray(j)
					RS("FIELD_TYPE") = "FORMULA"
					RS("FIELD_VALUE")=Session("SearchData" & fieldarray(j) & dbkey & formgroup)
				RS.Update
			end if
		
		End Select
	Next

End Sub



Function doRestoreQuery(dbkey, formgroup, query_id)
	on error resume next
		
		GetManageQueriesConnection dbkey, formgroup, "base_connection"
		Set RS = Server.CreateObject("ADODB.Recordset")
		DB_QUERY_SCHEMA = getCoreSchemaPrefix(dbkey, formgroup)
		If DB_QUERY_SCHEMA <> "" then
			DB_QUERY_ITEM_TABLE = DB_QUERY_SCHEMA & "." & "DB_QUERY_ITEM"
		else
			DB_QUERY_ITEM_TABLE = "DB_QUERY_ITEM"
		end if
		sql = "SELECT * FROM " & DB_QUERY_ITEM_TABLE & "  WHERE QUERY_ID = " & query_id
		on error resume next
		RS.Open sql, ManageQueriesConn 
		If Not(RS.BOF and RS.EOF) then
			RS.MoveFirst
		
				Do While Not RS.EOF
				
			'for i = 0 to RS.Fields.Count-1
				'logaction(RS.Fields.Item(i).Name & RS.Fields.Item(i).value)
			'next
				field_name = Trim(RS("FIELD_NAME"))
				
				Select Case UCase(Trim(RS("FIELD_TYPE")))
					Case "STRUCTURE"
							StrucType=Trim(RS("STRUC_SEARCH_TYPE"))
							
							if Not Session("SearchData" & StrucType & dbkey & formgroup)<> "" then
								Session("SearchData" & StrucType & dbkey & formgroup) =  field_name
							else
								Session("SearchData" & StrucType & dbkey & formgroup) = Session("SearchData" & StrucType & dbkey & formgroup) & "," &  field_name
							end if
						
							Session("SearchData" & field_name& dbkey & formgroup) = RS("BASE64_CDX")
					Case "MOLWEIGHT"
						if 	Session("SearchData" & "MOLWEIGHT" & dbkey & formgroup) <> "" then
							Session("SearchData" & "MOLWEIGHT" & dbkey & formgroup) = Session("MOLWEIGHT" & "Relational" & dbkey & formgroup) & "," & field_name
						else
							Session("SearchData" & "MOLWEIGHT" & dbkey & formgroup) = field_name
						end if
						Session("SearchData" & field_name & dbkey & formgroup)= RS("FIELD_VALUE")
					Case "FORMULA"
						if 	Session("SearchData" & "Formula" & dbkey & formgroup) <> "" then
							Session("SearchData" & "Formula" & dbkey & formgroup) = 	Session("Formula" & "Relational" & dbkey & formgroup) & "," & field_name
						else
							Session("SearchData" & "Formula" & dbkey & formgroup) = field_name
						end if
						Session("SearchData" & field_name & dbkey & formgroup)= RS("FIELD_VALUE")
					Case "RELATIONAL"
					
						if 	Session("SearchData" & "Relational" & dbkey & formgroup) <> "" then
							Session("SearchData" & "Relational" & dbkey & formgroup) = 	Session("SearchData" & "Relational" & dbkey & formgroup) & "," & field_name & ";" &  Trim(RS("DATA_TYPE"))
						else
							Session("SearchData" & "Relational" & dbkey & formgroup) = field_name
						end if
						'LJB 5_27 Add return of data from new field_value_lrg field added to support long list used for searching
						Test_FIELDVALUE = RS("FIELD_VALUE")
						Test_LRGFieldValue = RS("FIELD_VALUE_LRG")
						if Len(Trim(Test_LRGFieldValue)) > 0 then
							Session("SearchData" & field_name & dbkey & formgroup)= Test_LRGFieldValue
						else
							Session("SearchData" & field_name & dbkey & formgroup)= Test_FIELDVALUE
						end if
						
						
					Case "ORDER_BY"
						Session("Order_By" & dbkey & formgroup) = RS("FIELD_VALUE")	
					Case "SORT_DIRECTION"
						Session("Sort_Direction" & dbkey & formgroup) = RS("FIELD_VALUE")
					Case "CHILDTABLE_CRITERIA"
						Session("add_childtable_criteria" & dbkey & formgroup)= Trim(RS("FIELD_VALUE"))
				End Select
				RS.MoveNext
			loop
		end if
	
		CloseRS(RS)
		CloseConn(ManageQueriesConn)
		if err.number <> 0 then
			theReturn = "Error in doReStoreQuery for" & query_name & ": " & err.number & err.Description
			err.clear()
		else
			theReturn = ""
		end if
		doReStoreQuery = theReturn
End Function

Sub doRestoreQueryItems (dbkey,formgroup,store_type,input_str,ByRef DataConn,ByRef RS, QueryID)
	
	'split field array and then get data from form using addData sub
	fieldarray =  Split(input_str, ",", -1)
	for j = 0 to UBound(fieldarray)
		Select Case UCase(fieldtype)
		Case "RELFIELDS"
			relname = split(fieldarray(j), ";", -1)
			if Session("SearchData" & relname(0) & dbkey & formgroup) <> "" then
				RS.AddNew
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=relname(0)
				'LJB 5_27 Add return of data from new field_value_lrg field added to support long list used for searching
				if Not Len(Session("SearchData" & relname(0) & dbkey & formgroup)) > 254 then
					RS("FIELD_VALUE")=Session("SearchData" & relname(0) & dbkey & formgroup)
				else
					RS("FIELD_VALUE_LRG")=Session("SearchData" & relname(0) & dbkey & formgroup)
				end if
				RS.Update
			end if
		Case "SORT_DIRECTION"
			if Session("SearchData" & relname(0) & dbkey & formgroup) <> "" then
				RS.AddNew
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")="SORT_DIRECTION"
				RS("FIELD_TYPE") = "RELATIONAL"
				RS("DATA_TYPE") = "0"
				RS("FIELD_VALUE")=Session("SORT_DIRECTION" & dbkey & formgroup)
				RS.Update
			end if
		Case "ORDER_BY"
			if Session("SearchData" & relname(0) & dbkey & formgroup) <> "" then
				RS.AddNew
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=relname(0)
				RS("FIELD_TYPE") = "RELATIONAL"
				RS("DATA_TYPE") = "0"
				RS("FIELD_VALUE")=Session("ORDER_BY" & dbkey & formgroup)
				RS.Update
			end if
		Case "CHILDTABLE_CRITERIA"
			if Session("SearchData" & relname(0) & dbkey & formgroup) <> "" then
				RS.AddNew
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=relname(0)
				RS("FIELD_TYPE") = "RELATIONAL"
				RS("DATA_TYPE") = "0"
				RS("FIELD_VALUE")=Session("add_childtable_criteria" & dbkey & formgroup)
				RS.Update
			end if
		Case "SIMILARITY"
		
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("FIELD_TYPE") = "RELATIONAL"
				RS("STRUC_SEARCH_TYPE")="SIMILARITY"
				RS("BASE64_CDX") = Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if
		Case "IDENTITY"
		
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("FIELD_TYPE") = "RELATIONAL"
				RS("STRUC_SEARCH_TYPE")="IDENTITY"
				RS("BASE64_CDX") = Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if	
		Case "EXACT"
			
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("STRUC_SEARCH_TYPE")="EXACT"
				RS("FIELD_TYPE") = "STRUCTURE"
				RS("BASE64_CDX") = Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if
		Case "SUBSTRUCTURE"
		
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("STRUC_SEARCH_TYPE")="EXACT"
				RS("FIELD_TYPE") = "STRUCTURE"
				RS("BASE64_CDX") = Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if
		Case "MOLWEIGHT"
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("FIELD_TYPE") = "MOLWEIGHT"
				RS("FIELD_VALUE")=Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if
		Case "FORMULA"
			if Session("SearchData" & fieldarray(j) & dbkey & formgroup) <> "" then
			RS.AddNew	
				RS("QUERY_ID")=QueryID
				RS("FIELD_NAME")=fieldarray(j)
				RS("FIELD_TYPE") = "FORMULA"
				RS("FIELD_VALUE")=Session("SearchData" & fieldarray(j) & dbkey & formgroup)
			RS.Update
			end if
		
		End SElect
	RS.Update
	Next
	
	

End Sub




Sub AppInitQueryTables()
	Dim tempArr
	Dim i
	if Not Application("ALLOW_QUERY_MANAGEMENT") <> "" then
			Application.Lock
			Application("ALLOW_QUERY_MANAGEMENT")=GetINIValue( "optional", "GLOBALS", "ALLOW_QUERY_MANAGEMENT", "web_app", "cfserver")
		if (Application("ALLOW_QUERY_MANAGEMENT")="INIEmpty" or Application("ALLOW_QUERY_MANAGEMENT") = "NULL" or Application("ALLOW_QUERY_MANAGEMENT") = "") then
			Application("ALLOW_QUERY_MANAGEMENT")="1"
		end if
		
		Application("Expire_Query_History_Days")=GetINIValue( "optional", "GLOBALS", "Expire_Query_History_Days", "web_app", "cfserver")
		if (Application("Expire_Query_History_Days")="INIEmpty" or Application("Expire_Query_History_Days") = "NULL" or Application("Expire_Query_History_Days") = "") then
			Application("Expire_Query_History_Days")="0"
		end if
		
		Application("ALLOW_PUBLIC_QUERIES")=GetINIValue( "optional", "GLOBALS", "ALLOW_PUBLIC_QUERIES", "web_app", "cfserver")
		if (Application("ALLOW_PUBLIC_QUERIES")="INIEmpty" or Application("ALLOW_PUBLIC_QUERIES") = "NULL" or Application("ALLOW_PUBLIC_QUERIES") = "") then
			Application("ALLOW_PUBLIC_QUERIES")="0"
		end if
		Application("ALLOW_QUERY_MNGMNT_FG_SELECTOR")=GetINIValue( "optional", "GLOBALS", "ALLOW_QUERY_MNGMNT_FG_SELECTOR", "web_app", "cfserver")
		if (Application("ALLOW_QUERY_MNGMNT_FG_SELECTOR")="INIEmpty" or Application("ALLOW_QUERY_MNGMNT_FG_SELECTOR") = "NULL" or Application("ALLOW_QUERY_MNGMNT_FG_SELECTOR") = "") then
			Application("ALLOW_QUERY_MNGMNT_FG_SELECTOR")= "0"
		end if
		Application.UnLock
	end if
	if OverrideManageQueries = true then exit sub
	
	if NOT CBool(Application("ALLOW_QUERY_MANAGEMENT")) then exit sub
	tempArr = Split(Application("DBNames"),",")
	For i = 0 to Ubound(tempArr) 
		dbname = tempArr(i)
		GetManageQueriesConnection dbname, "base_form_group", "base_connection"
		currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
		' Check if tables exist
		QtableExists = CheckExistManageQueryTables(dbname, formgroup)
		
		if QtableExists = true then
			'5_27 check to see number fields. If not 8 then add the field_value_lrg field
			numFields=GetNumberOfFieldsinQueryTable(dbname,formgroup)
			if not numFields = 8 then
				addLRGFieldToQueryTable dbname,formgroup
			end if
			ClearExpiredQueries dbname, "" 
		else
		
			CreateManangeQueryTables dbname,formgroup
		end if
	Next
	if not err.number <> 0 then
		Application.lock
			Application("QT_Initialized")="done"
		Application.unlock
	end if
End sub

Sub SessInitQueryTables()
	Dim tempArr
	Dim i
	if OverrideManageQueries = true then exit sub
	if NOT CBool(Application("allow_query_management")) then exit sub
	tempArr = Split(Application("DBNames"),",")
	For i = 0 to Ubound(tempArr) 
	
		dbname = tempArr(i)
		GetManageQueriesConnection dbname, "base_form_group", "base_connection"
		currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
		QtableExists = CheckExistManageQueryTables(dbname, formgroup)
		if QtableExists = true then
			'5_27 check to see number fields. If not 8 then add the field_value_lrg field
			numFields=GetNumberOfFieldsinQueryTable(dbname,formgroup)
			if not numFields = 8 then
				addLRGFieldToQueryTable dbname,formgroup
			end if
			ClearExpiredQueries dbname, User_ID 
		else
			CreateManangeQueryTables dbkey,formgroup
		end if 
	Next	
	if not err.number <> 0 then
		Session("HistoryDeleted" & dbkey) = "done"
	end if
End sub


Sub ClearExpiredQueries(dbname, userName)
	if OverrideManageQueries = true then exit sub
	Dim Cmd
	Dim sql
	Dim expDate
	
	expDate = DateAdd("d", -1 * CInt(Application("Expire_query_history_days")), Now())
	
	

	if not isObject(ManageQueriesConn) then
		GetManageQueriesConnection dbname, "base_form_group", "base_connection"
	end if
	ADOProvider = ManageQueriesConn.Provider
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = ManageQueriesConn
	Cmd.CommandType = adCmdText
	currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
	
	Select Case(currentRDBMS)
		Case "ORACLE"
			tableName = Application(dbname & "_USERNAME") & ".DB_QUERY"				
		Case "SQLSERVER", "SQL_SERVER"
			tableName = "DB_QUERY"
		Case "ACCESS"	
			tableName = "DB_QUERY"
			if NOT (ADOProvider = "Microsoft.Jet.OLEDB.4.0") then
				' Since ON DELETE CASCADE does not work for Jet ODBC driver we must delete from CSDOHitlist table
				sql =	"DELETE DB_QUERY_ITEM.* FROM DB_QUERY_ITEM INNER JOIN DB_QUERY " &_
						" ON DB_QUERY_ITEM.QUERY_ID = DB_QUERY.QUERY_ID" &_
						" WHERE DB_QUERY.REC_DATE < ? AND DB_QUERY.QUERY_NAME='HISTORY'"
			
				if UserName <> "" then
					sql = sql & " AND " & tableName & ".USER_ID=?" 
				End if
			
				Set Cmd = Server.CreateObject("ADODB.COMMAND")
				Cmd.ActiveConnection = ManageQueriesConn
				Cmd.CommandType = adCmdText
				Cmd.CommandText = sql
				Cmd.Parameters.Append Cmd.CreateParameter("pDateCreated", adDBTimeStamp, 1,30, expDate) 
				if UserName <> "" then 
					Cmd.Parameters.Append Cmd.CreateParameter("pUserName", 200, 1,Len(UserName) + 1, Trim(UCase(UserName))) 
				End if
				CoreExecuteCmd Cmd, "ClearExpiredQueries" 
				Set Cmd = Nothing
				exit sub
			else
				tableName = "DB_QUERY"
			end if
									 
	End Select
	
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = ManageQueriesConn
	Cmd.CommandType = adCmdText

	' NOTE that in Oracle and SQL SERVER values in CSDOHitlist are deleted by Cascaded FK constraint
	sql ="DELETE FROM " & tableName  &_
		" WHERE REC_DATE < ? and DB_QUERY.QUERY_NAME='HISTORY'" 
	
	if UserName <> "" then
		sql = sql & " AND " & tableName & ".USER_ID=?" 
	End if
	
	Cmd.CommandText = sql
	Cmd.Parameters.Append Cmd.CreateParameter("pDateCreated", adDBTimeStamp, 1,30, expDate) 
	if UserName <> "" then 
		Cmd.Parameters.Append Cmd.CreateParameter("pUserName", 200, 1,Len(UserName) + 1, Trim(UCase(UserName))) 
	End if
	CoreExecuteCmd Cmd, "ClearExpiredQueries"

	Set Cmd = Nothing
End Sub

Sub setSavedQueryExists(dbkey, formgroup, user_name)
	on error resume next
	sql = getUserInfoFromDBQuery(dbkey, formgroup,user_name)
	GetManageQueriesConnection dbkey, formgroup, "base_connection"
	Set RS = ManageQueriesConn.Execute(sql)
	if Not (RS.BOF and RS.EOF) then
		Do while Not RS.EOF
			if theReturn <> "" then
				theReturn = theReturn & "," & RS("query_id")
			else
				theReturn = RS("query_id")
			end if
			RS.MoveNext
		loop
	else
		theReturn = ""
	end if
	Session("SavedQueriesExists" & dbkey & formgroup) =theReturn
End Sub 


Sub setSavedHistoryExists(dbkey, formgroup, user_name)

	sql = getHistoryInfoFromDBQuery(dbkey, formgroup, user_name)
		on error resume next
		GetManageQueriesConnection dbkey, formgroup, "base_connection"
		Set RS = ManageQueriesConn.Execute(sql)
		if Not (RS.BOF and RS.EOF) then
			Do while Not RS.EOF
				if theReturn <> "" then
					theReturn = theReturn & "," & RS("query_id")
				else
					theReturn = RS("query_id")
				end if
				RS.MoveNext
			loop
		else
			theReturn = ""
		end if
	Session("QueryHistoryExists" & dbkey & formgroup)= theReturn
End sub

'LJB 5_27 Add return of data from new field_value_lrg field added to support long list used for searching
'This sub simply adds a field_value_lrg field if it is not there. All large fields are store there rather then in the smaller field_value
Sub addLRGFieldToQueryTable(dbkey,formgroup)
	currentRDBMS = GetUserSettingsSQLSyntax(dbkey, "base_form_group")
	GetManageQueriesConnection dbkey, formgroup, "base_connection"
	Select Case(currentRDBMS)
		Case "ORACLE"
			sql = "ALTER TABLE " & Application(dbkey & "_USERNAME") & ".DB_QUERY_ITEM ADD (FIELD_VALUE_LRG CLOB)"
		Case "SQLSERVER"
			sql = "ALTER TABLE DB_QUERY_ITEM ADD FIELD_VALUE_LRG TEXT"
		Case "ACCESS"
			sql = "ALTER TABLE DB_QUERY_ITEM ADD COLUMN FIELD_VALUE_LRG MEMO"
	End select
	Set RS = ManageQueriesConn.Execute(Sql)
	if err.number <> 0 then
		logaction("Error in addLRGFieldToQueryTable:" &  err.number & err.Description)
	end if
End sub
'LJB 5_27 Add return of data from new field_value_lrg field added to support long list used for searching
'This function returns the number of fields in the db_query_item table 
Function GetNumberOfFieldsinQueryTable(dbkey,formgroup)
	Dim lRecsAffected
	Dim slq
	Dim RS
	GetManageQueriesConnection dbkey, formgroup, "base_connection"
	currentRDBMS = GetUserSettingsSQLSyntax(dbkey, "base_form_group")
	Select Case(currentRDBMS)
		Case "ORACLE"
			sql = "SELECT * FROM " & Application(dbkey & "_USERNAME") & ".DB_QUERY_ITEM WHERE 0=1"
		Case "SQLSERVER"
			sql = "SELECT * FROM  DB_QUERY_ITEM  WHERE 0=1" 
		Case "ACCESS"
			sql = "SELECT * FROM  DB_QUERY_ITEM  WHERE 0=1"
	End select
	on error resume next
	Set RS = ManageQueriesConn.Execute(Sql)
	if err.number <> 0 then
		GetNumberOfFieldsinQueryTable = 0
	Else
		GetNumberOfFieldsinQueryTable = RS.Fields.Count	
	end if 	
End Function
</script>