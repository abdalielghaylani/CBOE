
<SCRIPT LANGUAGE=vbscript RUNAT=Server>
'Copyright 1999-2003 CambridgeSoft Corporation. All rights reserved
'DO NOT EDIT THIS FILE
'This file contains routines for manageing the user_settings table
'This file requires that ado.inc and server_const_vbs.asp be included in the calling page


'global connection for user settings table. set via GetUserSettingsConnection
Dim UserSettingConn
Dim bDebugUserSet
Dim OverrideManageHits
Dim currentRDBMS

bDebugUserSet = false





Function GetUserSettingsSQLSyntax(ByVal dbkey, ByVal formgroup)
	if OverrideManageHits = true then exit function
	if not Session("UserSettingsSQLSyntax" & dbkey) <> "" then
	
		if not dbkey <> "" then dbkey = request("dbname")
		if not formgroup <> "" then formgroup = request("formgroup")
		if not formgroup <> "" then formgroup = "base_form_group"
		on error resume next
		if Session("bypass_ini" & dbkey & formgroup) = true then
			thearray = Application("FORM_GROUP" & dbkey & formgroup)
		else
			thearray = Application(formgroup & dbkey)			
		end if
		if not isArray(thearray) then
			DoLoggedOutMsg()
		end if
		the_table_group = thearray(kTableGroup)
		if not the_table_group<> "" then
			the_table_group = "base_table_group"
		end if
		if Session("bypass_ini" & dbkey & formgroup) = true then
			thenewarray = Application(the_table_group)
		else
			thenewarray = Application(the_table_group & dbkey)
		end if
		basetable = thenewarray(kBaseTable)
		if Session("bypass_ini" & dbkey & formgroup) = true then
			thearray = Application(basetable & dbkey & formgroup)
		else
			thearray = Application(basetable & dbkey)
		end if
		on error resume next
		thevalue = thearray(kSQLSyntax)
		if err.number <> 0 then
			thevalue = ""
		end if
		 Session("UserSettingsSQLSyntax" & dbkey)  = theValue
		else
			 thevalue = Session("UserSettingsSQLSyntax" & dbkey)
		end if
	GetUserSettingsSQLSyntax = thevalue
End Function

'****************************************************************************************
'*	PURPOSE: Sets the DMBS type  for use by USER_SETTINGS routines                          
'*	INPUT: dbkey and formgroup	                    			
'*	OUTPUT: sets a global variable DMBSType 					
'****************************************************************************************

Sub getGlobal_DMBSType(dbkey, formgroup)
	if OverrideManageHits = true then exit sub
	if Not Session("DBMS_TYPE") <> "" then 
		'!DGB! the second parameter of GetUserSettingsSQLSyntax should be formgroup not basetable!
		Session("DBMSTYPE")  = UCase(GetUserSettingsSQLSyntax(dbkey, formgroup))
	end if
End Sub

Function isLogInRequired(dbkey, formgroup, conn_name)
	
	if Session("bypass_ini" & dbkey & formgroup) = true then
		conn_info_array = Application(conn_name & dbkey)
	else
		conn_info_array = Application(conn_name & dbkey)
	end if	
	conn_username=conn_info_array(kConnUserName)
	if UCase(conn_username) = "LOGIN_REQUIRED" then
		thereturn = true
	else
		thereturn = false
	end if
	isLogInRequired = thereturn
End Function

'****************************************************************************************
'*	PURPOSE: Gets the USER_ID for User_Settings.User_ID table                         
'*	INPUT: dbkey and formgroup	                    			
'*	OUTPUT: the user_setting_id for the current user					
'****************************************************************************************

Function getUserSettingsID(dbkey, formgroup)
	if OverrideManageHits = true then exit function
	if Not dbkey <> "" then request("dbname")
	if Not dbkey <> "" then exit function
	if Not Session("USER_SETTINGS_ID" & dbkey) <> "" then
		getGlobal_DMBSType dbkey, formgroup
		Select Case Session("DBMSTYPE")
			Case "ORACLE"
				if Not isLogInRequired(dbkey, formgroup, "base_connection") = true then
					if Not Request.Cookies("CS_UID" & dbkey) <> "" then
						Session("USER_SETTINGS_ID" & dbkey) = getUserSettingCookieOracle(dbkey, formgroup)
						Response.Cookies("CS_UID" & dbkey) = Session("USER_SETTINGS_ID" & dbkey) 
						Response.Cookies("CS_UID" & dbkey).expires =  DateAdd("d", Application("Expire_User_Setting_Days"), Date())
						Response.Cookies("CS_UID" & dbkey).Path= "/"  & Application("Appkey")
					else
						Session("USER_SETTINGS_ID" & dbkey) = Request.Cookies("CS_UID" & dbkey)
					end if
				else
					Session("USER_SETTINGS_ID" & dbkey) =  Session("UserName" & dbKey)
				end if
				
			Case "ACCESS"
				if Not Request.Cookies("CS_UID" & dbkey) <> "" then
					Session("USER_SETTINGS_ID" & dbkey) = getUserSettingCookie(dbkey, formgroup)
					Response.Cookies("CS_UID" & dbkey) = Session("USER_SETTINGS_ID" & dbkey) 
					Response.Cookies("CS_UID" & dbkey).expires =  DateAdd("d", Application("Expire_User_Setting_Days"), Date())
					Response.Cookies("CS_UID" & dbkey).Path= "/"  & Application("Appkey")
				else
					Session("USER_SETTINGS_ID" & dbkey) = Request.Cookies("CS_UID" & dbkey)
				end if
					
			Case "SQL_SERVER","SQLSERVER"
				if Not Request.Cookies("CS_UID" & dbkey) <> "" then
					Session("USER_SETTINGS_ID" & dbkey) = getUserSettingCookie(dbkey, formgroup)
					Response.Cookies("CS_UID" & dbkey) = Session("USER_SETTINGS_ID" & dbkey) 
					Response.Cookies("CS_UID" & dbkey).expires =  DateAdd("d", Application("Expire_User_Setting_Days"), Date())
					Response.Cookies("CS_UID" & dbkey).Path= "/"  & Application("Appkey")
				else
					Session("USER_SETTINGS_ID" & dbkey) = Request.Cookies("CS_UID" & dbkey)
				end if

		end select
	end if
	getUserSettingsID = Session("USER_SETTINGS_ID" & dbkey)
End Function 


'****************************************************************************************
'*	PURPOSE: sets the  Session("USER_SETTINGS_ID" & dbkey) for all dbkeys of a global
'*			search formgroup.  Derived from GetUserSettingsID                        
'*	INPUT: none                    			
'*	OUTPUT: Sets the Session("USER_SETTINGS_ID" & dbkey) values				
'****************************************************************************************
Sub SetGlobalSearchUserSettingsIDs()
	if OverrideManageHits = true then exit sub
	Dim i
	Dim multi_dbnames
	Dim arrSize

	formgroupflag= GetFormGroupVal(dbkey, formgroup, kFormGroupFlag)
	if UCase(formgroupflag) <> "GLOBAL_SEARCH" then EXIT Sub
	'EXIT POINT 
	
	
	multi_dbnames = Application("DBNames")
	multi_dbnames_array = split(multi_dbnames, ",", -1)
	arrSize = UBound(multi_dbnames_array )
	For i = 0 to arrSize
		dbkey = multi_dbnames_array(i)
		if Not Session("USER_SETTINGS_ID" & dbkey) <> "" then
			Select Case Ucase(GetUserSettingsSQLSyntax(dbkey, formgroup))
				Case "ORACLE"
					if Not isLogInRequired(dbkey, formgroup, "base_connection") = true then
						if Not Request.Cookies("CS_UID" & dbkey) <> "" then
							Session("USER_SETTINGS_ID" & dbkey) = getUserSettingCookieOracle(dbkey, formgroup)
							Response.Cookies("CS_UID" & dbkey) = Session("USER_SETTINGS_ID" & dbkey) 
							Response.Cookies("CS_UID" & dbkey).expires =  DateAdd("d", Application("Expire_User_Setting_Days"), Date())
							Response.Cookies("CS_UID" & dbkey).Path= "/"  & Application("Appkey")
						else
							Session("USER_SETTINGS_ID" & dbkey) = Request.Cookies("CS_UID" & dbkey)
						end if
					else
						Session("USER_SETTINGS_ID" & dbkey) =  Session("UserName" & dbKey)
					end if
				
				Case "ACCESS"
					if Not Request.Cookies("CS_UID" & dbkey) <> "" then
						Session("USER_SETTINGS_ID" & dbkey) = getUserSettingCookie(dbkey, formgroup)
						Response.Cookies("CS_UID" & dbkey) = Session("USER_SETTINGS_ID" & dbkey) 
						Response.Cookies("CS_UID" & dbkey).expires =  DateAdd("d", Application("Expire_User_Setting_Days"), Date())
						Response.Cookies("CS_UID" & dbkey).Path= "/"  & Application("Appkey")
					else
						Session("USER_SETTINGS_ID" & dbkey) = Request.Cookies("CS_UID" & dbkey)
					end if
					
				Case "SQL_SERVER","SQLSERVER"
					if Not Request.Cookies("CS_UID" & dbkey) <> "" then
						Session("USER_SETTINGS_ID" & dbkey) = getUserSettingCookie(dbkey, formgroup)
						Response.Cookies("CS_UID" & dbkey) = Session("USER_SETTINGS_ID" & dbkey) 
						Response.Cookies("CS_UID" & dbkey).expires =  DateAdd("d", Application("Expire_User_Setting_Days"), Date())
						Response.Cookies("CS_UID" & dbkey).Path= "/"  & Application("Appkey")
					else
						Session("USER_SETTINGS_ID" & dbkey) = Request.Cookies("CS_UID" & dbkey)
					end if

			end select
		end if
	Next
	dbkey = Request("dbname")
End Sub


'****************************************************************************************
'*	PURPOSE: Sets a cookie for non-login applications                         
'*	INPUT: dbkey and formgroup	                    			
'*	OUTPUT: the value to use for stamping the cookie					
'****************************************************************************************

Function getUserSettingCookie(dbkey, formgroup)
	if OverrideManageHits = true then exit function
	Dim RS
	Dim the_new_cookie
	
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	on error resume next

	Set RS = Server.CreateObject("ADODB.RECORDSET")
	RS.Open "USER_ID_SEQ", UserSettingConn, adOpenKeyset,  adLockOptimistic, adCmdTable 
	RS.MoveLast
	RS.AddNew
	RS.Update
	' !DGB! Added additional Movelast to fix SQL SERVER problem.
	RS.MoveLast
	the_new_cookie=RS("USER_ID")
	RS.Close
	getUserSettingCookie=the_new_cookie
end Function 

'****************************************************************************************
'*	PURPOSE: Sets a cookie for non-login applications                         
'*	INPUT: dbkey and formgroup	                    			
'*	OUTPUT: the value to use for stamping the cookie					
'****************************************************************************************

Function getUserSettingCookieOracle(dbkey, formgroup)
	if OverrideManageHits = true then exit function
	Dim RS
	Dim the_new_cookie
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	DB_QUERY_SCHEMA =  getCoreSchemaPrefix(dbkey, formgroup)
	
	on error resume next
	Set RS = Server.CreateObject("ADODB.RECORDSET")
	sql = "select " & DB_QUERY_SCHEMA & ".USER_ID_SEQ.NEXTVAL as SEQ from Dual"
	RS.Open sql, UserSettingConn, adOpenKeyset,  adLockOptimistic, adCmdTxt
	the_new_cookie=RS("SEQ")
	RS.Close
	getUserSettingCookieOracle=the_new_cookie
end Function 



'****************************************************************************************
'*	PURPOSE: Check to see if user_settings table exists.    
'*	INPUT: dbkey and formgroup           			
'****************************************************************************************

Sub CheckUserSettingsTableExists(dbkey, formgroup)
	if OverrideManageHits = true then exit sub
	Dim Cmd
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	schema =  getCoreSchemaPrefix(dbkey, formgroup)
	dbms =  GetUserSettingsSQLSyntax(dbkey, formgroup)
	On error resume next
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	if UCase(dbms) = "ORACLE" then
		Cmd.CommandText = "SELECT USER_ID FROM USER_SETTINGS WHERE 1=0"
	else
		Cmd.CommandText = "SELECT USER_ID FROM USER_SETTINGS WHERE 1=0"
	end if
	Cmd.Execute
	if err.number <> 0 then
		CreateUserSettingsTable dbkey,formgroup
	else
		Application.Lock
			Application("USER_SETTINGS_TABLE_CHECKED") = "done"
		Application.UnLock
	end if
	Set Cmd = Nothing
End Sub

'****************************************************************************************
'*	PURPOSE: Create User Settings table(s) 
'*	INPUT: dbkey and formgroup           			
'****************************************************************************************

Sub CreateUserSettingsTable(dbkey,formgroup)
	if OverrideManageHits = true then exit sub
	Dim Cmd
	Dim sql
	on error resume next
	GetUserSettingsConnection dbkey, formgroup, "base_connection"

	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	
	Cmd.CommandType = adCmdText
	dbms =  GetUserSettingsSQLSyntax(dbkey, formgroup)
	Select Case(dbms)
		Case "ORACLE"
				
				sql = "CREATE TABLE USER_SETTINGS("  &_
				    """SETTING_NAME"" VARCHAR2(255) NOT NULL,"  &_
				    """USER_ID"" VARCHAR2(30) NOT NULL,"  &_
				    """SETTING_VALUE"" VARCHAR2(4000) NULL, "  &_
				    """LAST_UPDATE"" DATE, "  &_
				    "CONSTRAINT ""PK_USER_SETTINGS""" &_
				   "PRIMARY KEY(""SETTING_NAME"", ""USER_ID""))" 
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				sql = "create sequence USER_ID_SEQ increment by 1 start with 1"
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				GrantOnCoreTableToAllRoles dbkey, UserSettingConn, "USER_SETINGS"
				
			Case "SQLSERVER", "SQL_SERVER"
			
			on error resume next
				sql ="CREATE TABLE USER_SETTINGS("  &_
				   " SETTING_NAME VARCHAR(255) NOT NULL,"  &_
				   " USER_ID VARCHAR(30) NOT NULL,"  &_
				   " SETTING_VALUE VARCHAR(4000) NULL,"  &_ 
				   " LAST_UPDATE DATETIME NULL)  ON [PRIMARY]"
				Cmd.CommandText = sql
				Cmd.Execute
			
				sql ="ALTER TABLE USER_SETTINGS ADD CONSTRAINT" &_
					 " PK_USER_SETTINGS PRIMARY KEY CLUSTERED " &_
					" (SETTING_NAME,USER_ID) ON [PRIMARY]"		
				Cmd.CommandText = sql
				Cmd.Execute
				
				sql = "CREATE TABLE USER_ID_SEQ (USER_ID INT IDENTITY)"
				Cmd.CommandText = sql
				Cmd.Execute
	
			Case "ACCESS"
				
				sql = "CREATE TABLE USER_SETTINGS("  &_
				    "SETTING_NAME CHAR(255) NOT NULL,"  &_
				    "USER_ID CHAR(30) NOT NULL,"  &_
				    "SETTING_VALUE MEMO, "  &_
				    "LAST_UPDATE DATETIME) "
				
				Cmd.CommandText = sql
				Cmd.Execute
									 
				sql = "CREATE INDEX PK_USER_SETTINGS "  &_
					"ON USER_SETTINGS (SETTING_NAME, USER_ID)"  &_
					"WITH PRIMARY"
				
				Cmd.CommandText = sql
				Cmd.Execute
 
				sql = "CREATE TABLE USER_ID_SEQ (USER_ID COUNTER)"
				
				Cmd.CommandText = sql
				Cmd.Execute
	End Select
	
	
	if not err.number <> 0 then
		Application.Lock
				Application("USER_SETTINGS_TABLE_CHECKED") = "done"
		Application.UnLock
	end if
Set Cmd = Nothing
End Sub

'****************************************************************************************
'*	PURPOSE: Get Current value of user setting
'*	INPUT: dbkey,formgroup,SettingName, UserID
'*  RETURN: value of setting       			
'****************************************************************************************

Function selectCurrentSettings(ByVal dbkey, ByVal formgroup, ByVal User_id, ByVal SettingName)
	if OverrideManageHits = true then exit function
	on error resume next 
	Set RS = getCurrentSettingsRS( dbkey,  formgroup,  User_id,  SettingName, "=")
	if err.number <> 0 then
		user_setting = -1
	else
		if NOT (RS.EOF AND RS.BOF) then
			user_setting = RS("SETTING_VALUE").Value
		else
			user_setting = -1
		end if
	end if
	if err.number <> 0 then
		err.Clear()
	end if
	
	selectCurrentSettings = user_setting

End Function

'****************************************************************************************
'*	PURPOSE: Get RS containing current value of user setting
'*	INPUT: dbkey,formgroup,SettingName, UserID
'*  RETURN: value of setting       			
'****************************************************************************************

Function getCurrentSettingsRS(ByVal dbkey, ByVal formgroup, ByVal User_id, ByVal SettingName, ByVal Operator)
	if OverrideManageHits = true then exit function
	Dim Cmd
	Dim sql
	dim user_setting
	CheckUserSettingsTableExists request("dbname"), request("formgroup")
	Application("USER_SETTINGS_TABLE_CHECKED") = "done"
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	if not User_ID <> "" then
		User_ID = getUserSettingsID(dbkey, formgroup)
	end if
	schema =  getCoreSchemaPrefix(dbkey, formgroup)
	
	Select Case(Session("DBMSType"))
		Case "ORACLE"
			if UCase(Operator) = "LIKE" then
				SettingName = SettingName & "%"
			end if
			sql = "SELECT SETTING_VALUE FROM " & schema & ".USER_SETTINGS WHERE Upper(SETTING_NAME) " & operator & " ? AND Upper(USER_ID) = ?"
		Case "ACCESS"
			if UCase(Operator) = "LIKE" then
				SettingName = SettingName & "*"
			end if
			sql = "SELECT SETTING_VALUE FROM USER_SETTINGS WHERE SETTING_NAME  " & operator & " ? AND USER_ID = ?"
		Case "SQLSERVER", "SQL_SERVER"
			if UCase(Operator) = "LIKE" then
				SettingName = SettingName & "%"
			end if
			sql = "SELECT SETTING_VALUE FROM USER_SETTINGS WHERE SETTING_NAME  " & operator & " ? AND USER_ID = ?"
	End Select
	
	on error resume next
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	Cmd.Parameters.Append Cmd.CreateParameter("pSettingName", 200, 1, Len(SettingName) + 1, Trim(Ucase(SettingName))) 
	Cmd.Parameters.Append Cmd.CreateParameter("pUserID", 200, 1, Len(USER_ID)+ 1, Trim(UCase(USER_ID))) 
	Set RS = Cmd.Execute
	
	Set getCurrentSettingsRS = RS
	
end Function


'****************************************************************************************
'*	PURPOSE: Insert value into User Settings Table
'*	INPUT: dbkey,formgroup,SettingName, UserID, SettingValue
'*  RETURN: none       			
'****************************************************************************************

Sub insertCurrentSettings(ByVal dbkey, ByVal formgroup,ByVal SettingName, ByRef User_ID, ByVal SettingValue)
	if OverrideManageHits = true then exit sub
	Dim Cmd
	Dim sql
	CheckUserSettingsTableExists request("dbname"), request("formgroup")
	Application("USER_SETTINGS_TABLE_CHECKED") = "done"
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	schema =  getCoreSchemaPrefix(dbkey, formgroup)
	dbms =  GetUserSettingsSQLSyntax(dbkey, formgroup)
	if UCase(dbms) = "ORACLE" then
		sql = "INSERT INTO " & schema & ".USER_SETTINGS (SETTING_NAME, USER_ID, SETTING_VALUE, LAST_UPDATE)Values (?, ?, ?, ?)"
	else
		sql = "INSERT INTO USER_SETTINGS (SETTING_NAME, USER_ID, SETTING_VALUE, LAST_UPDATE)Values (?, ?, ?, ?)"
	end if
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	on error resume next
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	
	Cmd.Parameters.Append Cmd.CreateParameter("pSettingName", 200, 1, Len(SettingName) + 1, Trim(Ucase(SettingName))) 
	Cmd.Parameters.Append Cmd.CreateParameter("pUserID", 200, 1, Len(User_ID) + 1, Trim(UCase(CStr(User_ID)))) 
	if Session("DBMSType")= "ACCESS" then
		Cmd.Parameters.Append Cmd.CreateParameter("pSettingValue", 201, 1,Len(SettingValue) + 1,Trim(CStr(SettingValue))) 
	else
		Cmd.Parameters.Append Cmd.CreateParameter("pSettingValue", 200, 1,Len(SettingValue) + 1,Trim(CStr(SettingValue))) 
	end if	
	Cmd.Parameters.Append Cmd.CreateParameter("pLastUpdate", 7, 1, 30, Date()) 
	Cmd.Execute
	if err.number <> 0 then
		logaction("insertCurrentSettings" & err.number & err.Description)
		err.Clear()
	end if
	Set Cmd = Nothing
End Sub


'****************************************************************************************
'*	PURPOSE: Remove a value into User Settings Table
'*	INPUT: dbkey,formgroup, SettingName, UserID
'*  RETURN: none       			
'****************************************************************************************


Sub deleteCurrentSettings(ByVal dbkey, ByVal formgroup, ByVal SettingName, ByRef User_ID)
	if OverrideManageHits = true then exit sub
	Dim Cmd
	Dim sql
	CheckUserSettingsTableExists request("dbname"), request("formgroup")
	Application("USER_SETTINGS_TABLE_CHECKED") = "done"

	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	schema =  getCoreSchemaPrefix(dbkey, formgroup)

	Select Case(Session("DBMSType"))
		Case "ORACLE"
			sql = "DELETE FROM " & schema & ".USER_SETTINGS WHERE Upper(SETTING_NAME)= ? AND Upper(USER_ID)= ?"
		Case "ACCESS"
			sql = "DELETE FROM USER_SETTINGS WHERE SETTING_NAME= ? AND USER_ID= ?"
		Case "SQLSERVER", "SQL_SERVER"
			sql = "DELETE FROM USER_SETTINGS WHERE SETTING_NAME= ? AND USER_ID= ?"
	End Select
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	Cmd.Parameters.Append Cmd.CreateParameter("pSettingName", 200, 1, Len(SettingName) + 1, Trim(Ucase(SettingName))) 
	Cmd.Parameters.Append Cmd.CreateParameter("pUserID", 200, 1, Len(User_ID) + 1, Trim(UCase(User_ID))) 
	Cmd.Execute
	if err.number <> 0 then
		logaction("deleteCurrentSettings" & err.number & err.Description)
		err.Clear()
	end if
	Set Cmd = Nothing
End Sub

'****************************************************************************************
'*	PURPOSE: Update a value into User Settings Table
'*	INPUT: dbkey,formgroup, SettingName, UserID, Setting_Value
'*  RETURN: none       			
'****************************************************************************************

Sub updateCurrentSettings(ByVal dbkey, ByVal formgroup,ByVal SettingName, ByRef User_ID, ByVal SettingValue)
	if OverrideManageHits = true then exit sub
	Dim Cmd
	Dim sql
	CheckUserSettingsTableExists request("dbname"), request("formgroup")
	Application("USER_SETTINGS_TABLE_CHECKED") = "done"
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	schema =  getCoreSchemaPrefix(dbkey, formgroup)
	Select Case(Session("DBMSType"))
		Case "ORACLE"
			sql = "UPDATE " & schema & ".USER_SETTINGS SET  SETTING_VALUE= ?, LAST_UPDATE=? WHERE Upper(SETTING_NAME) = ? AND  Upper(USER_ID) = ?"
		Case "ACCESS"
				sql = "UPDATE USER_SETTINGS SET  SETTING_VALUE= ?, LAST_UPDATE=? WHERE SETTING_NAME = ? AND  USER_ID = ?"
		Case "SQLSERVER", "SQL_SERVER"
			sql = "UPDATE USER_SETTINGS SET  SETTING_VALUE= ?, LAST_UPDATE=? WHERE SETTING_NAME = ? AND  USER_ID = ?"
	End Select
		

	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	'on error resume next
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	if Session("DBMSType")= "ACCESS" then
		Cmd.Parameters.Append Cmd.CreateParameter("pSettingValue", 201, 1,Len(SettingValue) + 1,Trim(CStr(SettingValue))) 
	else
		Cmd.Parameters.Append Cmd.CreateParameter("pSettingValue", 200, 1,Len(SettingValue) + 1,Trim(CStr(SettingValue))) 
	end if
	Cmd.Parameters.Append Cmd.CreateParameter("pSettingDate", 7, 1,30, DATE()) 
	Cmd.Parameters.Append Cmd.CreateParameter("pSettingName", 200, 1,Len(SettingName) + 1,Trim(Ucase(SettingName))) 
	Cmd.Parameters.Append Cmd.CreateParameter("pUserID", 200, 1,Len(USER_ID) + 1, Trim(UCase(USER_ID))) 
	Cmd.Execute
	if err.number <> 0 then
		logaction("updateCurrentSettings" & err.number & err.Description)
		err.Clear()
	end if
	Set Cmd = Nothing
End Sub




'****************************************************************************************
'*	PURPOSE: set connection for user setitngs table 
'*	INPUT: dbkey,formgroup, SettingName, UserID, Setting_Value
'*	RESULT: sets global variable UserSettingConn
'****************************************************************************************

Sub GetUserSettingsConnection(ByVal dbkey, ByVal formgroup, ByVal conn_name)	
		if OverrideManageHits = true then exit sub
		if Not Application("UseSettingsConnString" & dbkey) <> "" then	
			Application.Lock
				Application("UseSettingsConnString" & dbkey) = GetUserSettingsConnString(dbkey, formgroup, conn_name)
			Application.UnLock
		End if
		if Not Application("UseSettingsConnString" & dbkey) <> "" then exit sub
		Set UserSettingConn=Server.CreateObject("ADODB.Connection")
		on error resume next
		UserSettingConn.ConnectionTimeout = conn_conn_timeout
		UserSettingConn.CommandTimeout = conn_command_timeout
		UserSettingConn.Open Application("UseSettingsConnString" & dbkey)
		
		if err.number <> 0 then
			UserSettingConn.Close
			Set UserSettingConn = Nothing
			UserSettingConn = ""
			logaction( "errors occurred in creating connection to user settings table: " & err.number & err.Description)
			err.Clear()
		End if

		
End Sub

'****************************************************************************************
'*	PURPOSE: get GetUserSettingsConnString 
'*	INPUT: dbkey,formgroup, conn_name
'*  RESULT: sets application variable Application("UseSettingsConnString" & dbkey) 
'****************************************************************************************

Function GetUserSettingsConnString(ByVal dbkey, ByVal formgroup, ByVal conn_name)
	if OverrideManageHits = true then exit function
	bLoginRequired = false
	bLoginInfoNeeded = false
	Dim UserName
	Dim Password
	if not formgroup <> "" then formgroup = request("formgroup")
	if not formgroup <> "" then formgroup = "base_form_group"
	if not dbkey <> "" then dbkey = request("dbname")
	if not dbkey <> "" then exit function
	UserName = Application(dbkey & "_USERNAME")
	PassWord = Application(dbkey & "_PWD")
	if Not conn_name <> "" then conn_name = "base_connection"
	if Session("bypass_ini" & dbkey & formgroup) = true then
		conn_info_array = Application(conn_name & dbkey)
	else
		conn_info_array = Application(conn_name & dbkey)
	end if	
	
	conn_type=conn_info_array(kConn)
	conn_string=conn_info_array(kConnStr)
	conn_conn_timeout=conn_info_array(kConnTimeOut)
	conn_command_timeout=conn_info_array(kConnConnTimeOut)
	conn_username=conn_info_array(kConnUserName)
	conn_password=conn_info_array(kConnPassword)
	on error resume next
	conn_dbms = conn_info_array(kDBMS)
	if err.number > 0 then conn_dbms = "ACCESS"
	on error goto 0
	if not conn_dbms <> "" then conn_dbms = "ACCESS"
	Select case UCase(conn_dbms)
		Case "ORACLE"
			if conn_username = "login_required"	then
				
				bLoginRequired = true 
				UserIDKeyword = "UID"
				If Application("UserIDKeyword") <> "" then UserIDKeyword = Application("UserIDKeyword")
				conn_username = UserIDKeyword & "=" & UserName
			end if
		
			conn_password=conn_info_array(kConnPassword)
			if conn_password = "login_required"then
				
				bLoginRequired = true
				PWDKeyword = "PWD"
				If Application("PWDKeyword") <> "" then PWDKeyword =Application("PWDKeyword")
				conn_password = PWDKeyword & "=" & PassWord				
			end if
		Case "SQLSERVER"
			if conn_username = "login_required"	then
				bLoginRequired = true 
				conn_username = "username=" & UserName
				
			end if
			conn_password=conn_info_array(kConnPassword)
			if conn_password = "login_required"then
				bLoginRequired = true
				conn_password = "password=" & PassWord
			end if
		Case "ACCESS"
			if conn_username = "login_required"	then
				bLoginRequired = true 
				conn_username =  UserName
			end if
			conn_password=conn_info_array(kConnPassword)
			if conn_password = "login_required"then
				bLoginRequired = true
				conn_password = PassWord
				
			end if
	End Select
	'create full connection string
	if conn_type = "NULL" or conn_type = "" or conn_type= "OLEDB" then
		full_conn_string = conn_string & "; " & conn_username & "; " & conn_password		
	else
		full_conn_string = conn_type & "=" & conn_string & "; " & conn_username & "; " & conn_password		
	end if	
	GetUserSettingsConnString = full_conn_string
	
end function

'****************************************************************************************
'*	PURPOSE: Remove a value into User Settings Table
'*	INPUT: dbkey,formgroup, SettingName, UserID
'*  RETURN: none       			
'****************************************************************************************


Sub deleteOldUserSettings(ByVal dbkey, ByVal formgroup, ByVal days_for_expire)
	if OverrideManageHits = true then exit Sub
	Dim Cmd
	Dim sql
	CheckUserSettingsTableExists request("dbname"), request("formgroup")
	Application("USER_SETTINGS_TABLE_CHECKED") = "done"
	on error resume next
	GetUserSettingsConnection dbkey, formgroup, "base_connection"
	ExpireDate = DateAdd("d", -(days_for_expire), Date())
	schema =  getCoreSchemaPrefix(dbkey, formgroup)
	Select Case(Session("DBMSType"))
		Case "ORACLE"
			sql = "DELETE FROM  " & schema & ".user_settings WHERE LAST_UPDATE <  ?"
		Case "ACCESS"
			sql = "DELETE FROM  user_settings WHERE LAST_UPDATE < #" & ExpireDate	& "#"
			
		Case "SQLSERVER", "SQL_SERVER"
			sql = "DELETE FROM  user_settings WHERE LAST_UPDATE <  ?"
	End Select
	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	Cmd.CommandText = sql
	If Not Session("DBMSType") = "ACCESS" then
		Cmd.Parameters.Append Cmd.CreateParameter("pExpireDate", 7, 1,30, ExpireDate) 
	end if
	Cmd.Execute
	if err.number <> 0 then
		'logaction("deleteOldUserSettings" & err.number & err.Description)
		err.Clear()
	end if
End Sub

Sub AppInitUserSettingTable()
	tempArr = Split(Application("DBNames"),",")

	For i = 0 to Ubound(tempArr) 
		dbname = tempArr(i)
		CheckUserSettingsTableExists dbname, "base_form_group"
	next
End Sub



Sub AppInitHitlistTables()
	Dim tempArr
	Dim i
	
	Application("allow_hitlist_management")=GetINIValue( "optional", "GLOBALS", "ALLOW_HITLIST_MANAGEMENT", "web_app", "cfserver")
	if (Application("allow_hitlist_management")="INIEmpty" or Application("allow_hitlist_management") = "NULL" or Application("allow_hitlist_management") = "") then
		Application("allow_hitlist_management")= "1"
	end if
	Application("allow_hitlist_management") = CBool(Application("allow_hitlist_management"))
	
	if Application("allow_hitlist_management") then
		Application("Expire_hitlist_history_days")=GetINIValue( "optional", "GLOBALS", "EXPIRE_HITLIST_HISTORY_DAYS", "web_app", "cfserver")
		if (Application("Expire_hitlist_history_days")="INIEmpty" or Application("Expire_hitlist_history_days") = "NULL" or Application("Expire_hitlist_history_days") = "") then
			Application("Expire_hitlist_history_days")= "0"
		end if
		Application("ALLOW_PUBLIC_HITLISTS")=GetINIValue( "optional", "GLOBALS", "ALLOW_PUBLIC_HITLISTS", "web_app", "cfserver")
		if (Application("ALLOW_PUBLIC_HITLISTS")="INIEmpty" or Application("ALLOW_PUBLIC_HITLISTS") = "NULL" or Application("ALLOW_PUBLIC_HITLISTS") = "") then
			Application("ALLOW_PUBLIC_HITLISTS")="0"
		end if
		Application("ALLOW_HITILIST_MNGMNT_FG_SELECTOR")=GetINIValue( "optional", "GLOBALS", "ALLOW_HITILIST_MNGMNT_FG_SELECTOR", "web_app", "cfserver")
		if (Application("ALLOW_HITILIST_MNGMNT_FG_SELECTOR")="INIEmpty" or Application("ALLOW_HITILIST_MNGMNT_FG_SELECTOR") = "NULL" or Application("ALLOW_HITILIST_MNGMNT_FG_SELECTOR") = "") then
			Application("ALLOW_HITILIST_MNGMNT_FG_SELECTOR")= "0"
		end if	
	Else
		Application("Expire_hitlist_history_days")=0
		Application("ALLOW_PUBLIC_HITLISTS")="0"
	End if
	
	tempArr = Split(Application("DBNames"),",")

	For i = 0 to Ubound(tempArr) 
		dbname = tempArr(i)
		GetUserSettingsConnection dbname, "base_form_group", "base_connection"
		currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
		' Check if tables exist
		numFields = GetNumberOfFieldsinTable(dbname, "CSDOHITLISTID")
		if  numFields > 0 then
			if numFields <> 8 then
				DropTable dbname, "CSDOHITLIST"
				DropTable dbname, "CSDOHITLISTID"
				CreateHitListTables dbname, "CSDO"
			Else 
				'Clear expired hitlists
				TruncateCSDOHitLists dbname 
			End if
		Else
			CreateHitListTables dbname, "CSDO"
		End if
		
		' Check if tables exist
		numFields = GetNumberOfFieldsinTable(dbname, "USERHITLISTID")
		if  numFields = 0 then
			CreateHitListTables dbname, "USER"
		End if
		
		'SYAN added 5/26/2004 to check and create temp table TEMP_IDS and CLOBTOTABLE stored procedure.
		'This is to handle long list.
		'This really should be in a seperate function, but to avoid changing global.asa in everyapp, it is put
		'here for the time being.
		
		if UCase(currentRDBMS) = "ORACLE" then
			numFields = GetNumberOfFieldsinTable(dbname, "TEMP_IDS")
			if  numFields = 0 then
				CreateTempIDsTable dbname
			end if
			
			CreateClobToTableSP(dbname)
		end if
		'End of SYAN modification
	Next	
End sub

Sub SessInitHitlistTables()
	Dim tempArr
	Dim i	
	'if NOT Application("allow_hitlist_management") then exit sub

	tempArr = Split(Application("DBNames"),",")
	For i = 0 to Ubound(tempArr) 
		dbname = tempArr(i)
		GetUserSettingsConnection dbname, "base_form_group", "base_connection"
		currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
		User_ID = getUserSettingsID(dbname, "base_form_group")
		ClearExpiredCSDOHitLists dbname, User_ID 
	Next	
End sub

Function GetNumberOfFieldsinTable(dbname, tableName)
	Dim lRecsAffected
	Dim slq
	Dim RS
	currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
	Select Case(currentRDBMS)
		Case "ORACLE"
			sql = "SELECT * FROM " & Application(dbname & "_USERNAME") & "." & tableName & " WHERE 0=1"
		Case "SQLSERVER"
			sql = "SELECT * FROM " & tableName & " WHERE 0=1" 
		Case "ACCESS"
			sql = "SELECT * FROM " & tableName & " WHERE 0=1"
	End select
	on error resume next
	Set RS = UserSettingConn.Execute(Sql)
	if err.number <> 0 then
		GetNumberOfFieldsinTable = 0
	Else
		GetNumberOfFieldsinTable = RS.Fields.Count	
	end if 	
End function	

Sub DropTable(dbname, tableName)
	Dim lRecsAffected
	Dim slq
	currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
	if Ucase(currentRDBMS) = "ORACLE" then tableName = Application(dbname & "_USERNAME") & "." & tableName
	sql = "DROP TABLE " & tableName 
	UserSettingConn.Execute Sql, lRecsAffected, adCmdText + adExecuteNoRecords 
End Sub

Sub TruncateTable(dbname, tableName)
	Dim lRecsAffected
	Dim sql
	currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
	
	Select Case  Ucase(currentRDBMS)
		Case "ORACLE" 
			tableName = Application(dbname & "_USERNAME") & "." & tableName
			sql = "TRUNCATE TABLE " & tableName 
		Case "ACCESS"
			sql = "DELETE FROM " & tableName & " WHERE 1=1"
		Case "SQLSERVER"
			sql = "TRUNCATE TABLE " & tableName
	End select
	on error resume next
	UserSettingConn.Execute Sql, lRecsAffected, adCmdText + adExecuteNoRecords 
	if err.number <> 0 then
		logaction(tableName & " could not be truncated:" & err.number & err.Description)
	end if
End Sub

' Creates CSDO and USER hitlist tables
' hitlistTableType must be "USER" or "CSDO"
Sub CreateHitListTables(dbname, hitlistTableType)
	Dim Cmd
	Dim sql

	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	
	Cmd.CommandType = adCmdText
	
	hitTableName = hitlistTableType & "HITLIST"
	ListIDTableName = hitlistTableType & "HITLISTID"
	
	currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group") 
	Select Case(currentRDBMS)
		Case "ORACLE"
				
				if Ucase(hitlistTableType) = "USER" then maybeTempIDSQL = "TEMPID NUMBER(10,0) NULL,"
				
				sql =	"CREATE TABLE " & Application(dbname & "_USERNAME") & "." & ListIDTableName & "("  &_
						"NAME VARCHAR2(255) NULL,"  &_
						"DESCRIPTION VARCHAR2(255) NULL,"  &_
						"ID NUMBER(10,0) NOT NULL," & maybeTempIDSQL  &_
						"USER_ID VARCHAR2(30) NULL, "  &_
						"FORMGROUP VARCHAR2(255) NULL, "  &_
						"NUMBER_HITS NUMBER(10,0) NULL, "  &_
						"IS_PUBLIC VARCHAR2(1) NULL, "  &_
						"DATE_CREATED DATE, "  &_
						"CONSTRAINT PK_" & ListIDTableName &_
						" PRIMARY KEY(ID))"
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				'sql = "GRANT SELECT,INSERT,UPDATE,DELETE ON " & Application(dbname & "_USERNAME") & "." & ListIDTableName & " to PUBLIC"
				'Cmd.CommandText = sql
				'Cmd.Execute
				
				GrantOnCoreTableToAllRoles dbname, UserSettingConn, ListIDTableName
								 
				' Store rowids in CSDO table
				idType = "Number(10,0)"
				if Ucase(hitlistTableType) = "CSDO" AND UseCartridge(dbname, formgroup) then idType = "RowID"
				
				sql =	"CREATE TABLE " & Application(dbname & "_USERNAME")  & "." & hitTableName & "(HITLISTID NUMBER(10,0), " &_
						"ID " & idType & ", " &_
						"CONSTRAINT PK_" & hitTableName & " PRIMARY KEY(HITLISTID, ID)) " &_
						"ORGANIZATION INDEX"
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				'sql = "GRANT SELECT,INSERT,UPDATE,DELETE ON " & Application(dbname & "_USERNAME") & "." & hitTableName & " to PUBLIC"
				'Cmd.CommandText = sql
				'Cmd.Execute
				
				GrantOnCoreTableToAllRoles dbname, UserSettingConn, hitTableName
								
			    'sql  = "CREATE INDEX " & hitTableName & "_IDX ON " & Application(dbname & "_USERNAME") & "." & hitTableName & "(HITLISTID, ID)"		
				'Cmd.CommandText = sql
				'Cmd.Execute
				
				on error resume next
				sql = "DROP SEQUENCE " & ListIDTableName & "_SEQ"
				Cmd.CommandText = sql
				Cmd.Execute
				on error goto 0
				
				sql = "CREATE SEQUENCE " & ListIDTableName & "_SEQ increment by 1 start with 1"				
				Cmd.CommandText = sql
				Cmd.Execute
										
			Case "SQLSERVER", "SQL_SERVER"
		
				if Ucase(hitlistTableType) = "USER" then maybeTempIDSQL = "TEMPID INTEGER NULL,"
							
				sql ="CREATE TABLE " & ListIDTableName &"("  &_
				   " NAME VARCHAR(250) NULL,"  &_
				   "DESCRIPTION VARCHAR(250) NULL,"  &_
				   " ID INT IDENTITY CONSTRAINT pk" & ListIDTableName &  " PRIMARY KEY," & maybeTempIDSQL &_
				   " USER_ID VARCHAR(30) NULL,"  &_
				   " FORMGROUP VARCHAR(250) NULL, "  &_ 
				   "NUMBER_HITS INT NULL, "  &_
				   "IS_PUBLIC VARCHAR(1) NULL, "  &_			   
				   " DATE_CREATED DATETIME NULL)  ON [PRIMARY]"
				
				Cmd.CommandText = sql
				Cmd.Execute
				
				sql =	"CREATE TABLE " & hitTableName & "(HITLISTID INTEGER, " &_
						"ID INTEGER)"
				
				Cmd.CommandText = sql
				Cmd.Execute		
				
				sql =  "CREATE INDEX " & hitTableName & "_IDX ON " & hitTableName & "(HITLISTID, ID)"
				Cmd.CommandText = sql
				Cmd.Execute 		
			Case "ACCESS"
			
				if Ucase(hitlistTableType) = "USER" then maybeTempIDSQL = "TEMPID INTEGER NULL,"
			
				sql = "CREATE TABLE " & ListIDTableName &"("  &_
				    "NAME CHAR(250) NULL,"  &_
				    "DESCRIPTION CHAR(250) NULL,"  &_
				    "ID COUNTER CONSTRAINT pk" & ListIDTableName & " PRIMARY KEY," & maybeTempIDSQL &_
				    "USER_ID CHAR(30), "  &_
				    "FORMGROUP CHAR(250) NULL, "  &_
				    "NUMBER_HITS INT NULL, "  &_
					"IS_PUBLIC CHAR(1) NULL, "  &_
				    "DATE_CREATED DATETIME)" 
				 
				Cmd.CommandText = sql
				Cmd.Execute 
				
				sql =	"CREATE TABLE " & hitTableName & "(HITLISTID INTEGER, " &_
						"ID INTEGER)"
				
				Cmd.CommandText = sql
				Cmd.Execute		
				
				sql =  "CREATE INDEX " & hitTableName & "_IDX ON " & hitTableName  & "(HITLISTID, ID)"
				Cmd.CommandText = sql
				Cmd.Execute 		
	End Select
	Set Cmd = Nothing
End Sub


Sub TruncateCSDOHitlists(dbname)
	TruncateTable dbname, "CSDOHITLIST"
	TruncateTable dbname, "CSDOHITLISTID"
End sub

Sub ClearExpiredCSDOHitLists(dbname, UserName)
	Dim Cmd
	Dim sql
	Dim expDate
	Dim ADOProvider
	
	listIDTableName = "CSDOHITLISTID"
	currentRDBMS = GetUserSettingsSQLSyntax(dbname, "base_form_group")
	if UCase(currentRDBMS) = "ORACLE" then listIDTableName = Application(dbname & "_USERNAME") & "." & listIDTableName
		
	expDate = DateAdd("d", -1 * CInt(Application("Expire_hitlist_history_days")), Now())

	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	Cmd.CommandType = adCmdText
	
	' NOTE values in CSDOHitlist are not deleted until the table is trucated on app start up
	
	sql =	"DELETE FROM " & listIDTableName  &_
			" WHERE (DATE_CREATED < ? " &_
			"AND NAME = 'TEMP') " &_
			" AND " & listIDTableName & ".USER_ID= ?" 
		
	Cmd.CommandText = sql
	Cmd.Parameters.Append Cmd.CreateParameter("pDateCreated", adDBTimeStamp, 1,30, expDate)
	Cmd.Parameters.Append Cmd.CreateParameter("pUserName", 200, 1,Len(UserName) + 1, Trim(UCase(UserName))) 
		
	if bDebugCartridge then
		logaction(sql & "(" & expdate & ":" & expdate2 & ":" & UserName & ")" )
		t0 = timer
	end if
	
	Cmd.Execute lrecs
	if bDebugCartridge then logAction "Time to delete hitlists:(" & lrecs & ")hits: " & timer - t0 
	Set Cmd = Nothing
End Sub

Sub CoreExecuteCmd(byref cmd, strModule)
	on error resume next
	cmd.execute
	if err then
		for each e in UserSettingConn.errors
			logAction("ADO Command Error in " & strModule & ": " & e.source & "-" & e.description)
		Next
	End if
End sub

Function ReloadNavBar()
	Response.Write "<sc" & "ript language = ""javascript"">" & vblf
	Response.Write "	var NavBar = " & Application("nav_bar_window")& vblf
	Response.Write "	if (NavBar == null || NavBar == """"){" & vblf
	Response.Write "		NavBar = top.frames(""navbar"")" & vblf 
	Response.Write "	}"  & vblf
	Response.Write "	if (NavBar != self){" & vblf
	Response.Write "		NavBar.location.reload(true)" & vblf
	Response.Write "	}" & vblf
	Response.Write "</scr" & "ipt>" & vblf
End Function

'DGB copied from cartridge utils because it is needed here
'Determine if Cartridge is being used. Returns boolean
function UseCartridge(byVal dbkey, ByVal formgroup)
	if Session("bypass_ini" & dbkey & formgroup) = true then
		UseCartridge = true
	else
	CHEMconnection_str = GetChemLinksStr(dbkey, formgroup)

	CHEMconnection_array = Split(CHEMconnection_str, ",", -1)
	on error resume next
	for i = 0 to UBound(CHEMconnection_array)
		conn_name=CHEMconnection_array(i)
		if UCase(GetChemConnGroupVal(dbkey, conn_name, kStrucEngine)) = "CARTRIDGE" then
			bCartridge = true
			exit for
		end if
	next
	if bCartridge = true then
		UseCartridge = true
	else
		UseCartridge = false
	end if
	end if
End function 


'DGB copied from search funcs because it is needed here
'----------------------------------------------------------------------------'
'Name: GetChemLinksStr(dbkey, formgroup)
'Purpose: populate Application("ChemConnection_str") with data from "CHEM_CONNECTION_NAMES" string from ini file
'Parameter description: dbkey as String, formgroup as String
'Return Values: none
'Comments:  Application("ChemConnection_str") populates with comma delimited string of chem_connection names
'----------------------------------------------------------------------------'

Function GetChemLinksStr(ByVal dbkey, ByVal formgroup)
	if Session("bypass_ini" & dbkey & formgroup) = true then
		ChemConnString=Application("CHEMconnections_str" & dbkey & formgroup)
		
	else
		if  Application("CHEMconnections_str" & dbkey)= "" then
			Application.Lock
				Application("CHEMconnections_str" & dbkey) = GetINIValue( "optional", "GLOBALS", "CHEM_CONNECTION_NAMES", "web_app", dbkey)
			Application.UnLock
			ChemConnString=Application("CHEMconnections_str" & dbkey)
		else
			ChemConnString=Application("CHEMconnections_str" & dbkey)
		end if
	end if
	GetChemLinksStr = ChemConnString
End Function

Sub GrantOnCoreTableToAllRoles(dbkey, conn, tableName)
	Dim schema
	Dim cmd
	Dim privTable
	Dim minPriv

	schema = Application(dbkey & "_USERNAME")
	privTable = Application("PrivTableName")
	minPriv = Application("MinRequiredPriv")
	fullTableName = schema & "." & tableName
	
	Set cmd = Server.CreateObject("ADODB.COMMAND")
	
	cmd.ActiveConnection = conn
	
	if privTable <> "" AND NOT IsEmpty(privTable) then
		
		cmd.CommandType = adCmdText
		cmd.CommandText = "GRANT insert, select, update, delete ON " & fullTableName & " to CS_SECURITY with grant option"
		cmd.execute
		
		cmd.CommandType = adCmdStoredProc
		cmd.CommandText = "CS_SECURITY.GrantOnCoreTableToAllRoles"
	
		Cmd.Parameters.Append Cmd.CreateParameter(, 200, 1, len(tableName), tableName) 	
		Cmd.Parameters.Append Cmd.CreateParameter(, 200, 1, len(schema),schema)
		Cmd.Parameters.Append Cmd.CreateParameter(,200, 1, len(minPriv), minPriv)	
		Cmd.Parameters.Append Cmd.CreateParameter(,200, 1, len(privTable), privTable)
	else
		cmd.CommandType = adCmdText
		cmd.CommandText = 	"GRANT insert, select, update, delete ON " & fullTableName & " to PUBLIC"
	end if
	cmd.execute
End sub

'SYAN added on 5/26/2004 to create temp table TEMP_IDS
Sub CreateTempIDsTable(dbname)
	Dim Cmd
	Dim sql

	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	
	Cmd.CommandType = adCmdText
	
	tempIDsTableName = "TEMP_IDS"
	
	sql = "CREATE GLOBAL TEMPORARY TABLE " & Application(dbname & "_USERNAME") & "." & tempIDsTableName & "(ID VARCHAR2(30) NULL)  ON COMMIT DELETE ROWS"
				
	Cmd.CommandText = sql
	Cmd.Execute
				
	Cmd.CommandText = "GRANT SELECT, INSERT, UPDATE,DELETE ON " & Application(dbname & "_USERNAME") & "." & tempIDsTableName & " TO PUBLIC"
	Cmd.Execute

	Set Cmd = Nothing
End Sub

'SYAN added on 5/26/2004 to create ClobToTable stored procedure
Sub CreateClobToTableSP(dbname)
	Dim Cmd
	Dim sql

	Set Cmd = Server.CreateObject("ADODB.COMMAND")
	Cmd.ActiveConnection = UserSettingConn
	
	Cmd.CommandType = adCmdText
	
	
	sql = "CREATE OR REPLACE PROCEDURE ClobToTable(c IN CLOB) " & _
			"AS " & _
			"	i INTEGER; " & _
			"	commaPos INTEGER; " & _
			"	previousCommaPos INTEGER; " & _
			"	val VARCHAR(30); " & _
			"	length INTEGER; " & _
			"BEGIN " & _
			"	i := 1; " & _
			"	previousCommaPos := 0; " & _
			"	length := DBMS_LOB.GETLENGTH(c); " & _
			"	LOOP " & _
			" 	    commaPos := DBMS_LOB.INSTR(c, ',', 1, i); " & _
			"	    IF commaPos != 0 THEN " & _
			"	    	val := DBMS_LOB.SUBSTR(c, commaPos - previousCommaPos - 1, previousCommaPos + 1); " & _
			"	    	previousCommaPos := commaPos; " & _
			"		    INSERT INTO TEMP_IDS (ID) VALUES (val); " & _
			"		ELSE " & _
			"	    	val := DBMS_LOB.SUBSTR(c, length - previousCommaPos, previousCommaPos + 1); " & _
			"		    INSERT INTO TEMP_IDS (ID) VALUES (val); " & _
			"			EXIT; " & _
			"		END IF; " & _
			"		i := i + 1; " & _
			"	 END LOOP; " & _
			"END;"
				
	Cmd.CommandText = sql
	Cmd.Execute
				
	Cmd.CommandText = "GRANT EXECUTE ON " &  Application(dbname & "_USERNAME") & ".ClobToTable TO PUBLIC"				
	Cmd.Execute
	
	Set Cmd = Nothing
End Sub

</script>