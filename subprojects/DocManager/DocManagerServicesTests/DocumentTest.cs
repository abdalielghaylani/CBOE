// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using CambridgeSoft.COE.DocumentManager.Services.Types;
using CambridgeSoft.COE.Framework.COESecurityService;
using System.IO;
namespace DocManagerServicesTests
{
	/// <summary>
	///This is a test class for CambridgeSoft.COE.DocumentManager.Services.Types.Document and is intended
	///to contain all CambridgeSoft.COE.DocumentManager.Services.Types.Document Unit Tests
	///</summary>
	[TestClass()]
	public class DocumentTest
	{

        private bool bIsAuthenticated = false;
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            Csla.ApplicationContext.GlobalContext["AppName"] = "DOCMANAGER";
        }
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
        [TestInitialize()]
        public void MyTestInitialize()
        {
            bIsAuthenticated = CambridgeSoft.COE.Framework.COESecurityService.COEPrincipal.Login("DOC_ADMIN", "DOC_ADMIN");
        }
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		///A test for GetDocumentID (int)
		///</summary>
		[TestMethod()]
		public void GetDocumentByIDTest()
		{

			int ID = 1; // TODO: Initialize to an appropriate value

			//Document expected = null;
			//Document actual;

			Document actual = Document.GetDocumentByID(ID);
			byte[] blob = actual.BinaryContent;

			FileStream FS = new FileStream(actual.Name, FileMode.Create);
			FS.Write(blob, 0, blob.Length);
			FS.Close();
			FS = null; 



			//Assert.AreEqual(expected, actual, "CambridgeSoft.COE.DocumentManager.Services.Types.Document.GetDocumentID did not r" +
			//	"eturn the expected value.");
			//Assert.Inconclusive("Verify the correctness of this test method.");
		}


		/// <summary>
		///A test for InsertNewDocument (Document)
		///</summary>
		[TestMethod()]
		public void InsertNewDocumentTest()
		{
			//Document doc = null; // TODO: Initialize to an appropriate value
			Document doc = Document.GetNewDocument();
            //doc.Name = "Chemdraw_Struct.docx";
            doc.Name = "test2.doc";
            doc.Title = "Gross Structures";
			doc.Author = "Jordan Shatsoff";
			doc.PropertyList["REPORT_NUMBER"].Value = "ABCD";

			FileStream fls;
            fls = new FileStream(@"c:\DocManagertestDocs\test2.doc", FileMode.Open, FileAccess.Read);
			byte[] blob = new byte[fls.Length];
			fls.Read(blob, 0, System.Convert.ToInt32(fls.Length));
			fls.Close(); 

			doc.BinaryContent = blob;

			//Document expected = null;
			//Document actual;

			Document actual = CambridgeSoft.COE.DocumentManager.Services.Types.Document.InsertNewDocument(doc);

		//    Assert.AreEqual(expected, actual, "CambridgeSoft.COE.DocumentManager.Services.Types.Document.InsertNewDocument did n" +
		//            "ot return the expected value.");
		//    Assert.Inconclusive("Verify the correctness of this test method.");
		}


        /// <summary>
        ///A test for InsertNewDocument (Document)
        ///</summary>
        [TestMethod()]
        public void SaveNewDocumentTest()
        {
            //Document doc = null; // TODO: Initialize to an appropriate value
            Document doc = Document.GetNewDocument();
            doc.Name = "Test2.doc";
            doc.Title = "Two Structures";
            doc.Author = "Jordan Shatsoff";
            doc.PropertyList["REPORT_NUMBER"].Value = "ABCD";

            FileStream fls;
            fls = new FileStream(@"c:\DocManagertestDocs\test2.doc", FileMode.Open, FileAccess.Read);
            byte[] blob = new byte[fls.Length];
            fls.Read(blob, 0, System.Convert.ToInt32(fls.Length));
            fls.Close();

            doc.BinaryContent = blob;

            doc = doc.Save();


            //Document expected = null;
            //Document actual;
            
            //    Assert.AreEqual(expected, actual, "CambridgeSoft.COE.DocumentManager.Services.Types.Document.InsertNewDocument did n" +
            //            "ot return the expected value.");
            //    Assert.Inconclusive("Verify the correctness of this test method.");
        }



		/// <summary>
		///A test for GetNewDocument ()
		///</summary>
		[TestMethod()]
		public void GetNewDocumentTest()
		{

			//Document target = new Document();
			//Document expected = null;

			Document actual = Document.GetNewDocument();

			//Assert.AreEqual(expected, actual, "CambridgeSoft.COE.DocumentManager.Services.Types.Document.GetNewDocument did not " +
			//        "return the expected value.");
			//Assert.Inconclusive("Verify the correctness of this test method.");
		}

        /// <summary>
		/// A test for GetDocumentById(), that shows the onLoaded addin method being fired.
		/// </summary>
        [TestMethod()]
        public void DocumentAddInTest_OnLoaded()
        {
            Document actual = Document.GetDocumentByID(0);

            Assert.IsTrue(actual.Comments.Contains("This document passed through DocumentAddIn in OnLoadedHandler"));
            Console.WriteLine(actual.Comments);
        }
	}
}
