pipeline
{
    agent
    {
        node
        {
            label 'ABSVS_2017'
            customWorkspace "CBOE/${BRANCH_NAME}"
        }
    }
    environment
    {
        PROD_VERSION = '19.1.0'
        CBOE_BUILD_NUMBER = "${env.BRANCH_NAME.startsWith('release/v') ? "0${BUILD_NUMBER}" : "5${BUILD_NUMBER}"}"
        FULL_VERSION = "${PROD_VERSION}.${CBOE_BUILD_NUMBER}"
        FOLDER_VERSION_NAME = "${FULL_VERSION.replace('.', '_')}"
        PUBLISH_PATH = "\\\\Amercmbdevfs01.perkinelmer.net\\Installers\\Development\\ChemBioOfficeEnterprise\\${PROD_VERSION}"
        STAGE_INSTALLER="Staging"
        NOTIFY_LIST = "jeeva.Sayan@PERKINELMER.COM"
		DEFENDER = '"C:\\Program Files\\Windows Defender\\MpCmdRun.exe"'
    }
    options
    {
        timestamps()
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '1', daysToKeepStr: '', numToKeepStr: '10'))
    }
    stages
    {
        stage ('Set-Version')
        {
            steps
            {
                bat """
                    call "${WORKSPACE}\\build\\jdps\\VersionFiles.bat" ${FULL_VERSION} ${WORKSPACE}
                """
            }
        }
		stage('Scan Virus')
		{
		    when
			{
			    expression
                {
                    return env.BRANCH_NAME.startsWith('release/v') || env.BRANCH_NAME == "master"
                }
            }
			steps
			{
				bat "${DEFENDER} -Scan -ScanType 3 -File ${WORKSPACE}"
			}
		}
        stage ('CBOE-Build')
        {
            steps
            {
                bat """
                    cd ${WORKSPACE}\\Installers\\InstallSupportFiles
                    EditDataLoaderProj.vbs ${WORKSPACE}\\subprojects\\DataLoader\\CambridgeSoft.COE.DataLoader.csproj ${CBOE_BUILD_NUMBER}
                    call ${WORKSPACE}\\build\\jdps\\BuildingProjects.bat ${MSBUILD_PATH} ${WORKSPACE}
                """
            }
        }
        stage ('Prepare-Goods')
        {
            steps
            {
                bat """
                    MD "${WORKSPACE}\\ChemOffice"
                    MD "${WORKSPACE}\\Base\\ChemOffice"
                    "${BC}" "@${WORKSPACE}\\Installers\\InstallSupportFiles\\bc.txt" "${WORKSPACE}\\subprojects\\Classic" "${WORKSPACE}\\Base\\ChemOffice" "${WORKSPACE}\\ChemOffice" /silent
                    ${REGASM} "${WORKSPACE}\\subprojects\\Classic\\Common\\Dlls\\SingleSignoncom.dll" /tlb:SingleSignOnCom.tlb /codebase
                    xcopy /Y "${WORKSPACE}\\subprojects\\Classic\\VB Projects\\InvLoader\\Inno Installer\\Output\\InvLoaderSetup.exe" "${WORKSPACE}\\ChemOffice\\ChemInv\\Installation\\InvLoader"
                    call "${WORKSPACE}\\build\\jdps\\RemoveFolder.bat" ${WORKSPACE}
                """
            }
        }
        stage ('Registration-Server-Build')
        {
            steps
            {
                bat "${WORKSPACE}\\build\\jdps\\CompileAndCopyGoods ${WORKSPACE} ${MSBUILD}"
            }
        }
        stage ('Registration-Client-Build')
        {
            steps
            {
                dir ("subprojects/Registration/registration.client")
                {
                    bat "npm run ci:build"
                }
            }
         /* post {
                always {
                    junit 'subprojects/Registration/registration.client/test-output/test-results.xml' 
                    publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'subprojects/Registration/registration.client/test-coverage/headlesschrome',
                    reportFiles: 'index.html',
                    reportName: 'Code Coverage Registration Web Client',
                    reportTitles: '']
                }
            }*/
        }
        stage('CBOE-Installer')
        {
            when 
            {
                expression
                {
                    return env.BRANCH_NAME.startsWith('release/v') || env.BRANCH_NAME == "master"
                }
            }
            steps 
            {
                bat """
                    set WORKSPACE_PATH_ROOT=${WORKSPACE}
                    "${ISCMD}" -p ${WORKSPACE}\\Installers\\CBOEInstaller\\CBOEInstaller.ism -r "Release 1" -o "C:\\Program Files (x86)\\InstallShield\\2013\\Modules\\i386" -z "ProductVersion=${FULL_VERSION}" -z "CBVNBUILDNUMBER=${FULL_VERSION}" -z "CBVNFOLDERVERSION=${FOLDER_VERSION_NAME}" -z "BUILDVERSION=${FOLDER_VERSION_NAME}"
                    xcopy /Y /I /S "${WORKSPACE}\\Installers\\CBOEInstaller\\CBOEInstaller\\Product Configuration 1\\Release 1\\DiskImages\\DISK1\\*.*" "${WORKSPACE}\\installers\\SubInstaller"
                    set WORKSPACE_ROOT=${WORKSPACE}
                    "${ISCMD}" -p "${WORKSPACE}\\installers\\Combined CBOE\\CBOE.ism" -a "Product Configuration 1" -r "Release 1" -z "ProductVersion=${FULL_VERSION}"
                    xcopy "${WORKSPACE}\\installers\\Combined CBOE\\CBOE\\Product Configuration 1\\Release 1\\DiskImages\\Disk1" "${PUBLISH_PATH}\\Dev\\Release\\CBOE_${FULL_VERSION}" /I /Y /S
                """
            }
        }
        stage ('JIRA Updation')
        {
            when 
            {
                expression
                {
                    return env.BRANCH_NAME.startsWith('release/v') || env.BRANCH_NAME == "master"
                }
            }
            steps
            {
                script 
                {
                    // Get the list of solved issues and loop over it
                    jiraIssueSelector(issueSelector: [$class: 'DefaultIssueSelector'])
                    .each
                    {
                        // jiraComment is provided by Jira-plugin
                        id -> jiraComment(issueKey: id,
                        body: "SUCCESS: Integrated in Jenkins CBOE [${FULL_VERSION}|${currentBuild.absoluteUrl}]")
                    }
                }
            }
        }
    }
    post
    {
        always
        {
            emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                mimeType: 'text/html',
                subject: "${currentBuild.result?:'SUCCESS'}-Job \'${env.JOB_NAME}:${env.CBOE_BUILD_NUMBER}\'",
                to: "${NOTIFY_LIST}",
                replyTo: "${NOTIFY_LIST}",
                recipientProviders: [[$class: 'CulpritsRecipientProvider']]
            deleteDir()
        }
        success 
        {
            slackSend (color: 'GREEN', message: "SUCCESS: Job '${env.JOB_NAME} [${FULL_VERSION}]' (${env.BUILD_URL}) (${env.PUBLISH_PATH})",channel: "#cboe-devops")
        }
    }
}



