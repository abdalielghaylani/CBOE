// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CambridgeSoft.COE.Registration.Services.UnitTests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Registration.Services.Types.Project));
    
    internal CambridgeSoft_COE_Registration_Services_Types_ProjectAccessor(global::CambridgeSoft.COE.Registration.Services.Types.Project target) : 
            base(target, m_privateType) {
    }
    
    internal int _id {
        get {
            int ret = ((int)(m_privateObject.GetField("_id")));
            return ret;
        }
        set {
            m_privateObject.SetField("_id", value);
        }
    }
    
    internal int _name {
        get {
            int ret = ((int)(m_privateObject.GetField("_name")));
            return ret;
        }
        set {
            m_privateObject.SetField("_name", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Registration.Services.Types.PersonList _personList {
        get {
            global::CambridgeSoft.COE.Registration.Services.Types.PersonList ret = ((global::CambridgeSoft.COE.Registration.Services.Types.PersonList)(m_privateObject.GetField("_personList")));
            return ret;
        }
        set {
            m_privateObject.SetField("_personList", value);
        }
    }
    
    internal string _description {
        get {
            string ret = ((string)(m_privateObject.GetField("_description")));
            return ret;
        }
        set {
            m_privateObject.SetField("_description", value);
        }
    }
    
    internal object GetIdValue() {
        object[] args = new object[0];
        object ret = ((object)(m_privateObject.Invoke("GetIdValue", new System.Type[0], args)));
        return ret;
    }
    
    internal void AddBusinessRules() {
        object[] args = new object[0];
        m_privateObject.Invoke("AddBusinessRules", new System.Type[0], args);
    }
    
    internal void AddAuthorizationRules() {
        object[] args = new object[0];
        m_privateObject.Invoke("AddAuthorizationRules", new System.Type[0], args);
    }
    
    internal static global::CambridgeSoft.COE.Registration.Services.Types.Project CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::CambridgeSoft.COE.Registration.Services.Types.Project), new System.Type[0], args);
        return ((global::CambridgeSoft.COE.Registration.Services.Types.Project)(priv_obj.Target));
    }
    
    internal static void DeleteProject(int id) {
        object[] args = new object[] {
                id};
        m_privateType.InvokeStatic("DeleteProject", new System.Type[] {
                    typeof(int)}, args);
    }
    
    internal void DataPortal_Create(global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_Project_CriteriaAccessor criteria) {
        object criteria_val_target = null;
        if ((criteria != null)) {
            criteria_val_target = criteria.Target;
        }
        object[] args = new object[] {
                criteria_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.Types.Project+Criteria");
        m_privateObject.Invoke("DataPortal_Create", new System.Type[] {
                    target.ReferencedType}, args);
    }
    
    internal void DataPortal_Fetch(global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_Project_CriteriaAccessor criteria) {
        object criteria_val_target = null;
        if ((criteria != null)) {
            criteria_val_target = criteria.Target;
        }
        object[] args = new object[] {
                criteria_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.Types.Project+Criteria");
        m_privateObject.Invoke("DataPortal_Fetch", new System.Type[] {
                    target.ReferencedType}, args);
    }
    
    internal void Fetch(global::Csla.Data.SafeDataReader reader) {
        object[] args = new object[] {
                reader};
        m_privateObject.Invoke("Fetch", new System.Type[] {
                    typeof(global::Csla.Data.SafeDataReader)}, args);
    }
    
    internal void DataPortal_Insert() {
        object[] args = new object[0];
        m_privateObject.Invoke("DataPortal_Insert", new System.Type[0], args);
    }
    
    internal void Insert(global::Oracle.DataAccess.Client.OracleCommand cmd) {
        object[] args = new object[] {
                cmd};
        m_privateObject.Invoke("Insert", new System.Type[] {
                    typeof(global::Oracle.DataAccess.Client.OracleCommand)}, args);
    }
    
    internal void DataPortal_Update() {
        object[] args = new object[0];
        m_privateObject.Invoke("DataPortal_Update", new System.Type[0], args);
    }
    
    internal void Update(global::Oracle.DataAccess.Client.OracleCommand cmd) {
        object[] args = new object[] {
                cmd};
        m_privateObject.Invoke("Update", new System.Type[] {
                    typeof(global::Oracle.DataAccess.Client.OracleCommand)}, args);
    }
    
    internal void DataPortal_DeleteSelf() {
        object[] args = new object[0];
        m_privateObject.Invoke("DataPortal_DeleteSelf", new System.Type[0], args);
    }
    
    internal void DataPortal_Delete(global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_Types_Project_CriteriaAccessor criteria) {
        object criteria_val_target = null;
        if ((criteria != null)) {
            criteria_val_target = criteria.Target;
        }
        object[] args = new object[] {
                criteria_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.Types.Project+Criteria");
        m_privateObject.Invoke("DataPortal_Delete", new System.Type[] {
                    target.ReferencedType}, args);
    }
    
    internal string UpdateSelf() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("UpdateSelf", new System.Type[0], args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Registration_Services_Types_Project_CriteriaAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.Types.Project+Criteria");
    
    internal CambridgeSoft_COE_Registration_Services_Types_Project_CriteriaAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal int _id {
        get {
            int ret = ((int)(m_privateObject.GetField("_id")));
            return ret;
        }
        set {
            m_privateObject.SetField("_id", value);
        }
    }
    
    internal int Id {
        get {
            int ret = ((int)(m_privateObject.GetProperty("Id")));
            return ret;
        }
    }
    
    internal static object CreatePrivate(int id) {
        object[] args = new object[] {
                id};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.Types.Project+Criteria", new System.Type[] {
                    typeof(int)}, args);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.BLL.SingleCompoundRegistryRecordList");
    
    internal CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::CambridgeSoft.COE.Registration.Services.DAL _coeRegistrationDAL {
        get {
            global::CambridgeSoft.COE.Registration.Services.DAL ret = ((global::CambridgeSoft.COE.Registration.Services.DAL)(m_privateObject.GetField("_coeRegistrationDAL")));
            return ret;
        }
        set {
            m_privateObject.SetField("_coeRegistrationDAL", value);
        }
    }
    
    internal global::CambridgeSoft.COE.Framework.Common.DALFactory _dalFactory {
        get {
            global::CambridgeSoft.COE.Framework.Common.DALFactory ret = ((global::CambridgeSoft.COE.Framework.Common.DALFactory)(m_privateObject.GetField("_dalFactory")));
            return ret;
        }
        set {
            m_privateObject.SetField("_dalFactory", value);
        }
    }
    
    internal string _serviceName {
        get {
            string ret = ((string)(m_privateObject.GetField("_serviceName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_serviceName", value);
        }
    }
    
    internal static bool CanGetObject() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateType.InvokeStatic("CanGetObject", new System.Type[0], args)));
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor GetList(string filter) {
        object[] args = new object[] {
                filter};
        object _ret_val = m_privateType.InvokeStatic("GetList", new System.Type[] {
                    typeof(string)}, args);
        global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor(_ret_val);
        }
        global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor ret = _ret;
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor GetListFomXml(string xml) {
        object[] args = new object[] {
                xml};
        object _ret_val = m_privateType.InvokeStatic("GetListFomXml", new System.Type[] {
                    typeof(string)}, args);
        global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor(_ret_val);
        }
        global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor ret = _ret;
        return ret;
    }
    
    internal static global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor NewList() {
        object[] args = new object[0];
        object _ret_val = m_privateType.InvokeStatic("NewList", new System.Type[0], args);
        global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor _ret = null;
        if ((_ret_val != null)) {
            _ret = new global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor(_ret_val);
        }
        global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordListAccessor ret = _ret;
        return ret;
    }
    
    internal void LoadFromXml(string xml) {
        object[] args = new object[] {
                xml};
        m_privateObject.Invoke("LoadFromXml", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal void DataPortal_Fetch(global::CambridgeSoft.COE.Registration.Services.UnitTests.CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordList_XmlCriteriaAccessor criteria) {
        object criteria_val_target = null;
        if ((criteria != null)) {
            criteria_val_target = criteria.Target;
        }
        object[] args = new object[] {
                criteria_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.BLL.SingleCompoundRegistryRecordList+XmlC" +
                "riteria");
        m_privateObject.Invoke("DataPortal_Fetch", new System.Type[] {
                    target.ReferencedType}, args);
    }
    
    internal void LoadDAL() {
        object[] args = new object[0];
        m_privateObject.Invoke("LoadDAL", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordList_XmlCriteriaAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.BLL.SingleCompoundRegistryRecordList+XmlC" +
            "riteria");
    
    internal CambridgeSoft_COE_Registration_Services_BLL_SingleCompoundRegistryRecordList_XmlCriteriaAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string _xml {
        get {
            string ret = ((string)(m_privateObject.GetField("_xml")));
            return ret;
        }
        set {
            m_privateObject.SetField("_xml", value);
        }
    }
    
    internal string Xml {
        get {
            string ret = ((string)(m_privateObject.GetProperty("Xml")));
            return ret;
        }
    }
    
    internal static object CreatePrivate(string xml) {
        object[] args = new object[] {
                xml};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("CambridgeSoft.COE.Registration.Services", "CambridgeSoft.COE.Registration.Services.BLL.SingleCompoundRegistryRecordList+XmlC" +
                "riteria", new System.Type[] {
                    typeof(string)}, args);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class CambridgeSoft_COE_Registration_Services_DALAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::CambridgeSoft.COE.Registration.Services.DAL));
    
    internal CambridgeSoft_COE_Registration_Services_DALAccessor(global::CambridgeSoft.COE.Registration.Services.DAL target) : 
            base(target, m_privateType) {
    }
    
    internal global::Csla.Data.SafeDataReader GetSaltNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetSaltNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetChemistNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetChemistNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetIdentifierNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetIdentifierNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetFragmentNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetFragmentNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetNoteBookNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetNoteBookNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetPrefixNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetPrefixNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetProjectNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetProjectNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetUserNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetUserNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Csla.Data.SafeDataReader GetSolventNameValueList() {
        object[] args = new object[0];
        global::Csla.Data.SafeDataReader ret = ((global::Csla.Data.SafeDataReader)(m_privateObject.Invoke("GetSolventNameValueList", new System.Type[0], args)));
        return ret;
    }
    
    internal string GetTemporalID() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("GetTemporalID", new System.Type[0], args)));
        return ret;
    }
    
    internal string GetSingleCompoundRegistryRecord() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("GetSingleCompoundRegistryRecord", new System.Type[0], args)));
        return ret;
    }
    
    internal string InsertSingleCompoundRegistryRecord(string xml) {
        object[] args = new object[] {
                xml};
        string ret = ((string)(m_privateObject.Invoke("InsertSingleCompoundRegistryRecord", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string InsertSingleCompoundRegistryRecordTemporary(string xml) {
        object[] args = new object[] {
                xml};
        string ret = ((string)(m_privateObject.Invoke("InsertSingleCompoundRegistryRecordTemporary", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string UpdateSingleCompoundRegistryRecord(string xml) {
        object[] args = new object[] {
                xml};
        string ret = ((string)(m_privateObject.Invoke("UpdateSingleCompoundRegistryRecord", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string UpdateSingleCompoundRegistryRecordTemporary(string xml) {
        object[] args = new object[] {
                xml};
        string ret = ((string)(m_privateObject.Invoke("UpdateSingleCompoundRegistryRecordTemporary", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string DeleteSingleCompoundRegistryRecord(int id) {
        object[] args = new object[] {
                id};
        string ret = ((string)(m_privateObject.Invoke("DeleteSingleCompoundRegistryRecord", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal string DeleteSingleCompoundRegistryRecordTemporary(int id) {
        object[] args = new object[] {
                id};
        string ret = ((string)(m_privateObject.Invoke("DeleteSingleCompoundRegistryRecordTemporary", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal string GetSingleCompoundRegistryRecord(int id) {
        object[] args = new object[] {
                id};
        string ret = ((string)(m_privateObject.Invoke("GetSingleCompoundRegistryRecord", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal string GetSingleCompoundRegistryRecordTemporary(int tempId) {
        object[] args = new object[] {
                tempId};
        string ret = ((string)(m_privateObject.Invoke("GetSingleCompoundRegistryRecordTemporary", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
}
}
