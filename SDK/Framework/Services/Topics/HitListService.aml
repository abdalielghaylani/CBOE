<?xml version="1.0" encoding="utf-8"?>
<topic id="8cfce719-7d93-4ca8-a8e8-5c0f65b1a45e" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      	<para>
      		This document is intended to explain the basics to manage HitLists created using the search service (directly or as result of any ChemOfficeEnterprise application), as well as understanding all of the operations you can do with these hit lists, like Intersection, Subtraction and Union as among others.
			In order to make it easier to understand these  features, this document contains examples that show you how to perform all these actions.
		</para>
		<autoOutline />
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>HitLists Service Composition</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
	        The classes that composed the HitList Service are:
	        
			<list class="bullet">
			  <listItem>COEHitListBO.cs </listItem>
			  <listItem>COEHitListBOList.cs</listItem>
			  <listItem>COEHitListOperationManager.cs</listItem>
			</list>

		</para>
      </content>
    </section>
    
     <section address="Section2">
      <title>HitLists Service</title>
      <content>
      <sections>
          <section address="SubSection1">
              <title>COEHitListBOList class:</title>
              <content>
                  <para>
                  	 The classes that composed the HitList Service are:
	        
					<list class="bullet">
					  <listItem>Grouping all TEMP Hitlists from a specific database</listItem>
					  <listItem>Grouping all SAVED Hitlists from a specific database</listItem>
					  <listItem>Recover all TEMP HitLists from a specific database</listItem>
  					  <listItem>Recover all SAVED HitLists from a specific database</listItem>				
					</list>          
                  </para>
                  
                  <para>You can get a TEMP or SAVED HitListList (a list of hitlists) from a specific database using the methods GetTempHitListList() and GetSavedHitList() as follows:</para>

					<code language="cs">
					//Geting HitListList
        			public static COEHitListBOList GetHitListList(HitListType hitListType, string dataBaseName)
        			{
            			switch (hitListType)
            			{
			                case HitListType.SAVED:
			                    COEHitListBOList savedHitListList = COEHitListBOList.GetSavedHitListList(dataBaseName);
			                    return savedHitListList;
			                    break;
			
			                case HitListType.TEMP:
			                    COEHitListBOList tempHitListList = COEHitListBOList.GetTempHitListList(dataBaseName);			
			                    return tempHitListList;
			                    break;               
            			}
        			}
					</code>

                  
              </content>
          </section>
          <section address="SubSection2">
              <title>COEHitListBO class:</title>
              <content>
                  <para>This class represents a specific HitList and has the following responsibilities:</para>
              		
					<list class="bullet">
					  <listItem>Create a new TEMP or SAVED HitList.</listItem>
					  <listItem>Create a new MARKED HitList from one TEMP or SAVED HitList.</listItem>
					  <listItem>TEMP or SAVED HitList.</listItem>
					  <listItem>Recover an existing TEMP or SAVED HitList.</listItem>
					  <listItem>Check if a TEMP or SAVED HitList exists.</listItem>
					</list>
              </content>
          </section>
          
          <section address="SubSection3">
              <title>Creating a Hit List</title>
              <content>
                  <para>To create a new HitList you need specify the database name (string) and the HitList Type (HitListType)</para>
				  <para>The following example shows how to use these features:</para>
              	  <code>
              	  	//Creating HitList
			        public static COEHitListBO CreateHitList(string dataBaseName, HitListType hitListType)
			        {
			            COEHitListBO newHitList = COEHitListBO.New(dataBaseName, hitListType);
			            return newHitList;
			        }
              	  </code>
              </content>
          </section>      

          <section address="SubSection4">
              <title>Retrieving a Hit List</title>
              <content>
                  <para>To get an existing HitList you must specify the HitList Type (HitListType) and the HitList ID (int).</para>
				  <para>The following example shows how to use these features:</para>
              	  <code>
				  		//Retrieving HitList
				        public static COEHitListBO GetHitList(HitListType hitListType, int hitListID)
				        {
				            COEHitListBO hitList = COEHitListBO.Get(hitListType, hitListID);
				            return hitList;
				        }
              	  </code>
              </content>
          </section>               
      </sections>
      </content>
    </section>   
    
<section address="optionalAddress">
  <title>COEHitListOperationManager class</title>
  <content>
    <sections>
		<section address="intersect">
		  <title>Intersecting HitLists:</title>
		  <content>
		    <para>The COEHitListOperationManager provides a public static method to perform an intersection between two HitList objects and returns a new intersected TEMP HitList as result of intersection.</para>
			<para>This operation can be done between any kind of HitLists (SAVED or TEMP), but always returns a TEMP HitList.</para>
			<para>The following code example shows how to use this operation:</para>
			  	<code>
			  	//Intersecting HitLists
				public static COEHitListBO IntersectHitLists(string dataBaseName)
				{
				//You can performing the intersection between two hitlist of any type
				
					COEHitListBOList savedHitListList = COEHitListBOList.GetSavedHitListList(dataBaseName);
				
				        COEHitListBOList tempHitListList = COEHitListBOList.GetTempHitListList(dataBaseName);
				
				        //The hitList index are examples
				        COEHitListBO hitList1 = savedHitListList[5];
				        COEHitListBO hitList2 = tempHitListList[3];
				
				        //Now use COEHitListOperationManager to performing the intersection
				
					COEHitListBO intersectedHitList = COEHitListOperationManager.IntersectHitList(hitList1.HitListInfo, hitList2.HitListInfo);
				
				        return intersectedHitList;
				}
				</code>
		  </content>
		</section>
		<section address="subtract">
		  <title>Subtracting  HitLists:</title>
		  <content>
		    <para>The COEHitListOperationManager provides a public static method to perform a Subtraction between two HitList objects and returns a new intersected TEMP HitList as result of subtraction.</para>
			<para>This operation can be done between any kind of HitLists (SAVED and TEMP), but always returns a TEMP HitList.</para>
			<para>The following code example shows how to perform this operation:</para>
			  	<code>
			  	//Subtracting HitLists
				public static COEHitListBO SubtractHitLists(string dataBaseName)
				{
				//You can performing the subtraction between two hitlist of any type
				
					COEHitListBOList savedHitListList = COEHitListBOList.GetSavedHitListList(dataBaseName);
				
					COEHitListBOList tempHitListList = COEHitListBOList.GetTempHitListList(dataBaseName);
				
				        //The hitList index are examples
				        COEHitListBO hitList1 = savedHitListList[5];
				        COEHitListBO hitList2 = tempHitListList[3];
				
				        //Now use COEHitListOperationManager to performing the subtraction
				
				        COEHitListBO subtractedHitList = COEHitListOperationManager.IntersectHitList(hitList1.HitListInfo, hitList2.HitListInfo);
				
				        return subtractedHitList;
				}
				</code>
		  </content>
		</section>
		<section address="union">
		  <title>Union  Hitlists:</title>
		  <content>
		    <para>The COEHitListOperationManager provides a public static method to perform a Subtraction between two HitList and returns a new intersected TEMP HitList as result of union.</para>
		    <para>This operation can be done between any kind of HitLists (SAVED and TEMP), but always returns a TEMP HitList.</para>
		    <para>The following code example shows how to use this operation:</para>
		    <code>
				//Uniting HitLists
				public static COEHitListBO UniteHitLists(string dataBaseName)
				{
				//You can performing the union between two hitlist of any type
				
					COEHitListBOList savedHitListList = COEHitListBOList.GetSavedHitListList(dataBaseName);
				
				        COEHitListBOList tempHitListList = COEHitListBOList.GetTempHitListList(dataBaseName);
				
				        //The hitList index are examples
				        COEHitListBO hitList1 = savedHitListList[5];
				        COEHitListBO hitList2 = tempHitListList[3];
				
				        //Now use COEHitListOperationManager to performing the union
				
				        COEHitListBO uniteHitList = COEHitListOperationManager.UnionHitLists(hitList1.HitListInfo, hitList2.HitListInfo);
				
				        return uniteHitList;
				}
			</code>
		  </content>
		</section>		
    </sections>
  </content>
</section>

    
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>