prompt 
prompt Starting "Update_ChemReg_DB_From_11_to_11.0.1.SQL"...
prompt 

--ALTER TABLE REG_NUMBERS DROP COLUMN TYPE;
ALTER TABLE REG_NUMBERS MODIFY ("TYPE" VARCHAR2(8) NULL);
ALTER TABLE compound_molecule ADD (OLD_REGID number(8));
update compound_molecule set old_regid = regid;
commit;

ALTER TABLE ALT_IDS ADD ORDERINDEX NUMBER(8,0);

CREATE INDEX ALT_IDS_OrderIndex_IX ON ALT_IDS(Orderindex ASC) TABLESPACE T_REGDB_INDEX;

CREATE OR REPLACE NOFORCE VIEW VW_Compound_Identifier 
    (ID,Type,RegID,Value,OrderIndex) AS 
    SELECT ID,IDENTIFIER_TYPE,REG_INTERNAL_ID,IDENTIFIER,ORDERINDEX FROM ALT_IDS;

DROP TABLE DUPLICATES;

--DROP TRIGGER TRG_BATCHCOMPONENT;

DROP TRIGGER TRG_COMPOUND_FRAGMENT;

CREATE TABLE DUPLICATES
(
  ID  NUMBER(8),
  RegNumber VARCHAR2(50),
  RegNumberDuplicated VARCHAR2(50),
  PersonID NUMBER(8), 
  Created DATE,
  CONSTRAINT DUPLICATES_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE FRAGMENTTYPE(
	ID          NUMBER(8,0) ,
	DESCRIPTION VARCHAR2(255), 
	CONSTRAINT PK_FRAGMENTTYPE
		PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
)
;

CREATE OR REPLACE NOFORCE VIEW VW_FragmentType 
	(ID,Description) AS 
	SELECT ID,Description FROM FragmentType;

ALTER TABLE FRAGMENTS ADD FRAGMENTTYPEID NUMBER(8,0);
ALTER TABLE FRAGMENTS ADD STRUCTUREFORMAT VARCHAR2(150);

ALTER TABLE BATCHES ADD FULLREGNUMBER VARCHAR2(50);
ALTER TABLE BATCHES RENAME COLUMN COMMENTS to BCOMMENTS;
ALTER TABLE BATCHES RENAME COLUMN NATURAL to BNATURAL;
ALTER TABLE BATCHES RENAME COLUMN ISVALID to BISVALID;

CREATE OR REPLACE VIEW VW_BATCH ( BATCHID, BATCHNUMBER, REGID, DATECREATED, PERSONCREATED, PERSONREGISTERED, DATELASTMODIFIED, FULLREGNUMBER, CO, ITEMNUMBER, NOTEBOOKREF, PURITY, OPTICALROTATION, SOLUBILITY, REFRACTIONINDEX, NUMMS, NUMANAL, CHEMIST, WORKNUMBER, REMARKS, BCOMMENTS, DATEENTERED, DELIVERYDATE, MELTINGPOINT, BOILINGPOINT, DENSITY, POLARITY, RETENTIONINDEX, MONOMERICCOMPOSITION, DEGREEOFSUBSTITUTION, RAMIFICATION, FIRPROJECTID, TEMPBATCHID, STATUSID, MN, MW, SAMPLEID, BNATURAL, BISVALID, BATCHMS, BATCHNMR, BATCHNUMANAL, MSREM, NMRREM, FIRCOFLAV, FIRCOPERF, QPERF, QFLAV ) AS
SELECT BATCH_INTERNAL_ID,BATCH_NUMBER,REG_INTERNAL_ID,DATECREATED,ENTRY_PERSON_ID,BATCH_REG_PERSON_ID,LAST_MOD_DATE,FULLREGNUMBER, CO,ItemNumber,NotebookRef,Purity,Optical_Rotation,Solubility,Refractive_Index,NumMS,NumAnal,Chemist,WorkNumber,Remarks,BComments,DateEntered,DeliveryDate,MeltingPoint,BoilingPoint,Density,Polarity,RetentionIndex,MonomericComposition,DegreeOfSubstitution,Ramification,FIRProjectID,TempBatchID,StatusID,MN,MW,SampleID, BNATURAL, BISVALID, BATCHMS, BATCHNMR, BATCHNUMANAL, MSREM, NMRREM, FIRCOFLAV, FIRCOPERF, QPERF, QFLAV FROM BATCHES;

CREATE TABLE "PREFIX_USER"
   (	"PERSON_ID" NUMBER(8,0),
	"SEQUENCE_ID" NUMBER(8,0)
   )  TABLESPACE "T_REGDB_TABL" ;

alter table compound_molecule add (normalizedstructure clob, usenormalization nchar(1), tag varchar2(50));
ALTER TABLE COMPOUND_MOLECULE RENAME COLUMN COMMENTS to CCOMMENTS;  
ALTER TABLE COMPOUND_MOLECULE RENAME COLUMN HISTORY to CHISTORY;


CREATE OR REPLACE VIEW VW_COMPOUND ( COMPOUNDID, STRUCTUREID, REGID, FORMULAWEIGHT, MOLECULARFORMULA, PERSONCREATED, PERSONREGISTERED, DATELASTMODIFIED, DATECREATED, NORMALIZEDSTRUCTURE, USENORMALIZATION, TAG, CN, PATENT, CHISTORY, OCURR, CCOMMENTS, ENPRODUCTID, ARCTANDER, FEMA, COMPOUNDNAME, STEREO, EXACTMASS, MSID, COMP, JBASIS, ISVALID ) AS
SELECT CPD_DATABASE_COUNTER,STRUCTUREID,RegID,FORMULAWEIGHT,MOLECULARFORMULA ,PersonCreated,PersonRegistered,LAST_MOD_DATE,DATECREATED, NORMALIZEDSTRUCTURE, USENORMALIZATION, TAG, CN,Patent,CHistory,OCURR,CComments,ENProductID,ARCTANDER,FEMA,COMPOUNDNAME,Stereo,ExactMass,MSID,COMP, JBASIS, ISVALID FROM COMPOUND_MOLECULE;

CREATE TABLE "BATCH_IDENTIFIER"
   (	"ID" NUMBER(8,0),
	"TYPE" NUMBER(8,0),
	"BATCHID" NUMBER(8,0),
	"VALUE" VARCHAR2(2000),
	"ORDERINDEX" NUMBER(8,0),
	 CONSTRAINT "BATCH_IDENTIFIER_PK" PRIMARY KEY ("ID") USING INDEX
  		TABLESPACE "T_REGDB_INDEX"  ENABLE,
	 CONSTRAINT "BATCH_IDENTIFIER_BATCHES_FK" FOREIGN KEY ("BATCHID")
	  REFERENCES "REGDB"."BATCHES" ("BATCH_INTERNAL_ID") ENABLE,
	 CONSTRAINT "BATCH_IDENTIFIER_IDENTIFIER_FK" FOREIGN KEY ("TYPE")
	  REFERENCES "REGDB"."IDENTIFIERS" ("IDENTIFIER_TYPE") ENABLE
   )
  TABLESPACE "T_REGDB_TABL" ;

  CREATE INDEX "BATCH_IDENTIFIER_ORDERINDEX_IX" ON "REGDB"."BATCH_IDENTIFIER" ("ORDERINDEX")
  TABLESPACE "T_REGDB_INDEX" ;

CREATE OR REPLACE VIEW VW_BATCHIDENTIFIER AS
SELECT ID,TYPE,BATCHID,VALUE,ORDERINDEX FROM BATCH_IDENTIFIER;




CREATE OR REPLACE NOFORCE VIEW VW_Fragment 
        (FragmentID,Code,Description,FragmentTypeID,MolWeight,Formula,Created,Modified,Structure,StructureFormat) AS
        SELECT FRAGMENT_ID,CODE,DESCRIPTION,FRAGMENTTYPEID,MOLWEIGHT,FORMULA,CREATED,MODIFIED,BASE64_CDX,STRUCTUREFORMAT FROM FRAGMENTS;

ALTER TABLE FRAGMENTS ADD CONSTRAINT FRAGMENTTYPE_FRAGMENTS FOREIGN KEY(FragmentTypeID) 
REFERENCES FRAGMENTTYPE(ID);

CREATE TABLE BATCHCOMPONENTFRAGMENT
(
  ID                 NUMBER(8,0) ,
  BATCHCOMPONENTID   NUMBER(8,0),
  COMPOUNDFRAGMENTID NUMBER(8,0), 
  EQUIVALENT         NUMBER,
  ORDERINDEX         NUMBER(8,0), --Version 11.0.1
  CONSTRAINT BATCHCOMPONENTFRAGMENT_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE SEQUENCE SEQ_BATCHCOMPONENTFRAGMENT INCREMENT By 1 START With 1;

CREATE OR REPLACE TRIGGER TRG_BATCHCOMPONENTFRAGMENT 
BEFORE INSERT
ON BATCHCOMPONENTFRAGMENT  
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
 SELECT SEQ_BATCHCOMPONENTFRAGMENT .NEXTVAL INTO :NEW.ID FROM DUAL;
END TRG_BATCHCOMPONENTFRAGMENT ;
/

CREATE INDEX BatchCompFrag_OrderIndex_IX ON BATCHCOMPONENTFRAGMENT(Orderindex ASC) TABLESPACE &&indexTableSpaceName
;


ALTER TABLE BATCHCOMPONENTFRAGMENT ADD CONSTRAINT BATCHCOMPFRAGMENT_BATCOM FOREIGN KEY (BATCHCOMPONENTID) 
REFERENCES BATCHCOMPONENT(ID);

ALTER TABLE BATCHCOMPONENTFRAGMENT ADD CONSTRAINT BATCHCOMPFRAGMENT_COMFRA FOREIGN KEY (COMPOUNDFRAGMENTID) 
REFERENCES COMPOUND_FRAGMENT(ID);

CREATE OR REPLACE NOFORCE VIEW VW_BatchComponentFragment 
    (ID,BatchComponentID,CompoundFragmentID,Equivalent,OrderIndex) AS 
    SELECT ID,BATCHCOMPONENTID,COMPOUNDFRAGMENTID,EQUIVALENT,ORDERINDEX  FROM BATCHCOMPONENTFRAGMENT;


CREATE OR REPLACE NOFORCE VIEW VW_Duplicates
    (ID,RegNumber,RegNumberDuplicated,PersonID,Created) AS 
    SELECT ID,REGNUMBER,REGNUMBERDUPLICATED,PERSONID,CREATED FROM DUPLICATES;

ALTER TABLE PROJECTS ADD ("TYPE" NCHAR(1) NULL);	

create or replace VIEW VW_PROJECT ( PROJECTID, NAME, ACTIVE, DESCRIPTION, "TYPE" ) AS
SELECT PROJECT_INTERNAL_ID,PROJECT_NAME,ACTIVE,DESCRIPTION, "TYPE" FROM PROJECTS;

ALTER TABLE IDENTIFIERS ADD ("TYPE" NCHAR(1) NULL);
ALTER TABLE IDENTIFIERS modify (active NCHAR(1));


create or replace VIEW VW_IDENTIFIERTYPE ( ID, NAME, DESCRIPTION, ACTIVE, "TYPE" ) AS
SELECT IDENTIFIER_TYPE,NAME,IDENTIFIER_DESCRIPTOR,ACTIVE, "TYPE" FROM IDENTIFIERS;

ALTER TABLE PICKLISTDOMAIN ADD (EXT_TABLE VARCHAR2(100), EXT_ID_COL VARCHAR2(30), EXT_DISPLAY_COL VARCHAR2(30), EXT_SQL_FILTER VARCHAR2(2000));

create or replace VIEW VW_PICKLISTDOMAIN ( ID, DESCRIPTION, EXT_TABLE, EXT_ID_COL, EXT_DISPLAY_COL, EXT_SQL_FILTER) AS
SELECT ID,Description, EXT_TABLE, EXT_ID_COL, EXT_DISPLAY_COL, EXT_SQL_FILTER FROM PickListDomain;

ALTER TABLE SEQUENCE ADD (SITEID NUMBER(8), "TYPE" NCHAR(1), SALTSUFFIXTYPE VARCHAR2(30));

ALTER TABLE SEQUENCE rename column ROOT_NUMBER_LENGTH to regnumber_length;


cREATE TABLE REG_NUMBERS_PROJECT
(
  ID         NUMBER(8,0) ,
  REGID      NUMBER(8,0),
  PROJECTID  NUMBER(8,0),
  ORDERINDEX NUMBER(8,0), --Version 11.0.1
  CONSTRAINT REG_NUMBERS_PROJECT_PK PRIMARY KEY (ID) USING INDEX TABLESPACE  &&indexTableSpaceName
);

CREATE SEQUENCE SEQ_REG_NUMBERS_PROJECT INCREMENT By 1 START With 1;

CREATE OR REPLACE TRIGGER TRG_REG_NUMBERS_PROJECT
BEFORE INSERT
ON  REG_NUMBERS_PROJECT 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
 SELECT SEQ_REG_NUMBERS_PROJECT.NEXTVAL INTO :NEW.ID FROM DUAL;
END TRG_REG_NUMBERS_PROJECT;
/


CREATE INDEX RegNumberproject_OrderIndex_IX ON REG_NUMBERS_PROJECT(Orderindex ASC) TABLESPACE  &&indexTableSpaceName;

ALTER TABLE REG_NUMBERS_PROJECT ADD CONSTRAINT REGNUMPROJ_REGNUMBERS_FK  FOREIGN KEY (REGID) 
REFERENCES REG_NUMBERS (REG_ID);

ALTER TABLE REG_NUMBERS_PROJECT ADD CONSTRAINT REGNUMPROJ_PROJECTS FOREIGN KEY (PROJECTID) 
REFERENCES PROJECTS (PROJECT_INTERNAL_ID);

CREATE OR REPLACE NOFORCE VIEW VW_RegistryNumber_Project 
	(ID,RegID,ProjectID,OrderIndex) AS 
	SELECT ID,REGID,PROJECTID,ORDERINDEX FROM REG_NUMBERS_PROJECT;

ALTER TABLE TEMPORARY_COMPOUND ADD BATCHCOMPFRAGMENTXML        CLOB;


ALTER TABLE TEMPORARY_COMPOUND ADD (TAG VARCHAR2(50));
ALTER TABLE TEMPORARY_COMPOUND ADD SequenceID NUMBER(8,0);

CREATE INDEX TemporaryCompoundSequenceID_IX ON TEMPORARY_COMPOUND(sequenceID ASC) TABLESPACE &&indexTableSpaceName;

ALTER TABLE TEMPORARY_COMPOUND ADD CONSTRAINT SequenceTemporary_Comopund FOREIGN KEY (SequenceID) 
REFERENCES SEQUENCE (Sequence_ID);
ALTER TABLE TEMPORARY_COMPOUND RENAME COLUMN COMMENTS TO CCOMMENTS;
ALTER TABLE TEMPORARY_COMPOUND RENAME COLUMN HISTORY TO CHISTORY;
ALTER TABLE TEMPORARY_COMPOUND RENAME COLUMN BATCHCOMPONENT_COMMENTS TO BCCOMMENTS;
ALTER TABLE TEMPORARY_COMPOUND ADD (BCMSID NUMBER);


CREATE OR REPLACE VIEW VW_TEMPORARYCOMPOUND
(TEMPCOMPOUNDID, TEMPBATCHID, FORMULAWEIGHT, MOLECULARFORMULA, PERSONCREATED, 
 DATELASTMODIFIED, DATECREATED, SEQUENCEID, PROJECTXML, BASE64_CDX, STRUCTUREID, 
 FRAGMENTXML, BatchCompFragmentXML, IDENTIFIERXML, TAG,CCOMMENTS, REGID, PERCENTAGE, 
 CN, PATENT, CHISTORY, OCURR, ENPRODUCTID, 
 ARCTANDER, FEMA, COMPOUNDNAME, NORMALIZEDSTRUCTURE, STEREO, 
 EXACTMASS, LABEL, RATIO, BCCOMMENTS, USENORMALIZATION, 
 MSID, COMP, JBASIS, ISVALID, BCMSID) AS 
SELECT TempCompoundID,TempBatchID,formulaWeight,MolecularFormula,PersonCreated,DateLastModified,DateCreated,SequenceID,ProjectXML,Base64_CDX,StructureID,FragmentXML,BatchCompFragmentXML,IdentifierXML, TAG,CComments,RegID,Percentage,CN,Patent,CHistory,Ocurr,ENProductID,ARCTANDER,FEMA,COMPOUNDNAME,NORMALIZEDSTRUCTURE,STEREO,ExactMass,LABEL,RATIO,BCCOMMENTS ,USENORMALIZATION,MSID,COMP,JBASIS, ISVALID,BCMSID FROM TEMPORARY_COMPOUND;

ALTER TABLE TEMPORARY_BATCH ADD IDENTIFIERXML CLOB;

ALTER TABLE TEMPORARY_BATCH ADD ProjectXMLBatch CLOB;
ALTER TABLE TEMPORARY_BATCH ADD IDentifierXMLBatch CLOB;

ALTER TABLE TEMPORARY_BATCH ADD SequenceID NUMBER(8,0);
update temporary_batch set SequenceID = (select sequence_id from sequence where prefix='CID');

ALTER TABLE TEMPORARY_BATCH modify (fema number);


CREATE INDEX TemporaryBatchSequenceIDx_IX ON TEMPORARY_BATCH(sequenceID ASC) TABLESPACE &&indexTableSpaceName;

ALTER TABLE TEMPORARY_BATCH ADD CONSTRAINT SequenceTemporary_Batch FOREIGN KEY (SequenceID) 
REFERENCES SEQUENCE (Sequence_ID);


ALTER TABLE TEMPORARY_BATCH RENAME COLUMN COMMENTS to BCOMMENTS;
ALTER TABLE TEMPORARY_BATCH RENAME COLUMN NATURAL to BNATURAL;
ALTER TABLE TEMPORARY_BATCH RENAME COLUMN ISVALID to BISVALID;
ALTER TABLE TEMPORARY_BATCH RENAME COLUMN "NAME" to REGNAME;


CREATE OR REPLACE VIEW VW_TEMPORARYBATCH
(TEMPBATCHID, BATCHNUMBER, PROJECTXML, IdentifierXML, IdentifierXMLBatch, BCOMMENTS, DATELASTMODIFIED, 
 DATECREATED, PERSONCREATED, SEQUENCEID, PROJECTXMLBATCH, CO, ITEMNUMBER, NOTEBOOKREF, 
 PURITY, OPTICALROTATION, REFRACTIONINDEX, NUMMS, NUMANAL, 
 CHEMIST, WORKNUMBER, REMARKS, DATEENTERED, DELIVERYDATE, 
 MELTINGPOINT, BOILINGPOINT, DENSITY, POLARITY, SOLUBILITY, 
 RETENTIONINDEX, MONOMERICCOMPOSITION, DEGREEOFSUBSTITUTION, RAMIFICATION, FIRPROJECTID, 
 COMPOUNDCOUNT, STRUCTUREAGGREGATION, STATUSID, MN, MW, 
 SAMPLEID, BNATURAL, BISVALID, BATCHMS, BATCHNMR, 
 BATCHNUMANAL, MSREM, NMRREM, FIRCOFLAV, FIRCOPERF, 
 QPERF, QFLAV, REGNAME, DESCRIPTION, HISTORY, COMMENTSS, OCURR, PATENT, CN, ARCTANDER, FEMA)
AS 
SELECT  TempBatchID,BatchNumber,ProjectXML,IdentifierXML, IdentifierXMLBatch, BComments,
    DateLastModified,DateCreated,PersonCreated, SequenceID, ProjectXMLBatch, CO,ItemNumber,
    NotebookRef,Purity, OpticalRotation,RefractionIndex,NumMS,
    NumAnal,Chemist,WorkNumber,Remarks,DateEntered,DeliveryDate,
    MeltingPoint, BoilingPoint,Density,Polarity,Solubility,
    RetentionIndex, MonomericComposition,DegreeOfSubstitution,
    Ramification ,FIRProjectID,(SELECT Count(1)
    FROM VW_TemporaryCompound
    WHERE TempBatchID=TB.TempBatchID) as COMPOUNDCOUNT,
    StructureAggregation,StatusID,MN,MW,SampleID,BNATURAL, BISVALID,
    batchms,batchnmr, batchnumanal,MSREM,NMRREM,FIRCOFLAV,FIRCOPERF,QPERF,QFLAV ,REGNAME,DESCRIPTION, HISTORY, COMMENTSS, OCURR, PATENT, CN, ARCTANDER, FEMA
    FROM TEMPORARY_BATCH TB;
    
CREATE TABLE LOG_BULKREGISTRATION_ID
(
  LOG_ID            INTEGER,
  DUPLICATE_ACTION  VARCHAR2(20 BYTE)           NOT NULL,
  DESCRIPTION       VARCHAR2(250 BYTE),
  USER_ID           VARCHAR2(30 BYTE),
  DATETIME_STAMP    DATE,
  CONSTRAINT LOG_BULKREGISTRATION_ID_PK PRIMARY KEY (LOG_ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

CREATE TABLE LOG_BULKREGISTRATION
(
  ID			   INTEGER, 	
  LOG_ID           INTEGER,
  TEMP_ID          INTEGER,
  ACTION           VARCHAR2(1 BYTE),
  REG_NUMBER       VARCHAR2(10 BYTE),
  BATCH_NUMBER     NUMBER,
  COMMENTS         VARCHAR2(500 BYTE),
  CONSTRAINT LOG_BULKREGISTRATION_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

ALTER TABLE LOG_BULKREGISTRATION ADD CONSTRAINT LOG_BULKREGISTRATION_R01 FOREIGN KEY (LOG_ID) 
REFERENCES LOG_BULKREGISTRATION_ID (LOG_ID);

--BULKREGISTRATION LOG

CREATE OR REPLACE FORCE VIEW VW_Log_BulkRegistration_id 
	(Log_ID,Duplicate_Action,Description,User_ID,Datetime_Stamp) AS
	SELECT LOG_ID, DUPLICATE_ACTION, DESCRIPTION, USER_ID, DATETIME_STAMP FROM Log_BulkRegistration_ID;

CREATE OR REPLACE FORCE VIEW VW_Log_BulkRegistration 
	(Id, Log_ID, temp_id, Action, reg_number, batch_number, comments) AS
	SELECT Id, Log_ID, Temp_ID, ACTION, Reg_Number, Batch_Number, Comments FROM Log_BulkRegistration;



CREATE TABLE  HISTORY 
(
  ID NUMBER(8,0) not null,
  NAME VARCHAR2(100) null, 
  DESCRIPTION VARCHAR2(500), 
  DATECREATED DATE,
  CONSTRAINT HISTORY_PK PRIMARY KEY (ID) USING INDEX TABLESPACE &&indexTableSpaceName
);

INSERT INTO HISTORY (ID, NAME, DESCRIPTION, DATECREATED) 
	VALUES (1,'Patch08', 'Upgrade and Migration of RegDB and COEDB schemas. From schema Firmanich 11 Patch07 to schema 11.0.1',CURRENT_DATE);
COMMIT;

CREATE SEQUENCE SEQ_HISTORY INCREMENT BY 1 START WITH 1;

  
CREATE OR REPLACE FORCE VIEW "VW_REGISTRYNUMBER" ("REGID", "SEQUENCEID", "SEQUENCENUMBER", "REGNUMBER", "PERSONREGISTERED", "DATECREATED") AS
  SELECT REG_ID,SEQUENCE_INTERNAL_ID,SEQUENCE_NUMBER,REG_NUMBER,REGISTRAR_PERSON_ID,REGISTRY_DATE FROM REG_NUMBERS;


ALTER TABLE Mixtures ADD (APPROVED VARCHAR(10));
ALTER TABLE Mixtures RENAME COLUMN "NAME" to REGNAME;


	
CREATE OR REPLACE VIEW VW_MIXTURE
	(MIXTUREID, REGID, REGNAME, CREATED, MODIFIED,PERSONCREATED, STRUCTUREAGGREGATION, DESCRIPTION,ISVALID, APPROVED) AS 
	SELECT MIX_INTERNAL_ID,REGID,REGNAME,CREATED,MODIFIED,PERSONCREATED,STRUCTUREAGGREGATION,Description,ISVALID, APPROVED  FROM MIXTURES;


ALTER TABLE BATCHCOMPONENT RENAME COLUMN COMMENTS to BCCOMMENTS;
ALTER TABLE BATCHCOMPONENT RENAME COLUMN MSID to BCMSID;


Prompt recreate batchcomponent view

CREATE OR REPLACE VIEW VW_BATCHCOMPONENT ( ID, BATCHID, MIXTURECOMPONENTID, LABEL, PERCENTAGE, RATIO, BCCOMMENTS, BCMSID, ORDERINDEX ) AS
SELECT ID,BATCHID,MIXTURECOMPONENTID,LABEL,PERCENTAGE,RATIO,BCCOMMENTS,BCMSID, OrderIndex FROM BATCHCOMPONENT;



CREATE OR REPLACE NOFORCE VIEW VW_COMPOUND_STRUCTURE 
	(COMPOUNDID, STRUCTURE, REG_NUMBER) AS
	SELECT C.CPD_DATABASE_COUNTER COMPOUNDID, S.BASE64_CDX AS STRUCTURE, R.REG_NUMBER FROM COMPOUND_MOLECULE C
		INNER JOIN STRUCTURES S ON C.STRUCTUREID = S.CPD_INTERNAL_ID
		INNER JOIN REG_NUMBERS R ON C.REGID = R.REG_ID;

CREATE OR REPLACE VIEW VW_MIXTURE_STRUCTURE AS
	SELECT	M.MIXTUREID, MC.MIXTURECOMPONENTID, C.*, S.STRUCTURE, R.REGNUMBER
	FROM 	VW_MIXTURE M, VW_MIXTURE_COMPONENT MC, VW_COMPOUND C, VW_STRUCTURE S, VW_REGISTRYNUMBER R 
	WHERE 	M.MIXTUREID = MC.MIXTUREID AND 	MC.COMPOUNDID = C.COMPOUNDID AND C.STRUCTUREID = S.STRUCTUREID AND M.REGID = R.REGID;

Prompt Recreate VW_MIXTURE_BATCHCOMPONENT

CREATE OR REPLACE VIEW VW_MIXTURE_BATCHCOMPONENT AS 
    SELECT MC.MIXTUREID, BC.ID, BC.BATCHID, BC.MIXTURECOMPONENTID, BC.ORDERINDEX 
    FROM VW_MIXTURE_COMPONENT MC, VW_BATCHCOMPONENT BC WHERE MC.MIXTURECOMPONENTID = BC.MIXTURECOMPONENTID;

CREATE OR REPLACE VIEW VW_MIXTURE_BATCH AS 
    SELECT M.MIXTUREID, R.REGNUMBER, B.BATCHID, B.BATCHNUMBER, B.REGID, B.DATECREATED, B.DATELASTMODIFIED, B.PERSONCREATED, B.PERSONREGISTERED, B.TEMPBATCHID 
        FROM REGDB.VW_MIXTURE M, REGDB.VW_REGISTRYNUMBER R, REGDB.VW_BATCH B
        WHERE M.REGID = R.REGID AND R.REGID = B.REGID;

CREATE OR REPLACE VIEW VW_MIXTURE_REGNUMBER AS
    SELECT  M.*, R.RegNumber 
    FROM VW_Mixture M, VW_RegistryNumber R WHERE  M.RegID =R.RegID;

CREATE VIEW VW_PEOPLEPROJECT 
	( PERSONID, PROJECTID ) AS
	SELECT PERSON_ID,PROJECT_ID FROM PEOPLE_PROJECT;

ALTER TABLE SEQUENCE ADD OBJECTTYPE VARCHAR2(20) NULL;

ALTER TABLE SEQUENCE ADD EXAMPLE VARCHAR2(50) NULL;

ALTER TABLE SEQUENCE ADD BATCHDELIMETER VARCHAR2(1) NULL;

create or replace VIEW VW_SEQUENCE ( SEQUENCEID, REGNUMBERLENGTH, PREFIX, PREFIXDELIMITER, SUFFIX, SUFFIXDELIMITER, REGDELIMITER, NEXTINSEQUENCE, EXAMPLE, SITEID, "TYPE" ) AS
SELECT SEQUENCE_ID,REGNUMBER_LENGTH,PREFIX,PREFIX_DELIMITER,SUFFIX,SUFFIXDELIMITER,REG_DELIMITER,NEXT_IN_SEQUENCE,EXAMPLE, SITEID, "TYPE" FROM SEQUENCE;
	

ALTER TRIGGER TRG_SEQUENCE DISABLE;
    

INSERT INTO VW_SEQUENCE(SEQUENCEID, PREFIX, NEXTINSEQUENCE, REGDELIMITER,PREFIXDELIMITER, REGNUMBERLENGTH, SUFFIX, SUFFIXDELIMITER,EXAMPLE)
 VALUES(2, 'COC', 1, '/','-', 9, NULL, NULL,NULL);

Prompt adding sequenceid to temp table

update temporary_compound set sequenceid = (select sequence_id from sequence where prefix = 'COC');

 
UPDATE VW_SEQUENCE 
    SET NextInSequence=NVL((SELECT MAX(SUBSTR(REGNUMBER,5,9)+1) FROM VW_REGISTRYNUMBER WHERE SUBSTR(REGNUMBER,1,3)='COC'),1) 
    WHERE SEQUENCEID=2;
    
ALTER TRIGGER TRG_SEQUENCE ENABLE;    

ALTER TABLE BATCH_PROJECT ADD ORDERINDEX NUMBER(8);

CREATE OR REPLACE NOFORCE VIEW VW_Batch_Project 
	(ID,BatchID,ProjectID,OrderIndex) AS 
	SELECT ID,BATCHID,PROJECTID,ORDERINDEX FROM BATCH_PROJECT;

CREATE INDEX Batch_Project_OrderIndex_IX ON BATCH_PROJECT(Orderindex ASC);

Prompt Indexing the aggregate structures....

DECLARE
	PROCEDURE createCartridgeIndex(iName IN varchar2, tName IN varchar2, fName IN varchar2) IS
			n NUMBER;
		BEGIN
			select count(*) into n from user_indexes where Upper(index_name) = iName AND Upper(table_owner)= '&&schemaName';
			if n = 1 then
				execute immediate 'DROP INDEX '||iName||' force';
			end if;
			execute immediate 'CREATE INDEX '||iName|| ' ON ' || tName || '('||fName||')
								indexType is cscartridge.moleculeindextype
								PARAMETERS(''TABLESPACE=&&cscartTableSpaceName,FULLEXACT=INDEX'')';
		END createCartridgeIndex;
BEGIN
	createCartridgeIndex('MX3', 'MIXTURES', 'STRUCTUREAGGREGATION');
END;
/

ALTER TABLE NOTEBOOKS MODIFY USER_CODE NULL;


Prompt updating Boolean properties...

alter table temporary_compound add (isvalid2 NCHAR(1));
update temporary_compound set isvalid2 = decode(isvalid, 'True', 'T', 'False', 'F', 'F');
alter table temporary_compound drop (isvalid);
alter table temporary_compound rename column isvalid2 to isvalid;

alter table compound_molecule add (isvalid2 NCHAR(1));
update compound_molecule set isvalid2 = decode(isvalid, 'TRUE', 'T', 'FALSE', 'F', 'F');
alter table compound_molecule drop (isvalid);
alter table compound_molecule rename column isvalid2 to isvalid;

alter table temporary_batch add (bisvalid2 NCHAR(1));
update temporary_batch set bisvalid2 = decode(bisvalid, 'True', 'T', 'False', 'F', 'F');
alter table temporary_batch drop (bisvalid);
alter table temporary_batch rename column bisvalid2 to bisvalid;

alter table batches add (bisvalid2 NCHAR(1));
update batches set bisvalid2 = decode(bisvalid, 'TRUE', 'T', 'FALSE', 'F', 'F');
alter table batches drop (bisvalid);
alter table batches rename column bisvalid2 to bisvalid;
commit;

Prompt Adding No Structure and Non-chemical content structure
DECLARE
	unkB64_1 varchar2(2000);
	unkB64_2 varchar2(2000);
BEGIN
	unkB64_1 := 'VmpDRDAxMDAEAwIBAAAAAAAAAAAAAACAAAAAAAMADwAAAENoZW1EcmF3IDEyLjAIAAsAAABz bWFsbC5jZHgEAhAAAEBTAAAA3gDMDIgAzMwSAQEJCAAAQBEAAAADAAIJCAAAALkBAEAzAg0I AQABCAcBAAE6BAEAATsEAQAARQQBAAE8BAEAAAwGAQABDwYBAAENBgEAAEIEAQAAQwQBAABE BAEAAAoICAADAGAAyAADAAsICAADAAAAyAADAAkIBAAAgAIACAgEAJmZAQAHCAQAmZkAAAYI BAAAAAIABQgEAGZmDgAECAIAtAADCAQAAAB4ACMIAQAFDAgBAAAoCAEAASkIAQABKggBAAEC CBAAAAAkAAAAJAAAACQAAAAkAAEDAgAAAAIDAgABAAADMgAIAP///////wAAAAAAAP//AAAA AP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wABDwAAAAEAAwDkBAUAQXJpYWwACHgA AAMAAAEgASAAAAAAC2YIoP+E/4gL4wkYA2cFJwP8AAIAAAEgASAAAAAAC2YIoAABAGQAZAAA AAEAAQEBAAAAAScPAAEAAQAAAAAAAAAAAAAAAAACABkBkAAAAAAAYAAAAAAAAAAAAAEAAAAA AAAAAAAAAAAAAAAAAYAIAAAABAIQAAAAAAAAAAAAAMDPAgAAHAIWCAQAAAAkABgIBAAAACQA GQgAABAIAgABAA8IAgABAAmAAgAAAAQCEAAAQFMAAADeAMwMiADMzBIBCgACAAEAcQp+CP/Y /+AAEEpGSUYAAQEBAEgASAAA/9sAQwAKBwcIBwYKCAgICwoKCw4YEA4NDQ4dFRYRGCMfJSQi HyIhJis3LyYpNCkhIjBBMTQ5Oz4+PiUuRElDPEg3PT47/9sAQwEKCwsODQ4cEBAcOygiKDs7 Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7/8AAEQgA gACAAwEiAAIRAQMRAf/EABsAAAEFAQEAAAAAAAAAAAAAAAUAAQMEBgIH/8QAOBAAAgIBAgME CAMHBQAAAAAAAQIAAwQFEQYSISIxQVETMkJhcYGxwQcU0RVScpGSoeEjM0NTVP/EABoBAAID AQEAAAAAAAAAAAAAAAACAwQFAQb/xAAeEQADAAIDAQEBAAAAAAAAAAAAAQIDERIhMQRRQf/a AAwDAQACEQMRAD8A9miiigAooooAKKNOLLq6lLO4UDzMAO48AZvGeh4LFXzUdx7NfaP9oLs/ EnS1OyUZLjzFe31kk4sleIV3K9Zs40x1f4k6Wx2soyUHma9/pCmFxlomcwWvNRXPsv2T/eFY sk+o4rl+MPRSOu6u1QUcMD5GdyMceKKKACiiigAooooAKcswUbk7CJmCjcnYTz7iziy7LyW0 nSXIAPLbcp67+IB+pkmLFWWuMiXahbYU4g46x9PsbEwE/NZQ6HY9lD7z9hMvZia5xA3pdSy2 qqPX0fUD+kfePpen04ShuUNZ4sfD4Qwt2wmtHzzjXS2/0o1md+vSKNHDGnUIOfntPvPKP5Cd 2aXgINlxax8pba/pK9lm/jLEzT9ZA6kHXaXiv3VBf4TBeXpgq7u0p8/CH2aVbxzKZZhfpDT/ AAGYGqapo7g4eU4Uf8bnmU/Lw+U3fD/HONqTri5qjGyT0AJ7L/A/aYp8feU8jE3HQSv9HxY8 i2umTYvqqen2j21WDDcHcT';
	unkB64_2 := 'qedcI8X20XJpup2Fg3Sq5vof1noaOHUFTuDMDLirHXGjVi1a2j qKKKRjijR5HbYKqmsY7BRvADKcdcQtpuGuDivtk5II3HsL4mYrSKFrQuR1PSRannNrGtZGax JVm5a/cg7v1+ctYnYXlPdPRfJ86jHt+syPozcr0vEElcbTr0khSPY4qqZ27gJYaSK+2zt7lQ czsFHvlZtQoB6Fm+Ag6yx7nLuev0nBKjx3PkJVrM99FhY1/Qn+0Mc9CWX4idB0uXetgy+YgZ iW6d3uj0u9Fges7H6zs/Q0+xaxJ+Bc1yN6dxLVJF9K2KOjD+Uc1y4r2V+OgHlYu4PSbngniF szHODlPvkUdNz7S+Bmaup3BlHFyH0rVacxDsFbZ/ep75S+zEskb/AKi382ThWn4z2QHePKuD kDIx0cHfcbyzPPmsPAHGeacHhrLdDs7JyL8T0+8PzG/iRYRo1NY7nvXf6/aSYp5WkLb1LZgs KoAADuHSFq06SnhJ2RCdaT1SekYD9HRZHm0X3UBKuva3PXaWkSTqkht7Whp6ezPNp+WO+lz8 OsJ6Xheio9I6bWMT3jqBCapKWoZ35femn/d8T+7/AJlXUx2T7q+ilrAq561Xb0g35tvLw3g3 lkxBYkkkk95Mt4OnWZj77Fah6zfYSu65V0TJcUW9LrP5BSe4sSJaNctrStaBFGyqNgJya5ci tLRWpbeyjZX0gjPo3U9JoHSC86vsmO62hUuzVcGZxyNJqDHdlHKfiOk1Q6iYDgiwolqeAtM3 qHdRPO5Fq2jbl7lM7mN/Easto9L+CXrv9PvNlAHGWGczh3JVRuyrzr8R1+07irjaYWty0efY Q3UQpWsFaewZQR49YZqG4npFXRhtdkiLJ0SMiywiyGqGSGVOm/lMs5NljOx3LEkzX8vLWzbb 7AnaCV1mr/wJ/MfpKeWk/wCljGvxFDTsNczMWtj2AOZtvKaZaVRAiKFUdAB4Srp2oJl5QqXF WslSeYH/ABC3o/dFikvDtb2UzXI2SXWrkbJJVZG0UXSCs8dkw3auwgPUnCq2/cJJy6OKey3w cuxsbztM9Aq9QTE8J0FMarcbFu0fn1m3rHZExcj3TZrStSkdyHIqFtLIRuGG0mjGIMeRX4ra Xq1+Gw2CNunvU936fKFsZgwEL8aaK2RWufjJvdT3ge0viJm9PyQyjY982fnzc40/UZmfFxra DdYlmtZWoYMJcrEktkKR06/6Fn8B+kyagbCbRFk9dNf/AFr/AEiU8nZPD0Znh9QdUX+BpqfR yVKUHUIoPuEkNchVaHfZSZJC6y667SnewUGSzQjQPym5VMzmYDlZSY6+2e18PGFdTy1RGJOw Eg0bCey05Ninns7gfZE7lycZJMOPdbNLoePygdNgBNEo6Sjp2P6KkdJemcXh40eKAEV1QtQq w3Bnn2v6FbpuU+ZiIWqY72VqO4+Y/Seiyvk4yXoVYA7x4tw9oWpVLTPPMHOV1BDAgwzRcpAl bV+GWqubIwj6Jydyu3Zb4j7wUmbfhNyZdbVEe13qfnL855pFK8Lnw1tTgy3WRM3jamrAEMCP MGX69RXb1otCpB6sjxM7d1A74EGpqB60hv1dVUkuAPMmV2uyRBPIyFUHrAeoaglaMSwAHjKO RrDZB5MZWuPmPVHznGPp1uRaLMpudh1CD1VneakecbZBRj2ajeLrVIqB3VT3t7zNdpWBtsxH ScadphOxZekP01CtQAJBVOntliZUrSOkUKNhO40eKMKKKKACjR4oARWUrYNiIJzNGrt37IO/ uhuNtADDZPC9QYslZQ+aEr9JTbRL09XKvHxIP2noTVK3eJE2HW3siNypHOKZghpGQfWyrz8C B9pLXoSE8zI1h83Jb6zbfkav3Z2uJWvsiHJhpIzWNo7dNkAEMYulJXsSISWtV7hOtop04SsI NgJ3HigAooooAf/ZAAAAAAAAAAA=';
insert into structures (cpd_internal_id, base64_cdx) values (-1, unkB64_1 || unkB64_2);
END;
/

insert into structures (cpd_internal_id, base64_cdx) values (-2, 'VmpDRDAxMDAEAwIBAAAAAAAAAAAAAACAAAAAAAMAEwAAAENoZW1EcmF3IDEyLjBkNjcyCAATAAAAVW50aXRsZWQgRG9jdW1lbnQEAhAAAIBsAABAYgAzc3oAM7O8AAEJCAAAAAAAAAAAAAIJCAAAAOEAAAAsAQ0IAQABCAcBAAE6BAEAATsEAQAARQQBAAE8BAEAAAwGAQABDwYBAAENBgEAAEIEAQAAQwQBAABEBAEAAAoICAADAGAAyAADAAsICAAEAAAA8AADAAkIBAAzswIACAgEAAAAAgAHCAQAAAABAAYIBAAAAAQABQgEAAAAHgAECAIAeAADCAQAAAB4ACMIAQAFDAgBAAAoCAEAASkIAQABKggBAAECCBAAAAAkAAAAJAAAACQAAAAkAAEDAgAAAAIDAgABAAADMgAIAP///////wAAAAAAAP//AAAAAP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wABJAAAAAIAAwDkBAUAQXJpYWwEAOQEDwBUaW1lcyBOZXcgUm9tYW4BgBgAAAAEAhAAAAAAAAAAAAAAANACAAAcAhYIBAAAACQAGAgEAAAAJAAZCAAAEAgCAAEADwgCAAEABoAWAAAAAAIIAABAdwAAQGIABAIQAACAbAAAQGIAM3N6ADOzvAAKAAIAAQAQACYAAABDaGVtRHJhdyBjYW4ndCBpbnRlcnByZXQgdGhpcyBsYWJlbC4CBwIAAQAABxgAAQAAAAQAAADwAAMATk8gU1RSVUNUVVJFAAAAAAAAAAA=');
insert into structures (cpd_internal_id, base64_cdx) values (-3, 'VmpDRDAxMDAEAwIBAAAAAAAAAAAAAACAAAAAAAMAEwAAAENoZW1EcmF3IDEyLjBk NjcyCAATAAAAVW50aXRsZWQgRG9jdW1lbnQEAhAAAEBbAADAYwAzM2kAzAz6AAEJ CAAAAPT/AAD0/wIJCAAAAOEAAADhAA0IAQABCAcBAAE6BAEAATsEAQAARQQBAAE8 BAEAAAwGAQABDwYBAAENBgEAAEIEAQAAQwQBAABEBAEAAAoICAADAGAAyAADAAsI CAAEAAAA8AADAAkIBAAzswIACAgEAAAAAgAHCAQAAAABAAYIBAAAAAQABQgEAAAA HgAECAIAeAADCAQAAAB4ACMIAQAFDAgBAAAoCAEAASkIAQABKggBAAECCBAAAAAk AAAAJAAAACQAAAAkAAEDAgAAAAIDAgABAAADMgAIAP///////wAAAAAAAP//AAAA AP////8AAAAA//8AAAAA/////wAAAAD/////AAD//wABJAAAAAIAAwDkBAUAQXJp YWwEAOQEDwBUaW1lcyBOZXcgUm9tYW4BgAQAAAAEAhAAAAAAAAAAAAAAANACAAAc AhYIBAAAACQAGAgEAAAAJAAZCAAAEAgCAAEADwgCAAEABoACAAAAAAIIAAAAZgAA wGMABAIQAABAWwAAwGMAMzNpAMwM+gAKAAIAAQAQACYAAABDaGVtRHJhdyBjYW4n dCBpbnRlcnByZXQgdGhpcyBsYWJlbC4CBwIAAQAAByAAAQAAAAQAAADwAAMATk9O IENIRU1JQ0FMIENPTlRFTlQAAAAAAAAAAA==');
commit;


-- Change datatype for projects.active
alter table regdb.projects add (active2 nchar(1));
update regdb.projects set active2 = decode(active, 1, 'T', 0, 'F');
commit;
alter table regdb.projects drop (active);
alter table regdb.projects rename column active2 to active;

set define off

--#########################################################
--CREATE PACKAGES
--#########################################################

@"sql\Patches\Patch 11.0.0\pkg_RegistrationRLS_def.sql"
@"sql\Patches\Patch 11.0.0\pkg_CompoundRegistry_def.sql"
@"sql\Patches\Patch 11.0.0\pkg_CompoundRegistry_body.sql"
@"sql\Patches\Patch 11.0.0\pkg_RegistrationRLS_body.sql"
@"sql\Patches\Patch 11.0.0\pkg_ConfigurationCompoundRegistry_def.sql"
@"sql\Patches\Patch 11.0.0\pkg_ConfigurationCompoundRegistry_body.sql"
@"sql\Patches\Patch 11.0.0\pkg_Gui_Util_def.sql"
@"sql\Patches\Patch 11.0.0\pkg_Gui_Util_body.sql"

set define on

ALTER PACKAGE CSCHEMREG COMPILE;

prompt
prompt modifying type column of sequence table...
prompt

update sequence set active = null;
alter table sequence modify (active nchar(1));
update regdb.sequence set active = 'T';
update sequence set type = 'R' where SEQUENCE_ID =1;
update sequence set type = 'C' where SEQUENCE_ID =2;
commit;

prompt
prompt generating full reg numbers ...
prompt

update VW_BATCH  b1 set fullregnumber =
(select r.REGNUMBER||'-'||b.batchnumber from VW_REGISTRYNUMBER r, VW_BATCH b
where r.regid = b.regid
and batchid = b1.batchid
)
where batchid <> 121457;  
commit;

prompt
prompt migrating properties form compound to registry level ...
prompt

--alter table REGDB.TEMPORARY_BATCH add (FEMA varchar(8), ARCTANDER varchar(8));

update mixtures m2 set (m2.cn, m2.fema, m2.arctander, m2.patent, m2.history, m2.ocurr, m2.COMMENTSS) =
(select min(c.cn), min(c.fema), min(c.arctander), min(c.patent), min(c.chistory), min(c.ocurr), min(c.ccomments)  from vw_compound c, vw_mixture_component mc
where mc.compoundid = c.compoundid
and mc.mixtureid = m2.mix_internal_id
group by mc.mixtureid);
commit;

prompt
prompt remove object config...
prompt
delete from coeobjectconfig;
commit;

-- Missing triggers/sequences

--bat_identifier
CREATE SEQUENCE SEQ_BATCH_IDENTIFIER INCREMENT BY 1 START WITH 1;
CREATE OR REPLACE TRIGGER TRG_BATCH_IDENTIFIER
BEFORE INSERT ON BATCH_IDENTIFIER FOR EACH ROW
BEGIN
  SELECT SEQ_BATCH_IDENTIFIER.NEXTVAL INTO :NEW.ID  FROM DUAL;
END;
/

--duplicates
CREATE SEQUENCE SEQ_DUPLICATES INCREMENT By 1 START With 1; 
CREATE OR REPLACE TRIGGER TRG_DUPLICATES
BEFORE INSERT
ON  DUPLICATES
FOR EACH ROW
BEGIN
 SELECT SEQ_DUPLICATES.NEXTVAL INTO :NEW.ID FROM DUAL;
END TRG_DUPLICATES;
/

--logbulkregistration_id
CREATE SEQUENCE SEQ_LOG_BULKREGISTRATION_ID INCREMENT BY 1 START WITH 1;
CREATE OR REPLACE TRIGGER TRG_LOG_BULKREGISTRATION_ID
BEFORE INSERT ON LOG_BULKREGISTRATION_ID
FOR EACH ROW
BEGIN
 SELECT SEQ_LOG_BULKREGISTRATION_ID.NEXTVAL INTO :NEW.LOG_ID  FROM DUAL;
END;
/

--logbulkregistration
CREATE SEQUENCE SEQ_LOG_BULKREGISTRATION INCREMENT BY 1 START WITH 1;
CREATE OR REPLACE TRIGGER TRG_LOG_BULKREGISTRATION
BEFORE INSERT ON LOG_BULKREGISTRATION
FOR EACH ROW
BEGIN
 SELECT SEQ_LOG_BULKREGISTRATION.NEXTVAL INTO :NEW.ID  FROM DUAL;
END;
/



CREATE SEQUENCE SEQ_PICKLISTDOMAIN INCREMENT By 1 START With 1; 
CREATE SEQUENCE SEQ_FRAGMENTTYPE INCREMENT By 1 START With 1; 
CREATE SEQUENCE SEQ_FRAGMENTS INCREMENT By 1 START With 1; 

prompt 
prompt Starting "CONVERT SR Registry in MR Registry"...
prompt 

--#########################################################
--CONVERT SR Registry in MR
--#########################################################

DECLARE
    LRegID VW_REGISTRYNUMBER.RegID%TYPE; 
    CURSOR C_CoumpoundSR IS
        SELECT C.CompoundID
            FROM  VW_Compound C 
            --WHERE EXISTS (SELECT 1
            --                FROM VW_MIXTURE M
            --                WHERE C.regid = M.regid)
            FOR UPDATE OF RegID;
                
    LRegNumber                  VW_REGISTRYNUMBER.RegNumber%Type;
    LRootNumber                 VW_REGISTRYNUMBER.RegNumber%Type;
    LSequenceNumber             VW_REGISTRYNUMBER.SequenceNumber%Type;
    LCompoundID                 VW_Compound.CompoundID%Type;
    LIndex                      Number;
    
    LBegin VARCHAR2(20);
    LEnd VARCHAR2(20);
    LElapsed VARCHAR2(100);
    
    FUNCTION GetRegNumber(ASequenceID in VW_SEQUENCE.SequenceId%Type, ARootNumber out NOCOPY VW_REGISTRYNUMBER.RegNumber%Type,ASequenceNumber out VW_REGISTRYNUMBER.SequenceNumber%Type) RETURN VW_REGISTRYNUMBER.RegNumber%Type IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        LRegDelimiter VW_SEQUENCE.RegDelimiter%Type;
        LRegNumber VW_REGISTRYNUMBER.RegNumber%Type;
        LSaltName VARCHAR2(100):=''; --"Salt didn't implement yet.
    BEGIN
        SELECT Prefix||PrefixDelimiter||lpad(NVL(NextInSequence,1),RegNumberLength,'0'),RegDelimiter,NVL(NextInSequence,1)
            INTO ARootNumber,LRegDelimiter,ASequenceNumber
            FROM VW_SEQUENCE
            WHERE SequenceID=ASequenceID
            FOR UPDATE;
        UPDATE VW_SEQUENCE SET NextInSequence=NVL(NextInSequence,1)+1;
        COMMIT;
        IF LSaltName IS NOT NULL THEN
            RETURN   ARootNumber||LRegDelimiter||LSaltName;
        ELSE
            RETURN   ARootNumber;
        END IF;
    END;
    
    PROCEDURE InsertLog(ALogProcedure CLOB,ALogComment CLOB) IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        INSERT INTO LOG(LogProcedure,LogComment) VALUES(ALogProcedure,ALogComment);
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN NULL; --If logs don't work then don't stop
    END;

BEGIN
     LBegin:=to_char(systimestamp,'HH:MI:SS.FF4');
     LIndex:=0;
        
     FOR R_CoumpoundSR IN C_CoumpoundSR LOOP
        LCompoundID:=R_CoumpoundSR.CompoundID;
        LIndex:=LIndex+1;
     
        SELECT SEQ_REG_NUMBERS.NEXTVAL INTO LRegID FROM DUAL;
        LRegNumber:=GetRegNumber(2,LRootNumber,LSequenceNumber);
        
        InsertLog('Converting SR in MR','Processing... Lindex='||LIndex||' LCompoundID= '||LCompoundID||' LRegID='||LRegID||' LSequenceNumber='||LSequenceNumber||' LRootNumber='||LRootNumber||' LRegNumber='||LRegNumber );
        
        INSERT INTO REG_NUMBERS (REG_ID,SEQUENCE_INTERNAL_ID,SEQUENCE_NUMBER,REG_NUMBER)
            VALUES(LRegID,2,LSequenceNumber, LRegNumber);
            
        UPDATE VW_Compound 
            SET RegID=LRegID
            WHERE CURRENT OF C_CoumpoundSR;
     END LOOP;  
     
     COMMIT;
     LEnd:=to_char(systimestamp,'HH:MI:SS.FF4');
     LElapsed:=to_timestamp(LEnd,'HH:MI:SS.FF4')-to_timestamp(LBegin,'HH:MI:SS.FF4');
     
    dbms_output.put_line('Begin: '||LBegin);
    dbms_output.put_line('End: '||LEnd);
    dbms_output.put_line('Elapsed: '||substr(LElapsed,instr(LElapsed,' ')+1,13));
    InsertLog('Converting SR in MR','Finished. '||LIndex||' compound processed. Begin: '||LBegin||' End: '||LEnd||' Elapsed: '||substr(LElapsed,instr(LElapsed,' ')+1,13));
EXCEPTION
    WHEN OTHERS THEN
    BEGIN
        InsertLog('Converting SR in MR','Finished with errors. '||LIndex||' compound processed,');
        InsertLog('Converting SR in MR','Error! '||DBMS_UTILITY.FORMAT_ERROR_STACK||' Lindex='||LIndex||' CompundID= '||LCompoundID||' LRegID='||LRegID||' LSequenceNumber='||LSequenceNumber||' LRootNumber='||LRootNumber||' LRegNumber='||LRegNumber);


        LEnd:=to_char(systimestamp,'HH:MI:SS.FF4');
        LElapsed:=to_timestamp(LEnd,'HH:MI:SS.FF4')-to_timestamp(LBegin,'HH:MI:SS.FF4');

        dbms_output.put_line('Begin: '||LBegin);
        dbms_output.put_line('End: '||LEnd);
        dbms_output.put_line('Elapsed: '||substr(LElapsed,instr(LElapsed,' ')+1,13));
 
    END;            
END;     
/



select LogProcedure "Procedure",LogComment "Comment" from log where rownum <2 order by id desc;



Connect &&InstallUser/&&sysPass@&&serverName

exec &&schemaName..RegistrationRLS.ActivateRLS('N'); 




